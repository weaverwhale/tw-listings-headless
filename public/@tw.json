[
  {
    "file": "@tw/cli/api/api-gateway.ts",
    "exports": [
      {
        "type": "function",
        "name": " createApiGateway",
        "text": "\n\nexport function createApiGateway(services: Services) {\n  masterRouter.stack = [];\n  const router = Router();\n  router.use(cors());\n  masterRouter.use(router);\n  const apispec = generateLocalOpenApiSpec(services);\n  if (!apispec) return;\n  const swaggerOptions = {\n    oauth: {\n      clientId: '89529659540-096trej1hjnt3gqogdbj5o573e463i22.apps.googleusercontent.com',\n      scopes: ['https://www.googleapis.com/auth/firebase'],\n    },\n  };\n  router.use(\n    '/api-docs',\n    swaggerUi.serve,\n    swaggerUi.setup(apispec, {\n      swaggerOptions,\n    })\n  );\n  for (const path of Object.keys(apispec.paths)) {\n    let expressPath = createExpressPath(path);\n    for (const method of Object.keys(apispec.paths[path])) {\n      const endpointConfig = apispec.paths[path][method];\n      const authMethods = endpointConfig.security?.map((s) => Object.keys(s)).flat();\n      const serviceId = path.replace('/api/v2/', '').split('/')[0];\n      const pathPrefix = endpointConfig?.['x-tw']?.pathPrefix || serviceId;\n      if (pathPrefix !== serviceId) {\n        expressPath = expressPath.replace(`/api/v2/${serviceId}`, `/api/v2/${pathPrefix}`);\n      }\n      const isRunning = services[serviceId];\n      if (isRunning) {\n        const proxyOptions: proxyOptions = {\n          target: `http://localhost:${services[serviceId]?.servicePort}`,\n          changeOrigin: true,\n        };\n        router[method](expressPath, createAuthMiddleWare(endpointConfig, authMethods));\n        if (endpointConfig['x-tw']?.rateLimits) {\n          createRateLimitMiddlewares(endpointConfig['x-tw'].rateLimits).forEach((mw, i) => {\n            router[method](expressPath, mw);\n          });\n        }\n        router[method](expressPath, (req, res) => {\n          res.setHeader('x-cli-by', 'api-gateway');\n          req.url = req.url.replace(new RegExp(`^/api/v2/${pathPrefix}/`), '');\n          proxy.all({ req, res, options: proxyOptions });\n        });\n      }\n    }\n  }\n  return masterRouter;\n}",
        "parameters": [
          {
            "name": "services",
            "text": "services: Services",
            "type": "Services"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/README.md",
    "exports": []
  },
  {
    "file": "@tw/cli/boilerplates/config.ts",
    "exports": [
      {
        "name": " bases",
        "text": "\n\nexport const bases: TWBase[] = [\n  {\n    id: 'node-express',\n    name: 'Node Express Service',\n    isService: true,\n    isPackage: false,\n    language: 'ts',\n    hasTwConfig: true,\n    templateDir: 'services/node-express-service',\n    isJest: true,\n    dependencies: ['@tw/utils', 'express'],\n    devDependencies: [\n      '@tw/types',\n      '@tw/test-utils',\n      'jest',\n      'ts-jest',\n      '@types/express',\n      '@types/jest',\n    ],\n    infraDependencies: ['@tw/pulumi', '@pulumi/pulumi', '@pulumi/gcp'],\n  } as TWNodeService,\n  {\n    id: 'node-package',\n    name: 'Node Package',\n    isService: false,\n    isPackage: true,\n    language: 'ts',\n    hasTwConfig: true,\n    templateDir: 'packages/node-package',\n    isJest: true,\n    dependencies: ['@tw/utils'],\n    devDependencies: ['@tw/types', '@tw/test-utils', 'jest', 'ts-jest'],\n  } as TWNodePackage,\n  {\n    id: 'node-sensory',\n    name: 'Node Sensory Fetcher',\n    isService: true,\n    isPackage: false,\n    isFetcher: true,\n    language: 'ts',\n    hasTwConfig: true,\n    templateDir: 'services/node-sensory-fetcher',\n    dependencies: ['@tw/constants', '@tw/utils', '@tw/temporal', 'express'],\n    devDependencies: ['typescript', '@types/node', '@tw/types', '@types/express'],\n    infraDependencies: ['@tw/pulumi', '@pulumi/pulumi', '@pulumi/gcp'],\n    getNames: getSensoryFetcherName,\n  } as TWNodeService,\n  {\n    id: 'node-temporal',\n    name: 'Node Temporal Worker',\n    isService: true,\n    isPackage: false,\n    language: 'ts',\n    hasTwConfig: true,\n    templateDir: 'services/node-temporal-worker',\n    dependencies: ['@tw/constants', '@tw/temporal', '@tw/utils', 'express', '@temporalio/workflow'],\n    devDependencies: ['@types/express', '@types/node', '@tw/types', 'typescript'],\n    infraDependencies: ['@tw/pulumi', '@pulumi/pulumi', '@pulumi/gcp'],\n  } as TWNodeService,\n  {\n    id: 'python-service',\n    name: 'Python Service with FastAPI',\n    isService: true,\n    isPackage: false,\n    language: 'python',\n    hasTwConfig: true,\n    templateDir: 'services/python-fastapi-service',\n    requirements: ['tw-utils', 'fastapi', 'uvicorn'],\n    infraDependencies: ['@tw/pulumi'],\n  } as TWPythonService,\n];",
        "type": "TWBase[]"
      },
      {
        "name": " DIRNAME",
        "text": "\n\nexport const DIRNAME = __dirname.replace('/module', '/src');",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/copyFiles.ts",
    "exports": [
      {
        "type": "function",
        "name": " copyFiles",
        "text": "\n\nexport function copyFiles(info: TWRepo) {\n  logger.info('Copying files from template', '...');\n  const source = path.resolve(DIRNAME, 'templates', info.templateDir);\n  const destination = info.path;\n  fs.cpSync(source, destination, { recursive: true, force: true, verbatimSymlinks: true });\n  replaceInFiles(info, destination);\n}",
        "parameters": [
          {
            "name": "info",
            "text": "info: TWRepo",
            "type": "TWRepo"
          }
        ]
      },
      {
        "type": "function",
        "name": " replaceInFiles",
        "text": "\n\nexport function replaceInFiles(info: TWRepo, destination: string) {\n  for (let file of fs.readdirSync(destination)) {\n    const filepath = path.join(destination, file);\n    if (fs.statSync(filepath).isDirectory()) {\n      replaceInFiles(info, filepath);\n      continue;\n    }\n    const string = fs.readFileSync(filepath).toString();\n    const newString = replace(string, info);\n    fs.writeFileSync(filepath, newString);\n  }\n}",
        "parameters": [
          {
            "name": "info",
            "text": "info: TWRepo",
            "type": "TWRepo"
          },
          {
            "name": "destination",
            "text": "destination: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/getBase.ts",
    "exports": [
      {
        "type": "function",
        "name": " getBase",
        "text": "\n\nexport async function getBase(): Promise<TWBase> {\n  const base = await rawlist({\n    message: 'Pick a template',\n    choices: bases.map((base) => ({ value: base.id, name: base.name })),\n  });\n  const info = bases.find((b) => b.id === base);\n  if (!info) {\n    throw new Error('Invalid base');\n  }\n  return info;\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/getDockerDeps.ts",
    "exports": [
      {
        "type": "function",
        "name": " getDockerDeps",
        "text": "\n\nexport async function getDockerDeps(): Promise<string[]> {\n  return await checkbox({\n    message: 'Select docker dependencies',\n    choices: ['emulators', 'redis', 'postgres', 'mongo', 'temporal'].map((dep) => ({\n      name: dep,\n      value: dep,\n    })),\n  });\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/getMaintainers.ts",
    "exports": [
      {
        "type": "function",
        "name": " getMaintainers",
        "text": "\n\nexport async function getMaintainers(): Promise<string[]> {\n  const maintainers = (\n    await input({\n      message: `Who are the maintainers (Space-separated @triplewhale.com usernames)?`,\n    })\n  ).split(/\\s+/);\n\n  return maintainers.map((maintainer) => {\n    if (maintainer.endsWith('@triplewhale.com')) {\n      return maintainer.trim();\n    }\n    return maintainer.trim() + '@triplewhale.com';\n  });\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/getName.ts",
    "exports": [
      {
        "type": "function",
        "name": " getNames",
        "text": "\n\nexport async function getNames(\n  info: TWBase\n): Promise<{ humanName: string; computerName: string; providerId?: string }> {\n  let humanName = await input({\n    message:\n      `What is the name of the ${info.isService ? 'service' : 'package'}?` +\n      '\\n\\t(use a human name, e.g. \"Google Ads\" or \"Test Utils\")',\n  });\n\n  if (!humanName) {\n    console.log('You must provide a name!');\n    return await getNames(info);\n  }\n\n  let computerName = humanName.toLowerCase().replace(/\\s+/g, '-');\n  if (humanName.startsWith('@tw/') || humanName.match(/^[a-z-]+$/)) {\n    computerName = humanName;\n    humanName = humanName\n      .replace('@tw/', '')\n      .replace('-', ' ')\n      .replace(/\\b(\\w)/g, (s) => s.toUpperCase());\n  }\n\n  return {\n    humanName,\n    computerName,\n  };\n}",
        "parameters": [
          {
            "name": "info",
            "text": "info: TWBase",
            "type": "TWBase"
          }
        ]
      },
      {
        "type": "function",
        "name": " getSensoryFetcherName",
        "text": "\n\nexport async function getSensoryFetcherName(info: TWBase): Promise<{\n  providerId: string;\n  humanName: string;\n  computerName: string;\n}> {\n  let providerId = await input({\n    message: `What is the provider id for the fetcher?`,\n  });\n  if (!providerId) {\n    console.log('You must provide a provider id!');\n    return await getSensoryFetcherName(info);\n  }\n  return {\n    providerId,\n    humanName:\n      providerId.replace(/-/g, ' ').replace(/\\b(\\w)/g, (s) => s.toUpperCase()) + ' Fetcher',\n    computerName: providerId + '-fetcher',\n  };\n}",
        "parameters": [
          {
            "name": "info",
            "text": "info: TWBase",
            "type": "TWBase"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/getTags.ts",
    "exports": [
      {
        "type": "function",
        "name": " getTags",
        "text": "\n\nexport async function getTags(): Promise<string[]> {\n  return (\n    await input({\n      message: 'Add tags (separate tags by space like `tag-a tag-b`)?',\n    })\n  )\n    .split('s+')\n    .map((t) => t.trim());\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/git.ts",
    "exports": [
      {
        "type": "function",
        "name": " getRoot",
        "text": "\n\nexport function getRoot(dirName: string) {\n  const pathRelativeToGit = execSync(['git', 'rev-parse', '--show-prefix'].join(' '))\n    .toString()\n    .trim();\n\n  if (!pathRelativeToGit && process.cwd().split('/').pop() === dirName) {\n    return process.cwd();\n  }\n\n  const relPath: string = pathRelativeToGit\n    .split('/')\n    .filter(Boolean)\n    .map((_) => '../')\n    .join('');\n\n  const rootPath = path.resolve(relPath, dirName);\n  const parts = rootPath.split('/');\n  if (parts.pop() === parts.pop()) {\n    return path.resolve(rootPath.split('/').slice(0, -1).join('/'));\n  }\n\n  return rootPath;\n}",
        "parameters": [
          {
            "name": "dirName",
            "text": "dirName: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/index.ts",
    "exports": [
      {
        "type": "specifier",
        "name": " initTW",
        "text": " initTW"
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/init.ts",
    "exports": [
      {
        "type": "function",
        "name": " initTW",
        "text": "\n\nexport async function initTW() {\n  await runNpmAuth();\n  const { current, latest } = await notifier.fetchInfo();\n  if (current !== latest) {\n    cliExit('Please update @tw/cli to latest version to continue.');\n  }\n\n  const branch = await getCurrentBranch();\n  const base: TWBase = await getBase();\n  let { providerId, humanName, computerName } = base.getNames\n    ? await base.getNames(base)\n    : await getNames(base);\n  const color = await pickColor(humanName, logger);\n  const path = await getPath(humanName, computerName, base.isService);\n  const dirName = path.split('/').pop();\n  if (dirName && dirName !== computerName) {\n    computerName = dirName;\n  }\n  const maintainers = await getMaintainers();\n  let dockerDeps: string[] | undefined = undefined;\n  let tags: string[] | undefined = undefined;\n\n  if (base.isService) {\n    dockerDeps = await getDockerDeps();\n    tags = await getTags();\n  }\n\n  const info: TWRepo = {\n    ...base,\n    ...(base.isFetcher && { providerId }),\n    color,\n    humanName,\n    computerName,\n    path,\n    maintainers,\n  };\n\n  if (!!dockerDeps) {\n    info.dockerDeps = [...dockerDeps];\n  }\n  if (!!tags) {\n    info.tags = [...tags];\n  }\n\n  makeNewPath(info.path);\n  try {\n    makeLanguageDefaults(info);\n    copyFiles(info);\n    install(info);\n    if (info.isService) {\n      makeTWConfig(info);\n      makeInfra(info);\n    }\n  } catch (e: any) {\n    e.message = `Couldn't create ${info.computerName} repo: ${e.message}`;\n    try {\n      fs.rmSync(info.path, { recursive: true, force: true });\n    } catch (_e: any) {\n      logger.error(`Couldn't remove ${info.path}: ${_e.message}`);\n    }\n    throw e;\n  }\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/install.ts",
    "exports": [
      {
        "type": "function",
        "name": " install",
        "text": "\n\nexport function install(info: TWRepo) {\n  switch (info.language) {\n    case 'ts':\n      installNode(info);\n      break;\n    case 'python':\n      installPython(info);\n      break;\n  }\n}",
        "parameters": [
          {
            "name": "info",
            "text": "info: TWRepo",
            "type": "TWRepo"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/log.ts",
    "exports": [
      {
        "name": " Logger",
        "text": "\nexport class Logger {\n  color: string;\n  name: string;\n  constructor() {\n    this.color = 'FFFFFF';\n    this.name = '';\n  }\n  setColor(hex: string) {\n    this.color = hex;\n  }\n  setName(name: string) {\n    this.name = name;\n  }\n  info(...message: string[]) {\n    console.log(chalk.hex(this.color)(this.name), ' | ', ...message);\n  }\n  error(...message: string[]) {\n    chalk.red(console.error(...message));\n  }\n}",
        "type": "class"
      },
      {
        "type": "specifier",
        "name": " logger",
        "text": " logger"
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/main.test.ts",
    "exports": []
  },
  {
    "file": "@tw/cli/boilerplates/makeInfra.ts",
    "exports": [
      {
        "type": "function",
        "name": " makeInfra",
        "text": "\n\nexport function makeInfra(info: TWServiceRepo) {\n  logger.info('Making service infra', '...');\n  makeInfraPackageJson(info);\n  makePulumiYamls(info);\n  copyTemplateInfraFiles(info);\n}",
        "parameters": [
          {
            "name": "info",
            "text": "info: TWServiceRepo",
            "type": "TWServiceRepo"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/makePythonDefaults.ts",
    "exports": [
      {
        "type": "function",
        "name": " makePythonDefaults",
        "text": "\n\nexport function makePythonDefaults(info: TWPythonRepo) {\n  logger.info('Making requirements.txt', '...');\n  const requirementsTxt = (info.requirements || []).join('\\n') + '\\n';\n  fs.writeFileSync(path.join(info.path, 'requirements.txt'), requirementsTxt);\n}",
        "parameters": [
          {
            "name": "info",
            "text": "info: TWPythonRepo",
            "type": "TWPythonRepo"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/makeTWConfig.ts",
    "exports": [
      {
        "type": "function",
        "name": " makeTWConfig",
        "text": "\n\nexport function makeTWConfig(info: TWRepo) {\n  logger.info('Making tw-config.json...');\n  const config = {\n    env: {\n      PORT: 8080,\n      DEBUG_PORT: 9229 + info.computerName.length,\n      SERVICE_ID: info.computerName,\n    },\n    color: info.color,\n    dependencies: info.dockerDeps,\n    tags: info.tags,\n    maintainers: info.maintainers,\n    runtime: {\n      ts: 'node',\n      python: 'python',\n    }[info.language],\n  };\n  fs.writeFileSync(path.join(info.path, 'tw-config.json'), JSON.stringify(config, null, 2));\n}",
        "parameters": [
          {
            "name": "info",
            "text": "info: TWRepo",
            "type": "TWRepo"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/makeTypescriptDefaults.ts",
    "exports": [
      {
        "type": "function",
        "name": " makeTypescriptDefaults",
        "text": "\n\nexport async function makeTypescriptDefaults(info: TWTsRepo) {\n  const source = path.resolve(DIRNAME, 'templates', info.templateDir);\n  makePackageJson(info, source);\n  makeTsConfigJson(info, source);\n  if (info.isJest) {\n    makeJestConfig(info, source);\n  }\n}",
        "parameters": [
          {
            "name": "info",
            "text": "info: TWTsRepo",
            "type": "TWTsRepo"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/npmInstall.ts",
    "exports": [
      {
        "type": "function",
        "name": " npmInstall",
        "text": "\n\nexport function npmInstall(path: string, dependencies: string[], devDependencies?: string[]) {\n  execSync('tw auth');\n  const command = ['npm', 'install', '--save', '--progress=false', ...dependencies];\n  if (devDependencies?.length) {\n    command.push('&&', 'npm', 'install', '--save-dev', ...devDependencies);\n  }\n  execSync(command.join(' '), { cwd: path, stdio: 'pipe' });\n}",
        "parameters": [
          {
            "name": "path",
            "text": "path: string",
            "type": "string"
          },
          {
            "name": "dependencies",
            "text": "dependencies: string[]",
            "type": "string[]"
          },
          {
            "name": "devDependencies",
            "text": "devDependencies?: string[]",
            "type": "string[]"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/path.ts",
    "exports": [
      {
        "type": "function",
        "name": " makeNewPath",
        "text": "\n\nexport function makeNewPath(path: string) {\n  logger.info('Making new path', path, '...');\n  fs.mkdirSync(path);\n  return path;\n}",
        "parameters": [
          {
            "name": "path",
            "text": "path: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " getPath",
        "text": "\n\nexport async function getPath(humanName: string, computerName: string, isService: boolean) {\n  logger.info(`cwd is ${process.cwd()}`);\n  const dir = await input({\n    message: `What is the path for ${humanName}?`,\n    default: getRoot(isService ? 'services' : 'packages') + '/' + computerName,\n  });\n  return resolve(process.cwd(), dir);\n}",
        "parameters": [
          {
            "name": "humanName",
            "text": "humanName: string",
            "type": "string"
          },
          {
            "name": "computerName",
            "text": "computerName: string",
            "type": "string"
          },
          {
            "name": "isService",
            "text": "isService: boolean",
            "type": "boolean"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/pickColor.ts",
    "exports": [
      {
        "type": "function",
        "name": " pickColor",
        "text": "\n\nexport async function pickColor(humanName: string, logger: Logger): Promise<string> {\n  const hex = await select({\n    message: 'Pick a nice color:',\n    choices: colors256Hex.map((hex, i) => ({\n      name: chalk.hex(hex)(humanName),\n      value: hex,\n    })),\n    pageSize: 20,\n  });\n  logger.setColor(hex);\n  logger.setName(humanName);\n  return '' + hex;\n}",
        "parameters": [
          {
            "name": "humanName",
            "text": "humanName: string",
            "type": "string"
          },
          {
            "name": "logger",
            "text": "logger: Logger",
            "type": "Logger"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/replace.ts",
    "exports": [
      {
        "type": "function",
        "name": " replace",
        "text": "\n\nexport function replace(string: string, info: TWRepo) {\n  return string\n    .replace(/\\$SERVICE_ID/g, info.computerName)\n    .replace(/\\$SERVICE_NAME/g, info.humanName)\n    .replace(/\\$COLOR/g, info.color)\n    .replace(/\\$PACKAGE_NAME/g, '@tw/' + info.computerName)\n    .replace(/\\$PROVIDER_ID/g, info.providerId || '');\n}",
        "parameters": [
          {
            "name": "string",
            "text": "string: string",
            "type": "string"
          },
          {
            "name": "info",
            "text": "info: TWRepo",
            "type": "TWRepo"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/templates/general/pulumi/Pulumi.shofifi.yaml",
    "exports": []
  },
  {
    "file": "@tw/cli/boilerplates/templates/general/pulumi/Pulumi.triple-whale-staging.yaml",
    "exports": []
  },
  {
    "file": "@tw/cli/boilerplates/templates/general/pulumi/Pulumi.yaml",
    "exports": []
  },
  {
    "file": "@tw/cli/boilerplates/templates/general/ts/jest.config.ts",
    "exports": []
  },
  {
    "file": "@tw/cli/boilerplates/templates/infra/index.ts",
    "exports": []
  },
  {
    "file": "@tw/cli/boilerplates/templates/packages/node-package/src/index.ts",
    "exports": [
      {
        "type": "function",
        "name": "",
        "text": "export default function () {\n  // ... do something\n  return true;\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/templates/services/node-express-service/src/app.ts",
    "exports": []
  },
  {
    "file": "@tw/cli/boilerplates/templates/services/node-express-service/src/endpoints/some-endpoint.ts",
    "exports": [
      {
        "type": "function",
        "name": " someEndpoint",
        "text": "\n\nexport default async function someEndpoint(req: RequestWithUser, res: Response) {\n  return res.send('hi');\n}",
        "parameters": [
          {
            "name": "req",
            "text": "req: RequestWithUser",
            "type": "RequestWithUser"
          },
          {
            "name": "res",
            "text": "res: Response",
            "type": "Response"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/templates/services/node-sensory-fetcher/.npmrc",
    "exports": []
  },
  {
    "file": "@tw/cli/boilerplates/templates/services/node-sensory-fetcher/infra/.npmrc",
    "exports": []
  },
  {
    "file": "@tw/cli/boilerplates/templates/services/node-sensory-fetcher/infra/index.ts",
    "exports": []
  },
  {
    "file": "@tw/cli/boilerplates/templates/services/node-sensory-fetcher/src/app.ts",
    "exports": []
  },
  {
    "file": "@tw/cli/boilerplates/templates/services/node-sensory-fetcher/src/fetcher.ts",
    "exports": [
      {
        "type": "function",
        "name": " auth",
        "text": "\nexport async function auth(args: AuthParams): Promise<any> {\n  // const appSecrets = await getAppSecret();\n  throw new Error('Not implemented');\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: AuthParams",
            "type": "AuthParams"
          }
        ]
      },
      {
        "type": "function",
        "name": " accounts",
        "text": "\n\nexport async function accounts(args: GetAccountParams): Promise<ProviderAccount[]> {\n  // const appSecrets = await getAppSecret();\n  // const clientSecrets = await getClientSecrets(args);\n  throw new Error('Not implemented');\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: GetAccountParams",
            "type": "GetAccountParams"
          }
        ]
      },
      {
        "type": "function",
        "name": " getDefaultBackfillRangeCount",
        "text": "\n\nexport async function getDefaultBackfillRangeCount(\n  args: GetDefaultBackfillRangeCount\n): Promise<number> {\n  // const appSecrets = await getAppSecret();\n  // const clientSecrets = await getClientSecrets(args);\n  throw new Error('Not implemented');\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: GetDefaultBackfillRangeCount",
            "type": "GetDefaultBackfillRangeCount"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/templates/services/node-sensory-fetcher/src/getData.ts",
    "exports": [
      {
        "type": "function",
        "name": " getData",
        "text": "\n\nexport async function getData(params: FetcherParams): Promise<ReportData> {\n  // const appSecrets = await getAppSecret();\n  // const clientSecrets = await getClientSecrets({credentialsId: params.integrationDetails.credentialsId});\n  heartbeat(\"I'm alive!\");\n  throw new Error('Not implemented');\n}",
        "parameters": [
          {
            "name": "params",
            "text": "params: FetcherParams",
            "type": "FetcherParams"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/templates/services/node-sensory-fetcher/src/providerConfig.ts",
    "exports": [
      {
        "name": " providerConfig",
        "text": "\n\nexport const providerConfig: SensoryProvider = {\n  id: $PROVIDER_ID,\n  name: '',\n  domain: '',\n  asset_types: [],\n  auth_method: '',\n  auth_config: {},\n  has_local_redirect_url: true,\n  has_stg_redirect_url: true,\n  get_accounts_params: [\n    {\n      name: 'shop-id',\n      source: 'shopDomain',\n    },\n  ],\n};",
        "type": "SensoryProvider"
      },
      {
        "name": " policyConfigs",
        "text": "\n\nexport const policyConfigs: SensoryPolicy<PolicyJobDefinition>[] = [\n  {\n    provider_id: providerConfig.id,\n    policy_id: policyEnum.default,\n    asset_types: [],\n    schedule: 'hourly', // recurring\n    job_definition: {\n      jobType: 'dateRange',\n      unit: 'day',\n      count: 1,\n      level: 'full',\n    },\n  },\n  {\n    provider_id: providerConfig.id,\n    policy_id: policyEnum.default,\n    asset_types: [],\n    schedule: '', // backfill\n    job_definition: {\n      jobType: 'general',\n      level: 'full',\n    },\n  },\n];",
        "type": "SensoryPolicy<PolicyJobDefinition>[]"
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/templates/services/node-temporal-worker/.npmrc",
    "exports": []
  },
  {
    "file": "@tw/cli/boilerplates/templates/services/node-temporal-worker/infra/.npmrc",
    "exports": []
  },
  {
    "file": "@tw/cli/boilerplates/templates/services/node-temporal-worker/infra/index.ts",
    "exports": []
  },
  {
    "file": "@tw/cli/boilerplates/templates/services/node-temporal-worker/src/activities/index.ts",
    "exports": []
  },
  {
    "file": "@tw/cli/boilerplates/templates/services/node-temporal-worker/src/activities/myFirstActivity.ts",
    "exports": [
      {
        "type": "function",
        "name": " myFirstActivity",
        "text": "\n\nexport async function myFirstActivity(params: any): Promise<any> {\n  logger.info('myFirstActivity', params);\n  heartbeat(\"I'm alive!\");\n  if (Math.random() < 0.5) {\n    throw new Error('Retryable error');\n  }\n  throw new NonRetryableException('Non-retryable error');\n}",
        "parameters": [
          {
            "name": "params",
            "text": "params: any",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/templates/services/node-temporal-worker/src/app.ts",
    "exports": []
  },
  {
    "file": "@tw/cli/boilerplates/templates/services/node-temporal-worker/src/endpoints/index.ts",
    "exports": []
  },
  {
    "file": "@tw/cli/boilerplates/templates/services/node-temporal-worker/src/endpoints/someEndpoint.ts",
    "exports": [
      {
        "type": "function",
        "name": " someEndpoint",
        "text": "\n\nexport default async function someEndpoint(req: Request, res: Response) {\n  return res.send('hi');\n}",
        "parameters": [
          {
            "name": "req",
            "text": "req: Request",
            "type": "Request"
          },
          {
            "name": "res",
            "text": "res: Response",
            "type": "Response"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/templates/services/node-temporal-worker/src/workflows/index.ts",
    "exports": []
  },
  {
    "file": "@tw/cli/boilerplates/templates/services/node-temporal-worker/src/workflows/myFirstWorkflow.ts",
    "exports": [
      {
        "type": "function",
        "name": " myFirstWorkflow",
        "text": "\n\nexport async function myFirstWorkflow(params: any) {\n  const { myFirstActivity } = wf.proxyActivities<typeof activities>({\n    taskQueue: `${process.env.SERVICE_ID}-queue`,\n    ...ACTIVITY_SETTINGS,\n  });\n\n  const res = await myFirstActivity({\n    params,\n  });\n\n  throw new Error('Not implemented');\n}",
        "parameters": [
          {
            "name": "params",
            "text": "params: any",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/boilerplates/templates/services/python-fastapi-service/src/app.py",
    "exports": []
  },
  {
    "file": "@tw/cli/boilerplates/types.ts",
    "exports": [
      {
        "name": " TWService",
        "text": "\n\nexport type TWService = TWInfo & {\n  isService: true;\n  isPackage: false;\n};",
        "type": "TWInfo & {\n  isService: true;\n  isPackage: false;\n}"
      },
      {
        "name": " RepoInfo",
        "text": "\n\nexport type RepoInfo = {\n  providerId?: string;\n  computerName: string;\n  humanName: string;\n  color: string;\n  path: string;\n  maintainers: string[];\n  dockerDeps?: string[];\n  tags?: string[];\n};",
        "type": "{\n  providerId?: string;\n  computerName: string;\n  humanName: string;\n  color: string;\n  path: string;\n  maintainers: string[];\n  dockerDeps?: string[];\n  tags?: string[];\n}"
      },
      {
        "name": " TWNodeService",
        "text": "\n\nexport type TWNodeService = TWService & TWTypescript;",
        "type": "TWService & TWTypescript"
      },
      {
        "name": " TWNodePackage",
        "text": "\n\nexport type TWNodePackage = TWPackage & TWTypescript;",
        "type": "TWPackage & TWTypescript"
      },
      {
        "name": " TWPythonService",
        "text": "\n\nexport type TWPythonService = TWService & TWPython;",
        "type": "TWService & TWPython"
      },
      {
        "name": " TWServiceRepo",
        "text": "\n\nexport type TWServiceRepo = RepoInfo & TWService;",
        "type": "RepoInfo & TWService"
      },
      {
        "name": " TWTsRepo",
        "text": "\n\nexport type TWTsRepo = RepoInfo & TWTypescript;",
        "type": "RepoInfo & TWTypescript"
      },
      {
        "name": " TWPythonRepo",
        "text": "\n\nexport type TWPythonRepo = RepoInfo & TWPython;",
        "type": "RepoInfo & TWPython"
      },
      {
        "name": " TWRepo",
        "text": "\n\nexport type TWRepo = RepoInfo & TWBase;",
        "type": "RepoInfo & TWBase"
      },
      {
        "name": " TWBase",
        "text": "\n\nexport type TWBase = (TWTypescript | TWPython) & (TWService | TWPackage);",
        "type": "(TWTypescript | TWPython) & (TWService | TWPackage)"
      }
    ]
  },
  {
    "file": "@tw/cli/cliApp.ts",
    "exports": [
      {
        "name": " cliRouter",
        "text": "\n\nexport const cliRouter = Router();",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/cli/commands/clickhouse/chc.ts",
    "exports": [
      {
        "type": "function",
        "name": " connectToClickhouse",
        "text": "\n\nexport async function connectToClickhouse(argv) {\n  const { cluster_name = 'sonic-cluster', replica } = argv;\n\n  const data = await downloadFile(\n    `devops-${cliConfig.projectId}`,\n    `hosted-service/clickhouse/${cluster_name}.json`,\n    { forceCloud: true }\n  );\n\n  let domain = data.clickhouseTcpDomain;\n  if (replica !== undefined) {\n    domain = data.replicas.find((r: any) => r.name === `instance-0-${replica}`)?.domain;\n  }\n  const username = data.username;\n  const password = data.password;\n  if (!domain) {\n    cliExit(\"Didn't find domain\");\n  }\n  await runProcess({\n    command: 'clickhouse',\n    commandArgs: ['client', `--user`, username, `--password`, password, `--host`, domain],\n    additionalArgs: {\n      stdio: ['inherit', 'inherit'],\n    },\n  });\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/config/get.ts",
    "exports": [
      {
        "type": "function",
        "name": " getConfig",
        "text": "\n\nexport function getConfig(argv) {\n  const key = argv.key || argv._[1];\n  console.log(get(key));\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/config/index.ts",
    "exports": [
      {
        "type": "function",
        "name": " get",
        "text": "\n\nexport function get(key) {\n  return configStore.get(getKey(key));\n}",
        "parameters": [
          {
            "name": "key",
            "text": "key",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " set",
        "text": "\n\nexport function set(key, value) {\n  return configStore.set(getKey(key), value);\n}",
        "parameters": [
          {
            "name": "key",
            "text": "key",
            "type": "any"
          },
          {
            "name": "value",
            "text": "value",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/config/set.ts",
    "exports": [
      {
        "type": "function",
        "name": " setConfig",
        "text": "\n\nexport function setConfig(argv) {\n  const [key, value] = [argv.key || argv._[1], argv.value || argv._[2]];\n  set(key, value);\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/deploy.ts",
    "exports": [
      {
        "type": "function",
        "name": " runDeploy",
        "text": "\n\nexport async function runDeploy(argv) {\n  const envs = [];\n  if (argv.beam) {\n    return await runDeployPipeline(argv);\n  }\n  if (argv.debug) {\n    envs.push('LOG_LEVEL=debug');\n  } else if (argv.trace) {\n    envs.push('LOG_LEVEL=trace');\n  }\n  if (argv.force) {\n    envs.push('F=true');\n  }\n  let serviceIds: string[] = argv.services || argv._.slice(1);\n  const substitutions = {};\n  if (argv.select || !serviceIds.length) {\n    serviceIds = await selectServices();\n  }\n  if (!serviceIds) {\n    cliExit('No services selected');\n  }\n\n  const services = await Promise.all(serviceIds.map((s) => getServiceInfo(s)));\n\n  if (argv.unitTests) {\n    await Promise.all(\n      services\n        .filter((s) => s.runtime === 'node')\n        .map((s) => runNpmTest({ name: s.serviceName, absolutePath: s.absolutePath }, argv))\n    );\n  }\n\n  await triggerCloudBuilds({\n    argv,\n    buildNames: services.map((s) => getBuildNameForService(s.serviceName)),\n    substitutions,\n    dirs: services.map((s) => s.absolutePath + '/infra'),\n    envs,\n  });\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/deployPipeline.ts",
    "exports": [
      {
        "type": "function",
        "name": " runDeployPipeline",
        "text": "\n\nexport async function runDeployPipeline(argv) {\n  let pipelineIds: string[] = argv.services || argv._.slice(1);\n\n  const services = await Promise.all(pipelineIds.map(async (s) => await getServiceInfo(s, true)));\n\n  if (argv.select || !pipelineIds.length) {\n    pipelineIds = await selectPipelines();\n  }\n  if (!pipelineIds) {\n    cliExit('No pipelines selected');\n  }\n\n  const substitutions = {};\n\n  await triggerCloudBuilds({\n    argv,\n    buildNames: services.map((service) => getBuildNameForPipeline(service.serviceName)),\n    substitutions,\n    dirs: services.map((s) => s.absolutePath + '/infra'),\n  });\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/getSecret.ts",
    "exports": [
      {
        "type": "function",
        "name": " printSecret",
        "text": "\n\nexport async function printSecret(argv) {\n  const name = argv.secret_name;\n  const secret = await getSecretFromManager(name);\n  console.log(secret);\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/i.ts",
    "exports": [
      {
        "type": "function",
        "name": " runIDirectory",
        "text": "\n\nexport async function runIDirectory(directory = '') {\n  await runIWithParams(['--prefix', directory]);\n}",
        "parameters": [
          {
            "name": "directory",
            "text": "directory = ''",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " runI",
        "text": "\n\nexport async function runI() {\n  await runIWithParams(process.argv.slice(3));\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/cli/commands/images/build.ts",
    "exports": [
      {
        "type": "function",
        "name": " runBuildImage",
        "text": "\n\nexport async function runBuildImage(argv) {\n  const author = getGcloudUserEmail();\n  let projects;\n  const branch = await getCurrentBranch();\n  if (branch === 'master') {\n    projects = await selectProjects();\n  } else {\n    projects = ['triple-whale-staging'];\n  }\n\n  const dockerfile = argv.f || 'Dockerfile';\n  const dockerRepo = argv.r || 'devops-docker';\n  const extraTag = argv.t || '';\n  const sha = await getGitSha();\n  const baseTags = [extraTag || sha];\n  const substitutions = {\n    _AUTHOR: author,\n    _BRANCH_NAME: branch,\n    _F: dockerfile,\n  };\n\n  const builds: Revision[] = [];\n\n  const dir = path.resolve(path.dirname(dockerfile));\n\n  const buildArgs = ['PROJECT_ID=$PROJECT_ID'];\n\n  let revisions: Revision[];\n  if (fs.existsSync(path.join(dir, 'tw.json'))) {\n    const twJson = JSON.parse(fs.readFileSync(path.join(dir, 'tw.json'), 'utf8'));\n    revisions = twJson.revisions;\n  }\n  for (const project of projects) {\n    if (revisions) {\n      revisions.forEach((revision) => {\n        builds.push({\n          buildArgs: [...revision.buildArgs, ...buildArgs],\n          projectId: project,\n          tags: [...revision.tags],\n        });\n      });\n    } else {\n      builds.push({\n        buildArgs,\n        projectId: project,\n        tags: ['latest', ...baseTags],\n      });\n    }\n  }\n\n  // set _IMAGE_NAME to the dir name of where the dockerfile is located\n  const dockerfilePath = path.join(process.cwd(), dockerfile);\n  const dirName = path.dirname(dockerfilePath);\n  const imageName = path.basename(dirName);\n  substitutions['_IMAGE_NAME'] = imageName;\n  substitutions['_DOCKER_REPO'] = dockerRepo;\n  builds.map(({ projectId, tags }) => {\n    tags.map((tag) => {\n      cliLog(\n        `<${projectId}> us-central1-docker.pkg.dev/${projectId}/${dockerRepo}/${imageName}:${tag}`\n      );\n    });\n  });\n\n  await Promise.all(\n    builds.map(({ buildArgs, tags, projectId }) => {\n      const configFile = temp.path({ suffix: '.yaml' });\n      cliLog(`File: ${configFile}`);\n      fs.writeFileSync(configFile, createConfigString({ tags, buildArgs }));\n      return runProcess({\n        log: true,\n        name: projectId,\n        command: 'gcloud',\n        commandArgs: [\n          'builds',\n          'submit',\n          `--config=${configFile}`,\n          `--substitutions=${objectToEnv(substitutions)}`,\n          '.',\n          `--project=${projectId}`,\n        ],\n      });\n    })\n  );\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/images/index.ts",
    "exports": []
  },
  {
    "file": "@tw/cli/commands/job/index.ts",
    "exports": [
      {
        "type": "function",
        "name": " runK8sJob",
        "text": "\n\nexport async function runK8sJob(argv) {\n  const client = getStorageClient({ forceCloud: true });\n  const jobs = (\n    await client.bucket(`devops-${cliConfig.projectId}`).getFiles({\n      prefix: `k8s-jobs/${argv.service}`,\n    })\n  )[0].map((file) => file.name.split('/').pop().split('.').shift());\n  if (!jobs.includes(argv.name)) {\n    cliError(`Job ${argv.name} not found.`);\n    cliLog(`Available jobs: ${jobs.join(', ')}`);\n    return;\n  }\n  const config = await downloadFile(\n    `devops-${cliConfig.projectId}`,\n    `k8s-jobs/${argv.service}/${argv.name}.json`,\n    {\n      forceCloud: true,\n    }\n  );\n\n  const kc = new k8s.KubeConfig();\n  kubeAuth(config.context);\n  kc.loadFromDefault();\n  kc.setCurrentContext(config.context);\n  const [_1, _2, location, cluster] = kc.currentContext.split('_');\n  const k8sApi = kc.makeApiClient(k8s.BatchV1Api);\n  const jobName = `${config.job.metadata.name}-${uuid.v4()}`;\n  const namespace = config.job.metadata.namespace;\n  const extraArgs = argv._.slice(1);\n  const container = config.job.spec.template.spec.containers[0];\n  container['command'] = [...(container['command'] || []), ...extraArgs];\n  function convertEnvs(envs) {\n    return envs.map((env) => {\n      const [name, value] = env.split('=');\n      return { name, value };\n    });\n  }\n  container['env'] = container['env'].concat(convertEnvs(argv.env || []));\n  container['env'].push({ name: 'AUTHOR', value: getGcloudUserEmail() });\n  const result = deepMerge(config, {\n    job: {\n      metadata: {\n        name: jobName,\n      },\n    },\n  });\n  if (argv.trace) {\n    container['env'].push({ name: 'LOG_LEVEL', value: 'trace' });\n  }\n\n  cliLog(`Job info:\n  name: ${jobName}\n  namespace: ${namespace}\n  command: ${result['job']['spec']['template']['spec']['containers'][0]['command'].join(' ')}`);\n  await confirm('OK to continue?');\n  try {\n    const res = await k8sApi.createNamespacedJob({\n      namespace: result.job.metadata.namespace,\n      body: result.job,\n    });\n    cliSuccess(`Job ${jobName} created.`);\n    console.log();\n    cliLog(\n      `Logs: ${logsLinkFilter(\n        {\n          'labels.k8s-pod/batch_kubernetes_io/controller-uid': res.metadata.uid,\n        },\n        cliConfig.projectId\n      )}`\n    );\n    console.log();\n    cliLog(\n      `K8s: https://console.cloud.google.com/kubernetes/job/${location}/${cluster}/${namespace}/${jobName}/details?project=${cliConfig.projectId}`\n    );\n  } catch (e) {\n    cliError(e.body?.message || e.body || e);\n  }\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/logs.ts",
    "exports": [
      {
        "type": "function",
        "name": " openLogs",
        "text": "\n\nexport function openLogs(argv) {\n  const trace = copy.paste();\n  let project = 'shofifi';\n  if (argv.project || argv.prod || argv.stg) {\n    project = cliConfig.projectId;\n  }\n  spawn('open', [\n    `https://console.cloud.google.com/logs/query;query=trace%3D%22projects%2F${project}%2Ftraces%2F${trace}%22;duration=P1D?project=${project}`,\n  ]);\n\n  spawn('open', [\n    `https://us5.datadoghq.com/apm/traces?query=${`env:${project} operation_name:express.request @tw.traceId:${trace}&cols=core_service,core_resource_name,log_duration,log_http.method,log_http.status_code&graphType=flamegraph&historicalData=false&messageDisplay=inline&query_translation_version=v0&shouldShowLegend=true&sort=time&spanType=all&spanViewType=metadata&tq_query_translation_version=v0&traceQuery=&view=spans`}`,\n  ]);\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/packages/clean.ts",
    "exports": [
      {
        "type": "function",
        "name": " cleanUpArtifacts",
        "text": "\n\nexport async function cleanUpArtifacts(argv) {\n  const packageName = argv.package;\n  const repo = '//us-central1-npm.pkg.dev/shofifi/npm-packages/:_authToken=';\n  const baseUrl = 'https://us-central1-npm.pkg.dev/shofifi/npm-packages';\n  const url = `${baseUrl}/${packageName}`;\n  const rcData = fs.readFileSync(globalNpmrcFile).toString();\n  const lines = rcData.split('\\n');\n  const token = lines\n    .find((l) => l.includes(repo))\n    ?.split('=')[1]\n    .replaceAll('\"', '');\n  const headers = {\n    Authorization: `Bearer ${token}`,\n  };\n  const { data } = await axios.get(url, {\n    headers,\n  });\n  const tags = Object.keys(data['dist-tags']);\n  for (const tag of tags) {\n    if (['latest', 'pre'].includes(tag)) continue;\n    const res = await axios.delete(`${baseUrl}/-/package/${packageName}/dist-tags/${tag}`, {\n      headers,\n    });\n    console.log(tag, res.status);\n  }\n  const versions = Object.keys(data['versions']);\n  const latest = new SemVer(data['dist-tags']['latest']);\n  for (const version of versions) {\n    if (['created', 'modified'].includes(version)) continue;\n    const semver = new SemVer(version);\n    if (!versions.includes(version)) {\n      console.log(version, 'not in versions');\n      continue;\n    }\n    const time = data['time'][version];\n    const date = moment(time);\n    const diff = moment().diff(date, 'days');\n    if (semver.prerelease.length) {\n      if (diff > 30) {\n        console.log(semver);\n        await unpublish(packageName, version);\n      }\n    } else if (latest.minor - semver.minor >= 1 && diff > 200) {\n      console.log(semver);\n      await unpublish(packageName, version);\n    }\n  }\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/packages/link.ts",
    "exports": [
      {
        "type": "function",
        "name": " linkCommand",
        "text": "\n\nexport async function linkCommand(argv) {\n  const packages = argv.packages || (await selectPackages());\n  const services = argv.services || (await selectServices());\n  await runNpmAuth();\n  for (const serviceId of services) {\n    let serviceDir = `${cliConfig.servicesRoot}/${serviceId}`;\n    if (argv.infra) serviceDir += '/infra';\n    await linkPackage({ packages, dir: serviceDir });\n  }\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " linkClientCommand",
        "text": "\n\nexport async function linkClientCommand(argv) {\n  const packages = argv.packages || (await selectPackages());\n  await runNpmAuth();\n  await linkPackage({\n    packages,\n    dir: cliConfig.clientRoot,\n    force: true,\n  });\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " unlinkCommand",
        "text": "\n\nexport async function unlinkCommand(argv) {\n  const packages = argv.packages || (await selectPackages());\n  const services = argv.services || (await selectServices());\n  for (const serviceId of services) {\n    let serviceDir = `${cliConfig.servicesRoot}/${serviceId}`;\n    if (argv.infra) serviceDir += '/infra';\n    await linkPackage({ packages, dir: serviceDir });\n  }\n  await runNpmAuth();\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/packages/publish.ts",
    "exports": [
      {
        "type": "function",
        "name": " runPublish",
        "text": "\n\nexport async function runPublish(argv) {\n  const girUrl = await getGitUrl();\n  let packages: string[] = argv.packages;\n  if (argv.select || !packages.length) {\n    if (girUrl === packagesGitUrl) {\n      packages = await selectPackages();\n    } else {\n      cliExit('You must specify the package name');\n    }\n  }\n  if (!packages) {\n    cliExit('No packages selected');\n  }\n  const branch = await getCurrentBranch();\n  argv.project = branch === 'master' ? 'shofifi' : 'triple-whale-staging';\n  process.env.PROJECT_ID = argv.project;\n  await gitPull();\n  const pkgInfos = await Promise.all(packages.map((pkg) => getPackageInfo(pkg)));\n\n  if (argv.unitTests) {\n    const tests = pkgInfos\n      .filter((p) => p.runtime === 'node')\n      .map((pkg) => runNpmTest({ name: pkg.packageName, absolutePath: pkg.absolutePath }, argv));\n    await Promise.all(tests);\n  }\n\n  const promises = [];\n  for (const { packageName, absolutePath, packagePath, runtime } of pkgInfos) {\n    const { version, substitutions } = await getNextVersion(\n      argv.project,\n      absolutePath,\n      branch,\n      runtime\n    );\n\n    promises.push(\n      await triggerCloudBuilds({\n        argv,\n        buildNames: [runtime === 'node' ? 'publish-package' : 'publish-python-package'],\n        substitutions: {\n          _PACKAGE_DIR: packagePath || '.',\n          _PACKAGE_NAME: packageName,\n          _BRANCH_NAME: branch,\n          _REPO: await getGitRepoName(),\n          _GITHUB_ORG: await getGithubOrg(),\n          ...substitutions,\n        },\n      })\n    );\n    if (runtime === 'node') {\n      cliSuccess(`<${packageName}> Install with: ${packageName}@${version}`);\n    } else {\n      cliSuccess(`<${packageName}> New version will be: ${version}`);\n    }\n  }\n  await Promise.all(promises);\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/packages/update.ts",
    "exports": [
      {
        "type": "function",
        "name": " updateCommand",
        "text": "\n\nexport async function updateCommand(argv) {\n  const packages = argv.packages?.length ? argv.packages : await selectPackages();\n  const dirs = argv.pulumi\n    ? await selectPulumiProjects()\n    : (await selectServices()).map((service) => `services/${service}`);\n\n  for (const relativeDir of dirs) {\n    let serviceDir = `${cliConfig.gitRoot}/${relativeDir}`;\n    await runProcess({\n      name: relativeDir,\n      command: 'tw',\n      commandArgs: ['i', ...packages.map((pkg) => '@tw/' + pkg + '@latest')],\n      additionalArgs: { cwd: resolve(serviceDir) },\n      log: true,\n    });\n  }\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/pulumi/getPaths.ts",
    "exports": [
      {
        "type": "function",
        "name": " getPulumiPaths",
        "text": "\n\nexport async function getPulumiPaths(argv) {\n  const gitRoot = await getGitRoot();\n\n  // if user passes paths as param, treat as relative to working dir\n  let dirs: string[] = argv.dirs || argv._.slice(1);\n  let dirsAbsolute = dirs.map((dir) => path.resolve(dir));\n\n  // if user selects paths from list, treat as relative to git root\n  if (!dirsAbsolute.length) {\n    dirs = await selectPulumiProjects();\n    dirsAbsolute = dirs.map((dir) => path.resolve(gitRoot, dir));\n  }\n  if (!dirsAbsolute) {\n    cliExit('No pulumi projects selected');\n  }\n  return { gitRoot, dirsAbsolute };\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/pulumi/refresh.ts",
    "exports": [
      {
        "type": "function",
        "name": " runPulumiRefresh",
        "text": "\n\nexport async function runPulumiRefresh(argv, justTrigger = false) {\n  delete process.env.IS_LOCAL;\n\n  const { gitRoot, dirsAbsolute } = await getPulumiPaths(argv);\n  const applicableStacks = await getApplicableStacks(argv, dirsAbsolute);\n  for (const dirAbsolute of dirsAbsolute) {\n    const pathFromGitRoot = path.relative(gitRoot, dirAbsolute);\n\n    if (!fs.existsSync(path.join(dirAbsolute, 'Pulumi.yaml'))) {\n      cliExit('Provided path is not a pulumi project');\n    }\n\n    const pulumiProject = (await loadPulumiProject(dirAbsolute)).name;\n    const repo = await getGitRepoName();\n    const branch = await getCurrentBranch();\n    const substitutions = {\n      _SERVICE_ID: pulumiProject,\n      _PULUMI_PROJECT: pulumiProject,\n      _PATH: pathFromGitRoot,\n      _BRANCH_NAME: branch,\n      _REPO: repo,\n      _GITHUB_ORG: await getGithubOrg(),\n    };\n\n    for (let stack of applicableStacks) {\n      await triggerCloudBuilds({\n        argv,\n        buildNames: ['pulumi-refresh'],\n        substitutions,\n        dirs: [dirAbsolute],\n        applicableStacks: [stack],\n      });\n    }\n  }\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          },
          {
            "name": "justTrigger",
            "text": "justTrigger = false",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/pulumi/up.ts",
    "exports": [
      {
        "type": "function",
        "name": " runPulumiUp",
        "text": "\n\nexport async function runPulumiUp(argv, justTrigger = false) {\n  delete process.env.IS_LOCAL;\n\n  const { gitRoot, dirsAbsolute } = await getPulumiPaths(argv);\n  const applicableStacks = await getApplicableStacks(argv, dirsAbsolute);\n  for (const dirAbsolute of dirsAbsolute) {\n    const pathFromGitRoot = path.relative(gitRoot, dirAbsolute);\n\n    if (!fs.existsSync(path.join(dirAbsolute, 'Pulumi.yaml'))) {\n      cliExit('Provided path is not a pulumi project');\n    }\n\n    const pulumiProject = (await loadPulumiProject(dirAbsolute)).name;\n    const repo = await getGitRepoName();\n    const branch = await getCurrentBranch();\n    const substitutions = {\n      _SERVICE_ID: pulumiProject,\n      _PULUMI_PROJECT: pulumiProject,\n      _PATH: pathFromGitRoot,\n      _BRANCH_NAME: branch,\n      _REPO: repo,\n      _GITHUB_ORG: await getGithubOrg(),\n    };\n    if (justTrigger) {\n      substitutions['_JUST_TRIGGER'] = true;\n    }\n\n    let runPreviews = !argv.noPreview;\n\n    for (let stack of applicableStacks) {\n      let continueValue = 'yes';\n      if (runPreviews) {\n        let command = 'pulumi';\n        let cmdArgs = [\n          'preview',\n          '--color=always',\n          `--stack=${stack.startsWith('triplewhale/') ? stack : `triplewhale/${stack}`}`,\n        ];\n        if (dirAbsolute !== '.') {\n          cmdArgs.push(`--cwd=${dirAbsolute}`);\n        }\n        let cmd = `${command} ${cmdArgs.join(' ')}`;\n        const diffProc = spawn(command, cmdArgs.concat(['--diff']));\n        let diffErr: string = '';\n        diffProc.on('error', (err) => {\n          diffErr = err.message;\n        });\n        const diffStream = new stream.PassThrough();\n        diffProc.stdout.pipe(diffStream);\n        await runIDirectory(dirAbsolute);\n        execSync(cmd, { encoding: 'utf-8', stdio: 'inherit' });\n        continueValue = await continuePrompt(stack);\n        if (continueValue === 'diff') {\n          if (diffErr) {\n            cliExit(`Error running diff: ${diffErr}`);\n          }\n          process.stdout.write(Buffer.from(diffStream.read()));\n          continueValue = await continuePrompt(stack, true);\n        }\n      }\n      if (continueValue === 'yes') {\n        await triggerCloudBuilds({\n          argv,\n          buildNames: ['pulumi-up'],\n          substitutions,\n          dirs: [dirAbsolute],\n          applicableStacks: [stack],\n        });\n      } else {\n        continue;\n      }\n    }\n  }\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          },
          {
            "name": "justTrigger",
            "text": "justTrigger = false",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/python/venv.ts",
    "exports": [
      {
        "type": "function",
        "name": " initVenv",
        "text": "\n\nexport async function initVenv() {\n  const venvDir = `venv`;\n  const venvEnv = {\n    PATH: `${venvDir}/bin:${process.env.PATH}`,\n    VIRTUAL_ENV: venvDir,\n  };\n  const pythonCommand = await getPythonCommand();\n\n  const noVenv = !fs.existsSync(venvDir);\n  let isIsOldVenv = false;\n  if (!noVenv) {\n    try {\n      const venvVersion = fs.readFileSync(venvDir + '/.tw-version', 'utf-8');\n      if (venvVersion !== packageJson.version) {\n        cliLog(`Found venv from cli version: ${venvVersion}, updating...`);\n        isIsOldVenv = true;\n      } else {\n        cliLog(`Found venv from cli version: ${venvVersion}`);\n      }\n    } catch (e) {\n      isIsOldVenv = true;\n    }\n  }\n  if (noVenv || isIsOldVenv) {\n    await runProcess({\n      command: pythonCommand,\n      commandArgs: ['-m', 'venv', ...process.argv.slice(3), 'venv'],\n      log: true,\n    });\n    fs.writeFileSync(venvDir + '/.tw-version', packageJson.version);\n    await runProcess({\n      command: process.env.SHELL || 'bash',\n      commandArgs: [\n        '-c',\n        `pip install --index-url ${indexUrl} --upgrade pip && pip install --index-url ${indexUrl} keyring keyrings.google-artifactregistry-auth debugpy`,\n      ],\n      additionalArgs: {\n        // @ts-ignore\n        env: {\n          ...venvEnv,\n        },\n      },\n      log: true,\n    });\n  }\n\n  if (process.env.TW_COMMAND === 'python:init-env') {\n    cliSuccess('To enable the virtual environment run: source venv/bin/activate');\n  }\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/cli/commands/revert.ts",
    "exports": [
      {
        "type": "function",
        "name": " runRevert",
        "text": "\n\nexport async function runRevert(argv) {\n  let serviceId: string;\n\n  if (argv.select || !argv.service) {\n    serviceId = await selectServices(false);\n  } else {\n    serviceId = argv.service;\n  }\n  if (!serviceId) {\n    cliExit('No service selected');\n  }\n  const service = await getServiceInfo(serviceId);\n\n  let tag: string;\n  if (argv.sha) {\n    tag = argv.tag;\n  } else {\n    tag = await selectTagForRevert(serviceId);\n  }\n\n  const dir = path.join(service.servicePath, 'infra');\n\n  const pulumiProject = (await loadPulumiProject(dir)).name;\n  const repo = await getGitRepoName();\n  const branch = await getCurrentBranch();\n  const substitutions = {\n    _SERVICE_ID: pulumiProject,\n    _PULUMI_PROJECT: pulumiProject,\n    _PATH: `services/${serviceId}/infra`,\n    _BRANCH_NAME: 'master',\n    _GITHUB_SHA: tag,\n    _REPO: repo,\n    _GITHUB_ORG: await getGithubOrg(),\n  };\n\n  cliLog(`Reverting ${serviceId} to commit ${tag}`);\n  await confirm('OK to continue with revert?');\n  await triggerCloudBuilds({\n    argv,\n    buildNames: ['pulumi-up'],\n    substitutions,\n    dirs: [dir],\n    applicableStacks: ['shofifi'],\n    envs: ['F=true'],\n  });\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/sensory/provider-update.ts",
    "exports": [
      {
        "type": "function",
        "name": " runProviderUpdate",
        "text": "\n\nexport async function runProviderUpdate(argv) {\n  let serviceName = argv.service;\n  if (argv.select || !serviceName) {\n    serviceName = await selectServices();\n  }\n  const service = await getServiceInfo(serviceName);\n  const serviceConfig = loadServiceConfig(service.absolutePath);\n  const providerConfig = serviceConfig.sensory.provider;\n  const policiesConfig = serviceConfig.sensory.policies;\n  if (!providerConfig) {\n    cliExit('No sensory provider found in tw-config.json');\n  }\n  try {\n    const res = await callServiceEndpoint(\n      'integration',\n      'providers',\n      { ...providerConfig, policies: policiesConfig },\n      {\n        forceCloud: true,\n        log: false,\n      }\n    );\n    logger.info('Provider updated', res.data);\n  } catch (e) {\n    cliError(JSON.stringify(e.response?.data || ''));\n  }\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/services/build.ts",
    "exports": [
      {
        "type": "function",
        "name": " buildService",
        "text": "\n\nexport async function buildService(argv) {\n  const dir: string = argv.dir || argv._.slice(1)[0];\n  const branch = await getCurrentBranch();\n  if (!dir) {\n    cliExit('No dir.');\n  }\n  const runtime = fs.existsSync(`${dir}/package.json`) ? 'node' : 'python';\n  await triggerCloudBuilds({\n    argv,\n    buildNames: ['build-service'],\n    substitutions: {\n      _RUNTIME: runtime,\n      _SERVICE_DIR: dir,\n      _SERVICE_ID: dir.split('/').pop(),\n      _BRANCH_NAME: branch,\n      _REPO: await getGitRepoName(),\n      _GITHUB_ORG: await getGithubOrg(),\n    },\n  });\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/services/run.ts",
    "exports": [
      {
        "type": "function",
        "name": " runCommand",
        "text": "\n\nexport async function runCommand(argv: any) {\n  let [serviceId, file] = [argv.service, argv.file];\n  if (!serviceId || !file) [serviceId, file] = argv._.slice(1);\n  pythonVersion = argv.p3 ? '3' : '';\n\n  let serviceDir = `${cliConfig.servicesRoot}/${serviceId}`;\n  if (!fs.existsSync(serviceDir)) {\n    // path passed\n    serviceDir = serviceId;\n    serviceId = serviceId.split('/').pop() as any;\n  }\n\n  const serviceConfig = loadServiceConfig(serviceDir);\n\n  const secrets = { TW_SECRETS: await getSecrets(serviceId) };\n  const userEnv = getUserEnv(serviceDir);\n\n  handleDockerDeps(serviceConfig.dependencies, argv.debug);\n\n  const serviceData = {\n    id: serviceId,\n    secrets,\n    config: serviceConfig,\n    serviceDir,\n    userEnv,\n  };\n\n  await runService(serviceData as any, file);\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv: any",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/services/up.ts",
    "exports": [
      {
        "type": "function",
        "name": " upCommand",
        "text": "\n\nexport async function upCommand(argv: any) {\n  const serviceIds = argv.saber ? await getPipelineId(argv) : await getServiceIds(argv);\n  const serviceInfos = await Promise.all(\n    serviceIds.map(async (s) => await getServiceInfo(s, argv.saber))\n  );\n  const dirs = serviceInfos.map((s) => s.absolutePath + '/infra');\n\n  let stack = argv.stack;\n  if (argv.saber && !stack) {\n    stack = await getApplicableStack(argv, dirs);\n  }\n  if (!serviceIds) {\n    cliExit('No services or pipelines selected');\n  }\n\n  if (argv['dry-run']) {\n    process.env.SABER_DRY_RUN = 'true';\n  }\n\n  const services: Services = cliConfig.services;\n\n  const serviceDependencies = new Set<string>();\n  const allLinkedPackages = new Set<string>();\n\n  if (!argv.fast) {\n    await runNpmAuth();\n  }\n\n  for (let serviceInfo of serviceInfos) {\n    const serviceDir = serviceInfo.servicePath;\n    const absolutePath = serviceInfo.absolutePath;\n    const serviceId = serviceInfo.serviceName;\n    const serviceConfig = loadServiceConfig(absolutePath);\n    const linkedPackages = [];\n    if (serviceConfig?.runtime !== 'python') {\n      linkedPackages.push(...getLinkedPackages(absolutePath));\n      if (argv.saber) {\n        argv.entrypoint = `$(which saber) ${argv.entrypoint ? `--main ${argv.entrypoint}` : ''}`;\n      }\n      const nodemonConfig = JSON.parse(JSON.stringify(getDefaultNodemonConfig(argv.entrypoint)));\n      for (const linkedPackage of linkedPackages) {\n        nodemonConfig.watch.push(linkedPackage);\n        allLinkedPackages.add(linkedPackage);\n      }\n      try {\n        fs.mkdirSync(`${absolutePath}/dist`);\n      } catch {}\n      fs.writeFileSync(`${absolutePath}/dist/nodemon.json`, JSON.stringify(nodemonConfig));\n    }\n\n    const secrets = { TW_SECRETS: await getSecrets(serviceId) };\n    const userEnv = getUserEnv(absolutePath);\n    const servicePort = Math.floor(Math.random() * (65535 - 10000) + 10000);\n    services[serviceId] = {\n      id: serviceId,\n      secrets,\n      config: serviceConfig,\n      serviceDir,\n      absolutePath,\n      linkedPackages,\n      servicePort,\n      userEnv,\n    };\n    serviceConfig.dependencies?.forEach((dep) => serviceDependencies.add(dep));\n  }\n\n  handleDockerDeps([...serviceDependencies], argv.debug).catch((e) => {\n    cliError('Failed to handle docker dependencies');\n    console.error(e);\n  });\n\n  runAndBuildPackages(allLinkedPackages);\n\n  for (const serviceId of Object.keys(services)) {\n    const serviceData = services[serviceId];\n    cliLog(\n      `Starting ${serviceId}, linked packages: ${\n        serviceData.linkedPackages.join(', ') || 'none'\n      }, internal port: ${serviceData.servicePort}`\n    );\n    runService({ argv, serviceData, stack }).catch((e) => {\n      cliWarning(`Failed to start ${serviceId}`);\n      console.error(e);\n      cliExit(e.message);\n    });\n  }\n  if (!argv.s) createProxy(services);\n  if ([...serviceDependencies].includes('emulators')) {\n    checkEmulators({ projectId: argv.project });\n  }\n  if ([...serviceDependencies].includes('temporal')) {\n    checkTemporal();\n  }\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv: any",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " runPythonService",
        "text": "\n\nexport async function runPythonService(args: {\n  serviceData: ServiceData;\n  file?: string;\n  extraArgs?: string;\n}) {\n  const { serviceData, file = 'src/app.py', extraArgs } = args;\n  const VIRTUAL_ENV = `${serviceData.absolutePath}/venv`;\n  const venvEnv = {\n    PATH: `${VIRTUAL_ENV}/bin:${process.env.PATH}`,\n    VIRTUAL_ENV,\n  };\n  const pythonCommand = await getPythonCommand();\n  await ensureVenv(serviceData, venvEnv);\n\n  await pipInstall(serviceData, venvEnv);\n\n  // run\n  spawnNodemonInTw({\n    name: serviceData.id,\n    command: `bash`,\n    commandArgs: [\n      '-c',\n      `${\n        process.env.DD ? 'ddtrace-run' : ''\n      } ${pythonCommand} -m debugpy --listen $DEBUG_PORT ${file}${\n        extraArgs ? ' ' + extraArgs : ''\n      }`,\n    ],\n    nodemonSettings: {\n      watch: ['src/*'],\n      cwd: serviceData.absolutePath,\n      env: {\n        ...getEnvs(),\n        ...serviceData.config.env,\n        ...serviceData.secrets,\n        ...serviceData.userEnv,\n        PORT: serviceData.servicePort,\n        ...venvEnv,\n      },\n    },\n    color: serviceData.config.color,\n    log: true,\n  });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  serviceData: ServiceData;\n  file?: string;\n  extraArgs?: string;\n}",
            "type": "{\n  serviceData: ServiceData;\n  file?: string;\n  extraArgs?: string;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/summarizePR.ts",
    "exports": [
      {
        "type": "function",
        "name": " runSummarize",
        "text": "\n\nexport async function runSummarize() {\n  try {\n    const diffOutput = await gitDiff();\n\n    if (!diffOutput.trim()) {\n      console.log('No differences found in the git diff.');\n      return;\n    }\n\n    const tokens = diffOutput.split(/\\s+/); // Split by whitespace\n    const maxTokensPerMessage = 500; // Adjust as needed\n\n    const messages = [\n      { role: 'system', content: 'You are a helpful assistant.' },\n      {\n        role: 'user',\n        content: 'I am going to give you a git diff and ask you to summarize it:',\n      },\n    ];\n    let currentMessage = '';\n\n    for (const token of tokens) {\n      if (currentMessage.length + token.length < maxTokensPerMessage) {\n        currentMessage += token + ' ';\n      } else {\n        messages.push({ role: 'user', content: currentMessage.trim() });\n        currentMessage = token + ' ';\n      }\n    }\n\n    if (currentMessage.trim()) {\n      messages.push({ role: 'user', content: currentMessage.trim() });\n    }\n    messages.push({\n      role: 'user',\n      content:\n        'Please summarize all of that as a description of the git diff in 2 paragraphs or less',\n    });\n\n    const response = await queryChatGPT(messages);\n    console.log(response);\n  } catch (error) {\n    // Handle error\n  }\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " gitDiff",
        "text": "\n\nexport async function gitDiff() {\n  const diff = (\n    await runProcess({\n      log: false,\n      command: 'git',\n      commandArgs: ['diff', 'master...' + (await getCurrentBranch()), '--', ':!*.json'],\n    })\n  ).stdout.trim();\n  return diff;\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/cli/commands/temporal/start.ts",
    "exports": [
      {
        "type": "function",
        "name": " startActivity",
        "text": "\n\nexport async function startActivity(argv: any) {\n  createTemporalWorker({\n    taskQueue: 'cli-workflow',\n    workflowsPath: require.resolve('./workflow'),\n    namespace: 'default',\n  });\n\n  const client = await getTemporalClient();\n\n  const handle = await client.workflow.start('run', {\n    workflowId: 'test-' + Math.random(),\n    taskQueue: 'cli-workflow',\n    args: [argv.q, argv.t, JSON.parse(argv.p)],\n  });\n  await handle.result();\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv: any",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " startWorkflow",
        "text": "\n\nexport async function startWorkflow(argv: any) {\n  const client = await getTemporalClient();\n\n  const handle = await client.workflow.start(argv.t, {\n    workflowId: 'test-' + Math.random(),\n    taskQueue: argv.q,\n    args: [JSON.parse(argv.p)],\n  });\n  await handle.result();\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv: any",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/temporal/workflow.ts",
    "exports": [
      {
        "type": "function",
        "name": " run",
        "text": "\n\nexport async function run(queue: string, type: string, payload: any): Promise<any> {\n  const result = await proxyActivities({\n    taskQueue: queue,\n    retry: RETRY_POLICY,\n    startToCloseTimeout: '20 minute',\n  })[type](payload);\n\n  return result;\n}",
        "parameters": [
          {
            "name": "queue",
            "text": "queue: string",
            "type": "string"
          },
          {
            "name": "type",
            "text": "type: string",
            "type": "string"
          },
          {
            "name": "payload",
            "text": "payload: any",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/test.ts",
    "exports": [
      {
        "type": "function",
        "name": " runEndToEndTests",
        "text": "\n\nexport async function runEndToEndTests(argv: any) {\n  try {\n    //TODO: add option to run in cloud\n    const service: string = argv.service_name;\n    const optinalStacks = ['production-api', 'staging-api', 'localhost-api'];\n    const stacks = await selectStacks(optinalStacks);\n    for (const stack of stacks) {\n      //TODO: vpn ok, local: service is up\n      // @ts-ignore\n      const { results, globalConfig } = await runTests(service, stack, { subValues: argv._ });\n    }\n  } catch (err) {\n    return;\n  }\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv: any",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " runTestsForIntegration",
        "text": "\nexport async function runTestsForIntegration(argv: any) {\n  if (argv.runInCloud) {\n    const url = await triggerCloudBuilds({\n      argv,\n      buildNames: ['run-e2e-tests'],\n      substitutions: {\n        _SERVICE_ID: 'integrations',\n        _TESTS_OPTS: JSON.stringify(argv),\n      },\n    });\n    return;\n  }\n  const projectId = 'triple-whale-staging';\n  process.env.TW_TESTS_SECRETS = await getSecrets('automation-tests', projectId);\n  process.env.TESTS_OPTS = JSON.stringify(argv);\n  const { results, globalConfig } = await runTests('integrations');\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv: any",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " validateDaysBackOption",
        "text": "\n\nexport function validateDaysBackOption(argv) {\n  const daysBack = argv.daysBack;\n  if (typeof daysBack !== 'undefined' && (isNaN(daysBack) || daysBack < 0)) {\n    throw new Error('Invalid --days-back option. It should be a non-negative number.');\n  }\n  return true;\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " validateOptions",
        "text": "\n\nexport function validateOptions(argv) {\n  const daysBack = argv.daysBack;\n  const dateRange = argv.dateRange;\n\n  if (typeof daysBack !== 'undefined' && (isNaN(daysBack) || daysBack < 0)) {\n    throw new Error('Invalid --days-back option. It should be a non-negative number.');\n  }\n\n  if (typeof dateRange !== 'undefined') {\n    // Check if the date range follows the format mm/dd/yyyy-mm/dd/yyyy\n    const dateRangePattern = /^\\d{2}\\/\\d{2}\\/\\d{4}-\\d{2}\\/\\d{2}\\/\\d{4}$/;\n    if (!dateRangePattern.test(dateRange)) {\n      throw new Error('Invalid --date-range option. The format should be mm/dd/yyyy-mm/dd/yyyy.');\n    }\n  }\n  return true;\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " createSchemaFromFile",
        "text": "\nexport async function createSchemaFromFile(argv) {\n  const path = argv.path;\n  await addSchemaFromFile(path);\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " runUnitTests",
        "text": "\n\nexport async function runUnitTests(argv) {\n  // TODO: billyd\n  console.log('Implement me');\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/trigger.ts",
    "exports": [
      {
        "type": "function",
        "name": " runTrigger",
        "text": "\n\nexport async function runTrigger(argv) {\n  const triggerName = argv.trigger_name || argv._.slice(1)[0];\n\n  if (!triggerName) {\n    cliExit('No trigger.');\n  }\n  await triggerCloudBuilds({ argv, buildNames: [triggerName] });\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/utils/cdn.ts",
    "exports": [
      {
        "type": "function",
        "name": " invalidateCdnCache",
        "text": "\n\nexport async function invalidateCdnCache(argv) {\n  const [urlMap, path] = argv._.slice(1);\n  const client = new compute.UrlMapsClient();\n  const result = await client.invalidateCache({\n    project: cliConfig.projectId,\n    urlMap,\n    cacheInvalidationRuleResource: { path: path || '/*' },\n  });\n  console.log(result);\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/utils/diskCreator.ts",
    "exports": [
      {
        "type": "function",
        "name": " diskCreatorBuild",
        "text": "\n\nexport async function diskCreatorBuild(argv) {\n  const client = new CloudBuildClient();\n  const author = getGcloudUserEmail();\n  if (!argv.prefix.startsWith('raw/')) {\n    cliExit('Prefix must start with raw/');\n  }\n  argv.prefix = argv.prefix.replace('raw/', '');\n  const [triggerRes] = await client.createBuild({\n    build: {\n      steps: [\n        {\n          name: 'gcr.io/cloud-builders/docker',\n          args: [\n            'run',\n            '--privileged',\n            '--env',\n            'PREFIX=$_PREFIX',\n            '--env',\n            'PROJECT_ID=$PROJECT_ID',\n            '--network',\n            'cloudbuild',\n            `us-central1-docker.pkg.dev/${cliConfig.projectId}/devops-docker/disk-creator:latest`,\n          ],\n        },\n      ],\n      options: {\n        substitutionOption: 'ALLOW_LOOSE',\n        diskSizeGb: '100',\n        machineType: 'E2_HIGHCPU_8',\n      },\n      substitutions: {\n        _PREFIX: argv.prefix,\n        _AUTHOR: author,\n      },\n    },\n    parent: `projects/${cliConfig.projectId}/locations/global`,\n  });\n  const buildUrl = triggerRes.metadata['build'].logUrl;\n  cliSuccess('Logs: ' + buildUrl);\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/utils/exec.ts",
    "exports": [
      {
        "type": "function",
        "name": " execForServices",
        "text": "\n\nexport async function execForServices(argv) {\n  const command = argv.cmd || argv._.slice(1);\n  let services = fs.readdirSync(cliConfig.servicesRoot);\n  if (argv.select) {\n    const servicesFilter = await selectServices();\n    services = services.filter((s) => servicesFilter.includes(s));\n  }\n  await runNpmAuth();\n  for (const serviceId of services) {\n    let serviceDir = `${cliConfig.servicesRoot}/${serviceId}`;\n    if (argv.infra) serviceDir += '/infra';\n    await runProcess({\n      name: serviceId,\n      command: process.env.SHELL || 'bash',\n      commandArgs: ['-c', command],\n      additionalArgs: { cwd: resolve(serviceDir) },\n      log: true,\n    });\n  }\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/utils/firebaseToken.ts",
    "exports": [
      {
        "type": "function",
        "name": " printFirebaseToken",
        "text": "\n\nexport default async function printFirebaseToken(argv) {\n  const email = argv.email || get('email');\n  const password = argv.password || get('password');\n  // https://console.cloud.google.com/apis/credentials/key/fbce60e4-598e-4955-8e21-ed7f3536e005?project=shofifi\n  const key = 'AIzaSyAvTdGoGNw2-UhaTYwS67xQNAWGMwB1LqE';\n  try {\n    const data = (\n      await axios.post(\n        `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${key}`,\n        { email, password, returnSecureToken: true }\n      )\n    ).data;\n    console.log(data.idToken);\n  } catch (e) {\n    cliError(e);\n  }\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/utils/format.ts",
    "exports": [
      {
        "name": " globalPrettier",
        "text": "\n\nexport const globalPrettier = `${os.homedir()}/.prettierrc`;",
        "type": "variable"
      },
      {
        "type": "function",
        "name": " runFormat",
        "text": "\n\nexport async function runFormat(argv: any) {\n  const path = argv._[1] || '.';\n  fs.writeFileSync(globalPrettier, JSON.stringify(prettierConfig, null, 2));\n  await runProcess({\n    command: 'npx',\n    commandArgs: [\n      'prettier',\n      '--write',\n      '--config',\n      globalPrettier,\n      '!**/{node_modules,build,module,tw-config.json}/**',\n      path,\n    ],\n    log: true,\n  });\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv: any",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/utils/gcpToken.ts",
    "exports": [
      {
        "type": "function",
        "name": " printGcpToken",
        "text": "\n\nexport default async function printGcpToken(argv) {\n  const authClient = new GoogleAuth();\n\n  let token;\n  if (!argv.sa) {\n    token = await getIdentityToken();\n  } else {\n    token = await ((await authClient.getClient()) as Compute).fetchIdToken(argv.aud);\n  }\n  console.log(token);\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/utils/localIp.ts",
    "exports": [
      {
        "type": "function",
        "name": " getLocalIp",
        "text": "\n\nexport function getLocalIp() {\n  const nets = networkInterfaces();\n  const results = Object.create(null); // Or just '{}', an empty object\n\n  for (const name of Object.keys(nets)) {\n    for (const net of nets[name]) {\n      if (!name) continue;\n      // Skip over non-IPv4 and internal (i.e. 127.0.0.1) addresses\n      // 'IPv4' is in Node <= 17, from 18 it's a number 4 or 6\n      const familyV4Value = typeof net.family === 'string' ? 'IPv4' : 4;\n      if (net.family === familyV4Value && !net.internal) {\n        if (!results[name]) {\n          results[name] = [];\n        }\n        results[name].push(net.address);\n      }\n    }\n  }\n  return results['en0'][0];\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/cli/commands/utils/pubsub.ts",
    "exports": [
      {
        "type": "function",
        "name": " pullFromPubsub",
        "text": "\n\nexport async function pullFromPubsub(argv) {\n  const pubsub = new PubSub();\n  const author = getGcloudUserEmail().replace('@', '-at-').replace('.', '-dot-');\n  const topicName = argv.topic;\n  const subscriptionName = `${topicName}-${author}`;\n  const topic = pubsub.topic(topicName);\n  const [subscriptions] = await topic.getSubscriptions();\n  const log = !Boolean(argv.k);\n  const exists = subscriptions.find((subscription) =>\n    subscription.name.endsWith(subscriptionName)\n  )?.name;\n  if (exists) {\n    log && cliSuccess(`Using subscription ${subscriptionName}`);\n  } else {\n    log && cliLog(`Creating subscription...`);\n    const [sub] = await topic.createSubscription(subscriptionName, {\n      ackDeadlineSeconds: 600,\n      expirationPolicy: {\n        ttl: { seconds: 3600 * 24 * 1 },\n      },\n      messageRetentionDuration: {\n        seconds: 3600,\n      },\n    });\n    log && cliSuccess(`Created subscription ${subscriptionName}`);\n  }\n  if (argv.k) {\n    console.log(subscriptionName);\n    return;\n  }\n  const serviceId = argv.service as string;\n  const endpoint = argv.endpoint as string;\n\n  await pullPubSubMessages(\n    subscriptionName,\n    async (message) => {\n      cliLog(`got message ${message.id}`);\n      if (serviceId && endpoint) {\n        try {\n          await callServiceEndpoint<any[], any>(\n            serviceId,\n            endpoint + (endpoint.includes('?') ? '&' : '?') + 'isPubsub=true',\n            {\n              message: {\n                data: Buffer.from(message.data).toString('base64'),\n                attributes: message.attributes,\n                messageId: message.id,\n              },\n            },\n            {\n              method: 'POST',\n            }\n          );\n        } catch (e) {\n          cliError(`Error: ${e}`);\n          message.nack();\n        }\n      } else if (argv.l) {\n        await callPubSub(argv.t, JSON.parse(message.data.toString()), message.attributes);\n      } else {\n        console.log(Buffer.from(message.data).toString());\n      }\n      message.ack();\n    },\n    {\n      forceCloud: true,\n      subscriptionOptions: { flowControl: { maxMessages: 1 } },\n      projectId: cliConfig.projectId,\n    }\n  );\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/utils/pulumi.ts",
    "exports": [
      {
        "type": "function",
        "name": " modifyPulumiStack",
        "text": "\n\nexport async function modifyPulumiStack(argv) {\n  const { stdout } = await runProcess({\n    command: 'pulumi',\n    commandArgs: ['stack', 'export'],\n  });\n  // get stack name\n  let { stdout: stackName } = await runProcess({\n    command: 'pulumi',\n    commandArgs: ['stack', '--show-name'],\n  });\n  stackName = stackName.trim();\n  const state = JSON.parse(stdout.toString());\n  fs.writeFileSync(`${stackName}-bac.json`, JSON.stringify(state));\n  if (argv['provider']) {\n    const resources: any[] = [];\n    const changedResources = [];\n    const { stdout } = await runProcess({\n      command: 'pulumi',\n      commandArgs: ['preview', '--json'],\n    });\n    const diff = JSON.parse(stdout.toString());\n    fs.writeFileSync(`${stackName}-diff.json`, JSON.stringify(diff));\n    const providerReplaces: { urn: string; newProvider: string }[] = [];\n    for (const step of diff.steps) {\n      if (step.op === 'replace' && step.replaceReasons?.includes('provider')) {\n        providerReplaces.push({ urn: step.urn, newProvider: step.newState.provider });\n      }\n    }\n    for (const resource of state.deployment.resources) {\n      const replacement = providerReplaces.find((r) => r.urn === resource.urn);\n      if (replacement) {\n        resource.provider = replacement.newProvider;\n        changedResources.push(resource);\n      } else {\n        resources.push(resource);\n      }\n    }\n    if (changedResources.length) {\n      // insert the resource one after its provider\n      for (const resource of changedResources) {\n        const providerUrn = resource.provider.split('::').slice(0, 4).join('::');\n        const providerId = resource.provider.split('::').pop();\n        const providerIndex = resources.findIndex((r) => {\n          return r.urn === providerUrn && r.id === providerId;\n        });\n        resources.splice(providerIndex + 1, 0, resource);\n      }\n    }\n    state.deployment.resources = resources;\n  } else {\n    const resources: any[] = [];\n    for (const resource of state.deployment.resources) {\n      if (resource.pendingReplacement) {\n        resource.pendingReplacement = false;\n      }\n      resources.push(resource);\n    }\n    state.deployment.resources = resources;\n  }\n  fs.writeFileSync(`${stackName}-new.json`, JSON.stringify(state));\n  console.log(JSON.stringify(state));\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " getPulumiStackExport",
        "text": "\n\nexport async function getPulumiStackExport(args: { cwd: string; stack: string }): Promise<{}> {\n  const { cwd, stack } = args;\n  const { stdout } = await runProcess({\n    command: 'pulumi',\n    commandArgs: ['stack', 'export', '--cwd', cwd, '--stack', `triplewhale/${stack}`],\n  });\n  return JSON.parse(stdout);\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { cwd: string; stack: string }",
            "type": "{ cwd: string; stack: string }"
          }
        ]
      },
      {
        "type": "function",
        "name": " getPulumiOutputs",
        "text": "\n\nexport async function getPulumiOutputs(args: { cwd: string; stack: string }) {\n  const { cwd, stack } = args;\n  const { stdout } = await runProcess({\n    command: 'pulumi',\n    commandArgs: ['stack', 'output', '--json', '--cwd', cwd, '--stack', stack],\n  });\n\n  return JSON.parse(stdout);\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { cwd: string; stack: string }",
            "type": "{ cwd: string; stack: string }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/utils/runInCloudBuild.ts",
    "exports": [
      {
        "type": "function",
        "name": " runInCloudBuild",
        "text": "\n\nexport async function runInCloudBuild(argv) {\n  const configFile = temp.path({ suffix: '.yaml' });\n  cliLog(`File: ${configFile}`);\n  fs.writeFileSync(configFile, createConfigString({ script: argv.script }));\n  return runProcess({\n    log: true,\n    name: '',\n    command: 'gcloud',\n    commandArgs: [\n      'builds',\n      'submit',\n      `--config=${configFile}`,\n      `--project=${cliConfig.projectId}`,\n      '--no-source',\n    ],\n  });\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/utils/triggers.ts",
    "exports": [
      {
        "type": "function",
        "name": " updateAllCloudBuildTriggerStatus",
        "text": "\n\nexport async function updateAllCloudBuildTriggerStatus(argv) {\n  let disabled;\n  if (argv.e) {\n    disabled = false;\n  } else if (argv.d) {\n    disabled = true;\n  } else {\n    throw new Error('Must specify either -e or -d');\n  }\n  const client = new CloudBuildClient({ projectId: cliConfig.projectId });\n\n  const [triggers] = await client.listBuildTriggers({\n    projectId: cliConfig.projectId,\n  });\n  for (const trigger of triggers) {\n    cliLog(`Updating ${trigger.name} to ${disabled ? 'disabled' : 'enabled'}`);\n    trigger.disabled = disabled;\n    await client.updateBuildTrigger({\n      trigger,\n      projectId: cliConfig.projectId,\n      triggerId: trigger.id,\n    });\n  }\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/commands/utils/vpn.ts",
    "exports": [
      {
        "type": "function",
        "name": " vpnTest",
        "text": "\n\nexport async function vpnTest() {\n  for (const [key, value] of Object.entries(envs)) {\n    const url = `http://${value}`;\n    testVpn(url).then(({ ok }) => {\n      if (ok) {\n        console.log(`${key}: ${chalkSuccess('ok')}`);\n      } else {\n        console.log(`${key}: ${chalkError('not ok')}`);\n      }\n    });\n  }\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/cli/config.ts",
    "exports": [
      {
        "name": " cliConfig",
        "text": "\n\nexport const cliConfig: {\n  proxyPort: number;\n  proxySsl: boolean;\n  projectId: string;\n  PWD: string;\n  currentDirname: string;\n  emulatorsReady: boolean;\n  temporalReady: boolean;\n  servicesRoot: string;\n  pipelinesRoot: string;\n  packagesRoot: string;\n  gitRoot: string;\n  clientRoot: string;\n  services: Services;\n} = {\n  proxyPort: 80,\n  proxySsl: false,\n  projectId: 'triple-whale-staging',\n  PWD: process.env.PWD,\n  currentDirname: process.env.PWD?.split(path.sep)?.pop(),\n  emulatorsReady: false,\n  temporalReady: false,\n  servicesRoot: null,\n  pipelinesRoot: null,\n  packagesRoot: null,\n  gitRoot: null,\n  clientRoot: null,\n  services: {},\n};",
        "type": "{\n  proxyPort: number;\n  proxySsl: boolean;\n  projectId: string;\n  PWD: string;\n  currentDirname: string;\n  emulatorsReady: boolean;\n  temporalReady: boolean;\n  servicesRoot: string;\n  pipelinesRoot: string;\n  packagesRoot: string;\n  gitRoot: string;\n  clientRoot: string;\n  services: Services;\n}"
      },
      {
        "type": "function",
        "name": " initConfig",
        "text": "\n\nexport function initConfig(argv) {\n  // projectId\n  if (argv['project'] || argv['project-id']) {\n    cliConfig.projectId = argv['project'] || argv['project-id'];\n  }\n  if (argv.prod) {\n    cliConfig.projectId = 'shofifi';\n  } else if (argv.stg) {\n    cliConfig.projectId = 'triple-whale-staging';\n  }\n  process.env.PROJECT_ID = cliConfig.projectId;\n  process.env.GCLOUD_PROJECT = process.env.PROJECT_ID;\n  if (argv['ignore-admin']) {\n    process.env.IGNORE_ADMIN = '1';\n  }\n\n  // proxySsl\n  if (argv.ssl) {\n    cliConfig.proxySsl = true;\n    process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0';\n  }\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/constants.ts",
    "exports": [
      {
        "name": " packageJson",
        "text": "\n\nexport const packageJson = JSON.parse(fs.readFileSync(__dirname + '/../package.json').toString());",
        "type": "variable"
      },
      {
        "name": " twHomePath",
        "text": "\nexport const twHomePath = os.homedir() + '/.config/tw/';",
        "type": "variable"
      },
      {
        "name": " twConfigFile",
        "text": "\nexport const twConfigFile = 'tw-config.json';",
        "type": "variable"
      },
      {
        "name": " sslCertificate",
        "text": "\n\nexport const sslCertificate = `-----BEGIN CERTIFICATE-----\nMIIDLzCCAhegAwIBAgIUV0944EdU6mzkFjYU3zOmiThYFXowDQYJKoZIhvcNAQEL\nBQAwJzELMAkGA1UEBhMCVVMxGDAWBgNVBAMMD0V4YW1wbGUtUm9vdC1DQTAeFw0y\nMjA5MDEwOTI1NTVaFw0yNTA2MjEwOTI1NTVaMCcxCzAJBgNVBAYTAlVTMRgwFgYD\nVQQDDA9FeGFtcGxlLVJvb3QtQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK\nAoIBAQC8tCHhwPE8YBJjtLRvY91f9TxhmvyvMBmbsuWtwQU7goYYf906qbkIXZYz\nSSEnOgXSCtBxc5EONrf/5xQghs8OQ/Dfjn8BmxOFnsiEIv4WYH3om1h+vTINHX+/\nzk0GglsVl2+BaL1Fe8kj2xB3lIF/HEH6wHWcZd76LIl2kRy9VGjT51yZtFw3XSoq\nsuYHMlqjLqqmvgRo3IoxjrWfU3WlO4RAe6MNqh+LFdNSKyHIGv9OUhcGHoMDp+5T\nfEO6/+aIS7jAcV+GmQuNJfZ+J3vhtZS3tmJGp2sNY1J8Ppiw51lAi1IdQIL6mg3j\nHakeqfG43Pp19XWQGj3BPTtLNtUfAgMBAAGjUzBRMB0GA1UdDgQWBBRzDeQkCMjF\nWegiefnGHZD5sEg7eTAfBgNVHSMEGDAWgBRzDeQkCMjFWegiefnGHZD5sEg7eTAP\nBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQAdYequNvS5JEb9AUHB\nqeWeR6TLnue6/i3FBX22TCT3hNrL3QS/ktepIJaOVNZx5jHYcsbaWSQSdlqca5Zr\nVnpsygpCCvorq0Rz6MLS/Juu56wS2jl3pwDBiChKJq19lIZrHGyGZ2DR6ca+Pq8p\nCuGncHocpGkLUg2hg16m/HGU+68gbF/0OMnirR+XMibIDU61D3mmox3FKrNq6TzA\nN4qmJQ+3sc1/Ch8RsMX4tm1nlQBbJMuGGnYZ/rtI4vYWH1NTeQbkAoAoG8hnQqS9\nUVRAILKQxT892DnmDddURzg9cNpoQRvGA4GQwO0NcAs3Hac5uJyYlf/xA0NKgPRg\nMBIr\n-----END CERTIFICATE-----`;",
        "type": "variable"
      },
      {
        "name": " sslKey",
        "text": "\n\nexport const sslKey = `-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC8tCHhwPE8YBJj\ntLRvY91f9TxhmvyvMBmbsuWtwQU7goYYf906qbkIXZYzSSEnOgXSCtBxc5EONrf/\n5xQghs8OQ/Dfjn8BmxOFnsiEIv4WYH3om1h+vTINHX+/zk0GglsVl2+BaL1Fe8kj\n2xB3lIF/HEH6wHWcZd76LIl2kRy9VGjT51yZtFw3XSoqsuYHMlqjLqqmvgRo3Iox\njrWfU3WlO4RAe6MNqh+LFdNSKyHIGv9OUhcGHoMDp+5TfEO6/+aIS7jAcV+GmQuN\nJfZ+J3vhtZS3tmJGp2sNY1J8Ppiw51lAi1IdQIL6mg3jHakeqfG43Pp19XWQGj3B\nPTtLNtUfAgMBAAECggEAO0taziYjZzZE8QGKJOo7WHilpYHe3ml90nfPRd699yoX\nWsFq0ZEdLCzEEo9rFHld9NcjElMfBFlbTdTddS8HBtOAb67F58pDwxvWo/ae4ocl\naR7PGtv2Szq2tp1rhJ0XY9x21DIGLzwrQtIGBZ0rZ7aIYPNywVcdTn0KILCOWEsP\nol5T2GH0Lllgg+AIRCA1kwuu/4CcXR+6lz4Y334yTtl88Ph17Ntjqv1c6ZA8m5kL\nb9U9B1qj0J4R8W/OyOgAQI/e214yzRfCfKEYOAho8s7WsFXjX0Yt0lQkEKwYF68T\nmtNE/GLjmi2ga+uZn2v8fvydDog5KRWH3yDm8PZ4UQKBgQD3UVOlfPwF1Kk5MbtY\nasTZodcnoL/fGC/1tg3cA/WsyZynVTwgf5lR3mLnCj/W4UHC3NWIbotdS+7bCMQK\n51ZpCzA27omJVasPUC+7BtBQyWBUpcWovof+1HxR1re70qsRvIX+YqDy/CzgI/N2\nP7fd9jwrCdR3HrryRV9SJR9N+QKBgQDDVAjHebv/aWJRf9DtUYj3+HzLBhjZn6Ml\n6vebGC1EbO8PglJuj7CzvOvo5oeUACA+bxEDvQKH2Rccq9lsa7NrwSfL66zcJ5MB\nSvosyHj1BzSGTiz+7ywaAc6LiFkq9wi11U+0309Xvasd8IrItNU2ZP5Rmi8LlDvX\nTdxrCKlh1wKBgDoIOUpxo2ly1yp2gvFiTEKM+UFxNNSShl5vk5z2yOT8gee51lwB\n1OYi+q4f947iWF3zF5/l4InJ0YhP7EBqvBn16CBbpKY3FeaH+Es4dBUgy5vRMipA\nWwTusyU47vABpOaKiB6C4iViCt2lUfGDTg+lQcUPj21MJq3GnXFXCJtxAoGAPtty\nH887AoyFSTjaoSRV8YaTkjoaER5gQDmHCPAU0SpFHDaSFGZFNPIc8MwO4T/RIIZZ\ncVyHzfO8jkt3In7eNFTqW6Mx838Ava/FJlg1JJT3ACl0LW4GQTBHqXttRnhM40cL\n6Wbbf57XzEC2SLR40JJbjSMS9KT1ROoXfpJA/+0CgYEAojfLds0w4Os4WHvx3JBw\nG+N5DYm1osUHhOAYju90byilMupgZ+rEIezT3S7M4gHf79J9CZQWQ5wL0pk4WkhX\necNa4nRmj0b4b+AAEaUV75AaWgrYu2KFRvMrIhmKH+/EpIFL/Dr58g9O7m8tnxKk\nu5+LKz1x3FS4m9aNi3g8MBk=\n-----END PRIVATE KEY-----`;",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/cli/docker/dockers.ts",
    "exports": [
      {
        "name": " dockers",
        "text": "\n\nexport const dockers: Record<\n  string,\n  { config: (projectId?: any) => string; keepFresh?: boolean; detach?: boolean; color: string }\n> = {\n  emulators: {\n    config: (projectId) => {\n      const serviceName = 'emulators';\n      return JSON.stringify({\n        version: '3.8',\n        services: {\n          [serviceName]: {\n            image:\n              'us-central1-docker.pkg.dev/triple-whale-staging/devops-docker/local-emulators:latest',\n            environment: {\n              IS_LOCAL: 'true',\n              PROJECT_ID: projectId,\n            },\n            ports: ['8065:8065', '8086:8086', '8090:8090', '8026:8026', '8027:8027'],\n            volumes: [\n              'emulators-cache:/root/.cache/firebase/emulators/',\n              `${process.env.HOME}/.config/gcloud:/root/.config/gcloud`,\n            ],\n            networks: getServiceNetwork(serviceName),\n          },\n        },\n        volumes: {\n          [`${serviceName}-cache`]: null,\n        },\n        ...getNetworks(serviceName),\n      });\n    },\n    keepFresh: true,\n    detach: true,\n    color: '2496ec',\n  },\n  redis: {\n    config: () => {\n      const serviceName = 'redis';\n      return JSON.stringify({\n        version: '3.8',\n        services: {\n          [serviceName]: {\n            image: serviceName,\n            ports: ['6379:6379'],\n            networks: getServiceNetwork(serviceName),\n          },\n        },\n        ...getNetworks(serviceName),\n      });\n    },\n    color: 'c6302b',\n  },\n  postgres: {\n    config: () => {\n      const serviceName = 'postgres';\n      return JSON.stringify({\n        version: '3.8',\n        services: {\n          [serviceName]: {\n            image: serviceName,\n            ports: ['5432:5432'],\n            environment: {\n              POSTGRES_PASSWORD: 'local-pass',\n              POSTGRES_USER: 'local-user',\n            },\n            volumes: ['postgres-cache:/var/lib/postgresql/data'],\n            networks: getServiceNetwork(serviceName),\n          },\n        },\n        volumes: {\n          'postgres-cache': null,\n        },\n        ...getNetworks(serviceName),\n      });\n    },\n    color: '336691',\n  },\n  mongo: {\n    config: () => {\n      const serviceName = 'mongo';\n      return JSON.stringify({\n        version: '3.8',\n        services: {\n          [serviceName]: {\n            image: 'mongo',\n            ports: ['27017:27017'],\n            volumes: ['mongo-cache:/data/db'],\n            networks: getServiceNetwork(serviceName),\n          },\n        },\n        volumes: {\n          'mongo-cache': null,\n        },\n        ...getNetworks(serviceName),\n      });\n    },\n    color: '10ab50',\n  },\n  temporal: {\n    config: () => {\n      const serviceName = 'temporal';\n      return JSON.stringify({\n        version: '3.8',\n        services: {\n          [serviceName]: {\n            image:\n              'us-central1-docker.pkg.dev/triple-whale-staging/devops-docker/local-temporal:latest',\n            ports: ['7233:7233', '7080:7080'],\n            networks: getServiceNetwork(serviceName),\n          },\n        },\n        ...getNetworks(serviceName),\n      });\n    },\n    keepFresh: true,\n    // detach: true,\n    color: '42f5a1',\n  },\n  spicedb: {\n    config: () => {\n      const serviceName = 'spicedb';\n      const pg = JSON.parse(dockers.postgres.config());\n      return JSON.stringify({\n        version: '3.8',\n        services: {\n          [serviceName]: {\n            environment: {\n              // should match env in tw-config.json\n              SPICEDB_GRPC_PRESHARED_KEY: 'moSalahMVP',\n              ...pg.services.postgres.environment,\n            },\n            image: 'authzed/spicedb:latest',\n            ports: ['50051:50051'],\n            networks: getServiceNetwork(serviceName),\n            command: 'serve',\n          },\n        },\n        volumes: {\n          ...pg.volumes,\n        },\n        ...getNetworks(serviceName),\n      });\n    },\n    color: '9b533f',\n  },\n};",
        "type": "Record<\n  string,\n  { config: (projectId?: any) => string; keepFresh?: boolean; detach?: boolean; color: string }\n>"
      }
    ]
  },
  {
    "file": "@tw/cli/enquirer/confirm.ts",
    "exports": [
      {
        "type": "function",
        "name": " confirm",
        "text": "\n\nexport async function confirm(message?: string): Promise<void> {\n  try {\n    const confirm = new Confirm({ message: message || 'Are you sure?' });\n    const result = await confirm.run();\n    if (!result) {\n      cliLog('Aborting');\n      exit(0);\n    }\n  } catch (e) {\n    exit(0);\n  }\n}",
        "parameters": [
          {
            "name": "message",
            "text": "message?: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/enquirer/genericSelect.ts",
    "exports": [
      {
        "type": "function",
        "name": " selectGeneric",
        "text": "\n\nexport async function selectGeneric(args: {\n  multi: boolean;\n  message: string;\n  choices: string[] | (() => Promise<string[]>);\n}) {\n  const { multi, message } = args;\n  let { choices } = args;\n  if (typeof choices === 'function') {\n    choices = await choices();\n  }\n  const prompt = new (multi ? MultiSelect : Select)({\n    name: 'value',\n    message,\n    choices: choices.map((v) => {\n      return { name: v, value: v };\n    }),\n  });\n  try {\n    const results = await prompt.run();\n    return results;\n  } catch (e) {\n    exit();\n  }\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  multi: boolean;\n  message: string;\n  choices: string[] | (() => Promise<string[]>);\n}",
            "type": "{\n  multi: boolean;\n  message: string;\n  choices: string[] | (() => Promise<string[]>);\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/enquirer/selectPackages.ts",
    "exports": [
      {
        "type": "function",
        "name": " selectPackages",
        "text": "\n\nexport async function selectPackages() {\n  return selectGeneric({\n    multi: true,\n    message: 'Choose the packages',\n    choices: getAllPackages,\n  });\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/cli/enquirer/selectPipelines.ts",
    "exports": [
      {
        "type": "function",
        "name": " selectPipelines",
        "text": "\n\nexport async function selectPipelines(multi: boolean = true) {\n  return selectGeneric({\n    multi,\n    message: multi ? 'Choose the pipelines' : 'Which pipeline?',\n    choices: getAllPipelines,\n  });\n}",
        "parameters": [
          {
            "name": "multi",
            "text": "multi: boolean = true",
            "type": "boolean"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/enquirer/selectProjects.ts",
    "exports": [
      {
        "type": "function",
        "name": " selectProjects",
        "text": "\n\nexport async function selectProjects() {\n  return selectGeneric({\n    multi: true,\n    message: 'Choose the projects',\n    choices: projectIds,\n  });\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/cli/enquirer/selectPulumiProjects.ts",
    "exports": [
      {
        "type": "function",
        "name": " selectPulumiProjects",
        "text": "\n\nexport async function selectPulumiProjects() {\n  return selectGeneric({\n    multi: true,\n    message: 'Choose the pulumi projects',\n    choices: getAllPulumiProjects,\n  });\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/cli/enquirer/selectServices.ts",
    "exports": [
      {
        "type": "function",
        "name": " selectServices",
        "text": "\n\nexport async function selectServices(multi: boolean = true) {\n  return selectGeneric({\n    multi,\n    message: multi ? 'Choose the services' : 'Which service?',\n    choices: getAllServices,\n  });\n}",
        "parameters": [
          {
            "name": "multi",
            "text": "multi: boolean = true",
            "type": "boolean"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/enquirer/selectTagForRevert.ts",
    "exports": [
      {
        "type": "function",
        "name": " selectTagForRevert",
        "text": "\n\nexport async function selectTagForRevert(serviceId: string) {\n  try {\n    const choices = (await getServiceTags(serviceId)).slice(0, 5).map((rev, i) => {\n      return {\n        message: `${rev.shortSha} - ${rev.created}`,\n        hint: i === 0 ? 'Latest revision' : undefined,\n        name: rev.commitSha,\n      };\n    });\n    if (!choices.length) {\n      cliError(`No revisions found for service ${serviceId}.`);\n      cliError('You can try again or find the commit SHA you want to revert to and run:');\n      cliLog(`tw revert ${serviceId} --tag <commit-sha>`);\n      cliExit();\n    }\n    let confirmed = false;\n    let revision: string;\n    do {\n      const chooseRevision = new Select({\n        message: 'Which revision?',\n        choices,\n      });\n      revision = await chooseRevision.run();\n      if (revision === choices[0].name) {\n        const confirm = new Confirm({\n          type: 'confirm',\n          message: `It doesn't make sense to revert to the current revision. Are you sure you want to continue?`,\n        });\n        confirmed = await confirm.run();\n      } else {\n        confirmed = true;\n      }\n    } while (!confirmed);\n    return revision;\n  } catch (e) {\n    exit(0);\n  }\n}",
        "parameters": [
          {
            "name": "serviceId",
            "text": "serviceId: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/index.ts",
    "exports": []
  },
  {
    "file": "@tw/cli/proxy.ts",
    "exports": [
      {
        "type": "function",
        "name": " createProxy",
        "text": "\n\nexport function createProxy(services: Services) {\n  const app = express();\n\n  try {\n    const apiGatewayRouter = createApiGateway(services);\n    if (apiGatewayRouter) app.use(apiGatewayRouter);\n  } catch (e) {\n    cliError(`error creating api gateway: ${e}`);\n  }\n\n  app.use('/_cli', cliRouter);\n\n  app.use((req: Request, res: Response, next: NextFunction) => {\n    if (req.query._cli_project && req.query._cli_project !== cliConfig.projectId) {\n      cliWarning(`Got message from wrong project: ${req.query._cli_project}`);\n      res.sendStatus(200);\n    }\n    next();\n  });\n\n  app.use((req: Request, _res: Response, next: NextFunction) => {\n    const serviceId = req.path.split('/')[1];\n    // @ts-ignore\n    req.serviceId = serviceId;\n    if (serviceId !== 'api') {\n      req.url = `/${req.url.split('/').slice(2).join('/')}`;\n    }\n    next();\n  });\n\n  app.use(async (req: Request, res: Response, next: NextFunction) => {\n    // @ts-ignore\n    const serviceId = req.serviceId;\n    const service = cliConfig.services[serviceId];\n    if (!service) {\n      return next();\n    }\n    if (req.query.forceCloud === 'true' || req.originalUrl.startsWith('/api/v2')) {\n      return next();\n    }\n    res.setHeader('x-cli-by', 'local');\n    const runtime = service.config.runtime;\n    const host = runtime === 'node' ? 'localhost' : '0.0.0.0';\n    return proxy.all({\n      req,\n      res,\n      options: {\n        target: `http://${host}:${service.servicePort}`,\n        changeOrigin: true,\n        ws: serviceId === 'api',\n      },\n    });\n  });\n\n  app.use(async (req: Request, res: Response, next: NextFunction) => {\n    if (req.query.isPubsub) {\n      cliWarning('not forwarding pubsub requests to cloud.');\n      return res.status(200).send('ok');\n    }\n    // logWarning(`${req.originalUrl} -> 🌥️`);\n    if (req.originalUrl.startsWith('/api/v2')) {\n      return proxy.all({\n        req,\n        res,\n        options: {\n          target: `https://${projectIdToHostMap[cliConfig.projectId]}`,\n          changeOrigin: true,\n          ws: true,\n        },\n      });\n    }\n    // @ts-ignore\n    const serviceId = req.serviceId;\n\n    const { baseUrl, audience } = await getBaseUrl(serviceId, cliConfig.projectId);\n\n    if (!baseUrl) {\n      return next();\n    }\n    res.setHeader('x-cli-by', 'cloud');\n    if (audience) {\n      req.headers['authorization'] = `Bearer ${await getIdentityToken()}`;\n    } else {\n      testVpn(baseUrl).then(({ ok, old }) => {\n        if (ok && !old) {\n          return cliLog('vpn ok');\n        }\n        if (!ok) {\n          vpnErrorLog();\n          res.status(502).send('VPN not connected').destroy();\n        }\n      });\n    }\n    req.headers['user-agent'] = `cli-proxy/${packageJson.version}`;\n    return proxy.all({\n      req,\n      res,\n      options: {\n        target: baseUrl,\n      },\n    });\n  });\n\n  app.use((req, _res, next) => {\n    // @ts-ignore\n    const serviceId = req.serviceId;\n    let message = `Request path: ${req.path}: `;\n    if (serviceId) message += `${serviceId} service is not running`;\n    else message += 'invalid service';\n    if (!pathErrorLogged[req.path]) {\n      cliError(message);\n      pathErrorLogged[req.path] = true;\n    }\n    next();\n  });\n\n  if (Object.keys(services).length) {\n    const port = cliConfig.proxyPort;\n    const httpServer = http.createServer(app);\n    httpServer.keepAliveTimeout = 0;\n    httpServer.headersTimeout = 0;\n    httpServer.requestTimeout = 0;\n    httpServer.on('error', async (err) => {\n      if (err.message.includes('listen EADDRINUSE:')) {\n        cliError(`port ${port} is already in use`);\n        // attach to other cli process\n        try {\n          await axios.post(`http://localhost:${port}/_cli/attach`, services);\n          cliSuccess('attached to existing cli process');\n          cliConfig.proxyPort = 0;\n        } catch (e) {\n          cliError(`failed to attach to existing cli process: ${e.response.data}`);\n        }\n      }\n    });\n    httpServer.listen(port, '::', () => {\n      cliLog(`http proxy listening on port ${port}`);\n    });\n    if (cliConfig.proxySsl) {\n      const credentials = { key: sslKey, cert: sslCertificate };\n      const httpsServer = https.createServer(credentials, app);\n      httpsServer.listen(443, '::', () => {\n        cliLog('https proxy listening');\n      });\n    }\n  }\n}",
        "parameters": [
          {
            "name": "services",
            "text": "services: Services",
            "type": "Services"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/types.ts",
    "exports": [
      {
        "name": " ServiceData",
        "text": "\n\nexport type ServiceData = {\n  secrets: any;\n  id: string;\n  config: ServiceConfig;\n  serviceDir: string;\n  absolutePath: string;\n  linkedPackages: string[];\n  servicePort: number;\n  userEnv: any;\n};",
        "type": "{\n  secrets: any;\n  id: string;\n  config: ServiceConfig;\n  serviceDir: string;\n  absolutePath: string;\n  linkedPackages: string[];\n  servicePort: number;\n  userEnv: any;\n}"
      },
      {
        "name": " Services",
        "text": "\n\nexport type Services = { [k: string]: ServiceData };",
        "type": "{ [k: string]: ServiceData }"
      }
    ]
  },
  {
    "file": "@tw/cli/updateNotifier.ts",
    "exports": [
      {
        "name": " notifier",
        "text": "\n\nexport const notifier = updateNotifier({\n  pkg: packageJson,\n  updateCheckInterval: 60000,\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/cli/utils/cloudBuild.ts",
    "exports": [
      {
        "type": "function",
        "name": " triggerCloudBuilds",
        "text": "\n\nexport async function triggerCloudBuilds(args: {\n  argv;\n  buildNames: string[];\n  substitutions?: Record<string, string>;\n  dirs?: string[];\n  applicableStacks?: string[];\n  envs?: string[];\n}) {\n  const { argv, buildNames, dirs, envs = [] } = args;\n  if (!buildNames.length) {\n    cliExit('No triggers passed.');\n  }\n  let { substitutions = {}, applicableStacks } = args;\n  const client = new CloudBuildClient();\n\n  if (argv.python) {\n    substitutions['_TAG'] = 'fat';\n  }\n  const branch = await getCurrentBranch();\n  const author = getGcloudUserEmail();\n  let subs = argv.sub || [];\n  let test = argv.test || undefined;\n\n  if (!Array.isArray(subs)) subs = [subs];\n\n  for (const sub of subs) {\n    if (!(sub as string).startsWith('_')) {\n      cliExit('All substitutions must start with an _.');\n    }\n    substitutions = { ...envToObject(sub), ...substitutions };\n  }\n  substitutions = { ...substitutions, _RUN_TESTS: test };\n\n  // stacks here can mean project-ids in some cases\n  const stacks = getPulumiStacks(dirs);\n  applicableStacks = applicableStacks || (await getApplicableStacks(argv, dirs));\n\n  if (envs.length) {\n    substitutions['_BUILD_ENVS'] = envs.join(',');\n  }\n\n  substitutions['_CLI_VERSION'] = packageJson.version;\n\n  // remove undefined values\n  substitutions = Object.fromEntries(\n    Object.entries(substitutions).filter(([_, v]) => v !== undefined)\n  );\n\n  var buildUrls = [];\n  let msg = `Running Triggers: ${buildNames.join(', ')}.\n  Branch: ${branch}.\n  Stacks: ${applicableStacks.join(', ')}.`;\n  if (Object.keys(substitutions).length) {\n    msg += `\\n  Substitutions: ${JSON.stringify(substitutions)}`;\n  }\n  cliWarning(msg + '\\n');\n\n  for (const [index, buildName] of buildNames.entries()) {\n    for (const stack of applicableStacks) {\n      const projectId = stacks[stack].config[STACK_PROJECT_KEY];\n      var substitutionsForStack = { ...substitutions };\n      if (projectId !== stack) {\n        substitutionsForStack = { _STACK: stack, ...substitutionsForStack };\n      }\n      try {\n        const res = await Promise.any(\n          ['global', 'us-central1'].map((location) => {\n            return client.getBuildTrigger({\n              projectId,\n              name: `projects/${projectId}/locations/${location}/triggers/${buildName}`,\n            });\n          })\n        );\n        const buildTrigger = res[0];\n        if (buildTrigger.disabled) {\n          cliError(`${buildName} (${projectId}) is disabled.`);\n          continue;\n        }\n        const triggerRes = (\n          await client.runBuildTrigger({\n            projectId,\n            triggerId: buildTrigger.id,\n            source: {\n              branchName: branch,\n              substitutions: { _AUTHOR: author, ...substitutionsForStack },\n            },\n          })\n        )[0];\n        const buildUrl =\n          triggerRes.metadata['build'].logUrl ||\n          `https://console.cloud.google.com/cloud-build/builds/${triggerRes.metadata['build'].id}?project=${projectId}`;\n        buildUrls = buildUrls.concat(buildUrl);\n        cliLog(`${buildName} (${stack}) logs: ${buildUrl}`);\n      } catch (e) {\n        const pattern = /triggerError spanner trigger \\(.*\\) not found/;\n        if (e.errors?.[0]?.code === 5 && pattern.exec(e.errors?.[0]?.details)) {\n          cliLog('Trigger does not exist. Creating...');\n          await runPulumiUp(\n            {\n              stack,\n              dirs: dirs.slice(index, index + 1),\n              noPreview: true,\n            },\n            true\n          );\n          cliWarning(\"\\nWhen the above build completes, please rerun your 'tw deploy' command\");\n        } else {\n          cliError(`Error for ${buildName} on ${projectId}: ${e}`);\n        }\n      }\n    }\n  }\n  return buildUrls;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  argv;\n  buildNames: string[];\n  substitutions?: Record<string, string>;\n  dirs?: string[];\n  applicableStacks?: string[];\n  envs?: string[];\n}",
            "type": "{\n  argv;\n  buildNames: string[];\n  substitutions?: Record<string, string>;\n  dirs?: string[];\n  applicableStacks?: string[];\n  envs?: string[];\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " getApplicableStacks",
        "text": "\n\nexport async function getApplicableStacks(argv: any, dirs: string[]) {\n  const branch = await getCurrentBranch();\n  const stacks = getPulumiStacks(dirs);\n  let applicableStacks = Object.keys(stacks);\n\n  if (argv.stack) {\n    applicableStacks = applicableStacks.filter((v) => v === argv.stack);\n  }\n\n  if (argv.project) {\n    applicableStacks = applicableStacks.filter(\n      (stackName) => stacks[stackName].config[STACK_PROJECT_KEY] === argv.project\n    );\n  }\n\n  if (branch !== 'master') {\n    applicableStacks = applicableStacks.filter((stackName) => stackName !== 'shofifi');\n  }\n\n  if (applicableStacks.length > 1) {\n    applicableStacks = await selectStacks(applicableStacks);\n  }\n\n  if (!applicableStacks.length) {\n    cliExit('No stacks selected.');\n  }\n  return applicableStacks;\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv: any",
            "type": "any"
          },
          {
            "name": "dirs",
            "text": "dirs: string[]",
            "type": "string[]"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/utils/configstore.ts",
    "exports": [
      {
        "name": " configStore",
        "text": "\n\nexport const configStore = new Configstore(packageJson.name);",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/cli/utils/dockerDeps.ts",
    "exports": [
      {
        "type": "function",
        "name": " handleDockerDeps",
        "text": "\n\nexport async function handleDockerDeps(serviceDependencies: string[], debug: string[] = []) {\n  ensureDockerAuth();\n  for (const dep of serviceDependencies) {\n    const depConf = dockers[dep];\n    if (!depConf) {\n      cliExit(`Invalid dependency: ${dep}, try updating the cli.`);\n    }\n    const conf = depConf.config(process.env.PROJECT_ID);\n    const dockerOptions: IDockerComposeOptions = {\n      env: { ...getEnvs() },\n      configAsString: conf,\n      callback: (chunk, _) => {\n        serviceLogStream(chunk, dep + ' (docker)', depConf.color || '42db27');\n      },\n      composeOptions: ['-p', 'tw-cli'],\n    };\n    try {\n      if (depConf.keepFresh) {\n        await execCompose('pull', [], dockerOptions);\n      }\n      cliLog(`starting ${dep}`);\n      if (!debug.includes(dep)) delete dockerOptions.callback;\n      execCompose(\n        'up',\n        ['--no-log-prefix', ...(depConf.detach ? ['-d'] : [])],\n        dockerOptions\n      ).catch((e) => {\n        cliExit(e.err);\n      });\n    } catch (e) {\n      cliExit(e.err);\n    }\n  }\n}",
        "parameters": [
          {
            "name": "serviceDependencies",
            "text": "serviceDependencies: string[]",
            "type": "string[]"
          },
          {
            "name": "debug",
            "text": "debug: string[] = []",
            "type": "string[]"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/utils/env.ts",
    "exports": [
      {
        "type": "function",
        "name": " getEnvs",
        "text": "export function getEnvs() {\n  const result = { ...process.env };\n  delete result['TW_DD'];\n  return result;\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/cli/utils/exit.ts",
    "exports": [
      {
        "type": "function",
        "name": " cliExit",
        "text": "\n\nexport function cliExit(msg?: string): never {\n  if (msg) cliError(msg);\n  process.exit(1);\n}",
        "parameters": [
          {
            "name": "msg",
            "text": "msg?: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/utils/fs.ts",
    "exports": [
      {
        "type": "function",
        "name": " getPackagesRoot",
        "text": "\n\nexport async function getPackagesRoot() {\n  if (fs.existsSync('packages')) return path.resolve('packages');\n  const root = await getGitRoot();\n  if ((await getGitUrl()) === packagesGitUrl) {\n    return root;\n  }\n  const possiblePaths = [\n    path.resolve(root, 'packages'), // if we're in triplewhale/backend/\n    path.resolve(root, '..', 'packages'), // if we're in triplewhale/anything\n    path.resolve(root, '..', 'backend', 'packages'), // if we're in triplewhale/client\n  ];\n  for (let p of possiblePaths) if (fs.existsSync(p)) return p;\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " getPackageDir",
        "text": "\n\nexport function getPackageDir(packageName) {\n  const standard = `${cliConfig.packagesRoot}/${packageName}`;\n  if (fs.existsSync(`${standard}/packages.json`)) return standard;\n  const pathPassed = path.resolve(packageName);\n  if (fs.existsSync(`${pathPassed}/packages.json`)) return pathPassed;\n}",
        "parameters": [
          {
            "name": "packageName",
            "text": "packageName",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " getPackageInfo",
        "text": "\n\nexport async function getPackageInfo(pkg: string): Promise<{\n  packageName: string;\n  packagePath: string;\n  absolutePath: string;\n  runtime: 'node' | 'python';\n}> {\n  let packagePath;\n  let packageName;\n  let runtime;\n  let absolutePath;\n  const relativePath = (await getPathRelativeToGit()).slice(0, -1);\n\n  if (pkg === '.') {\n    // remove the trailing slash\n    packagePath = relativePath;\n  } else {\n    packagePath = relativePath ? `${relativePath}/${pkg}` : pkg;\n  }\n  absolutePath = path.resolve(pkg);\n\n  if (fs.existsSync(`${absolutePath}/package.json`)) {\n    runtime = 'node';\n    packageName = JSON.parse(fs.readFileSync(`${absolutePath}/package.json`).toString()).name;\n  } else if (fs.existsSync(`${absolutePath}/setup.py`)) {\n    runtime = 'python';\n    const setupPy = fs.readFileSync(`${absolutePath}/setup.py`, 'utf8');\n    // setup.py:\n    // name = \"tw_utils\"\n    packageName = setupPy.match(/name\\s*=\\s*['\"](.*)['\"]/)[1];\n  } else {\n    cliExit(`Could not find package.json or requirements.txt in ${pkg}`);\n  }\n\n  return { packageName, packagePath, absolutePath, runtime };\n}",
        "parameters": [
          {
            "name": "pkg",
            "text": "pkg: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " getGitRoot",
        "text": "\n\nexport async function getGitRoot() {\n  const pathRelativeToGit = await getPathRelativeToGit();\n  let relPath = '';\n  pathRelativeToGit\n    .split('/')\n    .filter(Boolean)\n    .map((_) => (relPath += '../'));\n  const root = path.resolve(relPath);\n  return root;\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " getServicesRoot",
        "text": "\n\nexport async function getServicesRoot() {\n  const gitRoot = await getGitRoot();\n  const servicesRoot = gitRoot + '/services';\n  return servicesRoot;\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " getPipelinesRoot",
        "text": "\n\nexport async function getPipelinesRoot() {\n  const gitRoot = await getGitRoot();\n  const pipelinesRoot = gitRoot + '/pipelines';\n  return pipelinesRoot;\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " serviceExits",
        "text": "\n\nexport function serviceExits(servicePath: string) {\n  return fs.existsSync(`${servicePath}/tw-config.json`);\n}",
        "parameters": [
          {
            "name": "servicePath",
            "text": "servicePath: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " pulumiProjectExists",
        "text": "\n\nexport function pulumiProjectExists(dir: string) {\n  return fs.existsSync(`${dir}/Pulumi.yaml`);\n}",
        "parameters": [
          {
            "name": "dir",
            "text": "dir: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " getServiceDir",
        "text": "\n\nexport function getServiceDir(serviceName: string) {\n  const standard = `${cliConfig.servicesRoot}/${serviceName}`;\n  if (fs.existsSync(`${standard}/${twConfigFile}`)) return standard;\n  const pathPassed = path.resolve(serviceName);\n  if (fs.existsSync(`${pathPassed}/${twConfigFile}`)) return pathPassed;\n}",
        "parameters": [
          {
            "name": "serviceName",
            "text": "serviceName: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " getServiceName",
        "text": "\n\nexport function getServiceName(serviceName: string) {\n  if (serviceName === '.') return path.resolve(serviceName).split('/').pop();\n  if (serviceName.includes('/')) return serviceName.split('/').pop();\n  return serviceName;\n}",
        "parameters": [
          {
            "name": "serviceName",
            "text": "serviceName: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " getServiceInfo",
        "text": "\n\nexport async function getServiceInfo(\n  srv: string,\n  isSaber: boolean = false\n): Promise<{\n  serviceName: string;\n  servicePath: string;\n  absolutePath: string;\n  runtime: 'node' | 'python';\n}> {\n  let serviceName;\n  let servicePath;\n  let absolutePath;\n  let runtime;\n\n  const root = isSaber ? cliConfig.pipelinesRoot : cliConfig.servicesRoot;\n\n  // remove the trailing slash\n  const relativePath = (await getPathRelativeToGit()).slice(0, -1);\n  const isPath = fs.existsSync(`${srv}/${twConfigFile}`);\n\n  if (isPath) {\n    absolutePath = path.resolve(srv);\n    if (srv === '.') {\n      servicePath = relativePath;\n    } else {\n      if (relativePath) {\n        servicePath = `${relativePath}/${srv}`;\n      } else {\n        servicePath = srv;\n      }\n    }\n  } else {\n    serviceName = srv;\n    absolutePath = `${root}/${srv}`;\n    servicePath = `${root}/${srv}`;\n  }\n  if (!absolutePath) {\n    absolutePath = servicePath;\n  }\n\n  if (fs.existsSync(`${absolutePath}/${twConfigFile}`)) {\n    serviceName = loadServiceConfig(absolutePath).env.SERVICE_ID;\n  } else {\n    cliExit(`Could not find tw-config.json in ${absolutePath} for service ${srv}`);\n  }\n\n  if (fs.existsSync(`${absolutePath}/package.json`)) {\n    runtime = 'node';\n  } else if (fs.existsSync(`${absolutePath}/requirements.txt`)) {\n    runtime = 'python';\n  }\n\n  return { serviceName, servicePath, absolutePath, runtime };\n}",
        "parameters": [
          {
            "name": "srv",
            "text": "srv: string",
            "type": "string"
          },
          {
            "name": "isSaber",
            "text": "isSaber: boolean = false",
            "type": "boolean"
          }
        ]
      },
      {
        "type": "function",
        "name": " guessClientRootSync",
        "text": "\n\nexport function guessClientRootSync() {\n  const possiblePaths = [\n    path.resolve('client'), // if we're in /triplewhale\n    path.resolve('..', 'client'), // if we're in triplewhale/backend/ or /triplewhale/client\n    path.resolve('..', '..', 'client'), // if we're in triplewhale/backend/packages\n  ];\n  for (let p of possiblePaths) if (fs.existsSync(p)) return p;\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " guessServicesRootSync",
        "text": "\n\nexport function guessServicesRootSync() {\n  const possiblePaths = [\n    path.resolve('services'), // if we're in /triplewhale\n    path.resolve('..', 'services'), // if we're in triplewhale/backend/ or /triplewhale/client\n    path.resolve('..', '..', 'services'), // if we're in triplewhale/backend/packages\n  ];\n  for (let p of possiblePaths) if (fs.existsSync(p)) return p;\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " guessPackagesRootSync",
        "text": "\n\nexport function guessPackagesRootSync() {\n  const possiblePaths = [\n    path.resolve('packages'), // if we're in /triplewhale\n    path.resolve('..', 'packages'), // if we're in triplewhale/backend/ or /triplewhale/client\n    path.resolve('..', '..', 'packages'), // if we're in triplewhale/backend/packages\n  ];\n  for (let p of possiblePaths) if (fs.existsSync(p)) return p;\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/cli/utils/gcloud.ts",
    "exports": [
      {
        "type": "function",
        "name": " getIdentityToken",
        "text": "\n\nexport async function getIdentityToken() {\n  if (idTokenCache) return idTokenCache;\n  const token = (\n    await runProcess({\n      log: false,\n      command: 'gcloud',\n      commandArgs: ['auth', 'print-identity-token'],\n    })\n  ).stdout.trim();\n  if (!token) {\n    throw Error(\"Can't get token from gcloud!\");\n  }\n  idTokenCache = token;\n  return token;\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " getAccessToken",
        "text": "\n\nexport async function getAccessToken() {\n  if (accessTokenCache) return accessTokenCache;\n  const token = (\n    await runProcess({\n      log: false,\n      command: 'gcloud',\n      commandArgs: ['auth', 'print-access-token'],\n    })\n  ).stdout.trim();\n  if (!token) {\n    throw Error(\"Can't get token from gcloud!\");\n  }\n  accessTokenCache = token;\n  return token;\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/cli/utils/getAllPackages.ts",
    "exports": [
      {
        "type": "function",
        "name": " getAllPackages",
        "text": "\n\nexport async function getAllPackages() {\n  const packagesRoot = cliConfig.packagesRoot;\n  return fs\n    .readdirSync(packagesRoot)\n    .filter((folder) => fs.existsSync(`${packagesRoot}/${folder}/package.json`));\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/cli/utils/getAllPipelines.ts",
    "exports": [
      {
        "type": "function",
        "name": " getAllPipelines",
        "text": "\n\nexport async function getAllPipelines() {\n  return fs\n    .readdirSync(cliConfig.pipelinesRoot)\n    .filter((service) => serviceExits(`${cliConfig.pipelinesRoot}/${service}`));\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/cli/utils/getAllPulumiProjects.ts",
    "exports": [
      {
        "type": "function",
        "name": " getAllPulumiProjects",
        "text": "\n\nexport async function getAllPulumiProjects(): Promise<string[]> {\n  const projectsAbsolutePaths = await getAllPulumiProjectsRecurse(cliConfig.gitRoot, 3);\n  const projectsRelativePaths = projectsAbsolutePaths.map((project) =>\n    path.relative(cliConfig.gitRoot, project)\n  );\n  return projectsRelativePaths;\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/cli/utils/getAllServices.ts",
    "exports": [
      {
        "type": "function",
        "name": " getAllServices",
        "text": "\n\nexport async function getAllServices(): Promise<ServicesIds[]> {\n  const services: unknown = fs\n    .readdirSync(cliConfig.servicesRoot)\n    .filter((service) => serviceExits(`${cliConfig.servicesRoot}/${service}`));\n  return services as ServicesIds[];\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/cli/utils/getServiceTags.ts",
    "exports": [
      {
        "type": "function",
        "name": " getServiceTags",
        "text": "\n\nexport async function getServiceTags(serviceId: string): Promise<\n  {\n    commitSha: string;\n    shortSha: string;\n    created: string;\n  }[]\n> {\n  try {\n    if (!client) {\n      client = new ar.ArtifactRegistryClient();\n      await client.initialize();\n    }\n    // TODO - make it available in staging too??\n    const versionResponse = await client.listVersions({\n      parent: `projects/shofifi/locations/us-central1/repositories/cloud-run/packages/${serviceId}`,\n      view: 'FULL',\n    });\n    return formatList(versionResponse[0]);\n  } catch (e) {\n    return [];\n  }\n}",
        "parameters": [
          {
            "name": "serviceId",
            "text": "serviceId: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/utils/git.ts",
    "exports": [
      {
        "name": " packagesGitUrl",
        "text": "\n\nexport const packagesGitUrl = 'git@github.com:Triple-Whale/backend-packages.git';",
        "type": "variable"
      },
      {
        "name": " fetchersPackagesGitUrl",
        "text": "\nexport const fetchersPackagesGitUrl = 'git@github.com:TripleWhaleKamatech/triplewhale-fetchers.git';",
        "type": "variable"
      },
      {
        "type": "function",
        "name": " getCurrentBranch",
        "text": "\n\nexport async function getCurrentBranch() {\n  const branch = (\n    await runProcess({\n      log: false,\n      command: 'git',\n      commandArgs: ['rev-parse', '--abbrev-ref', 'HEAD'],\n    })\n  ).stdout.trim();\n  return branch;\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " getPathRelativeToGit",
        "text": "\n\nexport async function getPathRelativeToGit() {\n  const path = (\n    await runProcess({\n      log: false,\n      command: 'git',\n      commandArgs: ['rev-parse', '--show-prefix'],\n    })\n  ).stdout.trim();\n  return path;\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " gitPull",
        "text": "\n\nexport async function gitPull() {\n  await runProcess({\n    log: false,\n    command: 'git',\n    commandArgs: ['pull'],\n  });\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " getRepoName",
        "text": "\n\nexport async function getRepoName() {\n  const repoDir = (\n    await runProcess({\n      log: false,\n      command: 'git',\n      commandArgs: ['rev-parse', '--show-toplevel'],\n    })\n  ).stdout.trim();\n  return path.basename(repoDir);\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/cli/utils/installAndBuildPackages.ts",
    "exports": [
      {
        "type": "function",
        "name": " runAndBuildPackages",
        "text": "\n\nexport async function runAndBuildPackages(packages) {\n  for (const pkg of packages) {\n    const packageJson = await loadPackageJson({ packagePath: pkg });\n    const name = packageJson.name + ' (package)';\n    runProcess({\n      name,\n      command: 'tw',\n      commandArgs: ['i', '--preserve'],\n      color: packageJson.tw.color,\n      log: true,\n      additionalArgs: { cwd: pkg },\n    }).then(() => {\n      runProcess({\n        name,\n        command: 'npm',\n        commandArgs: ['run', 'dev'],\n        color: packageJson.tw.color,\n        log: true,\n        additionalArgs: { cwd: pkg },\n      });\n    });\n  }\n}",
        "parameters": [
          {
            "name": "packages",
            "text": "packages",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/utils/linkPackage.ts",
    "exports": [
      {
        "type": "function",
        "name": " linkPackage",
        "text": "\n\nexport async function linkPackage(args: {\n  packages: string[];\n  dir: string;\n  color?: string;\n  force?: boolean;\n}) {\n  const { packages, dir, force, color } = args;\n\n  const globalLinks = await getGlobalLinks();\n  for (const packageName of packages) {\n    if (!globalLinks.includes(`@tw/${packageName}`)) {\n      await createGlobalLink(packageName);\n    }\n  }\n  const commandArgs = ['link', ...packages.map((pack) => '@tw/' + pack)];\n  if (force) commandArgs.push('-f');\n  await runProcess({\n    command: 'npm',\n    commandArgs,\n    color: color,\n    additionalArgs: { cwd: resolve(dir) },\n    log: true,\n  });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  packages: string[];\n  dir: string;\n  color?: string;\n  force?: boolean;\n}",
            "type": "{\n  packages: string[];\n  dir: string;\n  color?: string;\n  force?: boolean;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/utils/logs.ts",
    "exports": [
      {
        "name": " chalkError",
        "text": "\n\nexport const chalkError = chalk.hex('#f44336');",
        "type": "variable"
      },
      {
        "name": " chalkWarning",
        "text": "\nexport const chalkWarning = chalk.hex('#fafa23');",
        "type": "variable"
      },
      {
        "name": " chalkLog",
        "text": "\nexport const chalkLog = chalk.hex('#03cafc');",
        "type": "variable"
      },
      {
        "name": " chalkSuccess",
        "text": "\nexport const chalkSuccess = chalk.hex('#4BB543');",
        "type": "variable"
      },
      {
        "type": "function",
        "name": " cliError",
        "text": "\n\nexport function cliError(error: string) {\n  console.error(`${chalkError(error)}`);\n}",
        "parameters": [
          {
            "name": "error",
            "text": "error: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " cliWarning",
        "text": "\n\nexport function cliWarning(error: string) {\n  console.warn(`${chalkWarning(error)}`);\n}",
        "parameters": [
          {
            "name": "error",
            "text": "error: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " cliLog",
        "text": "\n\nexport function cliLog(message: string) {\n  console.error(`${chalkLog(message)}`);\n}",
        "parameters": [
          {
            "name": "message",
            "text": "message: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " cliSuccess",
        "text": "\n\nexport function cliSuccess(message: string) {\n  console.error(`${chalkSuccess(message)}`);\n}",
        "parameters": [
          {
            "name": "message",
            "text": "message: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/utils/nodemon.ts",
    "exports": [
      {
        "type": "function",
        "name": " runNodemonProcess",
        "text": "\n\nexport function runNodemonProcess(args: {\n  command: string;\n  commandArgs?: string[];\n  nodemonSettings?: nodemon.Settings;\n}): Promise<void> {\n  const { command, commandArgs, nodemonSettings } = args;\n  const promise = new Promise<void>((resolve, reject) => {\n    const serviceProc = nodemon({\n      exec: command,\n      args: commandArgs,\n      ext: 'py',\n      ...nodemonSettings,\n    });\n    serviceProc.on('restart', () => {\n      console.log('restarting due to changes...');\n    });\n    serviceProc.on('exit', () => {\n      resolve();\n    });\n  });\n  return promise;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  command: string;\n  commandArgs?: string[];\n  nodemonSettings?: nodemon.Settings;\n}",
            "type": "{\n  command: string;\n  commandArgs?: string[];\n  nodemonSettings?: nodemon.Settings;\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " spawnNodemonInTw",
        "text": "\n\nexport function spawnNodemonInTw(args: {\n  name?: string;\n  command: string;\n  commandArgs?: string[];\n  color?: string;\n  additionalArgs?: SpawnOptionsWithoutStdio;\n  log?: boolean;\n  nodemonSettings?: nodemon.Settings;\n}) {\n  const { name, color, additionalArgs, log, command, commandArgs, nodemonSettings } = args;\n  return runProcess({\n    name,\n    command: 'tw',\n    commandArgs: ['cli:nodemon', JSON.stringify({ command, commandArgs, nodemonSettings })],\n    additionalArgs,\n    color: color,\n    log: log,\n  });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name?: string;\n  command: string;\n  commandArgs?: string[];\n  color?: string;\n  additionalArgs?: SpawnOptionsWithoutStdio;\n  log?: boolean;\n  nodemonSettings?: nodemon.Settings;\n}",
            "type": "{\n  name?: string;\n  command: string;\n  commandArgs?: string[];\n  color?: string;\n  additionalArgs?: SpawnOptionsWithoutStdio;\n  log?: boolean;\n  nodemonSettings?: nodemon.Settings;\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " runNodemonFromArgv",
        "text": "\n\nexport function runNodemonFromArgv(argv) {\n  const args = JSON.parse(argv._[1]);\n  runNodemonProcess(args);\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/utils/npm.ts",
    "exports": [
      {
        "type": "function",
        "name": " npmVersion",
        "text": "\n\nexport async function npmVersion(\n  packagePath: string,\n  type: 'patch' | 'prerelease',\n  branch?: string\n) {\n  const packageJson = await loadPackageJson({ packagePath });\n  if (!packageJson.name.startsWith('@tw/')) {\n    cliExit(`Package name must start with @tw/ but got ${packageJson.name}`);\n  }\n  const semver = new SemVer(packageJson.version);\n  let version;\n  if (type === 'prerelease') {\n    const sha = await getGitSha();\n    version = semver.inc(type, `${branch}-${sha}`);\n  } else {\n    version = semver.inc(type);\n  }\n  return version.version.replaceAll('_', '-');\n}",
        "parameters": [
          {
            "name": "packagePath",
            "text": "packagePath: string",
            "type": "string"
          },
          {
            "name": "type",
            "text": "type: 'patch' | 'prerelease'",
            "type": "'patch' | 'prerelease'"
          },
          {
            "name": "branch",
            "text": "branch?: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/utils/npmAuth.ts",
    "exports": [
      {
        "name": " globalNpmrcFile",
        "text": "\n\nexport const globalNpmrcFile = `${os.homedir()}/.npmrc`;",
        "type": "variable"
      },
      {
        "type": "function",
        "name": " runNpmAuth",
        "text": "\n\nexport async function runNpmAuth(argv?) {\n  const force = argv?.f;\n  const expire = moment(configStore.get('npmAuth') || new Date());\n  const now = moment();\n  if (expire <= now.add(10, 'minutes') || force) {\n    try {\n      await runProcess({\n        name: 'general',\n        command: 'npx',\n        commandArgs: ['google-artifactregistry-auth', '--repo-config', globalNpmrcFile],\n        color: 'FA910D',\n        log: true,\n      });\n      configStore.set('npmAuth', now.add(1, 'hours'));\n    } catch (e) {\n      await runProcess({\n        command: 'npm',\n        commandArgs: [\n          'config',\n          'set',\n          '@tw:registry',\n          'https://us-central1-npm.pkg.dev/shofifi/npm-packages/',\n        ],\n      }).catch(console.error);\n      cliError('Failed to refresh auth, please trying again.');\n      await runNpmAuth(argv);\n    }\n  } else {\n    cliLog('No need to refresh auth.');\n  }\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv?",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/utils/pip.ts",
    "exports": [
      {
        "type": "function",
        "name": " pipVersion",
        "text": "\n\nexport async function pipVersion(currentVersion: string, type: 'patch' | 'prerelease') {\n  const semver = new SemVer(currentVersion);\n  let version;\n  let versionSuffix: string;\n  if (type === 'prerelease') {\n    const branch = await getCurrentBranch();\n    const sha = (await getGitSha()).slice(0, 7);\n    versionSuffix = `${branch}.${sha}`.replaceAll('-', '.');\n    version = semver.inc(type, versionSuffix);\n  } else {\n    version = semver.inc(type);\n  }\n  if (versionSuffix) {\n    versionSuffix = `+${versionSuffix}`;\n    version.version = version.version.slice(0, -2);\n  }\n  return { version: version.version, versionSuffix };\n}",
        "parameters": [
          {
            "name": "currentVersion",
            "text": "currentVersion: string",
            "type": "string"
          },
          {
            "name": "type",
            "text": "type: 'patch' | 'prerelease'",
            "type": "'patch' | 'prerelease'"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/utils/pulumi.ts",
    "exports": [
      {
        "name": " STACK_PROJECT_KEY",
        "text": "\n\nexport const STACK_PROJECT_KEY = 'gcp:project';",
        "type": "variable"
      },
      {
        "type": "function",
        "name": " getPulumiStacks",
        "text": "\n\nexport function getPulumiStacks(dirs: string[]): Record<string, any> {\n  const result = {};\n  if (!dirs?.length) {\n    for (const projectId of projectIds) {\n      result[projectId] = { config: { [STACK_PROJECT_KEY]: projectId } };\n    }\n    return result;\n  }\n  const allStacks = [];\n  for (const dir of dirs) {\n    const stackFileNames = fs\n      .readdirSync(dir)\n      .filter((v) => v.endsWith('.yaml') && v.startsWith('Pulumi.') && v !== 'Pulumi.yaml');\n    allStacks.push(...stackFileNames);\n  }\n  const stackFileNames = [...new Set(allStacks)].filter(\n    (v) => allStacks.filter((a) => a === v).length === dirs.length\n  );\n  for (const stackFileName of stackFileNames) {\n    const stackName = stackFileName.split('.')[1];\n    result[stackName] = yaml.parse(fs.readFileSync(`${dirs[0]}/${stackFileName}`).toString());\n  }\n  return result;\n}",
        "parameters": [
          {
            "name": "dirs",
            "text": "dirs: string[]",
            "type": "string[]"
          }
        ]
      },
      {
        "type": "function",
        "name": " selectStacks",
        "text": "\n\nexport async function selectStacks(stacks: string[]) {\n  const stacksPrompt = new MultiSelect({\n    name: 'value',\n    message: 'Choose the Stacks',\n    choices: stacks.map((projectId) => {\n      return { name: projectId, value: projectId };\n    }),\n  });\n  try {\n    const stacksRes = await stacksPrompt.run();\n    return stacksRes;\n  } catch (e) {\n    exit();\n  }\n}",
        "parameters": [
          {
            "name": "stacks",
            "text": "stacks: string[]",
            "type": "string[]"
          }
        ]
      },
      {
        "type": "function",
        "name": " selectStack",
        "text": "\n\nexport async function selectStack(stacks: string[]) {\n  const stacksPrompt = new Select({\n    name: 'value',\n    message: 'Choose the Stack',\n    choices: stacks.map((projectId) => {\n      return { name: projectId, value: projectId };\n    }),\n  });\n  try {\n    const stacksRes = await stacksPrompt.run();\n    return stacksRes;\n  } catch (e) {\n    exit();\n  }\n}",
        "parameters": [
          {
            "name": "stacks",
            "text": "stacks: string[]",
            "type": "string[]"
          }
        ]
      },
      {
        "type": "function",
        "name": " loadPulumiProject",
        "text": "\n\nexport async function loadPulumiProject(dir: string): Promise<{\n  name: string;\n  runtime: 'nodejs';\n  description: string;\n}> {\n  const yamlContents = yaml.parse(fs.readFileSync(`${dir}/Pulumi.yaml`).toString());\n  return yamlContents;\n}",
        "parameters": [
          {
            "name": "dir",
            "text": "dir: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/utils/python.ts",
    "exports": [
      {
        "type": "function",
        "name": " getPythonCommand",
        "text": "\n\nexport async function getPythonCommand() {\n  if (python) {\n    return python;\n  }\n  if (commandExistsSync('python')) {\n    python = 'python';\n  } else if (commandExistsSync('python3.10')) {\n    // 11 is not widely supported yet\n    python = 'python3.10';\n  } else if (commandExistsSync('python3')) {\n    python = 'python3';\n  } else {\n    cliExit('Could not find python or python3, trying to install python3.');\n  }\n  return python;\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " getPipCommand",
        "text": "\n\nexport async function getPipCommand() {\n  if (pip) {\n    return pip;\n  }\n  if (commandExistsSync('pip')) {\n    pip = 'pip';\n  } else if (commandExistsSync('pip3')) {\n    pip = 'pip3';\n  } else {\n    cliExit('Could not find pip or pip3, trying to install pip3.');\n  }\n  return pip;\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/cli/utils/runNpmTest.ts",
    "exports": [
      {
        "type": "function",
        "name": " runNpmTest",
        "text": "\n\nexport async function runNpmTest(\n  args: {\n    name: string;\n    absolutePath: string;\n  },\n  argv: any\n) {\n  const { name, absolutePath } = args;\n\n  let serviceEnv = {};\n  try {\n    const serviceConfig = loadServiceConfig(absolutePath);\n    serviceEnv = serviceConfig.env || {};\n  } catch (e) {}\n\n  return new Promise<void>((resolve, reject) => {\n    const proc = spawn(\n      'npm',\n      ['test', '--if-present', '--prefix', absolutePath, '--', '--silent'],\n      {\n        stdio: 'inherit',\n        env: {\n          ...process.env,\n          ...serviceEnv,\n        },\n      }\n    );\n\n    proc.on('close', (code) => {\n      if (code === 0) {\n        resolve();\n      } else {\n        reject(new Error(`Tests for ${args.name} failed`));\n      }\n    });\n  });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n    name: string;\n    absolutePath: string;\n  }",
            "type": "{\n    name: string;\n    absolutePath: string;\n  }"
          },
          {
            "name": "argv",
            "text": "argv: any",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/utils/runProcess.ts",
    "exports": [
      {
        "type": "function",
        "name": " runProcess",
        "text": "\n\nexport function runProcess(args: {\n  name?: string;\n  command: string;\n  commandArgs?: string[];\n  color?: string;\n  additionalArgs?: SpawnOptions;\n  log?: boolean;\n}): Promise<{ stdout: string; stderr: string }> {\n  const { name, command, commandArgs, color, additionalArgs, log } = args;\n  let onData;\n  let onClose;\n  if (log) {\n    onData = (data) => serviceLogStream(data, name, color);\n    onClose = (code) => serviceLogStream(`finished with code: ${code}`, name, color);\n  }\n  return runCommand({ command, commandArgs, additionalArgs, log, onData, onClose });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name?: string;\n  command: string;\n  commandArgs?: string[];\n  color?: string;\n  additionalArgs?: SpawnOptions;\n  log?: boolean;\n}",
            "type": "{\n  name?: string;\n  command: string;\n  commandArgs?: string[];\n  color?: string;\n  additionalArgs?: SpawnOptions;\n  log?: boolean;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/utils/serviceAccount.ts",
    "exports": [
      {
        "type": "function",
        "name": " setServiceAccount",
        "text": "\n\nexport default function setServiceAccount() {\n  process.env.GOOGLE_APPLICATION_CREDENTIALS = path.resolve(\n    `service-account-${process.env.PROJECT_ID}.json`\n  );\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/cli/utils/upTools.ts",
    "exports": [
      {
        "type": "function",
        "name": " getPipelineId",
        "text": "\n\nexport async function getPipelineId(argv: any) {\n  let pipelineIds: string[] = argv.services[0] || argv._.slice(1)[0];\n\n  if (argv.select || !pipelineIds.length) {\n    pipelineIds = await selectPipelines(false);\n  }\n  return [pipelineIds];\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv: any",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " getServiceIds",
        "text": "\n\nexport async function getServiceIds(argv: any) {\n  let serviceIds: string[] = argv.services;\n\n  if (argv.tag) {\n    serviceIds = serviceIds.concat(await getServicesFromTags(argv.tag));\n    serviceIds = [...new Set(serviceIds)];\n  }\n  if (argv.select || !serviceIds.length) {\n    serviceIds = await selectServices();\n  }\n  return serviceIds;\n}",
        "parameters": [
          {
            "name": "argv",
            "text": "argv: any",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " checkEmulators",
        "text": "\n\nexport async function checkEmulators(args: { projectId: string }) {\n  let resourcesCreated = false;\n  let times = 0;\n\n  try {\n    const res = await axios.get('http://0.0.0.0:8027/health');\n    resourcesCreated = res.data.resourcesCreated;\n    cliConfig.emulatorsReady = true;\n    if (resourcesCreated) {\n      cliSuccess('Emulators Ready!');\n    }\n  } catch {}\n  while (!cliConfig.emulatorsReady && cliConfig.proxyPort) {\n    times++;\n    cliWarning('Emulators Not Ready Yet.');\n    await sleep(4000);\n  }\n\n  if (!resourcesCreated) {\n    type EmulatorResources = {\n      topics: any[];\n      subscriptions: any[];\n      buckets: any[];\n      queues: any[];\n    };\n    let resources: any;\n    try {\n      const stagingResources: EmulatorResources = await downloadFile(\n        `devops-triple-whale-staging`,\n        'emulators/cloud-resources.json',\n        {\n          forceCloud: true,\n        }\n      );\n      const prodResources: EmulatorResources = await downloadFile(\n        `devops-shofifi`,\n        'emulators/cloud-resources.json',\n        {\n          forceCloud: true,\n        }\n      );\n      resources = {\n        'triple-whale-staging': stagingResources,\n        shofifi: prodResources,\n      };\n    } catch {}\n    const maxTries = 5;\n    let tries = 0;\n    let loadedResources = false;\n    while (resources && !loadedResources && tries++ < maxTries) {\n      try {\n        await axios.post(`http://0.0.0.0:8027/start-emulators`, resources, {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n        loadedResources = true;\n      } catch {\n        await sleep(2000);\n      }\n    }\n    if (!loadedResources) {\n      cliError('Failed to load emulator resources');\n    }\n  }\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { projectId: string }",
            "type": "{ projectId: string }"
          }
        ]
      },
      {
        "type": "function",
        "name": " checkTemporal",
        "text": "\n\nexport async function checkTemporal() {\n  let times = 0;\n  const connectionOptions = {\n    address: '0.0.0.0:7233',\n    connectTimeout: 1000,\n  };\n  while (!cliConfig.temporalReady) {\n    try {\n      await Connection.connect(connectionOptions);\n      cliSuccess('Temporal Ready');\n      cliConfig.temporalReady = true;\n      break;\n    } catch {}\n    times++;\n    cliWarning('Temporal Not Ready Yet.');\n    await sleep(4000);\n    if (times > 15) {\n      break;\n    }\n  }\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/cli/utils/vpn.ts",
    "exports": [
      {
        "type": "function",
        "name": " testVpn",
        "text": "\n\nexport async function testVpn(baseUrl: string): Promise<{ ok: boolean; old?: boolean }> {\n  const promise = new Promise<{ ok: boolean; old?: boolean }>((resolve, reject) => {\n    try {\n      const addr = baseUrl.split('//')[1];\n      if (checked[addr] !== undefined) {\n        return resolve({ ok: checked[addr], old: true });\n      }\n      const socket = net.createConnection(80, addr, () => {\n        clearTimeout(timeout);\n        socket.destroy();\n        checked[addr] = true;\n        resolve({ ok: true });\n      });\n      socket.on('error', () => {\n        socket.destroy();\n        checked[addr] = false;\n        resolve({ ok: false });\n      });\n      const timeout = setTimeout(() => {\n        socket.destroy();\n        resolve({ ok: false });\n      }, 10000);\n    } catch {\n      reject({ ok: false });\n    }\n  });\n  return promise;\n}",
        "parameters": [
          {
            "name": "baseUrl",
            "text": "baseUrl: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " vpnErrorLog",
        "text": "\n\nexport function vpnErrorLog() {\n  cliError('You are trying to proxy to a internal service, but you are not connected to the VPN.');\n  cliError(`Please connect to the VPN on project ${process.env.PROJECT_ID} and try again.`);\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/cli/utils.ts",
    "exports": [
      {
        "type": "function",
        "name": " serviceLogStream",
        "text": "\n\nexport function serviceLogStream(stream, service?, color?) {\n  const str = stream.toString();\n  const lines = str.split('\\n');\n  lines.forEach((line: any) => {\n    let message = line;\n    if (!line) return;\n    if (service) {\n      message = `${chalk.hex(color || '5032a8')(service)} | ` + message;\n    }\n    console.log(message);\n  });\n}",
        "parameters": [
          {
            "name": "stream",
            "text": "stream",
            "type": "any"
          },
          {
            "name": "service",
            "text": "service?",
            "type": "any"
          },
          {
            "name": "color",
            "text": "color?",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " loadServiceConfig",
        "text": "\n\nexport function loadServiceConfig(serviceDir: string): ServiceConfig {\n  const data = fs.readFileSync(`${serviceDir}/tw-config.json`);\n  return JSON.parse(data.toString());\n}",
        "parameters": [
          {
            "name": "serviceDir",
            "text": "serviceDir: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " loadPackageJson",
        "text": "\n\nexport async function loadPackageJson(args: { packagePath?: string }) {\n  const { packagePath } = args;\n  const data = fs.readFileSync(`${packagePath}/package.json`);\n  return JSON.parse(data.toString());\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { packagePath?: string }",
            "type": "{ packagePath?: string }"
          }
        ]
      },
      {
        "type": "function",
        "name": " getDefaultNodemonConfig",
        "text": "\n\nexport function getDefaultNodemonConfig(entrypoint: string = 'dist/app.js') {\n  const command = `npm run build && node --expose-gc --inspect=0.0.0.0:$\\{DEBUG_PORT\\} ${entrypoint}`;\n  return {\n    watch: ['src/'],\n    execMap: {\n      js: command,\n      ts: command,\n    },\n    ext: 'js,ts',\n    delay: 2,\n  };\n}",
        "parameters": [
          {
            "name": "entrypoint",
            "text": "entrypoint: string = 'dist/app.js'",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " getSecrets",
        "text": "\n\nexport async function getSecrets(serviceId: string, projectId?: string): Promise<string> {\n  const project = projectId || process.env.PROJECT_ID;\n  try {\n    const client = new SecretManagerServiceClient();\n    const [accessResponse] = await client.accessSecretVersion({\n      name: `projects/${project}/secrets/${serviceId}-env/versions/latest`,\n    });\n    const responsePayload = accessResponse.payload.data.toString();\n    return responsePayload;\n  } catch (e) {\n    if (e.code === 7) {\n      if (project === 'shofifi') {\n        cliWarning(\n          `Could not get secrets for ${serviceId} on ${project}, trying to get from triple-whale-staging.`\n        );\n        return await getSecrets(serviceId, 'triple-whale-staging');\n      }\n      cliExit(`You do not have access to Secret Manger for ${serviceId} on project ${project}!`);\n    }\n    cliWarning('no secrets for ' + serviceId);\n    return '';\n  }\n}",
        "parameters": [
          {
            "name": "serviceId",
            "text": "serviceId: string",
            "type": "string"
          },
          {
            "name": "projectId",
            "text": "projectId?: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " getUserEnv",
        "text": "\n\nexport function getUserEnv(serviceDir) {\n  if (fs.existsSync(`${serviceDir}/.env`)) {\n    const envData = fs.readFileSync(`${serviceDir}/.env`);\n    return envToObject(envData.toString());\n  }\n}",
        "parameters": [
          {
            "name": "serviceDir",
            "text": "serviceDir",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " getLinkedPackages",
        "text": "\n\nexport function getLinkedPackages(serviceDir) {\n  const twDepsDir = `${serviceDir}/node_modules/@tw`;\n  if (!fs.existsSync(twDepsDir)) return [];\n  const packages = fs.readdirSync(twDepsDir);\n  return packages\n    .filter((packagePath) => fs.lstatSync(`${twDepsDir}/${packagePath}`).isSymbolicLink())\n    .map((pkg) => path.resolve(twDepsDir, fs.readlinkSync(`${twDepsDir}/${pkg}`)));\n}",
        "parameters": [
          {
            "name": "serviceDir",
            "text": "serviceDir",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " envToObject",
        "text": "\n\nexport function envToObject(envString) {\n  let result = {};\n  envString.split('\\n').map((line) => {\n    const [key, value] = line.split('=', 2);\n    if (key && value) {\n      result[key] = value;\n    }\n  });\n  return result;\n}",
        "parameters": [
          {
            "name": "envString",
            "text": "envString",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " objectToEnv",
        "text": "\n\nexport function objectToEnv(envObject) {\n  const result = [];\n  Object.keys(envObject).map((key) => {\n    result.push(`${key}=${envObject[key]}`);\n  });\n  return result;\n}",
        "parameters": [
          {
            "name": "envObject",
            "text": "envObject",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/cli/webhooks-pull/index.ts",
    "exports": []
  },
  {
    "file": "@tw/constants/FacebookAds/index.ts",
    "exports": [
      {
        "name": " FACEBOOK_FEED_PLACEMENT_NAME",
        "text": "//ad placement names\n\nexport const FACEBOOK_FEED_PLACEMENT_NAME = 'facebook_feed';",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_RIGHT_HAND_COLUMN_PLACEMENT_NAME",
        "text": "\nexport const FACEBOOK_RIGHT_HAND_COLUMN_PLACEMENT_NAME = 'facebook_right_hand_column';",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_MARKETPLACE_PLACEMENT_NAME",
        "text": "\nexport const FACEBOOK_MARKETPLACE_PLACEMENT_NAME = 'facebook_marketplace';",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_VIDEO_FEEDS_PLACEMENT_NAME",
        "text": "\nexport const FACEBOOK_VIDEO_FEEDS_PLACEMENT_NAME = 'facebook_video_feeds';",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_STORY_PLACEMENT_NAME",
        "text": "\nexport const FACEBOOK_STORY_PLACEMENT_NAME = 'facebook_story';",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_SEARCH_PLACEMENT_NAME",
        "text": "\nexport const FACEBOOK_SEARCH_PLACEMENT_NAME = 'facebook_search';",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_INSTREAM_VIDEO_PLACEMENT_NAME",
        "text": "\nexport const FACEBOOK_INSTREAM_VIDEO_PLACEMENT_NAME = 'facebook_instream_video';",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_FACEBOOK_REELS_PLACEMENT_NAME",
        "text": "\nexport const FACEBOOK_FACEBOOK_REELS_PLACEMENT_NAME = 'facebook_facebook_reels';",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_FEED_PLACEMENT_NAME",
        "text": "\nexport const INSTAGRAM_FEED_PLACEMENT_NAME = 'instagram_feed';",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_STREAM_PLACEMENT_NAME",
        "text": "\nexport const INSTAGRAM_STREAM_PLACEMENT_NAME = 'instagram_stream';",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_EXPLORE_PLACEMENT_NAME",
        "text": "\nexport const INSTAGRAM_EXPLORE_PLACEMENT_NAME = 'instagram_explore';",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_EXPLORE_CONTEXTUAL_PLACEMENT_NAME",
        "text": "\nexport const INSTAGRAM_EXPLORE_CONTEXTUAL_PLACEMENT_NAME = 'instagram_explore_contextual';",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_PROFILE_PLACEMENT_NAME",
        "text": "\nexport const INSTAGRAM_PROFILE_PLACEMENT_NAME = 'instagram_profile';",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_REELS_PLACEMENT_NAME",
        "text": "\nexport const INSTAGRAM_REELS_PLACEMENT_NAME = 'instagram_reels';",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_SHOP_PLACEMENT_NAME",
        "text": "\nexport const INSTAGRAM_SHOP_PLACEMENT_NAME = 'instagram_shop';",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_STORY_PLACEMENT_NAME",
        "text": "\nexport const INSTAGRAM_STORY_PLACEMENT_NAME = 'instagram_story';",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_EXPLORE_GRID_HOME_PLACEMENT_NAME",
        "text": "\nexport const INSTAGRAM_EXPLORE_GRID_HOME_PLACEMENT_NAME = 'instagram_explore_grid_home';",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_EXPLORE_IMMERSIVE_PLACEMENT_NAME",
        "text": "\nexport const INSTAGRAM_EXPLORE_IMMERSIVE_PLACEMENT_NAME = 'instagram_explore_immersive';",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_PROFILE_FEED_PLACEMENT_NAME",
        "text": "\nexport const INSTAGRAM_PROFILE_FEED_PLACEMENT_NAME = 'instagram_profile_feed';",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_INSTANT_ARTICLES_PLACEMENT_NAME",
        "text": "\nexport const FACEBOOK_INSTANT_ARTICLES_PLACEMENT_NAME = 'facebook_instant_articles';",
        "type": "variable"
      },
      {
        "name": " MESSENGER_STORY_PLACEMENT_NAME",
        "text": "\nexport const MESSENGER_STORY_PLACEMENT_NAME = 'messenger_story';",
        "type": "variable"
      },
      {
        "name": " AUDIENCE_NETWORK_CLASSIC_PLACEMENT_NAME",
        "text": "\nexport const AUDIENCE_NETWORK_CLASSIC_PLACEMENT_NAME = 'audience_network_classic';",
        "type": "variable"
      },
      {
        "name": " AUDIENCE_NETWORK_BANNER_PLACEMENT_NAME",
        "text": "\nexport const AUDIENCE_NETWORK_BANNER_PLACEMENT_NAME = 'audience_network_banner';",
        "type": "variable"
      },
      {
        "name": " AUDIENCE_NETWORK_REWARDED_VIDEO_PLACEMENT_NAME",
        "text": "\nexport const AUDIENCE_NETWORK_REWARDED_VIDEO_PLACEMENT_NAME = 'audience_network_rewarded_video';",
        "type": "variable"
      },
      {
        "name": " MESSENGER_HOME_PLACEMENT_NAME",
        "text": "\nexport const MESSENGER_HOME_PLACEMENT_NAME = 'messenger_home';",
        "type": "variable"
      },
      {
        "name": " SPONSORED_MESSAGES_PLACEMENT_NAME",
        "text": "\nexport const SPONSORED_MESSAGES_PLACEMENT_NAME = 'sponsored_messages';",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_FEED_PLACEMENT",
        "text": "\n\n//ad placements\nexport const FACEBOOK_FEED_PLACEMENT = 'feed';",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_RIGHT_HAND_COLUMN_PLACEMENT",
        "text": "\nexport const FACEBOOK_RIGHT_HAND_COLUMN_PLACEMENT = 'right_hand_column';",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_MARKETPLACE_PLACEMENT",
        "text": "\nexport const FACEBOOK_MARKETPLACE_PLACEMENT = 'marketplace';",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_VIDEO_FEEDS_PLACEMENT",
        "text": "\nexport const FACEBOOK_VIDEO_FEEDS_PLACEMENT = 'video_feeds';",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_STORY_PLACEMENT",
        "text": "\nexport const FACEBOOK_STORY_PLACEMENT = 'story';",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_SEARCH_PLACEMENT",
        "text": "\nexport const FACEBOOK_SEARCH_PLACEMENT = 'search';",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_INSTREAM_VIDEO_PLACEMENT",
        "text": "\nexport const FACEBOOK_INSTREAM_VIDEO_PLACEMENT = 'instream_video';",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_FACEBOOK_REELS_PLACEMENT",
        "text": "\nexport const FACEBOOK_FACEBOOK_REELS_PLACEMENT = 'facebook_reels';",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_FEED_PLACEMENT",
        "text": "\nexport const INSTAGRAM_FEED_PLACEMENT = 'feed';",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_STREAM_PLACEMENT",
        "text": " //don't know if this is correct\nexport const INSTAGRAM_STREAM_PLACEMENT = 'stream';",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_STORY_PLACEMENT",
        "text": "\nexport const INSTAGRAM_STORY_PLACEMENT = 'story';",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_SHOP_PLACEMENT",
        "text": "\nexport const INSTAGRAM_SHOP_PLACEMENT = 'shop';",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_EXPLORE_PLACEMENT",
        "text": "\nexport const INSTAGRAM_EXPLORE_PLACEMENT = 'explore';",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_EXPLORE_HOME_PLACEMENT",
        "text": "\nexport const INSTAGRAM_EXPLORE_HOME_PLACEMENT = 'explore_home';",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_REELS_PLACEMENT",
        "text": "\nexport const INSTAGRAM_REELS_PLACEMENT = 'reels';",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_PROFILE_FEED_PLACEMENT",
        "text": "\nexport const INSTAGRAM_PROFILE_FEED_PLACEMENT = 'profile_feed';",
        "type": "variable"
      },
      {
        "name": " AUDIENCE_NETWORK_CLASSIC_PLACEMENT",
        "text": "\nexport const AUDIENCE_NETWORK_CLASSIC_PLACEMENT = 'classic';",
        "type": "variable"
      },
      {
        "name": " AUDIENCE_NETWORK_REWARDED_VIDEO_PLACEMENT",
        "text": "\nexport const AUDIENCE_NETWORK_REWARDED_VIDEO_PLACEMENT = 'rewarded_video';",
        "type": "variable"
      },
      {
        "name": " MESSENGER_HOME_PLACEMENT",
        "text": "\nexport const MESSENGER_HOME_PLACEMENT = 'messenger_home';",
        "type": "variable"
      },
      {
        "name": " SPONSORED_MESSAGES_PLACEMENT",
        "text": "\nexport const SPONSORED_MESSAGES_PLACEMENT = 'sponsored_messages';",
        "type": "variable"
      },
      {
        "name": " MESSENGER_STORY_PLACEMENT",
        "text": "\nexport const MESSENGER_STORY_PLACEMENT = 'story';",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_INSTANT_ARTICLES_PLACEMENT",
        "text": "\n\n//unmapped weird placements\nexport const FACEBOOK_INSTANT_ARTICLES_PLACEMENT = 'instant_articles';",
        "type": "variable"
      },
      {
        "name": " placement_names_to_type",
        "text": "\n\nexport const placement_names_to_type = {\n  [FACEBOOK_FEED_PLACEMENT_NAME]: FACEBOOK_FEED_PLACEMENT,\n  [FACEBOOK_RIGHT_HAND_COLUMN_PLACEMENT_NAME]: FACEBOOK_RIGHT_HAND_COLUMN_PLACEMENT,\n  [FACEBOOK_MARKETPLACE_PLACEMENT_NAME]: FACEBOOK_MARKETPLACE_PLACEMENT,\n  [FACEBOOK_VIDEO_FEEDS_PLACEMENT_NAME]: FACEBOOK_VIDEO_FEEDS_PLACEMENT,\n  [FACEBOOK_STORY_PLACEMENT_NAME]: FACEBOOK_STORY_PLACEMENT,\n  [FACEBOOK_SEARCH_PLACEMENT_NAME]: FACEBOOK_SEARCH_PLACEMENT,\n  [FACEBOOK_INSTREAM_VIDEO_PLACEMENT_NAME]: FACEBOOK_INSTREAM_VIDEO_PLACEMENT,\n  [FACEBOOK_FACEBOOK_REELS_PLACEMENT_NAME]: FACEBOOK_FACEBOOK_REELS_PLACEMENT,\n  [INSTAGRAM_FEED_PLACEMENT_NAME]: INSTAGRAM_FEED_PLACEMENT,\n  [INSTAGRAM_STREAM_PLACEMENT_NAME]: INSTAGRAM_STREAM_PLACEMENT,\n  [INSTAGRAM_STORY_PLACEMENT_NAME]: INSTAGRAM_STORY_PLACEMENT,\n  [INSTAGRAM_SHOP_PLACEMENT_NAME]: INSTAGRAM_SHOP_PLACEMENT,\n  [INSTAGRAM_EXPLORE_PLACEMENT_NAME]: INSTAGRAM_EXPLORE_PLACEMENT,\n  [INSTAGRAM_EXPLORE_GRID_HOME_PLACEMENT_NAME]: INSTAGRAM_EXPLORE_HOME_PLACEMENT,\n  [INSTAGRAM_REELS_PLACEMENT_NAME]: INSTAGRAM_REELS_PLACEMENT,\n  [INSTAGRAM_PROFILE_FEED_PLACEMENT_NAME]: INSTAGRAM_PROFILE_FEED_PLACEMENT,\n  [AUDIENCE_NETWORK_CLASSIC_PLACEMENT_NAME]: AUDIENCE_NETWORK_CLASSIC_PLACEMENT,\n  [AUDIENCE_NETWORK_REWARDED_VIDEO_PLACEMENT_NAME]: AUDIENCE_NETWORK_REWARDED_VIDEO_PLACEMENT,\n  [MESSENGER_HOME_PLACEMENT_NAME]: MESSENGER_HOME_PLACEMENT,\n  [SPONSORED_MESSAGES_PLACEMENT_NAME]: SPONSORED_MESSAGES_PLACEMENT,\n  [MESSENGER_STORY_PLACEMENT_NAME]: MESSENGER_STORY_PLACEMENT,\n  [FACEBOOK_INSTANT_ARTICLES_PLACEMENT_NAME]: FACEBOOK_INSTANT_ARTICLES_PLACEMENT,\n};",
        "type": "variable"
      },
      {
        "name": " BRAND_AWARENESS_OBJECTIVE",
        "text": "\n\n//campaign objectives\nexport const BRAND_AWARENESS_OBJECTIVE = 'BRAND_AWARENESS';",
        "type": "variable"
      },
      {
        "name": " REACH_OBJECTIVE",
        "text": "\nexport const REACH_OBJECTIVE = 'REACH';",
        "type": "variable"
      },
      {
        "name": " TRAFFIC_OBJECTIVE",
        "text": "\nexport const TRAFFIC_OBJECTIVE = 'TRAFFIC';",
        "type": "variable"
      },
      {
        "name": " ENGAGEMENT_OBJECTIVE",
        "text": "\nexport const ENGAGEMENT_OBJECTIVE = 'ENGAGEMENT';",
        "type": "variable"
      },
      {
        "name": " PAGE_LIKES_OBJECTIVE",
        "text": "\nexport const PAGE_LIKES_OBJECTIVE = 'PAGE_LIKES';",
        "type": "variable"
      },
      {
        "name": " EVENT_RESPONSES_OBJECTIVE",
        "text": "\nexport const EVENT_RESPONSES_OBJECTIVE = 'EVENT_RESPONSES';",
        "type": "variable"
      },
      {
        "name": " APP_INSTALLS_OBJECTIVE",
        "text": "\nexport const APP_INSTALLS_OBJECTIVE = 'APP_INSTALLS';",
        "type": "variable"
      },
      {
        "name": " VIDEO_VIEWS_OBJECTIVE",
        "text": "\nexport const VIDEO_VIEWS_OBJECTIVE = 'VIDEO_VIEWS';",
        "type": "variable"
      },
      {
        "name": " LEAD_GENERATION_OBJECTIVE",
        "text": "\nexport const LEAD_GENERATION_OBJECTIVE = 'LEAD_GENERATION';",
        "type": "variable"
      },
      {
        "name": " MESSAGES_OBJECTIVE",
        "text": "\nexport const MESSAGES_OBJECTIVE = 'MESSAGES';",
        "type": "variable"
      },
      {
        "name": " CONVERSIONS_OBJECTIVE",
        "text": "\nexport const CONVERSIONS_OBJECTIVE = 'CONVERSIONS';",
        "type": "variable"
      },
      {
        "name": " CATALOG_SALES_OBJECTIVE",
        "text": "\nexport const CATALOG_SALES_OBJECTIVE = 'CATALOG_SALES';",
        "type": "variable"
      },
      {
        "name": " STORE_VISITS_OBJECTIVE",
        "text": "\nexport const STORE_VISITS_OBJECTIVE = 'STORE_VISITS';",
        "type": "variable"
      },
      {
        "name": " PLACEMENT_SELECT_OPTIONS",
        "text": "\n\nexport const PLACEMENT_SELECT_OPTIONS = [\n  {\n    label: 'Feeds',\n    value: 'feeds',\n    options: [\n      { label: 'Facebook Feed', value: FACEBOOK_FEED_PLACEMENT_NAME },\n      { label: 'Instagram Feed', value: INSTAGRAM_FEED_PLACEMENT_NAME },\n      { label: 'Facebook Marketplace', value: FACEBOOK_MARKETPLACE_PLACEMENT_NAME },\n      { label: 'Facebook Video Feeds', value: FACEBOOK_VIDEO_FEEDS_PLACEMENT_NAME },\n      { label: 'Facebook Right Column', value: FACEBOOK_RIGHT_HAND_COLUMN_PLACEMENT_NAME },\n      { label: 'Instagram Explore', value: INSTAGRAM_EXPLORE_PLACEMENT_NAME },\n      { label: 'Instagram Explore Home', value: INSTAGRAM_EXPLORE_GRID_HOME_PLACEMENT_NAME },\n      { label: 'Instagram Shop', value: INSTAGRAM_SHOP_PLACEMENT_NAME },\n    ],\n  },\n  {\n    label: 'Messenger',\n    value: 'messenger',\n    options: [\n      { label: 'Messenger Home', value: MESSENGER_HOME_PLACEMENT_NAME },\n      { label: 'Sponsored Messages', value: SPONSORED_MESSAGES_PLACEMENT_NAME },\n    ],\n  },\n  {\n    label: 'Stories',\n    value: 'stories',\n    options: [\n      { label: 'Facebook Story', value: FACEBOOK_STORY_PLACEMENT_NAME },\n      { label: 'Instagram Story', value: INSTAGRAM_STORY_PLACEMENT_NAME },\n      { label: 'Messenger Story', value: MESSENGER_STORY_PLACEMENT_NAME },\n      { label: 'Facebook Reels', value: FACEBOOK_FACEBOOK_REELS_PLACEMENT_NAME },\n      { label: 'Instagram Reels', value: INSTAGRAM_REELS_PLACEMENT_NAME },\n    ],\n  },\n  {\n    label: 'In-stream ads for videos and reels',\n    value: 'in-stream',\n    options: [\n      { label: 'Facebook In-stream Video', value: FACEBOOK_INSTREAM_VIDEO_PLACEMENT_NAME },\n      { label: 'Instagram In-stream Video', value: INSTAGRAM_STREAM_PLACEMENT_NAME },\n    ],\n  },\n  {\n    label: 'Search',\n    value: 'search',\n    options: [\n      { label: 'Facebook Search', value: FACEBOOK_SEARCH_PLACEMENT_NAME },\n      { label: 'Instagram Search', value: INSTAGRAM_PROFILE_FEED_PLACEMENT_NAME },\n    ],\n  },\n  {\n    label: 'In articles',\n    value: 'instant-articles',\n    options: [\n      { label: 'Facebook Instant Articles', value: FACEBOOK_INSTANT_ARTICLES_PLACEMENT_NAME },\n    ],\n  },\n  {\n    label: 'Audience Network',\n    value: 'audience-network',\n    options: [\n      { label: 'Audience Network Classic', value: AUDIENCE_NETWORK_CLASSIC_PLACEMENT_NAME },\n      {\n        label: 'Audience Network Rewarded Video',\n        value: AUDIENCE_NETWORK_REWARDED_VIDEO_PLACEMENT_NAME,\n      },\n    ],\n  },\n];",
        "type": "variable"
      },
      {
        "name": " OBJECTIVES",
        "text": "\n\nexport const OBJECTIVES = [\n  BRAND_AWARENESS_OBJECTIVE,\n  REACH_OBJECTIVE,\n  TRAFFIC_OBJECTIVE,\n  ENGAGEMENT_OBJECTIVE,\n  PAGE_LIKES_OBJECTIVE,\n  EVENT_RESPONSES_OBJECTIVE,\n  APP_INSTALLS_OBJECTIVE,\n  VIDEO_VIEWS_OBJECTIVE,\n  LEAD_GENERATION_OBJECTIVE,\n  MESSAGES_OBJECTIVE,\n  CONVERSIONS_OBJECTIVE,\n  CATALOG_SALES_OBJECTIVE,\n  STORE_VISITS_OBJECTIVE,\n];",
        "type": "variable"
      },
      {
        "name": " OLD_PLACEMENT_MAPPINGS",
        "text": "\n\nexport const OLD_PLACEMENT_MAPPINGS = {\n  OUTCOME_APP_PROMOTION: APP_INSTALLS_OBJECTIVE,\n  OUTCOME_AWARENESS: BRAND_AWARENESS_OBJECTIVE,\n  OUTCOME_ENGAGEMENT: ENGAGEMENT_OBJECTIVE,\n  OUTCOME_LEADS: LEAD_GENERATION_OBJECTIVE,\n  OUTCOME_SALES: CATALOG_SALES_OBJECTIVE,\n  OUTCOME_TRAFFIC: TRAFFIC_OBJECTIVE,\n};",
        "type": "variable"
      },
      {
        "name": " DEVICE_PLATFORMS",
        "text": "\n\nexport const DEVICE_PLATFORMS = ['desktop', 'mobile'];",
        "type": "variable"
      },
      {
        "name": " PUBLISHER_PLATFORMS",
        "text": "\n\nexport const PUBLISHER_PLATFORMS = ['facebook', 'instagram', 'messenger', 'audience_network'];",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_PLACEMENTS",
        "text": "\n\nexport const FACEBOOK_PLACEMENTS = [\n  FACEBOOK_FEED_PLACEMENT,\n  FACEBOOK_RIGHT_HAND_COLUMN_PLACEMENT,\n  FACEBOOK_MARKETPLACE_PLACEMENT,\n  FACEBOOK_VIDEO_FEEDS_PLACEMENT,\n  FACEBOOK_STORY_PLACEMENT,\n  FACEBOOK_SEARCH_PLACEMENT,\n  FACEBOOK_INSTREAM_VIDEO_PLACEMENT,\n  FACEBOOK_FACEBOOK_REELS_PLACEMENT,\n];",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_PLACEMENTS",
        "text": "\n\nexport const INSTAGRAM_PLACEMENTS = [\n  INSTAGRAM_FEED_PLACEMENT,\n  INSTAGRAM_STREAM_PLACEMENT,\n  INSTAGRAM_STORY_PLACEMENT,\n  INSTAGRAM_SHOP_PLACEMENT,\n  INSTAGRAM_EXPLORE_PLACEMENT,\n  INSTAGRAM_EXPLORE_HOME_PLACEMENT,\n  INSTAGRAM_REELS_PLACEMENT,\n  INSTAGRAM_PROFILE_FEED_PLACEMENT,\n];",
        "type": "variable"
      },
      {
        "name": " AUDIENCE_NETWORK_PLACEMENTS",
        "text": "\n\nexport const AUDIENCE_NETWORK_PLACEMENTS = [\n  AUDIENCE_NETWORK_CLASSIC_PLACEMENT,\n  AUDIENCE_NETWORK_REWARDED_VIDEO_PLACEMENT,\n];",
        "type": "variable"
      },
      {
        "name": " MESSENGER_PLACEMENTS",
        "text": "\n\nexport const MESSENGER_PLACEMENTS = [\n  MESSENGER_HOME_PLACEMENT,\n  SPONSORED_MESSAGES_PLACEMENT,\n  MESSENGER_STORY_PLACEMENT,\n];",
        "type": "variable"
      },
      {
        "name": " CUSTOM_WEIRD_PLACEMENTS",
        "text": "\n\nexport const CUSTOM_WEIRD_PLACEMENTS = [FACEBOOK_INSTANT_ARTICLES_PLACEMENT];",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_FEED_MOBILE_PREVIEW",
        "text": "\n\n//previews\nexport const FACEBOOK_FEED_MOBILE_PREVIEW = {\n  value: 'MOBILE_FEED_STANDARD',\n  label: 'Facebook Feed Mobile',\n  width: '320',\n  height: '500',\n};",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_FEED_DESKTOP_PREVIEW",
        "text": "\nexport const FACEBOOK_FEED_DESKTOP_PREVIEW = {\n  value: 'DESKTOP_FEED_STANDARD',\n  label: 'Facebook Feed Desktop',\n};",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_RIGHT_HAND_COLUMN_MOBILE_PREVIEW",
        "text": "\nexport const FACEBOOK_RIGHT_HAND_COLUMN_MOBILE_PREVIEW = {\n  value: 'RIGHT_COLUMN_STANDARD',\n  label: 'Facebook Right Hand Column',\n  width: '560',\n  height: '210',\n};",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_RIGHT_HAND_COLUMN_DESKTOP_PREVIEW",
        "text": "\nexport const FACEBOOK_RIGHT_HAND_COLUMN_DESKTOP_PREVIEW = {\n  value: 'RIGHT_COLUMN_STANDARD',\n  label: 'Facebook Right Hand Column',\n  width: '560',\n  height: '210',\n};",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_MARKETPLACE_MOBILE_PREVIEW",
        "text": "\nexport const FACEBOOK_MARKETPLACE_MOBILE_PREVIEW = {\n  value: 'MARKETPLACE_MOBILE',\n  label: 'Facebook Marketplace Mobile',\n};",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_MARKETPLACE_DESKTOP_PREVIEW",
        "text": "\nexport const FACEBOOK_MARKETPLACE_DESKTOP_PREVIEW = {\n  value: 'MARKETPLACE_DESKTOP',\n  label: 'Facebook Marketplace Desktop',\n};",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_VIDEO_FEEDS_MOBILE_PREVIEW",
        "text": "\nexport const FACEBOOK_VIDEO_FEEDS_MOBILE_PREVIEW = {\n  value: 'WATCH_FEED_MOBILE',\n  label: 'Video Feeds Mobile',\n};",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_VIDEO_FEEDS_DESKTOP_PREVIEW",
        "text": " //not sure\nexport const FACEBOOK_VIDEO_FEEDS_DESKTOP_PREVIEW = {\n  value: 'WATCH_FEED_HOME',\n  label: 'Video Feeds Desktop',\n};",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_STORY_MOBILE_PREVIEW",
        "text": " //not sure\nexport const FACEBOOK_STORY_MOBILE_PREVIEW = {\n  value: 'FACEBOOK_STORY_MOBILE',\n  label: 'Facebook Story Mobile',\n};",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_STORY_DESKTOP_PREVIEW",
        "text": "\nexport const FACEBOOK_STORY_DESKTOP_PREVIEW = '';",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_SEARCH_MOBILE_PREVIEW",
        "text": "\nexport const FACEBOOK_SEARCH_MOBILE_PREVIEW = '';",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_SEARCH_DESKTOP_PREVIEW",
        "text": "\nexport const FACEBOOK_SEARCH_DESKTOP_PREVIEW = '';",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_INSTREAM_VIDEO_MOBILE_PREVIEW",
        "text": "\nexport const FACEBOOK_INSTREAM_VIDEO_MOBILE_PREVIEW = {\n  value: 'INSTREAM_VIDEO_MOBILE',\n  label: 'Facebook Instream Video Mobile',\n};",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_INSTREAM_VIDEO_DESKTOP_PREVIEW",
        "text": "\nexport const FACEBOOK_INSTREAM_VIDEO_DESKTOP_PREVIEW = {\n  value: 'INSTREAM_VIDEO_DESKTOP',\n  label: 'Facebook Instream Video Desktop',\n};",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_FACEBOOK_REELS_MOBILE_PREVIEW",
        "text": "\nexport const FACEBOOK_FACEBOOK_REELS_MOBILE_PREVIEW = {\n  value: 'FACEBOOK_REELS_MOBILE',\n  label: 'Facebook Reels Mobile',\n};",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_FACEBOOK_REELS_DESKTOP_PREVIEW",
        "text": "\nexport const FACEBOOK_FACEBOOK_REELS_DESKTOP_PREVIEW = {\n  value: 'FACEBOOK_REELS_DESKTOP',\n  label: 'Facebook Reels Desktop',\n};",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_INSTANT_ARTICLES_PLACEMENT_MOBILE_PREVIEW",
        "text": "\n\nexport const FACEBOOK_INSTANT_ARTICLES_PLACEMENT_MOBILE_PREVIEW = {\n  value: 'INSTANT_ARTICLE_STANDARD',\n  label: 'Facebook Instant Articles Mobile',\n};",
        "type": "variable"
      },
      {
        "name": " FACEBOOK_INSTANT_ARTICLES_PLACEMENT_DESKTOP_PREVIEW",
        "text": "\nexport const FACEBOOK_INSTANT_ARTICLES_PLACEMENT_DESKTOP_PREVIEW = {\n  value: 'INSTANT_ARTICLE_STANDARD',\n  label: 'Facebook Instant Articles Desktop',\n};",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_FEED_MOBILE_PREVIEW",
        "text": "\n\nexport const INSTAGRAM_FEED_MOBILE_PREVIEW = {\n  value: 'INSTAGRAM_STANDARD',\n  label: 'Instagram Feed Mobile',\n};",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_FEED_DESKTOP_PREVIEW",
        "text": "\nexport const INSTAGRAM_FEED_DESKTOP_PREVIEW = {\n  value: 'INSTAGRAM_FEED_WEB',\n  label: 'Instagram Feed Desktop',\n};",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_STREAM_MOBILE_PREVIEW",
        "text": "\nexport const INSTAGRAM_STREAM_MOBILE_PREVIEW = '';",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_STREAM_DESKTOP_PREVIEW",
        "text": "\nexport const INSTAGRAM_STREAM_DESKTOP_PREVIEW = '';",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_STORY_MOBILE_PREVIEW",
        "text": "\nexport const INSTAGRAM_STORY_MOBILE_PREVIEW = {\n  value: 'INSTAGRAM_STORY',\n  label: 'Instagram Story Mobile',\n};",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_STORY_DESKTOP_PREVIEW",
        "text": "\nexport const INSTAGRAM_STORY_DESKTOP_PREVIEW = {\n  value: 'INSTAGRAM_STORY',\n  label: 'Instagram Story Desktop',\n};",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_SHOP_MOBILE_PREVIEW",
        "text": "\nexport const INSTAGRAM_SHOP_MOBILE_PREVIEW = {\n  value: 'INSTAGRAM_SHOP',\n  label: 'Instagram Shop Mobile',\n};",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_SHOP_DESKTOP_PREVIEW",
        "text": "\nexport const INSTAGRAM_SHOP_DESKTOP_PREVIEW = {\n  value: 'INSTAGRAM_SHOP',\n  label: 'Instagram Shop Desktop',\n};",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_EXPLORE_MOBILE_PREVIEW",
        "text": "\nexport const INSTAGRAM_EXPLORE_MOBILE_PREVIEW = {\n  value: 'INSTAGRAM_EXPLORE_CONTEXTUAL',\n  label: 'Instagram Explore Mobile',\n};",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_EXPLORE_DESKTOP_PREVIEW",
        "text": "\nexport const INSTAGRAM_EXPLORE_DESKTOP_PREVIEW = {\n  value: 'INSTAGRAM_EXPLORE_CONTEXTUAL',\n  label: 'Instagram Explore Desktop',\n};",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_EXPLORE_HOME_MOBILE_PREVIEW",
        "text": "\nexport const INSTAGRAM_EXPLORE_HOME_MOBILE_PREVIEW = {\n  value: 'INSTAGRAM_EXPLORE_GRID_HOME',\n  label: 'Instagram Explore Home Mobile',\n};",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_EXPLORE_HOME_DESKTOP_PREVIEW",
        "text": "\nexport const INSTAGRAM_EXPLORE_HOME_DESKTOP_PREVIEW = {\n  value: 'INSTAGRAM_EXPLORE_GRID_HOME',\n  label: 'Instagram Explore Home Desktop',\n};",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_REELS_MOBILE_PREVIEW",
        "text": "\nexport const INSTAGRAM_REELS_MOBILE_PREVIEW = {\n  value: 'INSTAGRAM_REELS',\n  label: 'Instagram Reels Mobile',\n};",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_REELS_DESKTOP_PREVIEW",
        "text": "\nexport const INSTAGRAM_REELS_DESKTOP_PREVIEW = {\n  value: 'INSTAGRAM_REELS',\n  label: 'Instagram Reels Desktop',\n};",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_PROFILE_FEED_MOBILE_PREVIEW",
        "text": "\nexport const INSTAGRAM_PROFILE_FEED_MOBILE_PREVIEW = {\n  value: 'INSTAGRAM_PROFILE_FEED',\n  label: 'Instagram Profile Feed Mobile',\n};",
        "type": "variable"
      },
      {
        "name": " INSTAGRAM_PROFILE_FEED_DESKTOP_PREVIEW",
        "text": "\nexport const INSTAGRAM_PROFILE_FEED_DESKTOP_PREVIEW = {\n  value: 'INSTAGRAM_PROFILE_FEED',\n  label: 'Instagram Profile Feed Desktop',\n};",
        "type": "variable"
      },
      {
        "name": " AUDIENCE_NETWORK_CLASSIC_MOBILE_PREVIEW",
        "text": "\n\nexport const AUDIENCE_NETWORK_CLASSIC_MOBILE_PREVIEW = {\n  value: 'AUDIENCE_NETWORK_INSTREAM_VIDEO',\n  label: 'Audience Network Classic Mobile',\n};",
        "type": "variable"
      },
      {
        "name": " AUDIENCE_NETWORK_CLASSIC_DESKTOP_PREVIEW",
        "text": "\nexport const AUDIENCE_NETWORK_CLASSIC_DESKTOP_PREVIEW = {\n  value: 'AUDIENCE_NETWORK_INSTREAM_VIDEO',\n  label: 'Audience Network Classic Desktop',\n};",
        "type": "variable"
      },
      {
        "name": " AUDIENCE_NETWORK_REWARDED_VIDEO_MOBILE_PREVIEW",
        "text": "\nexport const AUDIENCE_NETWORK_REWARDED_VIDEO_MOBILE_PREVIEW = {\n  value: 'AUDIENCE_NETWORK_REWARDED_VIDEO',\n  label: 'Audience Network Rewarded Video Mobile',\n};",
        "type": "variable"
      },
      {
        "name": " AUDIENCE_NETWORK_REWARDED_VIDEO_DESKTOP_PREVIEW",
        "text": "\nexport const AUDIENCE_NETWORK_REWARDED_VIDEO_DESKTOP_PREVIEW = {\n  value: 'AUDIENCE_NETWORK_REWARDED_VIDEO',\n  label: 'Audience Network Rewarded Video Desktop',\n};",
        "type": "variable"
      },
      {
        "name": " MESSENGER_HOME_MOBILE_PREVIEW",
        "text": "\n\nexport const MESSENGER_HOME_MOBILE_PREVIEW = '';",
        "type": "variable"
      },
      {
        "name": " MESSENGER_HOME_DESKTOP_PREVIEW",
        "text": "\nexport const MESSENGER_HOME_DESKTOP_PREVIEW = '';",
        "type": "variable"
      },
      {
        "name": " SPONSORED_MESSAGES_MOBILE_PREVIEW",
        "text": "\nexport const SPONSORED_MESSAGES_MOBILE_PREVIEW = {\n  value: 'MESSENGER_MOBILE_INBOX_MEDIA',\n  label: 'Sponsored Messages Mobile',\n};",
        "type": "variable"
      },
      {
        "name": " SPONSORED_MESSAGES_DESKTOP_PREVIEW",
        "text": "\nexport const SPONSORED_MESSAGES_DESKTOP_PREVIEW = {\n  value: 'MESSENGER_MOBILE_INBOX_MEDIA',\n  label: 'Sponsored Messages Desktop',\n};",
        "type": "variable"
      },
      {
        "name": " MESSENGER_STORY_MOBILE_PREVIEW",
        "text": "\nexport const MESSENGER_STORY_MOBILE_PREVIEW = {\n  value: 'MESSENGER_MOBILE_STORY_MEDIA',\n  label: 'Messenger Story Mobile',\n};",
        "type": "variable"
      },
      {
        "name": " MESSENGER_STORY_DESKTOP_PREVIEW",
        "text": "\nexport const MESSENGER_STORY_DESKTOP_PREVIEW = {\n  value: 'MESSENGER_MOBILE_STORY_MEDIA',\n  label: 'Messenger Story Desktop',\n};",
        "type": "variable"
      },
      {
        "name": " PLACEMENT_TO_PREVIEW_MAPPING",
        "text": "\n\nexport const PLACEMENT_TO_PREVIEW_MAPPING = {\n  FACEBOOK_FEED_PLACEMENT: {\n    mobile: FACEBOOK_FEED_MOBILE_PREVIEW,\n    desktop: FACEBOOK_FEED_DESKTOP_PREVIEW,\n  },\n  FACEBOOK_RIGHT_HAND_COLUMN_PLACEMENT: {\n    mobile: FACEBOOK_RIGHT_HAND_COLUMN_MOBILE_PREVIEW,\n    desktop: FACEBOOK_RIGHT_HAND_COLUMN_DESKTOP_PREVIEW,\n  },\n  FACEBOOK_MARKETPLACE_PLACEMENT: {\n    mobile: FACEBOOK_MARKETPLACE_MOBILE_PREVIEW,\n    desktop: FACEBOOK_MARKETPLACE_DESKTOP_PREVIEW,\n  },\n  FACEBOOK_VIDEO_FEEDS_PLACEMENT: {\n    mobile: FACEBOOK_VIDEO_FEEDS_MOBILE_PREVIEW,\n    desktop: FACEBOOK_VIDEO_FEEDS_DESKTOP_PREVIEW,\n  },\n  FACEBOOK_STORY_PLACEMENT: {\n    mobile: FACEBOOK_STORY_MOBILE_PREVIEW,\n    desktop: FACEBOOK_STORY_DESKTOP_PREVIEW,\n  },\n  FACEBOOK_SEARCH_PLACEMENT: {\n    mobile: FACEBOOK_SEARCH_MOBILE_PREVIEW,\n    desktop: FACEBOOK_SEARCH_DESKTOP_PREVIEW,\n  },\n  FACEBOOK_INSTREAM_VIDEO_PLACEMENT: {\n    mobile: FACEBOOK_INSTREAM_VIDEO_MOBILE_PREVIEW,\n    desktop: FACEBOOK_INSTREAM_VIDEO_DESKTOP_PREVIEW,\n  },\n  INSTAGRAM_FEED_PLACEMENT: {\n    mobile: INSTAGRAM_FEED_MOBILE_PREVIEW,\n    desktop: INSTAGRAM_FEED_DESKTOP_PREVIEW,\n  },\n  INSTAGRAM_STREAM_PLACEMENT: {\n    mobile: INSTAGRAM_STREAM_MOBILE_PREVIEW,\n    desktop: INSTAGRAM_STREAM_DESKTOP_PREVIEW,\n  },\n  INSTAGRAM_STORY_PLACEMENT: {\n    mobile: INSTAGRAM_STORY_MOBILE_PREVIEW,\n    desktop: INSTAGRAM_STORY_DESKTOP_PREVIEW,\n  },\n  INSTAGRAM_SHOP_PLACEMENT: {\n    mobile: INSTAGRAM_SHOP_MOBILE_PREVIEW,\n    desktop: INSTAGRAM_SHOP_DESKTOP_PREVIEW,\n  },\n  INSTAGRAM_EXPLORE_PLACEMENT: {\n    mobile: INSTAGRAM_EXPLORE_MOBILE_PREVIEW,\n    desktop: INSTAGRAM_EXPLORE_DESKTOP_PREVIEW,\n  },\n  INSTAGRAM_EXPLORE_HOME_PLACEMENT: {\n    mobile: INSTAGRAM_EXPLORE_HOME_MOBILE_PREVIEW,\n    desktop: INSTAGRAM_EXPLORE_HOME_DESKTOP_PREVIEW,\n  },\n  INSTAGRAM_REELS_PLACEMENT: {\n    mobile: INSTAGRAM_REELS_MOBILE_PREVIEW,\n    desktop: INSTAGRAM_REELS_DESKTOP_PREVIEW,\n  },\n  INSTAGRAM_PROFILE_FEED_PLACEMENT: {\n    mobile: INSTAGRAM_PROFILE_FEED_MOBILE_PREVIEW,\n    desktop: INSTAGRAM_PROFILE_FEED_DESKTOP_PREVIEW,\n  },\n  AUDIENCE_NETWORK_CLASSIC_PLACEMENT: {\n    mobile: AUDIENCE_NETWORK_CLASSIC_MOBILE_PREVIEW,\n    desktop: AUDIENCE_NETWORK_CLASSIC_DESKTOP_PREVIEW,\n  },\n  AUDIENCE_NETWORK_REWARDED_VIDEO_PLACEMENT: {\n    mobile: AUDIENCE_NETWORK_REWARDED_VIDEO_MOBILE_PREVIEW,\n    desktop: AUDIENCE_NETWORK_REWARDED_VIDEO_DESKTOP_PREVIEW,\n  },\n  MESSENGER_HOME_PLACEMENT: {\n    mobile: MESSENGER_HOME_MOBILE_PREVIEW,\n    desktop: MESSENGER_HOME_DESKTOP_PREVIEW,\n  },\n  SPONSORED_MESSAGES_PLACEMENT: {\n    mobile: SPONSORED_MESSAGES_MOBILE_PREVIEW,\n    desktop: SPONSORED_MESSAGES_DESKTOP_PREVIEW,\n  },\n  MESSENGER_STORY_PLACEMENT: {\n    mobile: MESSENGER_STORY_MOBILE_PREVIEW,\n    desktop: MESSENGER_STORY_DESKTOP_PREVIEW,\n  },\n};",
        "type": "variable"
      },
      {
        "name": " ALLOWED_PLACEMENTS_BY_OBJECTIVE",
        "text": "\n\nexport const ALLOWED_PLACEMENTS_BY_OBJECTIVE: AllowedPlacementTypes = {\n  [BRAND_AWARENESS_OBJECTIVE]: {\n    [FACEBOOK_FEED_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [INSTAGRAM_FEED_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [FACEBOOK_MARKETPLACE_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [FACEBOOK_VIDEO_FEEDS_PLACEMENT_NAME]: ['video'],\n    [INSTAGRAM_EXPLORE_PLACEMENT_NAME]: ['image', 'video'],\n    [INSTAGRAM_STORY_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [FACEBOOK_STORY_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    // [MESSENGER_STORY_PLACEMENT_NAME]: ['image', 'video'],\n    [INSTAGRAM_REELS_PLACEMENT_NAME]: ['video'],\n    [FACEBOOK_INSTREAM_VIDEO_PLACEMENT_NAME]: ['video'],\n    [INSTAGRAM_STREAM_PLACEMENT_NAME]: ['video'],\n    [FACEBOOK_SEARCH_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [FACEBOOK_INSTANT_ARTICLES_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n  },\n  [REACH_OBJECTIVE]: {\n    [FACEBOOK_FEED_PLACEMENT_NAME]: ['image', 'video', 'carousal', 'collection'],\n    [INSTAGRAM_FEED_PLACEMENT_NAME]: ['image', 'video', 'carousal', 'collection'],\n    [FACEBOOK_MARKETPLACE_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [FACEBOOK_VIDEO_FEEDS_PLACEMENT_NAME]: ['video'],\n    [INSTAGRAM_EXPLORE_PLACEMENT_NAME]: ['image', 'video'],\n    // [AD_PLACEMENTS.FACEBOOK_GROUPS_FEED]: ['image'],\n    [INSTAGRAM_STORY_PLACEMENT_NAME]: ['image', 'video', 'carousal', 'collection'],\n    [FACEBOOK_STORY_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [MESSENGER_STORY_PLACEMENT_NAME]: ['image', 'video'],\n    [INSTAGRAM_REELS_PLACEMENT_NAME]: ['video'],\n    [FACEBOOK_INSTREAM_VIDEO_PLACEMENT_NAME]: ['image', 'video'],\n    [INSTAGRAM_STREAM_PLACEMENT_NAME]: ['image', 'video'],\n    [FACEBOOK_SEARCH_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [FACEBOOK_INSTANT_ARTICLES_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    // [AUDIENCE_NETWORK_CLASSIC_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n  },\n  [TRAFFIC_OBJECTIVE]: {\n    [FACEBOOK_FEED_PLACEMENT_NAME]: ['image', 'video', 'carousal', 'collection'],\n    [INSTAGRAM_FEED_PLACEMENT_NAME]: ['image', 'video', 'carousal', 'collection'],\n    [FACEBOOK_MARKETPLACE_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [FACEBOOK_VIDEO_FEEDS_PLACEMENT_NAME]: ['video'],\n    [FACEBOOK_RIGHT_HAND_COLUMN_PLACEMENT_NAME]: ['image', 'carousal'],\n    [INSTAGRAM_SHOP_PLACEMENT_NAME]: ['image'],\n    // [SPONSORED_MESSAGES_PLACEMENT_NAME]: ['image', 'carousal'],\n    [INSTAGRAM_STORY_PLACEMENT_NAME]: ['image', 'video', 'carousal', 'collection'],\n    [FACEBOOK_STORY_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    // [MESSENGER_STORY_PLACEMENT_NAME]: ['image', 'video'],\n    [INSTAGRAM_REELS_PLACEMENT_NAME]: ['video'],\n    [FACEBOOK_INSTREAM_VIDEO_PLACEMENT_NAME]: ['video', 'carousal', 'collection'],\n    [FACEBOOK_FACEBOOK_REELS_PLACEMENT_NAME]: ['image', 'video'],\n    [FACEBOOK_SEARCH_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [FACEBOOK_INSTANT_ARTICLES_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    // [AUDIENCE_NETWORK_CLASSIC_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n  },\n  [ENGAGEMENT_OBJECTIVE]: {\n    [FACEBOOK_FEED_PLACEMENT_NAME]: ['image', 'video'],\n    [INSTAGRAM_FEED_PLACEMENT_NAME]: ['image', 'video'],\n    [FACEBOOK_VIDEO_FEEDS_PLACEMENT_NAME]: ['video'],\n    [INSTAGRAM_EXPLORE_PLACEMENT_NAME]: ['image', 'video'],\n    [FACEBOOK_SEARCH_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [FACEBOOK_INSTANT_ARTICLES_PLACEMENT_NAME]: ['image', 'video'],\n  },\n  [PAGE_LIKES_OBJECTIVE]: {\n    [FACEBOOK_FEED_PLACEMENT_NAME]: ['image', 'video'],\n  },\n  [EVENT_RESPONSES_OBJECTIVE]: {\n    [FACEBOOK_FEED_PLACEMENT_NAME]: ['image', 'video'],\n    [FACEBOOK_MARKETPLACE_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [FACEBOOK_INSTREAM_VIDEO_PLACEMENT_NAME]: ['image'],\n  },\n  [APP_INSTALLS_OBJECTIVE]: {\n    [FACEBOOK_FEED_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [INSTAGRAM_FEED_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [FACEBOOK_VIDEO_FEEDS_PLACEMENT_NAME]: ['video'],\n    [INSTAGRAM_EXPLORE_PLACEMENT_NAME]: ['image', 'video'],\n    [INSTAGRAM_STORY_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [FACEBOOK_STORY_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [MESSENGER_STORY_PLACEMENT_NAME]: ['image', 'video'],\n    [INSTAGRAM_REELS_PLACEMENT_NAME]: ['video'],\n    [FACEBOOK_INSTREAM_VIDEO_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n  },\n  [VIDEO_VIEWS_OBJECTIVE]: {\n    [FACEBOOK_FEED_PLACEMENT_NAME]: ['video'],\n    [INSTAGRAM_FEED_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [FACEBOOK_MARKETPLACE_PLACEMENT_NAME]: ['video'],\n    [FACEBOOK_VIDEO_FEEDS_PLACEMENT_NAME]: ['video'],\n    [INSTAGRAM_EXPLORE_PLACEMENT_NAME]: ['image', 'video'],\n    [INSTAGRAM_STORY_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [FACEBOOK_STORY_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    // [MESSENGER_STORY_PLACEMENT_NAME]: ['image', 'video'],\n    [INSTAGRAM_REELS_PLACEMENT_NAME]: ['video'],\n    [FACEBOOK_INSTREAM_VIDEO_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n  },\n  [LEAD_GENERATION_OBJECTIVE]: {\n    [FACEBOOK_FEED_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [INSTAGRAM_FEED_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [FACEBOOK_MARKETPLACE_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [INSTAGRAM_EXPLORE_PLACEMENT_NAME]: ['image', 'video'],\n    [INSTAGRAM_STORY_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [FACEBOOK_STORY_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [FACEBOOK_INSTREAM_VIDEO_PLACEMENT_NAME]: ['image', 'video'],\n    [FACEBOOK_FACEBOOK_REELS_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [FACEBOOK_SEARCH_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [FACEBOOK_INSTANT_ARTICLES_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n  },\n  [MESSAGES_OBJECTIVE]: {\n    [FACEBOOK_FEED_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [INSTAGRAM_FEED_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [FACEBOOK_MARKETPLACE_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [INSTAGRAM_EXPLORE_PLACEMENT_NAME]: ['image', 'video'],\n    // [SPONSORED_MESSAGES_PLACEMENT_NAME]: ['image', 'carousal'],\n    [INSTAGRAM_STORY_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [FACEBOOK_STORY_PLACEMENT_NAME]: ['carousal'],\n    // [MESSENGER_STORY_PLACEMENT_NAME]: ['image'],\n  },\n  [CONVERSIONS_OBJECTIVE]: {\n    [FACEBOOK_FEED_PLACEMENT_NAME]: ['image', 'video', 'carousal', 'collection'],\n    [INSTAGRAM_FEED_PLACEMENT_NAME]: ['image', 'video', 'carousal', 'collection'],\n    [FACEBOOK_MARKETPLACE_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [FACEBOOK_VIDEO_FEEDS_PLACEMENT_NAME]: ['video'],\n    [FACEBOOK_RIGHT_HAND_COLUMN_PLACEMENT_NAME]: ['image', 'carousal'],\n    [INSTAGRAM_EXPLORE_PLACEMENT_NAME]: ['image', 'video'],\n    [INSTAGRAM_SHOP_PLACEMENT_NAME]: ['image'],\n    // [SPONSORED_MESSAGES_PLACEMENT_NAME]: ['image', 'carousal'],\n    // [AD_PLACEMENTS.FACEBOOK_GROUPS_FEED]: ['image'],\n    [INSTAGRAM_STORY_PLACEMENT_NAME]: ['image', 'video', 'carousal', 'collection'],\n    [FACEBOOK_STORY_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    // [MESSENGER_STORY_PLACEMENT_NAME]: ['image', 'video'],\n    [INSTAGRAM_REELS_PLACEMENT_NAME]: ['video'],\n    [FACEBOOK_INSTREAM_VIDEO_PLACEMENT_NAME]: ['image', 'video', 'carousal', 'collection'],\n    [FACEBOOK_SEARCH_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [FACEBOOK_INSTANT_ARTICLES_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    // [AUDIENCE_NETWORK_CLASSIC_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    // [AUDIENCE_NETWORK_REWARDED_VIDEO_PLACEMENT_NAME]: ['video'],\n  },\n  [CATALOG_SALES_OBJECTIVE]: {\n    [FACEBOOK_FEED_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [INSTAGRAM_FEED_PLACEMENT_NAME]: ['image', 'video', 'collection'],\n    [FACEBOOK_MARKETPLACE_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [FACEBOOK_RIGHT_HAND_COLUMN_PLACEMENT_NAME]: ['image', 'carousal'],\n    [INSTAGRAM_EXPLORE_PLACEMENT_NAME]: ['image'],\n    [INSTAGRAM_SHOP_PLACEMENT_NAME]: ['image'],\n    [SPONSORED_MESSAGES_PLACEMENT_NAME]: ['image', 'carousal'],\n    [INSTAGRAM_STORY_PLACEMENT_NAME]: ['image', 'video', 'carousal', 'collection'],\n    [FACEBOOK_STORY_PLACEMENT_NAME]: ['carousal'],\n    [FACEBOOK_INSTREAM_VIDEO_PLACEMENT_NAME]: ['carousal', 'collection'],\n    [FACEBOOK_FACEBOOK_REELS_PLACEMENT_NAME]: ['image', 'video'],\n    [FACEBOOK_SEARCH_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    // [AUDIENCE_NETWORK_CLASSIC_PLACEMENT_NAME]: ['image', 'carousal'],\n  },\n  [STORE_VISITS_OBJECTIVE]: {\n    [FACEBOOK_FEED_PLACEMENT_NAME]: ['image', 'video', 'carousal', 'collection'],\n    [INSTAGRAM_FEED_PLACEMENT_NAME]: ['image', 'video', 'collection', 'carousal'],\n    [FACEBOOK_MARKETPLACE_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n    [INSTAGRAM_STORY_PLACEMENT_NAME]: ['image', 'video', 'carousal', 'collection'],\n    [FACEBOOK_STORY_PLACEMENT_NAME]: ['image', 'video', 'carousal'],\n  },\n};",
        "type": "AllowedPlacementTypes"
      },
      {
        "name": " FACEBOOK_AD_FORMATS",
        "text": "\n\nexport const FACEBOOK_AD_FORMATS: any = [\n  // { label: 'Mobile Banner', value: 'MOBILE_BANNER', width:\"320\", height:\"138\" },\n  {\n    label: 'Feed Basic',\n    value: 'MOBILE_FEED_BASIC',\n    width: '320',\n    height: '580',\n    placement_name: FACEBOOK_FEED_PLACEMENT_NAME,\n  },\n  // { label: 'Suggested Video Mobile', value: 'SUGGESTED_VIDEO_MOBILE',width:\"320\" , height:\"500\"},\n  {\n    label: 'Watch Feed',\n    value: 'WATCH_FEED_MOBILE',\n    width: '320',\n    height: '500',\n    placement_name: FACEBOOK_VIDEO_FEEDS_PLACEMENT_NAME,\n  },\n  {\n    label: 'Facebook Story',\n    value: 'FACEBOOK_STORY_MOBILE',\n    width: '320',\n    height: '500',\n    placement_name: FACEBOOK_STORY_PLACEMENT_NAME,\n  },\n  {\n    label: 'Facebook Reels',\n    value: 'FACEBOOK_REELS_MOBILE',\n    width: '320',\n    height: '560',\n    placement_name: FACEBOOK_FACEBOOK_REELS_PLACEMENT_NAME,\n  },\n  {\n    label: 'Right Column Standard',\n    value: 'RIGHT_COLUMN_STANDARD',\n    width: '560',\n    height: '210',\n    placement_name: FACEBOOK_RIGHT_HAND_COLUMN_PLACEMENT_NAME,\n  },\n];",
        "type": "any"
      },
      {
        "name": " INSTAGRAM_AD_FORMATS",
        "text": "\n\nexport const INSTAGRAM_AD_FORMATS = [\n  {\n    label: 'Instagram Standard',\n    value: 'INSTAGRAM_STANDARD',\n    width: '318',\n    placement_name: INSTAGRAM_FEED_PLACEMENT_NAME,\n  },\n  {\n    label: 'Instagram Story',\n    value: 'INSTAGRAM_STORY',\n    width: '318',\n    placement_name: INSTAGRAM_STORY_PLACEMENT_NAME,\n  },\n  // { label: 'Instagram Story Mobile', value: 'INSTAGRAM_STORY_WEB_M_SITE' },\n  // { label: 'Instagram Feed Web', value: 'INSTAGRAM_FEED_WEB' },\n  // { label: 'Instagram Feed Mobile', value: 'INSTAGRAM_FEED_WEB_M_SITE' },\n  // { label: 'Instagram Story Web', value: 'INSTAGRAM_STORY_WEB' },\n  {\n    label: 'Instagram Explore Grid Home',\n    value: 'INSTAGRAM_EXPLORE_GRID_HOME',\n    width: '318',\n    placement_name: INSTAGRAM_EXPLORE_GRID_HOME_PLACEMENT_NAME,\n  },\n  {\n    label: 'Instagram Explore Contextual',\n    value: 'INSTAGRAM_EXPLORE_CONTEXTUAL',\n    width: '318',\n    placement_name: INSTAGRAM_EXPLORE_PLACEMENT_NAME,\n  },\n  // { label: 'Instagram Explore Immersive', value: 'INSTAGRAM_EXPLORE_IMMERSIVE',width:\"318\"  },\n  {\n    label: 'Instagram Profile Feed',\n    value: 'INSTAGRAM_PROFILE_FEED',\n    width: '318',\n    placement_name: INSTAGRAM_PROFILE_FEED_PLACEMENT_NAME,\n  },\n  {\n    label: 'Instagram Reels',\n    value: 'INSTAGRAM_REELS',\n    width: '318',\n    placement_name: INSTAGRAM_REELS_PLACEMENT_NAME,\n  },\n  // { label: 'Instagram Reels Overlay', value: 'INSTAGRAM_REELS_OVERLAY' },\n  // { label: 'Instagram Search Chain', value: 'INSTAGRAM_SEARCH_CHAIN' },\n  // { label: 'Instagram Search Grid', value: 'INSTAGRAM_SEARCH_GRID' },\n  {\n    label: 'Instagram Shop',\n    value: 'INSTAGRAM_SHOP',\n    width: '318',\n    placement_name: INSTAGRAM_SHOP_PLACEMENT_NAME,\n  },\n];",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/constants/Metrics/allMetrics.tsx",
    "exports": [
      {
        "name": " metrics",
        "text": "\n\nexport const metrics: MetricsDictionary = {\n  spend: {\n    key: 'spend',\n    label: 'Ad Spend',\n    shortLabel: 'Spend',\n    showInCreativeCard: ['all'],\n    showInCreativeTable: ['all'],\n    showInInfluencersHub: true,\n    showInRules: ['account', 'campaign', 'adset', 'ad'],\n    showInServices: adsServices,\n    format: 'currency',\n    toFixed: 2,\n    type: 'ads',\n    showInCreativeByDefault: true,\n    showInPixelByDefault: true,\n    allowOrderBy: true,\n    pixelIndex: 100,\n    chart: 'spendChart',\n    calculateSum: (items) => {\n      return sum(items, 'spend');\n    },\n  },\n  conversionValue: {\n    key: 'conversionValue',\n    label: 'CV',\n    shortLabel: 'CV',\n    showInCreativeCard: [],\n    showInCreativeTable: ['video', 'image', 'copy', 'ad', 'adName', 'Segments'],\n    showInServices: adsServices,\n    format: 'currency',\n    toFixed: 2,\n    type: 'ads',\n    showInCreativeByDefault: true,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    chart: 'conversionValueChart',\n    calculateSum: (items) => {\n      return sum(items, 'conversionValue');\n    },\n  },\n  roas: {\n    key: 'roas',\n    label: 'ROAS',\n    shortLabel: 'ROAS',\n    showInCreativeCard: [],\n    showInCreativeTable: ['video', 'image', 'copy', 'ad', 'adName', 'Segments'],\n    showInRules: ['account', 'campaign', 'adset', 'ad', 'Segments'],\n    showInServices: adsServices,\n    showInInfluencersHub: false,\n    format: 'decimal',\n    toFixed: 2,\n    type: 'ads',\n    showInCreativeByDefault: true,\n    showInPixelByDefault: true,\n    allowOrderBy: true,\n    pixelIndex: 3,\n    calculateSum: (items) => {\n      return divide(items, 'conversionValue', 'spend');\n    },\n    chart: 'chartPurchaseRoas',\n  },\n  purchases: {\n    key: 'purchases',\n    label: 'Purchases',\n    shortLabel: 'Purchases',\n    showInCreativeCard: ['video', 'image', 'copy', 'ad', 'adName'],\n    showInCreativeTable: ['video', 'image', 'copy', 'ad', 'adName', 'Segments'],\n    showInServices: adsServices,\n    showInRules: ['account', 'campaign', 'adset', 'ad'],\n    format: 'decimal',\n    toFixed: 1,\n    minimumFractionDigits: 0,\n    type: 'ads',\n    showInCreativeByDefault: true,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    chart: 'purchasesChart',\n    calculateSum: (items) => {\n      return sum(items, 'purchases');\n    },\n  },\n  clicks: {\n    key: 'clicks',\n    label: 'Clicks',\n    shortLabel: 'Clicks',\n    showInCreativeCard: ['all'],\n    showInCreativeTable: ['all'],\n    showInServices: adsServices,\n    format: 'decimal',\n    toFixed: 0,\n    type: 'ads',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    chart: 'clicksChart',\n    calculateSum: (items) => {\n      return sum(items, 'clicks');\n    },\n  },\n  impressions: {\n    key: 'impressions',\n    label: 'Impressions',\n    shortLabel: 'Impressions',\n    showInCreativeCard: ['all'],\n    showInCreativeTable: ['all'],\n    showInServices: adsServices,\n    format: 'decimal',\n    toFixed: 0,\n    type: 'ads',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    showInRules: ['account', 'campaign', 'adset', 'ad'],\n    allowOrderBy: true,\n    chart: 'impressionsChart',\n    calculateSum: (items) => {\n      return sum(items, 'impressions');\n    },\n  },\n  cpc: {\n    key: 'cpc',\n    label: 'CPC',\n    shortLabel: 'CPC',\n    showInCreativeCard: ['all'],\n    showInCreativeTable: ['all'],\n    showInServices: adsServices,\n    format: 'currency',\n    toFixed: 2,\n    type: 'ads',\n    showInCreativeByDefault: true,\n    showInPixelByDefault: false,\n    showInRules: ['account', 'campaign', 'adset', 'ad'],\n    allowOrderBy: true,\n    valueIsNegative: true,\n    chart: 'cpcChart',\n    calculateSum: (items) => {\n      return divide(items, 'spend', 'clicks');\n    },\n  },\n  ctr: {\n    key: 'ctr',\n    label: 'CTR',\n    shortLabel: 'CTR',\n    showInCreativeCard: [],\n    showInCreativeTable: ['all'],\n    showInServices: adsServices,\n    format: 'percent',\n    toFixed: 2,\n    minimumFractionDigits: 0,\n    type: 'ads',\n    showInCreativeByDefault: true,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    chart: 'ctrChart',\n    calculateSum: (items) => {\n      return divide(items, 'clicks', 'impressions');\n    },\n  },\n  cpm: {\n    key: 'cpm',\n    label: 'CPM',\n    shortLabel: 'CPM',\n    showInCreativeCard: [],\n    showInCreativeTable: ['all'],\n    showInServices: adsServices,\n    format: 'currency',\n    toFixed: 2,\n    type: 'ads',\n    showInCreativeByDefault: true,\n    showInPixelByDefault: false,\n    showInRules: ['account', 'campaign', 'adset', 'ad'],\n    allowOrderBy: true,\n    valueIsNegative: true,\n    chart: 'cpmChart',\n    calculateSum: (items) => {\n      return divide(items, 'spend', 'impressions', 1000);\n    },\n  },\n  cpa: {\n    key: 'cpa',\n    label: 'CPA',\n    shortLabel: 'CPA',\n    showInCreativeCard: ['all'],\n    showInCreativeTable: ['all'],\n    showInRules: ['account', 'campaign', 'adset', 'ad'],\n    showInServices: adsServices,\n    format: 'currency',\n    toFixed: 2,\n    type: 'ads',\n    showInCreativeByDefault: true,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    valueIsNegative: true,\n    chart: 'cpaChart',\n    calculateSum: (items) => {\n      return divide(items, 'spend', 'purchases');\n    },\n  },\n  aov: {\n    key: 'aov',\n    label: 'AOV',\n    shortLabel: 'AOV',\n    showInCreativeCard: ['all'],\n    showInCreativeTable: ['all'],\n    showInServices: adsServices,\n    format: 'currency',\n    toFixed: 0,\n    type: 'ads',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    chart: 'aovChart',\n    calculateSum: (items) => {\n      return divide(items, 'conversionValue', 'purchases');\n    },\n  },\n  allConversionValue: {\n    label: 'All CV',\n    shortLabel: 'All CV',\n    key: 'allConversionValue',\n    showInServices: ['google-ads'],\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    format: 'currency',\n    toFixed: 2,\n    type: 'ads',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    hideInActivities: true,\n    calculateSum: (items) => {\n      return sum(items, 'allConversionValue');\n    },\n  },\n  allConversions: {\n    key: 'allConversions',\n    label: 'All Purchases',\n    shortLabel: 'All Purchases',\n    showInServices: ['google-ads'],\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    format: 'decimal',\n    toFixed: 0,\n    type: 'ads',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    hideInActivities: true,\n    calculateSum: (items) => {\n      return sum(items, 'allConversions');\n    },\n  },\n  bidAmount: {\n    key: 'bidAmount',\n    label: 'Bid Amount',\n    shortLabel: 'Bid Amount',\n    showInServices: ['facebook-ads'],\n    showInRules: ['adset'],\n    showInCreativeCard: [],\n    format: 'currency',\n    toFixed: 2,\n    type: 'ads',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    showInCreativeTable: [],\n    hideInActivities: true,\n    calculateSum: (items) => {\n      return sum(items, 'bidAmount');\n    },\n  },\n  outboundClicks: {\n    key: 'outboundClicks',\n    label: 'Outbound Clicks',\n    shortLabel: 'OB Clicks',\n    showInServices: ['facebook-ads'],\n    showInRules: ['account', 'campaign', 'adset', 'ad'],\n    showInCreativeCard: [],\n    showInCreativeTable: ['all'],\n    format: 'decimal',\n    toFixed: 0,\n    type: 'ads',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    hideInActivities: true,\n    calculateSum: (items) => {\n      return sum(items, 'outboundClicks');\n    },\n  },\n  outboundCtr: {\n    key: 'outboundCtr',\n    label: 'Outbound CTR',\n    shortLabel: 'OB CTR',\n    showInServices: ['facebook-ads'],\n    showInRules: ['account', 'campaign', 'adset', 'ad'],\n    showInCreativeCard: [],\n    showInCreativeTable: ['all'],\n    format: 'percent',\n    toFixed: 2,\n    minimumFractionDigits: 0,\n    type: 'ads',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    chart: 'ctrChart',\n    hideInActivities: true,\n    calculateSum: (items) => {\n      return divide(items, 'outboundClicks', 'impressions');\n    },\n  },\n  oneDayViewConversionValue: {\n    key: 'oneDayViewConversionValue',\n    label: '1 Day View CV',\n    shortLabel: '1D CV',\n    showInServices: [],\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    format: 'currency',\n    toFixed: 2,\n    type: 'ads',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    hideInActivities: true,\n    calculateSum: (items) => {\n      return sum(items, 'oneDayViewConversionValue');\n    },\n  },\n  threeSecondVideoView: {\n    key: 'threeSecondVideoView',\n    label: 'Thumb Stop View (3sec Video View)',\n    shortLabel: 'TSV (3s VV)',\n    showInServices: ['facebook-ads', 'google-ads'],\n    showInCreativeCard: ['video'],\n    showInCreativeTable: ['video'],\n    format: 'decimal',\n    toFixed: 0,\n    hideInPixel: true,\n    type: 'ads',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    hideInActivities: true,\n    calculateSum: (items) => {\n      return sum(items, 'threeSecondVideoView');\n    },\n  },\n  sixSecondVideoView: {\n    key: 'sixSecondVideoView',\n    label: 'Thumb Stop View (6sec Video View)',\n    shortLabel: 'TSV (6s VV)',\n    showInServices: ['tiktok-ads'],\n    showInCreativeCard: ['video'],\n    showInCreativeTable: ['video'],\n    format: 'decimal',\n    toFixed: 0,\n    hideInPixel: true,\n    type: 'ads',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    hideInActivities: true,\n    calculateSum: (items) => {\n      return sum(items, 'sixSecondVideoView');\n    },\n  },\n  totalVideoView: {\n    key: 'totalVideoView',\n    label: 'Total Video View',\n    shortLabel: 'TVV',\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInServices: ['google-ads'],\n    format: 'decimal',\n    toFixed: 0,\n    hideInPixel: true,\n    type: 'ads',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    hideInActivities: true,\n    calculateSum: (items) => {\n      return sum(items, 'totalVideoView');\n    },\n  },\n  thumbStopRatio: {\n    key: 'thumbStopRatio',\n    label: 'Thumb Stop Ratio',\n    shortLabel: 'Thumb Stop Ratio',\n    showInCreativeCard: ['video'],\n    showInCreativeTable: ['video'],\n    showInServices: ['facebook-ads', 'google-ads', 'tiktok-ads'],\n    format: 'percent',\n    toFixed: 2,\n    hideInPixel: true,\n    type: 'ads',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    hideInActivities: true,\n    calculateSum: (items) => {\n      return sum(items, 'thumbStopRatio');\n    },\n  },\n  conversionRate: {\n    key: 'conversionRate',\n    label: 'Conversion Rate',\n    shortLabel: 'Conversion Rate',\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInServices: adsServices,\n    format: 'percent',\n    toFixed: 2,\n    type: 'ads',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    hideInPixel: true,\n    hideInActivities: true,\n  },\n  campaignsConversionValue: {\n    key: 'campaignsConversionValue',\n    label: 'Campaigns Conversion Value',\n    shortLabel: 'Campaigns Conversion Value',\n    showInServices: ['klaviyo'],\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    hideInPixel: true,\n    format: 'decimal',\n    toFixed: 0,\n    type: 'ads',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    chart: 'chartKlaviyoPlacedOrderTotalPriceCampaigns',\n    calculateSum: (items) => {\n      return sum(items, 'campaignsConversionValue');\n    },\n  },\n  flowsConversionValue: {\n    key: 'flowsConversionValue',\n    label: 'Flows Conversion Value',\n    shortLabel: 'Flows Conversion Value',\n    showInServices: ['klaviyo'],\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    hideInPixel: true,\n    format: 'decimal',\n    toFixed: 0,\n    type: 'ads',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    chart: 'chartKlaviyoPlacedOrderTotalPriceFlows',\n    calculateSum: (items) => {\n      return sum(items, 'flowsConversionValue');\n    },\n  },\n  unsubscribed: {\n    key: 'unsubscribed',\n    label: 'Unsubscribed',\n    shortLabel: 'Unsubscribed',\n    showInServices: ['klaviyo'],\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    hideInPixel: true,\n    format: 'decimal',\n    toFixed: 0,\n    type: 'ads',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    chart: 'chartKlaviyoUnsubscribed',\n    calculateSum: (items) => {\n      return sum(items, 'unsubscribed');\n    },\n  },\n  subscribedToList: {\n    key: 'subscribedToList',\n    label: 'Subscribed To List',\n    shortLabel: 'Subscribed To List',\n    showInServices: ['klaviyo'],\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    hideInPixel: true,\n    format: 'decimal',\n    toFixed: 0,\n    type: 'ads',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    chart: 'chartKlaviyoSubscribedToList',\n    calculateSum: (items) => {\n      return sum(items, 'subscribedToList');\n    },\n  },\n  openedEmail: {\n    key: 'openedEmail',\n    label: 'Opened Email',\n    shortLabel: 'Opened Email',\n    showInServices: ['klaviyo'],\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    hideInPixel: true,\n    format: 'decimal',\n    toFixed: 0,\n    type: 'ads',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    calculateSum: (items) => {\n      return sum(items, 'openedEmail');\n    },\n    hideInActivities: true,\n  },\n  receivedEmail: {\n    key: 'receivedEmail',\n    label: 'Received Email',\n    shortLabel: 'Received Email',\n    showInServices: ['klaviyo'],\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    hideInPixel: true,\n    format: 'decimal',\n    toFixed: 0,\n    type: 'ads',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    chart: 'chartKlaviyoReceivedEmail',\n    calculateSum: (items) => {\n      return sum(items, 'receivedEmail');\n    },\n  },\n  clickedSms: {\n    key: 'clickedSms',\n    label: 'Clicked SMS',\n    shortLabel: 'Clicked SMS',\n    showInServices: ['klaviyo'],\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    hideInPixel: true,\n    format: 'decimal',\n    toFixed: 0,\n    type: 'ads',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    chart: 'chartKlaviyoClickedSms',\n    calculateSum: (items) => {\n      return sum(items, 'clickedSms');\n    },\n  },\n  clickedEmail: {\n    key: 'clickedEmail',\n    label: 'Clicked Email',\n    shortLabel: 'Clicked Email',\n    showInServices: ['klaviyo'],\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    hideInPixel: true,\n    format: 'decimal',\n    toFixed: 0,\n    type: 'ads',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    chart: 'chartKlaviyoClickedEmail',\n    calculateSum: (items) => {\n      return sum(items, 'clickedEmail');\n    },\n  },\n  customSpend: {\n    key: 'customSpend',\n    label: 'Custom Spend',\n    shortLabel: 'Custom Spend',\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    format: 'currency',\n    toFixed: 2,\n    type: 'shop',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    calculateSum: (items) => {\n      return sum(items, 'customSpend');\n    },\n  },\n\n  ...blendedMetrics,\n  ...shopMetrics,\n  ...pixelMetrics,\n  ...subscriptionMetrics,\n};",
        "type": "MetricsDictionary"
      }
    ]
  },
  {
    "file": "@tw/constants/Metrics/benchmarkMetrics.ts",
    "exports": [
      {
        "name": " supportedMetrics",
        "text": "\n\nexport const supportedMetrics: MetricsDictionaryWithSelector = {\n  \"facebook-ads\": {\n    cpa: {\n      ...allMetrics.cpa!,\n      selector: \"facebookCpaBenchmarksTotal\",\n      chart: \"facebookCpaBenchmarksChart\",\n      provider: \"facebook-ads\",\n      userSelector: \"facebookCpa\",\n      userChart: \"facebookCpaChart\",\n      tip: \"Facebook Cost per Acquisition. Spend / Purchases\",\n    },\n    cpc: {\n      ...allMetrics.cpc!,\n      selector: \"facebookCpcBenchmarksTotal\",\n      chart: \"facebookCpcBenchmarksChart\",\n      provider: \"facebook-ads\",\n      userSelector: \"averageFacebookCpc\",\n      userChart: \"chartFacebookCpc\",\n      tip: \"Facebook Cost per Click. Spend / Clicks\",\n    },\n    roas: {\n      ...allMetrics.roas!,\n      selector: \"facebookRoasBenchmarksTotal\",\n      chart: \"facebookRoasBenchmarksChart\",\n      provider: \"facebook-ads\",\n      userSelector: \"fb_ads_purchase_roas\",\n      userChart: \"chartFacebookPurchaseRoas\",\n      tip: \"Facebook Return on Ad Spend. Conversion Value / Spend\",\n    },\n    cpm: {\n      ...allMetrics.cpm!,\n      selector: \"facebookCpmBenchmarksTotal\",\n      chart: \"facebookCpmBenchmarksChart\",\n      provider: \"facebook-ads\",\n      userSelector: \"averageFacebookCpm\",\n      userChart: \"chartFacebookCpm\",\n      tip: \"Facebook Cost per Mile [ Cost per 1,000 impressions ]. (Spend / Impressions) * 1,000.\",\n    },\n  },\n  \"google-ads\": {\n    cpa: {\n      ...allMetrics.cpa!,\n      selector: \"googleCpaBenchmarksTotal\",\n      chart: \"googleCpaBenchmarksChart\",\n      provider: \"google-ads\",\n      userSelector: \"googleAllCpa\",\n      userChart: \"googleAllCpaChart\",\n      tip: \"Google Cost per Acquisition. Spend / Purchases\",\n    },\n    cpc: {\n      ...allMetrics.cpc!,\n      selector: \"googleCpcBenchmarksTotal\",\n      chart: \"googleCpcBenchmarksChart\",\n      provider: \"google-ads\",\n      userSelector: \"googleCpc\",\n      userChart: \"googleCpcChart\",\n      tip: \"Google Cost per Click. Spend / Clicks\",\n    },\n    roas: {\n      ...allMetrics.roas!,\n      selector: \"googleRoasBenchmarksTotal\",\n      chart: \"googleRoasBenchmarksChart\",\n      provider: \"google-ads\",\n      userSelector: \"ga_ROAS\",\n      userChart: \"googleAdsRoasChart\",\n      tip: \"Google Return on Ad Spend. Conversion Value / Spend\",\n    },\n    cpm: {\n      ...allMetrics.cpm!,\n      selector: \"googleCpmBenchmarksTotal\",\n      chart: \"googleCpmBenchmarksChart\",\n      provider: \"google-ads\",\n      userSelector: \"totalGoogleAdsCpm\",\n      userChart: \"totalGoogleAdsCpmChart\",\n      tip: \"Google Ads Cost per Mile [ Cost per 1,000 impressions ]. (Spend / Impressions) * 1,000.\",\n    },\n  },\n  \"tiktok-ads\": {\n    cpa: {\n      ...allMetrics.cpa!,\n      selector: \"tiktokCpaBenchmarksTotal\",\n      chart: \"tiktokCpaBenchmarksChart\",\n      provider: \"tiktok-ads\",\n      userSelector: \"tiktokCpa\",\n      userChart: \"tiktokCpaChart\",\n      tip: \"Tiktok Cost per Acquisition. Spend / Purchases\",\n    },\n\n    cpc: {\n      ...allMetrics.cpc!,\n      selector: \"tiktokCpcBenchmarksTotal\",\n      chart: \"tiktokCpcBenchmarksChart\",\n      provider: \"tiktok-ads\",\n      userSelector: \"averageTiktokCpc\",\n      userChart: \"chartTiktokCpc\",\n      tip: \"tiktok Cost per Click. Spend / Clicks\",\n    },\n    roas: {\n      ...allMetrics.roas!,\n      selector: \"tiktokRoasBenchmarksTotal\",\n      chart: \"tiktokRoasBenchmarksChart\",\n      provider: \"tiktok-ads\",\n      userSelector: \"tiktokRoas\",\n      userChart: \"tiktokRoasChart\",\n      tip: \"Tiktok Return on Ad Spend. Conversion Value / Spend\",\n    },\n    cpm: {\n      ...allMetrics.cpm!,\n      selector: \"tiktokCpmBenchmarksTotal\",\n      chart: \"tiktokCpmBenchmarksChart\",\n      provider: \"tiktok-ads\",\n      userSelector: \"averageTiktokCpm\",\n      userChart: \"chartTiktokCpm\",\n      tip: \"Tiktok Cost per Mile [ Cost per 1,000 impressions ]. (Spend / Impressions) * 1,000.\",\n    },\n  },\n  \"triple-whale\": {\n    blendedCpa: {\n      ...allMetrics.blendedCpa!,\n      selector: \"blendedCpaBenchmarksTotal\",\n      chart: \"blendedCpaBenchmarksChart\",\n      provider: \"triple-whale\",\n      tip: \"Blended Cost per Acquisition. Spend / Purchases\",\n    },\n    blendedCPC: {\n      ...allMetrics.blendedCPC!,\n      selector: \"blendedCpcBenchmarksTotal\",\n      chart: \"blendedCpcBenchmarksChart\",\n      provider: \"triple-whale\",\n      tip: \"Blended Cost per Click. Spend / Clicks\",\n    },\n    blendedRoas: {\n      ...allMetrics.blendedRoas!,\n      selector: \"blendedRoasBenchmarksTotal\",\n      chart: \"blendedRoasBenchmarksChart\",\n      provider: \"triple-whale\",\n      color: \"#10B981\",\n      tip: \"Blended Return on Ad Spend. Conversion Value / Spend\",\n    },\n    blendedCpm: {\n      ...allMetrics.blendedCpm!,\n      selector: \"blendedCpmBenchmarksTotal\",\n      chart: \"blendedCpmBenchmarksChart\",\n      provider: \"triple-whale\",\n      tip: \"Blended Cost per Mile [ Cost per 1,000 impressions ]. (Spend / Impressions) * 1,000.\",\n    },\n  },\n};",
        "type": "MetricsDictionaryWithSelector"
      },
      {
        "name": " colorsMetrics",
        "text": "\n\nexport const colorsMetrics = [\"#10B981\", \"#EA643D\", \"#B0446A\", \"#3159F3\"];",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/constants/Metrics/blendedMetrics.ts",
    "exports": [
      {
        "name": " blendedMetrics",
        "text": "\n\nexport const blendedMetrics: MetricsDictionary = {\n  blendedConversionValue: {\n    key: 'blendedConversionValue',\n    label: 'Blended Conversion Value',\n    shortLabel: 'Blended CV',\n    type: 'ads',\n    toFixed: 2,\n    format: 'currency',\n    hideInPixel: true,\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    hideInActivities: true,\n    dependOnServices: servicesInBlended,\n    showInServices: ['triple-whale'],\n  },\n  blendedSpend: {\n    key: 'blendedSpend',\n    label: 'Blended Spend',\n    shortLabel: 'Blended Spend',\n    type: 'ads',\n    toFixed: 2,\n    format: 'currency',\n    hideInPixel: true,\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    dependOnServices: servicesInBlended,\n    showInServices: ['triple-whale'],\n    chart: 'chartBlendedAds',\n  },\n  blendedRoas: {\n    key: 'blendedRoas',\n    label: 'Blended ROAS',\n    shortLabel: 'Blended ROAS',\n    type: 'ads',\n    toFixed: 2,\n    format: 'decimal',\n    hideInPixel: true,\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    showInRules: ['account'],\n    allowOrderBy: true,\n    chart: 'chartRoas',\n    dependOnServices: servicesInBlended,\n    showInServices: ['triple-whale'],\n    calculateSum: (items) => {\n      return sum(items, 'blendedRoas');\n    },\n  },\n  blendedCpm: {\n    key: 'blendedCpm',\n    label: 'Blended CPM',\n    shortLabel: 'Blended CPM',\n    showInCreativeCard: [],\n    showInCreativeTable: ['all'],\n    showInServices: ['triple-whale'],\n    format: 'currency',\n    toFixed: 2,\n    type: 'ads',\n    showInCreativeByDefault: true,\n    showInPixelByDefault: false,\n    showInRules: ['account', 'campaign', 'adset', 'ad'],\n    allowOrderBy: true,\n    valueIsNegative: true,\n    chart: 'cpmChart',\n    calculateSum: (items) => {\n      return sum(items, 'blendedCpm');\n    },\n  },\n  blendedCPC: {\n    key: 'blendedCPC',\n    label: 'Blended CPC',\n    shortLabel: 'Blended CPC',\n    type: 'ads',\n    toFixed: 2,\n    format: 'currency',\n    hideInPixel: true,\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    showInRules: ['account'],\n    allowOrderBy: true,\n    chart: 'chartCPC',\n    dependOnServices: servicesInBlended,\n    showInServices: ['triple-whale'],\n    valueIsNegative: true,\n    calculateSum: (items) => {\n      return sum(items, 'blendedCPC');\n    },\n  },\n  blendedCTR: {\n    key: 'blendedCTR',\n    label: 'Blended CTR',\n    shortLabel: 'Blended CTR',\n    type: 'ads',\n    toFixed: 2,\n    format: 'percent',\n    hideInPixel: true,\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    showInRules: ['account'],\n    allowOrderBy: true,\n    chart: 'chartCTR',\n    dependOnServices: servicesInBlended,\n    showInServices: ['triple-whale'],\n    calculateSum: (items) => {\n      return sum(items, 'blendedCTR');\n    },\n  },\n  blendedNewCustomerRoas: {\n    key: 'blendedNewCustomerRoas',\n    label: 'Blended New Customer ROAS',\n    shortLabel: 'Blended NC ROAS',\n    type: 'ads',\n    toFixed: 2,\n    format: 'decimal',\n    hideInPixel: true,\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    dependOnServices: servicesInBlended,\n    showInServices: ['triple-whale'],\n    calculateSum: (items) => {\n      return sum(items, 'blendedNewCustomerRoas');\n    },\n    chart: 'chartNewCustomerRoas',\n  },\n  blendedNcCpa: {\n    key: 'blendedNcCpa',\n    label: 'Blended New Customer CPA',\n    shortLabel: 'Blended NC CPA',\n    type: 'ads',\n    toFixed: 2,\n    format: 'currency',\n    hideInPixel: true,\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    dependOnServices: servicesInBlended,\n    showInServices: ['triple-whale'],\n    calculateSum: (items) => {\n      return sum(items, 'blendedNcCpa');\n    },\n    chart: 'chartNewCustomersCpa',\n  },\n  blendedCpa: {\n    key: 'blendedCpa',\n    label: 'Blended CPA',\n    shortLabel: 'Blended CPA',\n    type: 'ads',\n    toFixed: 2,\n    format: 'currency',\n    hideInPixel: true,\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    dependOnServices: servicesInBlended,\n    showInServices: ['triple-whale'],\n    valueIsNegative: true,\n    calculateSum: (items) => {\n      return sum(items, 'blendedCpa');\n    },\n    chart: 'chartTotalCpa',\n  },\n  blendedPoas: {\n    key: 'blendedPoas',\n    label: 'Blended POAS',\n    shortLabel: 'Blended POAS',\n    type: 'ads',\n    toFixed: 2,\n    format: 'decimal',\n    hideInPixel: true,\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    dependOnServices: servicesInBlended,\n    showInServices: ['triple-whale'],\n    calculateSum: (items) => {\n      return sum(items, 'blendedPoas');\n    },\n    chart: 'poasChart',\n  },\n  netProfit: {\n    key: 'netProfit',\n    label: 'Net Profit',\n    shortLabel: 'Net Profit',\n    type: 'shop',\n    toFixed: 2,\n    format: 'currency',\n    hideInPixel: true,\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    dependOnServices: servicesInBlended,\n    showInServices: ['triple-whale'],\n    chart: 'totalNetProfitChart',\n  },\n};",
        "type": "MetricsDictionary"
      }
    ]
  },
  {
    "file": "@tw/constants/Metrics/constants.ts",
    "exports": [
      {
        "name": " servicesInBlended",
        "text": "\n\nexport const servicesInBlended: ServicesIds[] = [\n  'facebook-ads',\n  'google-ads',\n  'tiktok-ads',\n  'pinterest-ads',\n  'snapchat-ads',\n  'shopify',\n  'twitter-ads',\n  'bing'\n];",
        "type": "ServicesIds[]"
      },
      {
        "name": " adsServices",
        "text": "\n\nexport const adsServices: ServicesIds[] = [\n  'facebook-ads',\n  'google-ads',\n  'tiktok-ads',\n  'pinterest-ads',\n  'snapchat-ads',\n  'twitter-ads',\n  'bing'\n];",
        "type": "ServicesIds[]"
      },
      {
        "name": " adsAndEmailServices",
        "text": "\n\nexport const adsAndEmailServices: ServicesIds[] = adsServices.concat(['klaviyo']);",
        "type": "ServicesIds[]"
      }
    ]
  },
  {
    "file": "@tw/constants/Metrics/pixelMetrics.ts",
    "exports": [
      {
        "name": " pixelMetrics",
        "text": "\n\nexport const pixelMetrics: MetricsDictionary = {\n  pixelRoas: {\n    key: 'pixelRoas',\n    label: 'Pixel ROAS',\n    shortLabel: 'ROAS',\n    showInCreativeCard: ['product', 'sku'],\n    showInCreativeTable: ['video', 'image', 'copy', 'ad', 'adName', 'product', 'sku', 'Segments'],\n    showInRules: ['account', 'campaign', 'adset', 'ad'],\n    format: 'decimal',\n    toFixed: 2,\n    type: 'pixel',\n    showInCreativeByDefault: true,\n    showInInfluencersHub: true,\n    showInPixelByDefault: true,\n    showInReport: true,\n    allowOrderBy: true,\n    pixelIndex: 4,\n    calculateSum: (items) => {\n      return divide(items, 'pixelConversionValue', 'spend');\n    },\n  },\n  pixelNcRoas: {\n    key: 'pixelNcRoas',\n    label: 'Pixel New Customers ROAS',\n    shortLabel: 'NC ROAS',\n    showInCreativeCard: ['video', 'image', 'copy', 'ad', 'adName', 'product', 'sku'],\n    showInCreativeTable: ['video', 'image', 'copy', 'ad', 'adName', 'Segments', 'product', 'sku'],\n    showInRules: ['account', 'campaign', 'adset', 'ad'],\n    format: 'decimal',\n    toFixed: 2,\n    type: 'pixel',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    showInInfluencersHub: true,\n    allowOrderBy: true,\n    calculateSum: (items) => {\n      return divide(items, 'pixelNcConversionValue', 'spend');\n    },\n  },\n  pixelPurchases: {\n    key: 'pixelPurchases',\n    label: 'Pixel Purchases',\n    shortLabel: 'Purchases',\n    showInCreativeCard: ['video', 'image', 'copy', 'ad', 'adName', 'product', 'sku'],\n    showInCreativeTable: ['video', 'image', 'copy', 'ad', 'adName', 'Segments', 'product', 'sku'],\n    showInRules: ['account', 'campaign', 'adset', 'ad'],\n    showInInfluencersHub: true,\n    format: 'decimal',\n    toFixed: 1,\n    minimumFractionDigits: 0,\n    type: 'pixel',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: true,\n    showInReport: true,\n    allowOrderBy: true,\n    pixelIndex: 5,\n    calculateSum: (items) => {\n      return sum(items, 'pixelPurchases');\n    },\n  },\n  pixelNcPurchases: {\n    key: 'pixelNcPurchases',\n    label: 'Pixel New Customer Purchases',\n    shortLabel: 'NCP',\n    showInCreativeCard: ['video', 'image', 'copy', 'ad', 'adName', 'product', 'sku'],\n    showInCreativeTable: ['video', 'image', 'copy', 'ad', 'adName', 'Segments', 'product', 'sku'],\n    showInRules: ['account', 'campaign', 'adset', 'ad'],\n    showInInfluencersHub: true,\n    format: 'decimal',\n    toFixed: 1,\n    minimumFractionDigits: 0,\n    type: 'pixel',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    calculateSum: (items) => {\n      return sum(items, 'pixelNcPurchases');\n    },\n  },\n  pixelConversionValue: {\n    key: 'pixelConversionValue',\n    label: 'Pixel CV',\n    shortLabel: 'CV',\n    showInCreativeCard: ['product', 'sku'],\n    showInCreativeTable: ['video', 'image', 'copy', 'ad', 'adName', 'Segments', 'product', 'sku'],\n    showInInfluencersHub: true,\n    format: 'currency',\n    toFixed: 2,\n    type: 'pixel',\n    showInCreativeByDefault: true,\n    showInPixelByDefault: true,\n    showInReport: true,\n    allowOrderBy: true,\n    pixelIndex: 6,\n    calculateSum: (items) => {\n      return sum(items, 'pixelConversionValue');\n    },\n  },\n  pixelNcConversionValue: {\n    key: 'pixelNcConversionValue',\n    label: 'Pixel New Customer CV',\n    shortLabel: 'NCV',\n    showInCreativeCard: ['video', 'image', 'copy', 'ad', 'adName', 'product', 'sku'],\n    showInCreativeTable: ['video', 'image', 'copy', 'ad', 'adName', 'Segments', 'product', 'sku'],\n    showInInfluencersHub: true,\n    format: 'currency',\n    toFixed: 2,\n    type: 'pixel',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    calculateSum: (items) => {\n      return sum(items, 'pixelNcConversionValue');\n    },\n  },\n  pixelVisitors: {\n    key: 'pixelVisitors',\n    label: 'Pixel Sessions',\n    shortLabel: 'Sessions',\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInRules: ['account', 'campaign', 'adset', 'ad'],\n    format: 'decimal',\n    toFixed: 0,\n    type: 'pixel',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: true,\n    showInInfluencersHub: true,\n    allowOrderBy: true,\n    calculateSum: (items) => {\n      return sum(items, 'pixelVisitors');\n    },\n  },\n  pixelUniqueVisitors: {\n    key: 'pixelUniqueVisitors',\n    label: 'Pixel Unique Visitors',\n    shortLabel: 'Unique Visitors',\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    format: 'decimal',\n    toFixed: 0,\n    type: 'pixel',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    showInInfluencersHub: true,\n    allowOrderBy: true,\n    calculateSum: (items) => {\n      return sum(items, 'pixelUniqueVisitors');\n    },\n  },\n  pixelCostPerVisitor: {\n    key: 'pixelCostPerVisitor',\n    label: 'Pixel Cost Per Visitors',\n    shortLabel: 'CPV',\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInInfluencersHub: true,\n    format: 'currency',\n    toFixed: 2,\n    type: 'pixel',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    calculateSum: (items) => {\n      return divide(items, 'spend', 'pixelUniqueVisitors');\n    },\n  },\n  pixelNewVisitors: {\n    key: 'pixelNewVisitors',\n    label: 'Pixel New Visitors',\n    shortLabel: 'NV',\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInInfluencersHub: true,\n    format: 'decimal',\n    toFixed: 0,\n    type: 'pixel',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    calculateSum: (items) => {\n      return sum(items, 'pixelNewVisitors');\n    },\n  },\n  pixelCostPerNewVisitor: {\n    key: 'pixelCostPerNewVisitor',\n    label: 'Pixel Cost Per New Visitors',\n    shortLabel: 'Cost NV',\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInInfluencersHub: true,\n    format: 'currency',\n    toFixed: 2,\n    type: 'pixel',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    calculateSum: (items) => {\n      return divide(items, 'spend', 'pixelNewVisitors');\n    },\n  },\n  pixelUniqueAtc: {\n    key: 'pixelUniqueAtc',\n    label: 'Pixel Unique Add To Carts',\n    shortLabel: 'ATC',\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInRules: ['account', 'campaign', 'adset', 'ad'],\n    format: 'decimal',\n    toFixed: 0,\n    type: 'pixel',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    showInInfluencersHub: true,\n    allowOrderBy: false,\n    calculateSum: (items) => {\n      return sum(items, 'pixelUniqueAtc');\n    },\n  },\n  pixelCostPerAtc: {\n    key: 'pixelCostPerAtc',\n    label: 'Pixel Cost Per Add to Cart',\n    shortLabel: 'Cost ATC',\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInInfluencersHub: true,\n    format: 'currency',\n    toFixed: 2,\n    type: 'pixel',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    calculateSum: (items) => {\n      return divide(items, 'spend', 'pixelUniqueAtc');\n    },\n  },\n  pixelCpa: {\n    key: 'pixelCpa',\n    label: 'Pixel CPA',\n    shortLabel: 'CPA',\n    showInCreativeCard: ['video', 'image', 'copy', 'ad', 'adName', 'product', 'sku'],\n    showInCreativeTable: ['video', 'image', 'copy', 'ad', 'adName', 'Segments', 'product', 'sku'],\n    format: 'currency',\n    toFixed: 2,\n    type: 'pixel',\n    showInCreativeByDefault: true,\n    showInPixelByDefault: true,\n    showInInfluencersHub: true,\n    showInReport: true,\n    showInRules: ['account', 'campaign', 'adset', 'ad'],\n    allowOrderBy: true,\n    pixelIndex: 7,\n    valueIsNegative: true,\n    calculateSum: (items) => {\n      return divide(items, 'spend', 'pixelPurchases');\n    },\n  },\n  pixelNcCpa: {\n    key: 'pixelNcCpa',\n    label: 'Pixel New Customer CPA',\n    shortLabel: 'NC CPA',\n    showInCreativeCard: ['video', 'image', 'copy', 'ad', 'adName', 'product', 'sku'],\n    showInCreativeTable: [\n      'video',\n      'image',\n      'copy',\n      'ad',\n      'adName',\n      'product',\n      'Segments',\n      'product',\n      'sku',\n    ],\n    format: 'currency',\n    toFixed: 2,\n    type: 'pixel',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: true,\n    showInInfluencersHub: true,\n    showInReport: true,\n    showInRules: ['account', 'campaign', 'adset', 'ad'],\n    allowOrderBy: true,\n    pixelIndex: 10,\n    valueIsNegative: true,\n    calculateSum: (items) => {\n      return divide(items, 'spend', 'pixelNcPurchases');\n    },\n  },\n  pixelAov: {\n    key: 'pixelAov',\n    label: 'Pixel AOV',\n    shortLabel: 'AOV',\n    showInCreativeCard: ['video', 'image', 'copy', 'ad', 'adName'],\n    showInCreativeTable: ['video', 'image', 'copy', 'ad', 'adName', 'Segments'],\n    format: 'currency',\n    toFixed: 2,\n    type: 'pixel',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: true,\n    showInInfluencersHub: true,\n    showInRules: ['account', 'campaign', 'adset', 'ad'],\n    showInReport: true,\n    allowOrderBy: true,\n    pixelIndex: 8,\n    calculateSum: (items) => {\n      return divide(items, 'pixelConversionValue', 'pixelPurchases');\n    },\n  },\n  pixelNcAov: {\n    key: 'pixelNcAov',\n    label: 'Pixel New Customer AOV',\n    shortLabel: 'NC AOV',\n    showInCreativeCard: ['video', 'image', 'copy', 'ad', 'adName'],\n    showInCreativeTable: ['video', 'image', 'copy', 'ad', 'adName', 'Segments'],\n    showInInfluencersHub: true,\n    format: 'currency',\n    toFixed: 2,\n    type: 'pixel',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    calculateSum: (items) => {\n      return divide(items, 'pixelNcConversionValue', 'pixelNcPurchases');\n    },\n  },\n  pixelConversionRate: {\n    key: 'pixelConversionRate',\n    label: 'Pixel Conversion Rate',\n    shortLabel: 'CR',\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInInfluencersHub: true,\n    format: 'percent',\n    toFixed: 2,\n    type: 'pixel',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    calculateSum: (items) => {\n      return divide(items, 'pixelPurchases', 'pixelVisitors');\n    },\n  },\n  pixelNcConversionRate: {\n    key: 'pixelNcConversionRate',\n    label: 'Pixel New Customer Conversion Rate',\n    shortLabel: 'NC CR',\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInInfluencersHub: true,\n    format: 'percent',\n    toFixed: 2,\n    type: 'pixel',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    calculateSum: (items) => {\n      return divide(items, 'pixelNcPurchases', 'pixelNewVisitors');\n    },\n  },\n  pixelEmailSignup: {\n    key: 'pixelEmailSignup',\n    label: 'Pixel Email Sign Up',\n    shortLabel: 'Email SU',\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInInfluencersHub: true,\n    format: 'decimal',\n    toFixed: 0,\n    type: 'pixel',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    calculateSum: (items) => {\n      return sum(items, 'pixelEmailSignup');\n    },\n  },\n  pixelCostPerEmailSignup: {\n    key: 'pixelCostPerEmailSignup',\n    label: 'Pixel Cost Per Email Sign Up',\n    shortLabel: 'Cost SU',\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInInfluencersHub: true,\n    format: 'currency',\n    toFixed: 2,\n    type: 'pixel',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    calculateSum: (items) => {\n      return divide(items, 'spend', 'pixelEmailSignup');\n    },\n  },\n  pixelEmailSignupRate: {\n    key: 'pixelEmailSignupRate',\n    label: 'Pixel Email Sign Up Rate',\n    shortLabel: 'Email SUR',\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInInfluencersHub: true,\n    format: 'percent',\n    toFixed: 2,\n    type: 'pixel',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    calculateSum: (items) => {\n      return divide(items, 'pixelEmailSignup', 'pixelUniqueVisitors');\n    },\n  },\n  pixelCogs: {\n    key: 'pixelCogs',\n    label: 'Pixel Cost of Goods',\n    shortLabel: 'COGS',\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInInfluencersHub: true,\n    format: 'currency',\n    toFixed: 2,\n    type: 'pixel',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    calculateSum: (items) => {\n      return sum(items, 'pixelCogs');\n    },\n  },\n  pixelNcCogs: {\n    key: 'pixelNcCogs',\n    label: 'Pixel New Customer Cost of Goods',\n    shortLabel: 'NC COGS',\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInInfluencersHub: true,\n    format: 'currency',\n    toFixed: 2,\n    type: 'pixel',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    calculateSum: (items) => {\n      return sum(items, 'pixelNcCogs');\n    },\n  },\n  pixelProfit: {\n    key: 'pixelProfit',\n    label: 'Pixel Profit',\n    shortLabel: 'Profit',\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInInfluencersHub: true,\n    format: 'currency',\n    toFixed: 2,\n    type: 'pixel',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    calculateSum: (items) => {\n      if (items[0]?.pixelProfit) {\n        return sum(items, 'pixelProfit');\n      }\n      return sum(items, 'pixelConversionValue') - sum(items, 'pixelCogs') - sum(items, 'spend');\n    },\n  },\n  pixelCvDelta: {\n    key: 'pixelCvDelta',\n    label: 'Pixel Conversion Value Delta',\n    shortLabel: 'CVD',\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInInfluencersHub: false,\n    format: 'currency',\n    toFixed: 2,\n    type: 'pixel',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    calculateSum: (items) => {\n      if (items[0]?.pixelCvDelta) {\n        return sum(items, 'pixelCvDelta');\n      }\n      return sum(items, 'pixelConversionValue') - sum(items, 'conversionValue');\n    },\n  },\n  pixelNewVisitorPerc: {\n    key: 'pixelNewVisitorPerc',\n    label: 'Pixel New Visitor Percent',\n    shortLabel: 'NVP',\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInInfluencersHub: false,\n    format: 'percent',\n    toFixed: 2,\n    type: 'pixel',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    calculateSum: (items) => {\n      return divide(items, 'pixelNewVisitors', 'pixelUniqueVisitors');\n    },\n  },\n  pixelNcPurchasesPerc: {\n    key: 'pixelNcPurchasesPerc',\n    label: 'Pixel New Customer Purchases Percent',\n    shortLabel: 'NC PP',\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInInfluencersHub: false,\n    format: 'percent',\n    toFixed: 2,\n    type: 'pixel',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    calculateSum: (items) => {\n      return divide(items, 'pixelNcPurchases', 'pixelPurchases');\n    },\n  },\n  pixelAvgPageViews: {\n    key: 'pixelAvgPageViews',\n    label: 'Pixel Average Page Views',\n    shortLabel: 'Avg PV',\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInInfluencersHub: false,\n    format: 'decimal',\n    toFixed: 2,\n    type: 'pixel',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    calculateSum: (items) => {\n      return divide(items, 'pixelPageViews', 'pixelVisitors');\n    },\n  },\n  pixelAvgTimeOnSite: {\n    key: 'pixelAvgTimeOnSite',\n    label: 'Pixel Average Session Duration',\n    shortLabel: 'Avg SD',\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInInfluencersHub: false,\n    format: 'duration',\n    toFixed: 0,\n    type: 'pixel',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    calculateSum: (items) => {\n      return divide(items, 'pixelTimeOnSite', 'pixelNonBouncedVisitors');\n    },\n  },\n  pixelBounceRate: {\n    key: 'pixelBounceRate',\n    label: 'Pixel Bounce Rate',\n    shortLabel: 'Bounce Rate',\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInInfluencersHub: false,\n    format: 'percent',\n    toFixed: 2,\n    type: 'pixel',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    calculateSum: (items) => {\n      return divide(items, 'pixelBounces', 'pixelVisitors');\n    },\n  },\n};",
        "type": "MetricsDictionary"
      }
    ]
  },
  {
    "file": "@tw/constants/Metrics/shopMetrics.ts",
    "exports": [
      {
        "name": " shopMetrics",
        "text": "\n\nexport const shopMetrics: MetricsDictionary = {\n  orders: {\n    key: 'orders',\n    label: 'Orders',\n    shortLabel: 'Orders',\n    hideInPixel: true,\n    type: 'shop',\n    toFixed: 0,\n    format: 'decimal',\n    allowOrderBy: true,\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInServices: ['shopify', 'amazon'],\n    chart: 'ordersChart',\n  },\n  sales: {\n    key: 'sales',\n    label: 'Sales',\n    shortLabel: 'Sales',\n    hideInPixel: true,\n    type: 'shop',\n    toFixed: 2,\n    format: 'currency',\n    allowOrderBy: true,\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInServices: ['shopify', 'amazon'],\n    chart: 'salesChart',\n  },\n  refunds: {\n    key: 'refunds',\n    label: 'Refunds',\n    shortLabel: 'Refunds',\n    hideInPixel: true,\n    type: 'shop',\n    toFixed: 2,\n    format: 'currency',\n    allowOrderBy: true,\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInServices: ['shopify'],\n    chart: 'chartRefunds',\n    hideInActivities: true,\n  },\n  netSales: {\n    key: 'netSales',\n    label: 'Net Sales',\n    shortLabel: 'Net Sales',\n    hideInPixel: true,\n    type: 'shop',\n    toFixed: 2,\n    format: 'currency',\n    allowOrderBy: true,\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInServices: ['shopify', 'amazon'],\n    chart: 'generalNetSalesChart',\n  },\n  itemsSold: {\n    key: 'itemsSold',\n    label: 'Items Sold',\n    shortLabel: 'Items Sold',\n    hideInPixel: true,\n    type: 'shop',\n    toFixed: 0,\n    format: 'decimal',\n    allowOrderBy: true,\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInServices: ['shopify', 'amazon'],\n    hideInActivities: true,\n  },\n  revenue: {\n    key: 'revenue',\n    label: 'Revenue',\n    shortLabel: 'Revenue',\n    hideInPixel: true,\n    type: 'shop',\n    toFixed: 2,\n    format: 'currency',\n    allowOrderBy: true,\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInServices: ['shopify', 'amazon'],\n    calculateSum: (items) => {\n      return sum(items, 'revenue');\n    },\n    hideInActivities: true,\n  },\n  ncRevenue: {\n    key: 'ncRevenue',\n    label: 'New Customer Revenue',\n    shortLabel: 'New Customer Revenue',\n    hideInPixel: true,\n    type: 'shop',\n    toFixed: 2,\n    format: 'currency',\n    allowOrderBy: true,\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInServices: ['shopify'],\n    calculateSum: (items) => {\n      return sum(items, 'ncRevenue');\n    },\n    chart: 'chartNewCustomerSales',\n    hideInActivities: true,\n  },\n  ncOrdersWithProduct: {\n    key: 'ncOrdersWithProduct',\n    label: 'New Customer Orders',\n    shortLabel: 'New Customer Orders',\n    hideInPixel: true,\n    type: 'shop',\n    toFixed: 0,\n    format: 'decimal',\n    allowOrderBy: false,\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInServices: ['shopify'],\n    calculateSum: (items) => {\n      return sum(items, 'ncOrdersWithProduct');\n    },\n    hideInActivities: true,\n  },\n  ncGrossProfit: {\n    key: 'ncGrossProfit',\n    label: 'New Customer Gross Profit',\n    shortLabel: 'New Customer Gross Profit',\n    hideInPixel: true,\n    type: 'shop',\n    toFixed: 2,\n    format: 'currency',\n    allowOrderBy: true,\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInServices: ['shopify'],\n    calculateSum: (items) => {\n      return sum(items, 'ncGrossProfit');\n    },\n    hideInActivities: true,\n  },\n  ordersWithProduct: {\n    key: 'ordersWithProduct',\n    label: 'Orders',\n    shortLabel: 'Orders',\n    hideInPixel: true,\n    type: 'shop',\n    toFixed: 0,\n    format: 'decimal',\n    allowOrderBy: true,\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInServices: ['shopify', 'amazon'],\n    hideInActivities: true,\n    calculateSum: (items) => {\n      return sum(items, 'ordersWithProduct');\n    },\n  },\n  itemsSoldAvg: {\n    key: 'itemsSoldAvg',\n    label: 'Avg Sold',\n    shortLabel: 'Avg Sold',\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInServices: ['shopify', 'amazon'],\n    format: 'decimal',\n    toFixed: 2,\n    type: 'shop',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    hideInPixel: true,\n    calculateSum: (items) => {\n      return sum(items, 'itemsSoldAvg');\n    },\n    hideInActivities: true,\n  },\n  itemsSoldTotal: {\n    key: 'itemsSoldTotal',\n    label: 'Total Sold',\n    shortLabel: 'Total Sold',\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInServices: ['shopify', 'amazon'],\n    format: 'decimal',\n    toFixed: 0,\n    type: 'shop',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    hideInPixel: true,\n    calculateSum: (items) => {\n      return sum(items, 'itemsSoldTotal');\n    },\n    hideInActivities: true,\n  },\n  returningCustomerOrders: {\n    key: 'returningCustomerOrders',\n    label: 'Returning Customer Orders',\n    shortLabel: 'Returning Customer Orders',\n    hideInPixel: true,\n    type: 'shop',\n    toFixed: 0,\n    format: 'decimal',\n    allowOrderBy: true,\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInServices: ['shopify'],\n    hideInActivities: true,\n  },\n  returningCustomerSales: {\n    key: 'returningCustomerSales',\n    label: 'Returning Customer Sales',\n    shortLabel: 'Returning Customer Sales',\n    hideInPixel: true,\n    type: 'shop',\n    toFixed: 2,\n    format: 'currency',\n    allowOrderBy: true,\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInServices: ['shopify'],\n    chart: 'chartReturningCustomerSales',\n  },\n  taxes: {\n    key: 'taxes',\n    label: 'Taxes',\n    shortLabel: 'Taxes',\n    hideInPixel: true,\n    type: 'shop',\n    toFixed: 2,\n    format: 'currency',\n    allowOrderBy: true,\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInServices: ['shopify', 'amazon'],\n    hideInActivities: true,\n  },\n  shipping: {\n    key: 'shipping',\n    label: 'Shipping',\n    shortLabel: 'Shipping',\n    hideInPixel: true,\n    type: 'shop',\n    toFixed: 2,\n    format: 'currency',\n    allowOrderBy: true,\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInServices: ['shopify', 'amazon'],\n    hideInActivities: true,\n  },\n  discounts: {\n    key: 'discounts',\n    label: 'Discounts',\n    shortLabel: 'Discounts',\n    hideInPixel: true,\n    type: 'shop',\n    toFixed: 2,\n    format: 'currency',\n    allowOrderBy: true,\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInServices: ['shopify', 'amazon'],\n    hideInActivities: true,\n  },\n  newCustomerOrders: {\n    key: 'newCustomerOrders',\n    label: 'New Customer Orders',\n    shortLabel: 'New Customer Orders',\n    hideInPixel: true,\n    type: 'shop',\n    toFixed: 0,\n    format: 'decimal',\n    allowOrderBy: true,\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInServices: ['shopify'],\n    chart: 'chartNewCustomersOrders',\n  },\n  newCustomerSales: {\n    key: 'newCustomerSales',\n    label: 'New Customer Sales',\n    shortLabel: 'New Customer Sales',\n    hideInPixel: true,\n    type: 'shop',\n    toFixed: 2,\n    format: 'currency',\n    allowOrderBy: true,\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInServices: ['shopify'],\n    chart: 'chartNewCustomerSales',\n  },\n  refundsRate: {\n    key: 'refundsRate',\n    label: 'Refunds Rate',\n    shortLabel: 'Refunds Rate',\n    hideInPixel: true,\n    type: 'shop',\n    toFixed: 2,\n    format: 'percent',\n    allowOrderBy: true,\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInServices: ['shopify'],\n    hideInActivities: true,\n  },\n  itemsInInventory: {\n    key: 'itemsInInventory',\n    label: 'Inventory',\n    shortLabel: 'Items in Inventory',\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInServices: ['shopify', 'amazon'],\n    format: 'decimal',\n    toFixed: 0,\n    type: 'shop',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    hideInPixel: true,\n    calculateSum: (items) => {\n      return sum(items, 'itemsInInventory');\n    },\n    hideInActivities: true,\n  },\n  grossProfit: {\n    key: 'grossProfit',\n    label: 'Gross Profit',\n    shortLabel: 'Gross Profit',\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInServices: ['shopify'],\n    format: 'currency',\n    toFixed: 2,\n    type: 'shop',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    hideInPixel: true,\n    calculateSum: (items) => {\n      return sum(items, 'grossProfit');\n    },\n    chart: 'grossProfitChart',\n  },\n  returnRate: {\n    key: 'returnRate',\n    label: 'Return Rate',\n    shortLabel: 'Return Rate',\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInServices: ['shopify', 'amazon'],\n    format: 'percent',\n    toFixed: 2,\n    type: 'shop',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    hideInPixel: true,\n    valueIsNegative: true,\n    calculateSum: (items) => {\n      return divide(items, 'returnsTotal', 'itemsSoldTotal');\n    },\n    hideInActivities: true,\n  },\n  returnsTotal: {\n    key: 'returnsTotal',\n    label: 'Returns',\n    shortLabel: 'Returns',\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    format: 'decimal',\n    toFixed: 0,\n    type: 'shop',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    hideInPixel: true,\n    valueIsNegative: true,\n    calculateSum: (items) => {\n      return sum(items, 'returnsTotal');\n    },\n  },\n  customerCount: {\n    key: 'customerCount',\n    label: 'Customers Count',\n    shortLabel: 'Customers',\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    format: 'decimal',\n    toFixed: 0,\n    type: 'shop',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    hideInPixel: true,\n    calculateSum: (items) => {\n      return sum(items, 'customerCount');\n    },\n  },\n  rpr: {\n    key: 'rpr',\n    label: 'RPR',\n    shortLabel: 'Repeat Purchase Rate',\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInServices: ['shopify', 'amazon'],\n    format: 'percent',\n    toFixed: 2,\n    type: 'shop',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    hideInPixel: true,\n    calculateSum: (items) => {\n      return divide(items, 'ordersWithProduct', 'customerCount');\n    },\n    hideInActivities: true,\n  },\n  productAov: {\n    key: 'productAov',\n    label: 'Product Average Order Value',\n    shortLabel: 'AOV',\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    format: 'currency',\n    toFixed: 2,\n    type: 'shop',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    hideInPixel: true,\n    calculateSum: (items) => {\n      return divide(items, 'orderValue', 'ordersWithProduct');\n    },\n  },\n  productNcAov: {\n    key: 'productNcAov',\n    label: 'New Customer Average Order Value',\n    shortLabel: 'NC AOV',\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    format: 'currency',\n    toFixed: 2,\n    type: 'shop',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    hideInPixel: true,\n    calculateSum: (items) => {\n      return divide(items, 'ncOrderValue', 'ncOrdersWithProduct');\n    },\n  },\n  orderValue: {\n    key: 'orderValue',\n    label: 'Total Order Value',\n    shortLabel: 'TOV',\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    format: 'currency',\n    toFixed: 2,\n    type: 'shop',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    hideInPixel: true,\n    calculateSum: (items) => {\n      return sum(items, 'orderValue');\n    },\n  },\n  ncOrderValue: {\n    key: 'ncOrderValue',\n    label: 'New Customer Order Value',\n    shortLabel: 'NC TOV',\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    format: 'currency',\n    toFixed: 2,\n    type: 'shop',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    hideInPixel: true,\n    calculateSum: (items) => {\n      return sum(items, 'ncOrderValue');\n    },\n  },\n  productCpa: {\n    key: 'productCpa',\n    label: 'CPA',\n    shortLabel: 'CPA',\n    hideInPixel: true,\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    format: 'currency',\n    toFixed: 2,\n    type: 'ads',\n    showInCreativeByDefault: true,\n    showInPixelByDefault: false,\n    allowOrderBy: true,\n    valueIsNegative: true,\n    calculateSum: (items) => {\n      return divide(items, 'spend', 'ordersWithProduct');\n    },\n  },\n  daysOfStock: {\n    key: 'daysOfStock',\n    label: 'Days of Stock',\n    shortLabel: 'Days of Stock',\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInServices: ['shopify', 'amazon'],\n    format: 'decimal',\n    toFixed: 2,\n    type: 'shop',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    hideInPixel: true,\n    calculateSum: (items) => {\n      return divide(items, 'itemsInInventory', 'avgSold30');\n    },\n    hideInActivities: true,\n  },\n  totalSold30: {\n    key: 'totalSold30',\n    label: 'Total Sold 30',\n    shortLabel: 'Total 30',\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInServices: ['shopify', 'amazon'],\n    format: 'decimal',\n    toFixed: 0,\n    type: 'shop',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    hideInPixel: true,\n    calculateSum: (items) => {\n      return sum(items, 'totalSold30');\n    },\n    hideInActivities: true,\n  },\n  avgSold30: {\n    key: 'avgSold30',\n    label: 'Avg Sold 30',\n    shortLabel: 'Avg 30',\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInServices: ['shopify', 'amazon'],\n    format: 'decimal',\n    toFixed: 2,\n    type: 'shop',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    hideInPixel: true,\n    calculateSum: (items) => {\n      return divide(items, 'totalSold30', 30);\n    },\n    hideInActivities: true,\n  },\n  ltv60: {\n    key: 'ltv60',\n    label: 'LTV 60',\n    shortLabel: 'LTV 60',\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInServices: ['shopify', 'amazon'],\n    format: 'currency',\n    toFixed: 2,\n    type: 'shop',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    hideInPixel: true,\n    calculateSum: (items) => {\n      return sum(items, 'ltv60');\n    },\n    hideInActivities: true,\n  },\n  ltv90: {\n    key: 'ltv90',\n    label: 'LTV 90',\n    shortLabel: 'LTV 90',\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInServices: ['shopify', 'amazon'],\n    format: 'currency',\n    toFixed: 2,\n    type: 'shop',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    hideInPixel: true,\n    calculateSum: (items) => {\n      return sum(items, 'ltv90');\n    },\n    hideInActivities: true,\n  },\n  ltv180: {\n    key: 'ltv180',\n    label: 'LTV 180',\n    shortLabel: 'LTV 180',\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInServices: ['shopify', 'amazon'],\n    format: 'currency',\n    toFixed: 2,\n    type: 'shop',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    hideInPixel: true,\n    calculateSum: (items) => {\n      return sum(items, 'ltv180');\n    },\n    hideInActivities: true,\n  },\n  ltv365: {\n    key: 'ltv365',\n    label: 'LTV 365',\n    shortLabel: 'LTV 365',\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInServices: ['shopify', 'amazon'],\n    format: 'currency',\n    toFixed: 2,\n    type: 'shop',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    hideInPixel: true,\n    calculateSum: (items) => {\n      return sum(items, 'ltv365');\n    },\n    hideInActivities: true,\n  },\n  dateStockRunsOut: {\n    key: 'dateStockRunsOut',\n    label: 'Out of Stock Date',\n    shortLabel: 'Out of Stock Date',\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInServices: ['shopify', 'amazon'],\n    format: 'string',\n    type: 'shop',\n    toFixed: 2,\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    hideInPixel: true,\n    hideInActivities: true,\n  },\n  contributionMargin: {\n    key: 'contributionMargin',\n    label: 'Contribution Margin',\n    shortLabel: 'CM',\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInServices: ['shopify', 'amazon'],\n    format: 'currency',\n    toFixed: 2,\n    type: 'ads',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    hideInPixel: true,\n    calculateSum: (items) => {\n      return sum(items, 'contributionMargin');\n    },\n    hideInActivities: true,\n  },\n  contributionMarginPerUnit: {\n    key: 'contributionMarginPerUnit',\n    label: 'CM per Unit',\n    shortLabel: 'CM per Unit',\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInServices: ['shopify', 'amazon'],\n    format: 'currency',\n    toFixed: 2,\n    type: 'ads',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    hideInPixel: true,\n    calculateSum: (items) => {\n      return divide(items, 'contributionMargin', 'itemsSoldTotal');\n    },\n    hideInActivities: true,\n  },\n  adsInventory: {\n    key: 'adsInventory',\n    label: 'Inventory',\n    shortLabel: 'Inventory',\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInServices: [\n      'facebook-ads',\n      'google-ads',\n      'tiktok-ads',\n      'pinterest-ads',\n      'snapchat-ads',\n      'twitter-ads',\n    ],\n    format: 'string',\n    toFixed: 2,\n    type: 'ads',\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    allowOrderBy: false,\n    hideInActivities: true,\n    hideInPixel: true,\n  },\n  avgPurchasePrice: {\n    key: 'avgPurchasePrice',\n    label: 'Average Purchase Price',\n    shortLabel: 'Average Purchase Price',\n    hideInPixel: true,\n    type: 'shop',\n    toFixed: 2,\n    format: 'currency',\n    allowOrderBy: true,\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInServices: ['shopify', 'amazon'],\n    calculateSum: (items) => {\n      return avg(items, 'avgPurchasePrice');\n    },\n    hideInActivities: true,\n  },\n  modePurchasePrice: {\n    key: 'modePurchasePrice',\n    label: 'Mode Purchase Price',\n    shortLabel: 'Mode Purchase Price',\n    hideInPixel: true,\n    type: 'shop',\n    toFixed: 2,\n    format: 'currency',\n    allowOrderBy: true,\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInServices: ['shopify', 'amazon'],\n    calculateSum: (items) => {\n      return avg(items, 'modePurchasePrice');\n    },\n    hideInActivities: true,\n  },\n  addedToCartEvents: {\n    key: 'addedToCartEvents',\n    label: 'Added to cart',\n    shortLabel: 'Added to cart',\n    hideInPixel: true,\n    type: 'shop',\n    toFixed: 0,\n    format: 'decimal',\n    allowOrderBy: true,\n    showInCreativeByDefault: false,\n    showInPixelByDefault: false,\n    showInCreativeCard: ['product'],\n    showInCreativeTable: ['product'],\n    showInServices: ['shopify', 'amazon'],\n    calculateSum: (items) => {\n      return sum(items, 'addedToCartEvents');\n    },\n    hideInActivities: true,\n  },\n};",
        "type": "MetricsDictionary"
      }
    ]
  },
  {
    "file": "@tw/constants/Metrics/subscriptionMetrics.ts",
    "exports": [
      {
        "name": " subscriptionMetrics",
        "text": "\n\nexport const subscriptionMetrics: MetricsDictionary = {\n  subscriptionSignUps: {\n    key: 'subscriptionSignUps',\n    label: 'Subscription Sign Ups',\n    shortLabel: 'Sign Ups',\n    type: 'ads',\n    showInPixelByDefault: false,\n    icon: 'recharge',\n    format: 'decimal',\n    toFixed: 1,\n    minimumFractionDigits: 0,\n    dependOnActiveIntegrations: ['recharge'],\n    allowOrderBy: true,\n    pixelIndex: 4,\n    calculateSum: (items) => {\n      return sum(items, 'subscriptionSignUps');\n    },\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInCreativeByDefault: false,\n  },\n  subscriptionSignUpsRate: {\n    key: 'subscriptionSignUpsRate',\n    label: 'Subscription Sign Up Rate',\n    shortLabel: 'Sign Up Rate',\n    format: 'percent',\n    toFixed: 2,\n    minimumFractionDigits: 0,\n    type: 'ads',\n    dependOnActiveIntegrations: ['recharge'],\n    icon: 'recharge',\n    showInPixelByDefault: false,\n    showInReport: true,\n    allowOrderBy: true,\n    pixelIndex: 4,\n    calculateSum: (items) => {\n      return divide(items, 'subscriptionSignUps', 'pixelVisitors');\n    },\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInCreativeByDefault: false,\n  },\n  subscriptionChurns: {\n    key: 'subscriptionChurns',\n    label: 'Subscription Churns',\n    shortLabel: 'Churns',\n    format: 'decimal',\n    toFixed: 0,\n    dependOnActiveIntegrations: ['recharge'],\n    type: 'ads',\n    icon: 'recharge',\n    showInPixelByDefault: false,\n    showInReport: false,\n    allowOrderBy: true,\n    pixelIndex: 4,\n    calculateSum: (items) => {\n      return sum(items, 'subscriptionChurns');\n    },\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInCreativeByDefault: false,\n  },\n  subscriptionChurnsRate: {\n    key: 'subscriptionChurnsRate',\n    label: 'Subscription Churn Rate',\n    shortLabel: 'Churn Rate',\n    format: 'percent',\n    toFixed: 2,\n    minimumFractionDigits: 0,\n    icon: 'recharge',\n    dependOnActiveIntegrations: ['recharge'],\n    type: 'ads',\n    showInPixelByDefault: false,\n    showInReport: false,\n    allowOrderBy: true,\n    pixelIndex: 4,\n    calculateSum: (items) => {\n      return divide(items, 'subscriptionChurns', 'pixelVisitors');\n    },\n    showInCreativeCard: [],\n    showInCreativeTable: [],\n    showInCreativeByDefault: false,\n  },\n};",
        "type": "MetricsDictionary"
      }
    ]
  },
  {
    "file": "@tw/constants/Metrics/utils.ts",
    "exports": [
      {
        "name": " sum",
        "text": "\n\nexport const sum = (items: any[], key: MetricsKeys) => {\n  return items?.reduce((acc, curr) => acc + (curr[key] || 0), 0);\n};",
        "type": "variable"
      },
      {
        "name": " divide",
        "text": "\n\nexport const divide = (items: any[], key: MetricsKeys, by: MetricsKeys | number, multiplyKey?: number) => {\n  const numerator = sum(items, key) * (multiplyKey || 1);\n  const denominator = typeof by === 'number' ? by : sum(items, by);\n  return safeDivide(numerator, denominator);\n};",
        "type": "variable"
      },
      {
        "type": "function",
        "name": " safeDivide",
        "text": "\n\nexport function safeDivide(numerator: number, denominator: number) {\n  if (!numerator || !denominator) {\n    return 0;\n  }\n  if (!isFinite(numerator) || !isFinite(denominator)) {\n    return 0;\n  }\n  return numerator / denominator || 0;\n}",
        "parameters": [
          {
            "name": "numerator",
            "text": "numerator: number",
            "type": "number"
          },
          {
            "name": "denominator",
            "text": "denominator: number",
            "type": "number"
          }
        ]
      },
      {
        "name": " avg",
        "text": "\n\nexport const avg = (items: any[], key: MetricsKeys) => {\n  return safeDivide(sum(items, key), items.length);\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/constants/PostPurchaseSurvey/translations.ts",
    "exports": [
      {
        "type": "enum",
        "name": " TranslationKey",
        "text": "\n\nexport enum TranslationKey {\n  ATTRIBUTION_QUESTION = 'attribution-question',\n  OTHER = 'other',\n  FRIEND = 'friend',\n  TEXT = 'text',\n  EMAIL = 'email',\n  SUBMIT = 'submit-message',\n  THANK_YOU_MESSAGE = 'thank-you-message',\n  OTHER_PLACEHOLDER = 'other-placeholder',\n}"
      },
      {
        "name": " tripleSurveyQuestionTranslation",
        "text": "\n\nexport const tripleSurveyQuestionTranslation: Record<Language, string> = {\n  en: 'Which of the following led you to purchase today?',\n  fr: \"Qu'est-ce qui vous a amené à acheter aujourd'hui?\",\n  es: '¿Qué te llevó a comprar hoy?',\n  de: 'Was hat dich heute zum Kauf bewegt?',\n  he: '?מה הביא אותך לקנות היום',\n  sv: 'Vad fick dig att köpa idag?',\n  nn: 'Hva fikk deg til å kjøpe i dag?',\n  da: 'Hvad fik dig til at købe i dag?',\n  it: 'Qual è stato il motivo che ti ha spinto a comprare oggi?',\n  nl: 'Welk kanaal heeft ervoor gezorgd dat je vandaag een aankoop bij ons hebt gedaan?',\n  pt: 'Qual das seguintes opções levou você a comprar hoje?',\n};",
        "type": "Record<Language, string>"
      },
      {
        "name": " tripleSurveyOptionsTranslation",
        "text": "\n\nexport const tripleSurveyOptionsTranslation: Record<TranslationKey, Record<Language, string>> = {\n  [TranslationKey.ATTRIBUTION_QUESTION]: tripleSurveyQuestionTranslation,\n  [TranslationKey.FRIEND]: {\n    en: 'Referred by a friend',\n    fr: 'Recommandé par un ami',\n    es: 'Recomendado por un amigo',\n    de: 'Empfohlen von einem Freund',\n    he: 'הופניתי על ידי חבר',\n    it: 'Raccomandato da un amico',\n    sv: 'Rekommenderad av en vän',\n    nn: 'Anbefalt av ein venn',\n    da: 'Anbefalet af en ven',\n    nl: 'Doorverwezen door een vriend',\n    pt: 'Indicado por um amigo',\n  },\n  [TranslationKey.TEXT]: {\n    en: 'Text',\n    fr: 'SMS',\n    es: 'SMS',\n    de: 'SMS',\n    he: 'SMS',\n    it: 'SMS',\n    sv: 'SMS',\n    nn: 'SMS',\n    da: 'SMS',\n    nl: 'SMS',\n    pt: 'SMS',\n  },\n  [TranslationKey.OTHER]: {\n    en: 'None of the above',\n    fr: 'Autre',\n    es: 'Ninguno de los anteriores',\n    de: 'Keines der oben genannten',\n    he: 'אחר',\n    it: 'Nessuno dei precedenti',\n    sv: 'Ingen av ovanstående',\n    nn: 'Ingen av dei over',\n    da: 'Ingen af ovenstående',\n    nl: 'Geen van de bovengenoemde',\n    pt: 'Nenhuma das opções acima',\n  },\n  [TranslationKey.THANK_YOU_MESSAGE]: {\n    en: \"Thank you. Your response has been recorded.\",\n    fr: \"Merci. Votre réponse a été enregistrée.\",\n    es: \"Gracias. Su respuesta ha sido registrada.\",\n    de: \"Vielen Dank. Ihre Antwort wurde aufgezeichnet.\",\n    he: \"תודה. תגובתך נשמרה.\",\n    it: \"Grazie. La tua risposta è stata registrata.\",\n    sv: \"Tack. Ditt svar har registrerats.\",\n    da: \"Tak. Dit svar er blevet registreret.\",\n    nn: \"Takk. Svar ditt er registrert.\",\n    pt: \"Obrigado. Sua resposta foi registrada.\",\n    nl: \"Bedankt. We hebben je antwoord ontvangen.\",\n  },\n  [TranslationKey.SUBMIT]: {\n    en: \"Submit\",\n    fr: \"Envoyer\",\n    es: \"Enviar\",\n    de: \"Einreichen\",\n    he: \"שלח\",\n    it: \"Invia\",\n    sv: \"Skicka\",\n    da: \"Indsend\",\n    nn: \"Send\",\n    pt: \"Enviar\",\n    nl: \"Versturen\",\n  },\n  [TranslationKey.OTHER_PLACEHOLDER]: {\n    en: \"Please provide us with more information...\",\n    fr: \"Pouvez-vous nous fournir plus d'informations?\",\n    es: \"Por favor, proporcione más información...\",\n    de: \"Bitte geben Sie uns mehr Informationen...\",\n    he: \"נשמח אם תשתף אותנו...\",\n    it: \"Per favore, forniscici maggiori informazioni...\",\n    sv: \"Fyll i mer information...\",\n    da: \"Udfyld venligst med mere information...\",\n    nn: \"Vennligst fyll ut mer informasjon...\",\n    pt: \"Por favor, forneça-nos mais informações...\",\n    nl: \"Graag meer informatie verstrekken...\",\n  },\n  [TranslationKey.EMAIL]: {\n    en: \"Email\",\n    fr: \"Email\",\n    es: \"Email\",\n    de: \"Email\",\n    he: \"Email\",\n    it: \"Email\",\n    sv: \"Email\",\n    da: \"Email\",\n    nn: \"Email\",\n    pt: \"Email\",\n    nl: \"Email\",\n  }\n};",
        "type": "Record<TranslationKey, Record<Language, string>>"
      }
    ]
  },
  {
    "file": "@tw/constants/activityFeed.ts",
    "exports": [
      {
        "name": " ActivityItem",
        "text": "\n\nexport type ActivityItem = {\n  id: string;\n  type: ActivityType;\n  serviceId: ServicesIds;\n  entity: ActivityEntity;\n  sourceField?: string[];\n  field?: ActivityField;\n  fieldValue?: (value) => any;\n  to?: any[];\n  label: string;\n  url?: string;\n  description?: (from, to, entity, currency) => string;\n  entityName?: (entity) => string;\n};",
        "type": "{\n  id: string;\n  type: ActivityType;\n  serviceId: ServicesIds;\n  entity: ActivityEntity;\n  sourceField?: string[];\n  field?: ActivityField;\n  fieldValue?: (value) => any;\n  to?: any[];\n  label: string;\n  url?: string;\n  description?: (from, to, entity, currency) => string;\n  entityName?: (entity) => string;\n}"
      },
      {
        "name": " servicesEntities",
        "text": "\n\nexport const servicesEntities: Partial<Record<ServicesIds, Record<string, ActivityEntity>>> = {\n  'facebook-ads': {\n    CAMPAIGN: 'campaign',\n    ADSET: 'adset',\n    AD: 'ad',\n  },\n  'google-ads': {\n    CAMPAIGN: 'campaign',\n    ADSET: 'adset',\n    AD: 'ad',\n  },\n  'tiktok-ads': {\n    CAMPAIGN: 'campaign',\n    ADGROUP: 'adset',\n    AD: 'ad',\n  },\n  klaviyo: {\n    campaigns: 'campaign',\n  },\n  'shopify':{\n    VARIANT: 'variant',\n  }\n};",
        "type": "Partial<Record<ServicesIds, Record<string, ActivityEntity>>>"
      },
      {
        "name": " allActivities",
        "text": "\n\nexport const allActivities: ActivityItem[] = [\n  ...allFacebookAdsActivities,\n  ...allGoogleAdsActivities,\n  ...allTikTokAdsActivities,\n  ...allKlaviyoActivities,\n  ...allTripleWhaleActivities,\n  ...allShopifyActivities\n];",
        "type": "ActivityItem[]"
      }
    ]
  },
  {
    "file": "@tw/constants/benchmarks.ts",
    "exports": [
      {
        "name": " OptionDescriptor",
        "text": "export interface OptionDescriptor {\n  value: string;\n  label: any;// Its actually react node\n}",
        "type": "interface"
      },
      {
        "name": " AOV_SEGMENTS",
        "text": "\n\nexport const AOV_SEGMENTS: OptionDescriptor[] = [\n  {\n    value: '$100+',\n    label: '$100+',\n  },\n  {\n    value: '>$100',\n    label: '>$100',\n  },\n];",
        "type": "OptionDescriptor[]"
      },
      {
        "name": " TOTAL_SPEND_SEGMENTS",
        "text": "\n\nexport const TOTAL_SPEND_SEGMENTS: OptionDescriptor[] = [\n  {\n    value: '<50K',\n    label: '<50K',\n  },\n  {\n    value: '>50K+',\n    label: '>50K+',\n  },\n];",
        "type": "OptionDescriptor[]"
      },
      {
        "name": " TW_BENCHMARKS_AOV_SEGMENT",
        "text": "\n\nexport const TW_BENCHMARKS_AOV_SEGMENT = 'TW_BENCHMARKS_AOV_SEGMENT';",
        "type": "variable"
      },
      {
        "name": " TW_BENCHMARKS_SPEND_SEGMENT",
        "text": "\nexport const TW_BENCHMARKS_SPEND_SEGMENT = 'TW_BENCHMARKS_SPEND_SEGMENT';",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/constants/compliance/index.ts",
    "exports": [
      {
        "name": " DELETE_DATA_REQUEST_TOPIC",
        "text": "export const DELETE_DATA_REQUEST_TOPIC = 'delete-all-data-request';",
        "type": "variable"
      },
      {
        "name": " DATA_DELETION_BEGIN_TOPIC",
        "text": "\nexport const DATA_DELETION_BEGIN_TOPIC = 'data-deletion-begin';",
        "type": "variable"
      },
      {
        "name": " DATA_DELETION_SUCCESS_TOPIC",
        "text": "\nexport const DATA_DELETION_SUCCESS_TOPIC = 'data-deletion-success';",
        "type": "variable"
      },
      {
        "name": " DATA_DELETION_FAILURE_TOPIC",
        "text": "\nexport const DATA_DELETION_FAILURE_TOPIC = 'data-deletion-failure';",
        "type": "variable"
      },
      {
        "name": " DATA_DELETION_COMPLETED_TOPIC",
        "text": "\nexport const DATA_DELETION_COMPLETED_TOPIC = 'data-deletion-completed';",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/constants/countriesList/data.ts",
    "exports": [
      {
        "name": " CountriesDataList",
        "text": "export const CountriesDataList = [\n    {\n      \"countryNameEn\": \"Andorra\",\n      \"countryNameLocal\": \"Andorra\",\n      \"countryCode\": \"AD\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ca\",\n      \"officialLanguageNameEn\": \"Catalan, Valencian\",\n      \"officialLanguageNameLocal\": \"Català, Valencià\",\n      \"countryCallingCode\": \"376\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇦🇩\"\n    },\n    {\n      \"countryNameEn\": \"Afghanistan\",\n      \"countryNameLocal\": \"د افغانستان اسلامي دولتدولت اسلامی افغانستان, جمهوری اسلامی افغانستان\",\n      \"countryCode\": \"AF\",\n      \"currencyCode\": \"AFN\",\n      \"currencyNameEn\": \"Afghan afghani\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fa\",\n      \"officialLanguageNameEn\": \"Persian\",\n      \"officialLanguageNameLocal\": \"فارسی\",\n      \"countryCallingCode\": \"93\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇦🇫\"\n    },\n    {\n      \"countryNameEn\": \"Antigua and Barbuda\",\n      \"countryNameLocal\": \"Antigua and Barbuda\",\n      \"countryCode\": \"AG\",\n      \"currencyCode\": \"XCD\",\n      \"currencyNameEn\": \"East Caribbean dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"1268\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇦🇬\"\n    },\n    {\n      \"countryNameEn\": \"Anguilla\",\n      \"countryNameLocal\": \"Anguilla\",\n      \"countryCode\": \"AI\",\n      \"currencyCode\": \"XCD\",\n      \"currencyNameEn\": \"East Caribbean dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"1264\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇦🇮\"\n    },\n    {\n      \"countryNameEn\": \"Albania\",\n      \"countryNameLocal\": \"Shqipëria\",\n      \"countryCode\": \"AL\",\n      \"currencyCode\": \"ALL\",\n      \"currencyNameEn\": \"Albanian lek\",\n      \"tinType\": \"NIPT\",\n      \"tinName\": \"Numri i Identifikimit për Personin e Tatueshëm\",\n      \"officialLanguageCode\": \"sq\",\n      \"officialLanguageNameEn\": \"Albanian\",\n      \"officialLanguageNameLocal\": \"Shqip\",\n      \"countryCallingCode\": \"355\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇦🇱\"\n    },\n    {\n      \"countryNameEn\": \"Armenia\",\n      \"countryNameLocal\": \"Հայաստան\",\n      \"countryCode\": \"AM\",\n      \"currencyCode\": \"AMD\",\n      \"currencyNameEn\": \"Armenian dram\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"hy\",\n      \"officialLanguageNameEn\": \"Armenian\",\n      \"officialLanguageNameLocal\": \"Հայերեն\",\n      \"countryCallingCode\": \"374\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇦🇲\"\n    },\n    {\n      \"countryNameEn\": \"Angola\",\n      \"countryNameLocal\": \"Angola\",\n      \"countryCode\": \"AO\",\n      \"currencyCode\": \"AOA\",\n      \"currencyNameEn\": \"Angolan kwanza\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"pt\",\n      \"officialLanguageNameEn\": \"Portuguese\",\n      \"officialLanguageNameLocal\": \"Português\",\n      \"countryCallingCode\": \"244\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇦🇴\"\n    },\n    {\n      \"countryNameEn\": \"Antarctica\",\n      \"countryNameLocal\": \"Antarctica, Antártico, Antarctique, Антарктике\",\n      \"countryCode\": \"AQ\",\n      \"currencyCode\": \"\",\n      \"currencyNameEn\": \"\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"672\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇦🇶\"\n    },\n    {\n      \"countryNameEn\": \"Argentina\",\n      \"countryNameLocal\": \"Argentina\",\n      \"countryCode\": \"AR\",\n      \"currencyCode\": \"ARS\",\n      \"currencyNameEn\": \"Argentine peso\",\n      \"tinType\": \"CUIT\",\n      \"tinName\": \"Código Único de Identificación Tributaria\",\n      \"officialLanguageCode\": \"es\",\n      \"officialLanguageNameEn\": \"Spanish, Castilian\",\n      \"officialLanguageNameLocal\": \"Español\",\n      \"countryCallingCode\": \"54\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇦🇷\"\n    },\n    {\n      \"countryNameEn\": \"American Samoa\",\n      \"countryNameLocal\": \"American Samoa\",\n      \"countryCode\": \"AS\",\n      \"currencyCode\": \"USD\",\n      \"currencyNameEn\": \"United States dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"1684\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇦🇸\"\n    },\n    {\n      \"countryNameEn\": \"Austria\",\n      \"countryNameLocal\": \"Österreich\",\n      \"countryCode\": \"AT\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"UID\",\n      \"tinName\": \"Umsatzsteuer-Identifikationsnummer\",\n      \"officialLanguageCode\": \"de\",\n      \"officialLanguageNameEn\": \"German\",\n      \"officialLanguageNameLocal\": \"Deutsch\",\n      \"countryCallingCode\": \"43\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇦🇹\"\n    },\n    {\n      \"countryNameEn\": \"Australia\",\n      \"countryNameLocal\": \"Australia\",\n      \"countryCode\": \"AU\",\n      \"currencyCode\": \"AUD\",\n      \"currencyNameEn\": \"Australian dollar\",\n      \"tinType\": \"ABN\",\n      \"tinName\": \"Australian Business Number\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"61\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇦🇺\"\n    },\n    {\n      \"countryNameEn\": \"Aruba\",\n      \"countryNameLocal\": \"Aruba\",\n      \"countryCode\": \"AW\",\n      \"currencyCode\": \"AWG\",\n      \"currencyNameEn\": \"Aruban florin\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"nl\",\n      \"officialLanguageNameEn\": \"Dutch, Flemish\",\n      \"officialLanguageNameLocal\": \"Nederlands, Vlaams\",\n      \"countryCallingCode\": \"297\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇦🇼\"\n    },\n    {\n      \"countryNameEn\": \"Åland Islands\",\n      \"countryNameLocal\": \"Åland\",\n      \"countryCode\": \"AX\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"sv\",\n      \"officialLanguageNameEn\": \"Swedish\",\n      \"officialLanguageNameLocal\": \"Svenska\",\n      \"countryCallingCode\": \"358\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇦🇽\"\n    },\n    {\n      \"countryNameEn\": \"Azerbaijan\",\n      \"countryNameLocal\": \"Azərbaycan\",\n      \"countryCode\": \"AZ\",\n      \"currencyCode\": \"AZN\",\n      \"currencyNameEn\": \"Azerbaijani manat\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"az\",\n      \"officialLanguageNameEn\": \"Azerbaijani\",\n      \"officialLanguageNameLocal\": \"azərbaycan dili\",\n      \"countryCallingCode\": \"994\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇦🇿\"\n    },\n    {\n      \"countryNameEn\": \"Bosnia and Herzegovina\",\n      \"countryNameLocal\": \"Bosna i Hercegovina\",\n      \"countryCode\": \"BA\",\n      \"currencyCode\": \"BAM\",\n      \"currencyNameEn\": \"Bosnia and Herzegovina convertible mark\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"bs\",\n      \"officialLanguageNameEn\": \"Bosnian\",\n      \"officialLanguageNameLocal\": \"bosanski jezik\",\n      \"countryCallingCode\": \"387\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇧🇦\"\n    },\n    {\n      \"countryNameEn\": \"Barbados\",\n      \"countryNameLocal\": \"Barbados\",\n      \"countryCode\": \"BB\",\n      \"currencyCode\": \"BBD\",\n      \"currencyNameEn\": \"Barbados dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"1246\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇧🇧\"\n    },\n    {\n      \"countryNameEn\": \"Bangladesh\",\n      \"countryNameLocal\": \"গণপ্রজাতন্ত্রী বাংলাদেশ\",\n      \"countryCode\": \"BD\",\n      \"currencyCode\": \"BDT\",\n      \"currencyNameEn\": \"Bangladeshi taka\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"bn\",\n      \"officialLanguageNameEn\": \"Bengali\",\n      \"officialLanguageNameLocal\": \"বাংলা\",\n      \"countryCallingCode\": \"880\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇧🇩\"\n    },\n    {\n      \"countryNameEn\": \"Belgium\",\n      \"countryNameLocal\": \"België, Belgique, Belgien\",\n      \"countryCode\": \"BE\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"n° TVABTW-nr Mwst-nr\",\n      \"tinName\": \"BTW identificatienummer / Numéro de TVA\",\n      \"officialLanguageCode\": \"nl\",\n      \"officialLanguageNameEn\": \"Dutch, Flemish\",\n      \"officialLanguageNameLocal\": \"Nederlands, Vlaams\",\n      \"countryCallingCode\": \"32\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇧🇪\"\n    },\n    {\n      \"countryNameEn\": \"Burkina Faso\",\n      \"countryNameLocal\": \"Burkina Faso\",\n      \"countryCode\": \"BF\",\n      \"currencyCode\": \"XOF\",\n      \"currencyNameEn\": \"CFA franc BCEAO\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"226\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇧🇫\"\n    },\n    {\n      \"countryNameEn\": \"Bulgaria\",\n      \"countryNameLocal\": \"България\",\n      \"countryCode\": \"BG\",\n      \"currencyCode\": \"BGN\",\n      \"currencyNameEn\": \"Bulgarian lev\",\n      \"tinType\": \"ДДС номер\",\n      \"tinName\": \"Идентификационен номер по ДДС\",\n      \"officialLanguageCode\": \"bg\",\n      \"officialLanguageNameEn\": \"Bulgarian\",\n      \"officialLanguageNameLocal\": \"български език\",\n      \"countryCallingCode\": \"359\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇧🇬\"\n    },\n    {\n      \"countryNameEn\": \"Bahrain\",\n      \"countryNameLocal\": \"البحرين\",\n      \"countryCode\": \"BH\",\n      \"currencyCode\": \"BHD\",\n      \"currencyNameEn\": \"Bahraini dinar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ar\",\n      \"officialLanguageNameEn\": \"Arabic\",\n      \"officialLanguageNameLocal\": \"العربية\",\n      \"countryCallingCode\": \"973\",\n      \"areaCodes\": [],\n      \"region\": \"Arab States\",\n      \"flag\": \"🇧🇭\"\n    },\n    {\n      \"countryNameEn\": \"Burundi\",\n      \"countryNameLocal\": \"Burundi\",\n      \"countryCode\": \"BI\",\n      \"currencyCode\": \"BIF\",\n      \"currencyNameEn\": \"Burundian franc\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"257\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇧🇮\"\n    },\n    {\n      \"countryNameEn\": \"Benin\",\n      \"countryNameLocal\": \"Bénin\",\n      \"countryCode\": \"BJ\",\n      \"currencyCode\": \"XOF\",\n      \"currencyNameEn\": \"CFA franc BCEAO\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"229\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇧🇯\"\n    },\n    {\n      \"countryNameEn\": \"Saint Barthélemy\",\n      \"countryNameLocal\": \"Saint-Barthélemy\",\n      \"countryCode\": \"BL\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"590\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇧🇱\"\n    },\n    {\n      \"countryNameEn\": \"Bermuda\",\n      \"countryNameLocal\": \"Bermuda\",\n      \"countryCode\": \"BM\",\n      \"currencyCode\": \"BMD\",\n      \"currencyNameEn\": \"Bermudian dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"1441\",\n      \"areaCodes\": [],\n      \"region\": \"North America\",\n      \"flag\": \"🇧🇲\"\n    },\n    {\n      \"countryNameEn\": \"Brunei Darussalam\",\n      \"countryNameLocal\": \"Brunei Darussalam\",\n      \"countryCode\": \"BN\",\n      \"currencyCode\": \"BND\",\n      \"currencyNameEn\": \"Brunei dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ms\",\n      \"officialLanguageNameEn\": \"Malay\",\n      \"officialLanguageNameLocal\": \"Bahasa Melayu, بهاس ملايو‎\",\n      \"countryCallingCode\": \"673\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇧🇳\"\n    },\n    {\n      \"countryNameEn\": \"Bolivia (Plurinational State of)\",\n      \"countryNameLocal\": \"Bolivia, Bulibiya, Volívia, Wuliwya\",\n      \"countryCode\": \"BO\",\n      \"currencyCode\": \"BOP\",\n      \"currencyNameEn\": \"\",\n      \"tinType\": \"NIT\",\n      \"tinName\": \"Número de Identificación Tributaria\",\n      \"officialLanguageCode\": \"es\",\n      \"officialLanguageNameEn\": \"Spanish, Castilian\",\n      \"officialLanguageNameLocal\": \"Español\",\n      \"countryCallingCode\": \"591\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇧🇴\"\n    },\n    {\n      \"countryNameEn\": \"Bonaire, Sint Eustatius and Saba\",\n      \"countryNameLocal\": \"Caribisch Nederland\",\n      \"countryCode\": \"BQ\",\n      \"currencyCode\": \"USD\",\n      \"currencyNameEn\": \"United States dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"nl\",\n      \"officialLanguageNameEn\": \"Dutch, Flemish\",\n      \"officialLanguageNameLocal\": \"Nederlands, Vlaams\",\n      \"countryCallingCode\": \"5997\",\n      \"areaCodes\": [],\n      \"region\": \"Unknown\",\n      \"flag\": \"🇧🇶\"\n    },\n    {\n      \"countryNameEn\": \"Brazil\",\n      \"countryNameLocal\": \"Brasil\",\n      \"countryCode\": \"BR\",\n      \"currencyCode\": \"BRL\",\n      \"currencyNameEn\": \"Brazilian real\",\n      \"tinType\": \"CNPJ\",\n      \"tinName\": \"Cadastro Nacional de Pessoa Jurídica\",\n      \"officialLanguageCode\": \"pt\",\n      \"officialLanguageNameEn\": \"Portuguese\",\n      \"officialLanguageNameLocal\": \"Português\",\n      \"countryCallingCode\": \"55\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇧🇷\"\n    },\n    {\n      \"countryNameEn\": \"Bhutan\",\n      \"countryNameLocal\": \"འབྲུག་ཡུལ\",\n      \"countryCode\": \"BT\",\n      \"currencyCode\": \"BTN\",\n      \"currencyNameEn\": \"Bhutanese ngultrum\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"dz\",\n      \"officialLanguageNameEn\": \"Dzongkha\",\n      \"officialLanguageNameLocal\": \"རྫོང་ཁ\",\n      \"countryCallingCode\": \"975\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇧🇹\"\n    },\n    {\n      \"countryNameEn\": \"Bouvet Island\",\n      \"countryNameLocal\": \"Bouvetøya\",\n      \"countryCode\": \"BV\",\n      \"currencyCode\": \"NOK\",\n      \"currencyNameEn\": \"Norwegian krone\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"no\",\n      \"officialLanguageNameEn\": \"Norwegian\",\n      \"officialLanguageNameLocal\": \"Norsk\",\n      \"countryCallingCode\": \"47\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇧🇻\"\n    },\n    {\n      \"countryNameEn\": \"Botswana\",\n      \"countryNameLocal\": \"Botswana\",\n      \"countryCode\": \"BW\",\n      \"currencyCode\": \"BWP\",\n      \"currencyNameEn\": \"Botswana pula\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"267\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇧🇼\"\n    },\n    {\n      \"countryNameEn\": \"Belarus\",\n      \"countryNameLocal\": \"Беларусь\",\n      \"countryCode\": \"BY\",\n      \"currencyCode\": \"BYR\",\n      \"currencyNameEn\": \"\",\n      \"tinType\": \"УНП (UNP)\",\n      \"tinName\": \"Учетный номер плательщика\",\n      \"officialLanguageCode\": \"be\",\n      \"officialLanguageNameEn\": \"Belarusian\",\n      \"officialLanguageNameLocal\": \"беларуская мова\",\n      \"countryCallingCode\": \"375\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇧🇾\"\n    },\n    {\n      \"countryNameEn\": \"Belize\",\n      \"countryNameLocal\": \"Belize\",\n      \"countryCode\": \"BZ\",\n      \"currencyCode\": \"BZD\",\n      \"currencyNameEn\": \"Belize dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"501\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇧🇿\"\n    },\n    {\n      \"countryNameEn\": \"Canada\",\n      \"countryNameLocal\": \"Canada\",\n      \"countryCode\": \"CA\",\n      \"currencyCode\": \"CAD\",\n      \"currencyNameEn\": \"Canadian dollar\",\n      \"tinType\": \"BN / NE\",\n      \"tinName\": \"Business Number\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"1\",\n      \"areaCodes\": [\"403\", \"587\", \"780\", \"825\", \"236\", \"250\", \"604\", \"672\", \"778\", \"204\", \"431\", \"506\", \"709\", \"782\", \"902\", \"226\", \"249\", \"289\", \"343\", \"365\", \"416\", \"437\", \"519\", \"548\", \"613\", \"647\", \"705\", \"807\", \"905\", \"367\", \"418\", \"438\", \"450\", \"514\", \"579\", \"581\", \"819\", \"873\", \"306\", \"639\", \"867\"],\n      \"region\": \"North America\",\n      \"flag\": \"🇨🇦\"\n    },\n    {\n      \"countryNameEn\": \"Switzerland\",\n      \"countryNameLocal\": \"Schweiz, Suisse, Svizzera, Svizra\",\n      \"countryCode\": \"CH\",\n      \"currencyCode\": \"CHE\",\n      \"currencyNameEn\": \"WIR Euro (complementary currency)\",\n      \"tinType\": \"MWST/TVA/IVA\",\n      \"tinName\": \"Mehrwertsteuernummer\",\n      \"officialLanguageCode\": \"de\",\n      \"officialLanguageNameEn\": \"German\",\n      \"officialLanguageNameLocal\": \"Deutsch\",\n      \"countryCallingCode\": \"41\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇨🇭\"\n    },\n    {\n      \"countryNameEn\": \"Côte d'Ivoire\",\n      \"countryNameLocal\": \"Côte d'Ivoire\",\n      \"countryCode\": \"CI\",\n      \"currencyCode\": \"XOF\",\n      \"currencyNameEn\": \"CFA franc BCEAO\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"225\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇨🇮\"\n    },\n    {\n      \"countryNameEn\": \"Chile\",\n      \"countryNameLocal\": \"Chile\",\n      \"countryCode\": \"CL\",\n      \"currencyCode\": \"CLP\",\n      \"currencyNameEn\": \"Chilean peso\",\n      \"tinType\": \"RUT\",\n      \"tinName\": \"Rol Único Tributario\",\n      \"officialLanguageCode\": \"es\",\n      \"officialLanguageNameEn\": \"Spanish, Castilian\",\n      \"officialLanguageNameLocal\": \"Español\",\n      \"countryCallingCode\": \"56\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇨🇱\"\n    },\n    {\n      \"countryNameEn\": \"Cameroon\",\n      \"countryNameLocal\": \"Cameroun, Cameroon\",\n      \"countryCode\": \"CM\",\n      \"currencyCode\": \"XAF\",\n      \"currencyNameEn\": \"CFA franc BEAC\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"237\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇨🇲\"\n    },\n    {\n      \"countryNameEn\": \"China\",\n      \"countryNameLocal\": \"中国\",\n      \"countryCode\": \"CN\",\n      \"currencyCode\": \"CNY\",\n      \"currencyNameEn\": \"Renminbi (Chinese) yuan\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"zh-hans\",\n      \"officialLanguageNameEn\": \"\",\n      \"officialLanguageNameLocal\": \"\",\n      \"countryCallingCode\": \"86\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇨🇳\"\n    },\n    {\n      \"countryNameEn\": \"Colombia\",\n      \"countryNameLocal\": \"Colombia\",\n      \"countryCode\": \"CO\",\n      \"currencyCode\": \"COP\",\n      \"currencyNameEn\": \"Colombian peso\",\n      \"tinType\": \"NIT\",\n      \"tinName\": \"Número De Identificación Tributaria\",\n      \"officialLanguageCode\": \"es\",\n      \"officialLanguageNameEn\": \"Spanish, Castilian\",\n      \"officialLanguageNameLocal\": \"Español\",\n      \"countryCallingCode\": \"57\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇨🇴\"\n    },\n    {\n      \"countryNameEn\": \"Costa Rica\",\n      \"countryNameLocal\": \"Costa Rica\",\n      \"countryCode\": \"CR\",\n      \"currencyCode\": \"CRC\",\n      \"currencyNameEn\": \"Costa Rican colon\",\n      \"tinType\": \"\",\n      \"tinName\": \"Cédula Jurídica\",\n      \"officialLanguageCode\": \"es\",\n      \"officialLanguageNameEn\": \"Spanish, Castilian\",\n      \"officialLanguageNameLocal\": \"Español\",\n      \"countryCallingCode\": \"506\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇨🇷\"\n    },\n    {\n      \"countryNameEn\": \"Cuba\",\n      \"countryNameLocal\": \"Cuba\",\n      \"countryCode\": \"CU\",\n      \"currencyCode\": \"CUC\",\n      \"currencyNameEn\": \"Cuban convertible peso\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"es\",\n      \"officialLanguageNameEn\": \"Spanish, Castilian\",\n      \"officialLanguageNameLocal\": \"Español\",\n      \"countryCallingCode\": \"53\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇨🇺\"\n    },\n    {\n      \"countryNameEn\": \"Cabo Verde\",\n      \"countryNameLocal\": \"Cabo Verde\",\n      \"countryCode\": \"CV\",\n      \"currencyCode\": \"CVE\",\n      \"currencyNameEn\": \"Cape Verdean escudo\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"pt\",\n      \"officialLanguageNameEn\": \"Portuguese\",\n      \"officialLanguageNameLocal\": \"Português\",\n      \"countryCallingCode\": \"238\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇨🇻\"\n    },\n    {\n      \"countryNameEn\": \"Curaçao\",\n      \"countryNameLocal\": \"Curaçao\",\n      \"countryCode\": \"CW\",\n      \"currencyCode\": \"ANG\",\n      \"currencyNameEn\": \"Netherlands Antillean guilder\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"nl\",\n      \"officialLanguageNameEn\": \"Dutch, Flemish\",\n      \"officialLanguageNameLocal\": \"Nederlands, Vlaams\",\n      \"countryCallingCode\": \"599\",\n      \"areaCodes\": [],\n      \"region\": \"Unknown\",\n      \"flag\": \"🇨🇼\"\n    },\n    {\n      \"countryNameEn\": \"Christmas Island\",\n      \"countryNameLocal\": \"Christmas Island\",\n      \"countryCode\": \"CX\",\n      \"currencyCode\": \"AUD\",\n      \"currencyNameEn\": \"Australian dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"61\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇨🇽\"\n    },\n    {\n      \"countryNameEn\": \"Cyprus\",\n      \"countryNameLocal\": \"Κύπρος, Kibris\",\n      \"countryCode\": \"CY\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"ΦΠΑ\",\n      \"tinName\": \"Αριθμός Εγγραφής Φ.Π.Α.\",\n      \"officialLanguageCode\": \"el\",\n      \"officialLanguageNameEn\": \"Greek, Modern (1453-)\",\n      \"officialLanguageNameLocal\": \"ελληνικά\",\n      \"countryCallingCode\": \"357\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇨🇾\"\n    },\n    {\n      \"countryNameEn\": \"Germany\",\n      \"countryNameLocal\": \"Deutschland\",\n      \"countryCode\": \"DE\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"USt-IdNr.\",\n      \"tinName\": \"Umsatzsteuer-Identifikationsnummer\",\n      \"officialLanguageCode\": \"de\",\n      \"officialLanguageNameEn\": \"German\",\n      \"officialLanguageNameLocal\": \"Deutsch\",\n      \"countryCallingCode\": \"49\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇩🇪\"\n    },\n    {\n      \"countryNameEn\": \"Djibouti\",\n      \"countryNameLocal\": \"Djibouti, جيبوتي, Jabuuti, Gabuutih\",\n      \"countryCode\": \"DJ\",\n      \"currencyCode\": \"DJF\",\n      \"currencyNameEn\": \"Djiboutian franc\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"253\",\n      \"areaCodes\": [],\n      \"region\": \"Arab States\",\n      \"flag\": \"🇩🇯\"\n    },\n    {\n      \"countryNameEn\": \"Denmark\",\n      \"countryNameLocal\": \"Danmark\",\n      \"countryCode\": \"DK\",\n      \"currencyCode\": \"DKK\",\n      \"currencyNameEn\": \"Danish krone\",\n      \"tinType\": \"CVR\",\n      \"tinName\": \"Momsregistreringsnummer\",\n      \"officialLanguageCode\": \"da\",\n      \"officialLanguageNameEn\": \"Danish\",\n      \"officialLanguageNameLocal\": \"dansk\",\n      \"countryCallingCode\": \"45\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇩🇰\"\n    },\n    {\n      \"countryNameEn\": \"Dominica\",\n      \"countryNameLocal\": \"Dominica\",\n      \"countryCode\": \"DM\",\n      \"currencyCode\": \"XCD\",\n      \"currencyNameEn\": \"East Caribbean dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"767\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇩🇲\"\n    },\n    {\n      \"countryNameEn\": \"Algeria\",\n      \"countryNameLocal\": \"الجزائر\",\n      \"countryCode\": \"DZ\",\n      \"currencyCode\": \"DZD\",\n      \"currencyNameEn\": \"Algerian dinar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ar\",\n      \"officialLanguageNameEn\": \"Arabic\",\n      \"officialLanguageNameLocal\": \"العربية\",\n      \"countryCallingCode\": \"213\",\n      \"areaCodes\": [],\n      \"region\": \"Arab States\",\n      \"flag\": \"🇩🇿\"\n    },\n    {\n      \"countryNameEn\": \"Ecuador\",\n      \"countryNameLocal\": \"Ecuador\",\n      \"countryCode\": \"EC\",\n      \"currencyCode\": \"USD\",\n      \"currencyNameEn\": \"United States dollar\",\n      \"tinType\": \"RUC\",\n      \"tinName\": \"Número de Registro Unico de Contribuyentes\",\n      \"officialLanguageCode\": \"es\",\n      \"officialLanguageNameEn\": \"Spanish, Castilian\",\n      \"officialLanguageNameLocal\": \"Español\",\n      \"countryCallingCode\": \"593\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇪🇨\"\n    },\n    {\n      \"countryNameEn\": \"Estonia\",\n      \"countryNameLocal\": \"Eesti\",\n      \"countryCode\": \"EE\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"KMKR\",\n      \"tinName\": \"Käibemaksukohustuslase number\",\n      \"officialLanguageCode\": \"et\",\n      \"officialLanguageNameEn\": \"Estonian\",\n      \"officialLanguageNameLocal\": \"eesti, eesti keel\",\n      \"countryCallingCode\": \"372\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇪🇪\"\n    },\n    {\n      \"countryNameEn\": \"Egypt\",\n      \"countryNameLocal\": \"مصر\",\n      \"countryCode\": \"EG\",\n      \"currencyCode\": \"EGP\",\n      \"currencyNameEn\": \"Egyptian pound\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ar\",\n      \"officialLanguageNameEn\": \"Arabic\",\n      \"officialLanguageNameLocal\": \"العربية\",\n      \"countryCallingCode\": \"20\",\n      \"areaCodes\": [],\n      \"region\": \"Arab States\",\n      \"flag\": \"🇪🇬\"\n    },\n    {\n      \"countryNameEn\": \"Western Sahara\",\n      \"countryNameLocal\": \"Sahara Occidental\",\n      \"countryCode\": \"EH\",\n      \"currencyCode\": \"MAD\",\n      \"currencyNameEn\": \"Moroccan dirham\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ar\",\n      \"officialLanguageNameEn\": \"Arabic\",\n      \"officialLanguageNameLocal\": \"العربية\",\n      \"countryCallingCode\": \"212\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇪🇭\"\n    },\n    {\n      \"countryNameEn\": \"Eritrea\",\n      \"countryNameLocal\": \"ኤርትራ, إرتريا, Eritrea\",\n      \"countryCode\": \"ER\",\n      \"currencyCode\": \"ERN\",\n      \"currencyNameEn\": \"Eritrean nakfa\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ti\",\n      \"officialLanguageNameEn\": \"Tigrinya\",\n      \"officialLanguageNameLocal\": \"ትግርኛ\",\n      \"countryCallingCode\": \"291\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇪🇷\"\n    },\n    {\n      \"countryNameEn\": \"Spain\",\n      \"countryNameLocal\": \"España\",\n      \"countryCode\": \"ES\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"NIF (CIF)\",\n      \"tinName\": \"Número de Identificación Fiscal (formerly named Código de Identificación Fiscal)\",\n      \"officialLanguageCode\": \"ast\",\n      \"officialLanguageNameEn\": \"\",\n      \"officialLanguageNameLocal\": \"\",\n      \"countryCallingCode\": \"34\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇪🇸\"\n    },\n    {\n      \"countryNameEn\": \"Ethiopia\",\n      \"countryNameLocal\": \"ኢትዮጵያ, Itoophiyaa\",\n      \"countryCode\": \"ET\",\n      \"currencyCode\": \"ETB\",\n      \"currencyNameEn\": \"Ethiopian birr\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"am\",\n      \"officialLanguageNameEn\": \"Amharic\",\n      \"officialLanguageNameLocal\": \"አማርኛ\",\n      \"countryCallingCode\": \"251\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇪🇹\"\n    },\n    {\n      \"countryNameEn\": \"Finland\",\n      \"countryNameLocal\": \"Suomi\",\n      \"countryCode\": \"FI\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"ALV nro\",\n      \"tinName\": \"Arvonlisäveronumero\",\n      \"officialLanguageCode\": \"fi\",\n      \"officialLanguageNameEn\": \"Finnish\",\n      \"officialLanguageNameLocal\": \"suomi, suomen kieli\",\n      \"countryCallingCode\": \"358\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇫🇮\"\n    },\n    {\n      \"countryNameEn\": \"Fiji\",\n      \"countryNameLocal\": \"Fiji\",\n      \"countryCode\": \"FJ\",\n      \"currencyCode\": \"FJD\",\n      \"currencyNameEn\": \"Fiji dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"679\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇫🇯\"\n    },\n    {\n      \"countryNameEn\": \"Micronesia (Federated States of)\",\n      \"countryNameLocal\": \"Micronesia\",\n      \"countryCode\": \"FM\",\n      \"currencyCode\": \"USD\",\n      \"currencyNameEn\": \"United States dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"691\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇫🇲\"\n    },\n    {\n      \"countryNameEn\": \"France\",\n      \"countryNameLocal\": \"France\",\n      \"countryCode\": \"FR\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"n° TVA\",\n      \"tinName\": \"Numéro d'identification à la taxe sur la valeur ajoutée / Numéro de TVA intracommunautaire\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"33\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇫🇷\"\n    },\n    {\n      \"countryNameEn\": \"Gabon\",\n      \"countryNameLocal\": \"Gabon\",\n      \"countryCode\": \"GA\",\n      \"currencyCode\": \"XAF\",\n      \"currencyNameEn\": \"CFA franc BEAC\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"241\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇬🇦\"\n    },\n    {\n      \"countryNameEn\": \"Grenada\",\n      \"countryNameLocal\": \"Grenada\",\n      \"countryCode\": \"GD\",\n      \"currencyCode\": \"XCD\",\n      \"currencyNameEn\": \"East Caribbean dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"1473\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇬🇩\"\n    },\n    {\n      \"countryNameEn\": \"Georgia\",\n      \"countryNameLocal\": \"საქართველო\",\n      \"countryCode\": \"GE\",\n      \"currencyCode\": \"GEL\",\n      \"currencyNameEn\": \"Georgian lari\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ka\",\n      \"officialLanguageNameEn\": \"Georgian\",\n      \"officialLanguageNameLocal\": \"ქართული\",\n      \"countryCallingCode\": \"995\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇬🇪\"\n    },\n    {\n      \"countryNameEn\": \"French Guiana\",\n      \"countryNameLocal\": \"Guyane française\",\n      \"countryCode\": \"GF\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"594\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇬🇫\"\n    },\n    {\n      \"countryNameEn\": \"Guernsey\",\n      \"countryNameLocal\": \"Guernsey\",\n      \"countryCode\": \"GG\",\n      \"currencyCode\": \"GBP\",\n      \"currencyNameEn\": \"Pound sterling\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"44\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇬🇬\"\n    },\n    {\n      \"countryNameEn\": \"Ghana\",\n      \"countryNameLocal\": \"Ghana\",\n      \"countryCode\": \"GH\",\n      \"currencyCode\": \"GHS\",\n      \"currencyNameEn\": \"Ghanaian cedi\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"233\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇬🇭\"\n    },\n    {\n      \"countryNameEn\": \"Gibraltar\",\n      \"countryNameLocal\": \"Gibraltar\",\n      \"countryCode\": \"GI\",\n      \"currencyCode\": \"GIP\",\n      \"currencyNameEn\": \"Gibraltar pound\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"350\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇬🇮\"\n    },\n    {\n      \"countryNameEn\": \"Greenland\",\n      \"countryNameLocal\": \"Kalaallit Nunaat, Grønland\",\n      \"countryCode\": \"GL\",\n      \"currencyCode\": \"DKK\",\n      \"currencyNameEn\": \"Danish krone\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"kl\",\n      \"officialLanguageNameEn\": \"Kalaallisut, Greenlandic\",\n      \"officialLanguageNameLocal\": \"kalaallisut, kalaallit oqaasii\",\n      \"countryCallingCode\": \"299\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇬🇱\"\n    },\n    {\n      \"countryNameEn\": \"Guinea\",\n      \"countryNameLocal\": \"Guinée\",\n      \"countryCode\": \"GN\",\n      \"currencyCode\": \"GNF\",\n      \"currencyNameEn\": \"Guinean franc\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"224\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇬🇳\"\n    },\n    {\n      \"countryNameEn\": \"Guadeloupe\",\n      \"countryNameLocal\": \"Guadeloupe\",\n      \"countryCode\": \"GP\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"590\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇬🇵\"\n    },\n    {\n      \"countryNameEn\": \"Equatorial Guinea\",\n      \"countryNameLocal\": \"Guiena ecuatorial, Guinée équatoriale, Guiné Equatorial\",\n      \"countryCode\": \"GQ\",\n      \"currencyCode\": \"XAF\",\n      \"currencyNameEn\": \"CFA franc BEAC\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"es\",\n      \"officialLanguageNameEn\": \"Spanish, Castilian\",\n      \"officialLanguageNameLocal\": \"Español\",\n      \"countryCallingCode\": \"240\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇬🇶\"\n    },\n    {\n      \"countryNameEn\": \"Greece\",\n      \"countryNameLocal\": \"Ελλάδα\",\n      \"countryCode\": \"GR\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"el\",\n      \"officialLanguageNameEn\": \"Greek, Modern (1453-)\",\n      \"officialLanguageNameLocal\": \"ελληνικά\",\n      \"countryCallingCode\": \"30\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇬🇷\"\n    },\n    {\n      \"countryNameEn\": \"South Georgia and the South Sandwich Islands\",\n      \"countryNameLocal\": \"South Georgia and the South Sandwich Islands\",\n      \"countryCode\": \"GS\",\n      \"currencyCode\": \"\",\n      \"currencyNameEn\": \"\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"500\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇬🇸\"\n    },\n    {\n      \"countryNameEn\": \"Guatemala\",\n      \"countryNameLocal\": \"Guatemala\",\n      \"countryCode\": \"GT\",\n      \"currencyCode\": \"GTQ\",\n      \"currencyNameEn\": \"Guatemalan quetzal\",\n      \"tinType\": \"NIT\",\n      \"tinName\": \"Número de Identificación Tributaria\",\n      \"officialLanguageCode\": \"es\",\n      \"officialLanguageNameEn\": \"Spanish, Castilian\",\n      \"officialLanguageNameLocal\": \"Español\",\n      \"countryCallingCode\": \"502\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇬🇹\"\n    },\n    {\n      \"countryNameEn\": \"Guam\",\n      \"countryNameLocal\": \"Guam, Guåhån\",\n      \"countryCode\": \"GU\",\n      \"currencyCode\": \"USD\",\n      \"currencyNameEn\": \"United States dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"1\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇬🇺\"\n    },\n    {\n      \"countryNameEn\": \"Guinea-Bissau\",\n      \"countryNameLocal\": \"Guiné-Bissau\",\n      \"countryCode\": \"GW\",\n      \"currencyCode\": \"XOF\",\n      \"currencyNameEn\": \"CFA franc BCEAO\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"pt\",\n      \"officialLanguageNameEn\": \"Portuguese\",\n      \"officialLanguageNameLocal\": \"Português\",\n      \"countryCallingCode\": \"245\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇬🇼\"\n    },\n    {\n      \"countryNameEn\": \"Guyana\",\n      \"countryNameLocal\": \"Guyana\",\n      \"countryCode\": \"GY\",\n      \"currencyCode\": \"GYD\",\n      \"currencyNameEn\": \"Guyanese dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"592\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇬🇾\"\n    },\n    {\n      \"countryNameEn\": \"Hong Kong\",\n      \"countryNameLocal\": \"香港, Hong Kong\",\n      \"countryCode\": \"HK\",\n      \"currencyCode\": \"HKD\",\n      \"currencyNameEn\": \"Hong Kong dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"zh-hant\",\n      \"officialLanguageNameEn\": \"\",\n      \"officialLanguageNameLocal\": \"\",\n      \"countryCallingCode\": \"852\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇭🇰\"\n    },\n    {\n      \"countryNameEn\": \"Honduras\",\n      \"countryNameLocal\": \"Honduras\",\n      \"countryCode\": \"HN\",\n      \"currencyCode\": \"HNL\",\n      \"currencyNameEn\": \"Honduran lempira\",\n      \"tinType\": \"RTN\",\n      \"tinName\": \"Registro Tributario Nacional\",\n      \"officialLanguageCode\": \"es\",\n      \"officialLanguageNameEn\": \"Spanish, Castilian\",\n      \"officialLanguageNameLocal\": \"Español\",\n      \"countryCallingCode\": \"504\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇭🇳\"\n    },\n    {\n      \"countryNameEn\": \"Croatia\",\n      \"countryNameLocal\": \"Hrvatska\",\n      \"countryCode\": \"HR\",\n      \"currencyCode\": \"HRK\",\n      \"currencyNameEn\": \"Croatian kuna\",\n      \"tinType\": \"PDV-ID; OIB\",\n      \"tinName\": \"PDV Id. Broj OIB\",\n      \"officialLanguageCode\": \"hr\",\n      \"officialLanguageNameEn\": \"Croatian\",\n      \"officialLanguageNameLocal\": \"hrvatski jezik\",\n      \"countryCallingCode\": \"385\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇭🇷\"\n    },\n    {\n      \"countryNameEn\": \"Haiti\",\n      \"countryNameLocal\": \"Haïti, Ayiti\",\n      \"countryCode\": \"HT\",\n      \"currencyCode\": \"HTG\",\n      \"currencyNameEn\": \"Haitian gourde\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"509\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇭🇹\"\n    },\n    {\n      \"countryNameEn\": \"Hungary\",\n      \"countryNameLocal\": \"Magyarország\",\n      \"countryCode\": \"HU\",\n      \"currencyCode\": \"HUF\",\n      \"currencyNameEn\": \"Hungarian forint\",\n      \"tinType\": \"ANUM\",\n      \"tinName\": \"Közösségi adószám\",\n      \"officialLanguageCode\": \"hu\",\n      \"officialLanguageNameEn\": \"Hungarian\",\n      \"officialLanguageNameLocal\": \"magyar\",\n      \"countryCallingCode\": \"36\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇭🇺\"\n    },\n    {\n      \"countryNameEn\": \"Indonesia\",\n      \"countryNameLocal\": \"Indonesia\",\n      \"countryCode\": \"ID\",\n      \"currencyCode\": \"IDR\",\n      \"currencyNameEn\": \"Indonesian rupiah\",\n      \"tinType\": \"NPWP\",\n      \"tinName\": \"Nomor Pokok Wajib Pajak\",\n      \"officialLanguageCode\": \"id\",\n      \"officialLanguageNameEn\": \"Indonesian\",\n      \"officialLanguageNameLocal\": \"Bahasa Indonesia\",\n      \"countryCallingCode\": \"62\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇮🇩\"\n    },\n    {\n      \"countryNameEn\": \"Ireland\",\n      \"countryNameLocal\": \"Ireland, Éire\",\n      \"countryCode\": \"IE\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"VAT or CBL\",\n      \"tinName\": \"Value added tax identification no.\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"353\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇮🇪\"\n    },\n    {\n      \"countryNameEn\": \"Israel\",\n      \"countryNameLocal\": \"ישראל\",\n      \"countryCode\": \"IL\",\n      \"currencyCode\": \"ILS\",\n      \"currencyNameEn\": \"Israeli new shekel\",\n      \"tinType\": \"\",\n      \"tinName\": \"מס' עוסק מורשה / ח\\\"פ\",\n      \"officialLanguageCode\": \"he\",\n      \"officialLanguageNameEn\": \"Hebrew\",\n      \"officialLanguageNameLocal\": \"עברית\",\n      \"countryCallingCode\": \"972\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇮🇱\"\n    },\n    {\n      \"countryNameEn\": \"Isle of Man\",\n      \"countryNameLocal\": \"Isle of Man\",\n      \"countryCode\": \"IM\",\n      \"currencyCode\": \"GBP\",\n      \"currencyNameEn\": \"Pound sterling\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"44\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇮🇲\"\n    },\n    {\n      \"countryNameEn\": \"India\",\n      \"countryNameLocal\": \"भारत, India\",\n      \"countryCode\": \"IN\",\n      \"currencyCode\": \"INR\",\n      \"currencyNameEn\": \"Indian rupee\",\n      \"tinType\": \"VAT TIN / CST TIN\",\n      \"tinName\": \"Value Added Tax - Taxpayer Identification Number / Central Sales Tax - Taxpayer Identification Number (In most states)Not applicable\",\n      \"officialLanguageCode\": \"hi\",\n      \"officialLanguageNameEn\": \"Hindi\",\n      \"officialLanguageNameLocal\": \"हिन्दी, हिंदी\",\n      \"countryCallingCode\": \"91\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇮🇳\"\n    },\n    {\n      \"countryNameEn\": \"Iraq\",\n      \"countryNameLocal\": \"العراق, Iraq\",\n      \"countryCode\": \"IQ\",\n      \"currencyCode\": \"IQD\",\n      \"currencyNameEn\": \"Iraqi dinar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ar\",\n      \"officialLanguageNameEn\": \"Arabic\",\n      \"officialLanguageNameLocal\": \"العربية\",\n      \"countryCallingCode\": \"964\",\n      \"areaCodes\": [],\n      \"region\": \"Arab States\",\n      \"flag\": \"🇮🇶\"\n    },\n    {\n      \"countryNameEn\": \"Iran (Islamic Republic of)\",\n      \"countryNameLocal\": \"ایران\",\n      \"countryCode\": \"IR\",\n      \"currencyCode\": \"IRR\",\n      \"currencyNameEn\": \"Iranian rial\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fa\",\n      \"officialLanguageNameEn\": \"Persian\",\n      \"officialLanguageNameLocal\": \"فارسی\",\n      \"countryCallingCode\": \"98\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇮🇷\"\n    },\n    {\n      \"countryNameEn\": \"Iceland\",\n      \"countryNameLocal\": \"Ísland\",\n      \"countryCode\": \"IS\",\n      \"currencyCode\": \"ISK\",\n      \"currencyNameEn\": \"Icelandic króna\",\n      \"tinType\": \"VSK / VASK\",\n      \"tinName\": \"Virðisaukaskattsnúmer\",\n      \"officialLanguageCode\": \"is\",\n      \"officialLanguageNameEn\": \"Icelandic\",\n      \"officialLanguageNameLocal\": \"Íslenska\",\n      \"countryCallingCode\": \"354\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇮🇸\"\n    },\n    {\n      \"countryNameEn\": \"Italy\",\n      \"countryNameLocal\": \"Italia\",\n      \"countryCode\": \"IT\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"P.IVA\",\n      \"tinName\": \"Partita IVA(IVA = Imposta sul Valore Aggiunto)\",\n      \"officialLanguageCode\": \"it\",\n      \"officialLanguageNameEn\": \"Italian\",\n      \"officialLanguageNameLocal\": \"Italiano\",\n      \"countryCallingCode\": \"39\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇮🇹\"\n    },\n    {\n      \"countryNameEn\": \"Jersey\",\n      \"countryNameLocal\": \"Jersey\",\n      \"countryCode\": \"JE\",\n      \"currencyCode\": \"GBP\",\n      \"currencyNameEn\": \"Pound sterling\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"44\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇯🇪\"\n    },\n    {\n      \"countryNameEn\": \"Jamaica\",\n      \"countryNameLocal\": \"Jamaica\",\n      \"countryCode\": \"JM\",\n      \"currencyCode\": \"JMD\",\n      \"currencyNameEn\": \"Jamaican dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"876\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇯🇲\"\n    },\n    {\n      \"countryNameEn\": \"Jordan\",\n      \"countryNameLocal\": \"الأُرْدُن\",\n      \"countryCode\": \"JO\",\n      \"currencyCode\": \"JOD\",\n      \"currencyNameEn\": \"Jordanian dinar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ar\",\n      \"officialLanguageNameEn\": \"Arabic\",\n      \"officialLanguageNameLocal\": \"العربية\",\n      \"countryCallingCode\": \"962\",\n      \"areaCodes\": [],\n      \"region\": \"Arab States\",\n      \"flag\": \"🇯🇴\"\n    },\n    {\n      \"countryNameEn\": \"Japan\",\n      \"countryNameLocal\": \"日本\",\n      \"countryCode\": \"JP\",\n      \"currencyCode\": \"JPY\",\n      \"currencyNameEn\": \"Japanese yen\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ja\",\n      \"officialLanguageNameEn\": \"Japanese\",\n      \"officialLanguageNameLocal\": \"日本語 (にほんご)\",\n      \"countryCallingCode\": \"81\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇯🇵\"\n    },\n    {\n      \"countryNameEn\": \"Kenya\",\n      \"countryNameLocal\": \"Kenya\",\n      \"countryCode\": \"KE\",\n      \"currencyCode\": \"KES\",\n      \"currencyNameEn\": \"Kenyan shilling\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"sw\",\n      \"officialLanguageNameEn\": \"Swahili\",\n      \"officialLanguageNameLocal\": \"Kiswahili\",\n      \"countryCallingCode\": \"254\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇰🇪\"\n    },\n    {\n      \"countryNameEn\": \"Kyrgyzstan\",\n      \"countryNameLocal\": \"Кыргызстан, Киргизия\",\n      \"countryCode\": \"KG\",\n      \"currencyCode\": \"KGS\",\n      \"currencyNameEn\": \"Kyrgyzstani som\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ky\",\n      \"officialLanguageNameEn\": \"Kirghiz, Kyrgyz\",\n      \"officialLanguageNameLocal\": \"Кыргызча, Кыргыз тили\",\n      \"countryCallingCode\": \"996\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇰🇬\"\n    },\n    {\n      \"countryNameEn\": \"Cambodia\",\n      \"countryNameLocal\": \"កម្ពុជា\",\n      \"countryCode\": \"KH\",\n      \"currencyCode\": \"KHR\",\n      \"currencyNameEn\": \"Cambodian riel\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"km\",\n      \"officialLanguageNameEn\": \"Central Khmer\",\n      \"officialLanguageNameLocal\": \"ខ្មែរ, ខេមរភាសា, ភាសាខ្មែរ\",\n      \"countryCallingCode\": \"855\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇰🇭\"\n    },\n    {\n      \"countryNameEn\": \"North Korea\",\n      \"countryNameLocal\": \"조선민주주의인민공화국\",\n      \"countryCode\": \"KP\",\n      \"currencyCode\": \"KPW\",\n      \"currencyNameEn\": \"North Korean won\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ko\",\n      \"officialLanguageNameEn\": \"Korean\",\n      \"officialLanguageNameLocal\": \"조선어\",\n      \"countryCallingCode\": \"850\",\n      \"areaCodes\": [],\n      \"region\": \"Asia\",\n      \"flag\": \"🇰🇵\"\n    },\n    {\n      \"countryNameEn\": \"South Korea\",\n      \"countryNameLocal\": \"대한민국\",\n      \"countryCode\": \"KR\",\n      \"currencyCode\": \"KRW\",\n      \"currencyNameEn\": \"South Korean won\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ko\",\n      \"officialLanguageNameEn\": \"Korean\",\n      \"officialLanguageNameLocal\": \"한국어\",\n      \"countryCallingCode\": \"82\",\n      \"areaCodes\": [],\n      \"region\": \"Asia\",\n      \"flag\": \"🇰🇷\"\n    },\n    {\n      \"countryNameEn\": \"Kiribati\",\n      \"countryNameLocal\": \"Kiribati\",\n      \"countryCode\": \"KI\",\n      \"currencyCode\": \"AUD\",\n      \"currencyNameEn\": \"Australian dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"686\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇰🇮\"\n    },\n    {\n      \"countryNameEn\": \"Saint Kitts and Nevis\",\n      \"countryNameLocal\": \"Saint Kitts and Nevis\",\n      \"countryCode\": \"KN\",\n      \"currencyCode\": \"XCD\",\n      \"currencyNameEn\": \"East Caribbean dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"1869\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇰🇳\"\n    },\n    {\n      \"countryNameEn\": \"Kuwait\",\n      \"countryNameLocal\": \"الكويت\",\n      \"countryCode\": \"KW\",\n      \"currencyCode\": \"KWD\",\n      \"currencyNameEn\": \"Kuwaiti dinar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ar\",\n      \"officialLanguageNameEn\": \"Arabic\",\n      \"officialLanguageNameLocal\": \"العربية\",\n      \"countryCallingCode\": \"965\",\n      \"areaCodes\": [],\n      \"region\": \"Arab States\",\n      \"flag\": \"🇰🇼\"\n    },\n    {\n      \"countryNameEn\": \"Kazakhstan\",\n      \"countryNameLocal\": \"Қазақстан, Казахстан\",\n      \"countryCode\": \"KZ\",\n      \"currencyCode\": \"KZT\",\n      \"currencyNameEn\": \"Kazakhstani tenge\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"kk\",\n      \"officialLanguageNameEn\": \"Kazakh\",\n      \"officialLanguageNameLocal\": \"қазақ тілі\",\n      \"countryCallingCode\": \"7\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇰🇿\"\n    },\n    {\n      \"countryNameEn\": \"Lebanon\",\n      \"countryNameLocal\": \"لبنان, Liban\",\n      \"countryCode\": \"LB\",\n      \"currencyCode\": \"LBP\",\n      \"currencyNameEn\": \"Lebanese pound\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ar\",\n      \"officialLanguageNameEn\": \"Arabic\",\n      \"officialLanguageNameLocal\": \"العربية\",\n      \"countryCallingCode\": \"961\",\n      \"areaCodes\": [],\n      \"region\": \"Arab States\",\n      \"flag\": \"🇱🇧\"\n    },\n    {\n      \"countryNameEn\": \"Saint Lucia\",\n      \"countryNameLocal\": \"Saint Lucia\",\n      \"countryCode\": \"LC\",\n      \"currencyCode\": \"XCD\",\n      \"currencyNameEn\": \"East Caribbean dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"1758\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇱🇨\"\n    },\n    {\n      \"countryNameEn\": \"Liechtenstein\",\n      \"countryNameLocal\": \"Liechtenstein\",\n      \"countryCode\": \"LI\",\n      \"currencyCode\": \"CHF\",\n      \"currencyNameEn\": \"Swiss franc\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"de\",\n      \"officialLanguageNameEn\": \"German\",\n      \"officialLanguageNameLocal\": \"Deutsch\",\n      \"countryCallingCode\": \"423\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇱🇮\"\n    },\n    {\n      \"countryNameEn\": \"Sri Lanka\",\n      \"countryNameLocal\": \"ශ්‍රී ලංකා, இலங்கை\",\n      \"countryCode\": \"LK\",\n      \"currencyCode\": \"LKR\",\n      \"currencyNameEn\": \"Sri Lankan rupee\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"si\",\n      \"officialLanguageNameEn\": \"Sinhala, Sinhalese\",\n      \"officialLanguageNameLocal\": \"සිංහල\",\n      \"countryCallingCode\": \"94\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇱🇰\"\n    },\n    {\n      \"countryNameEn\": \"Liberia\",\n      \"countryNameLocal\": \"Liberia\",\n      \"countryCode\": \"LR\",\n      \"currencyCode\": \"LRD\",\n      \"currencyNameEn\": \"Liberian dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"231\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇱🇷\"\n    },\n    {\n      \"countryNameEn\": \"Lesotho\",\n      \"countryNameLocal\": \"Lesotho\",\n      \"countryCode\": \"LS\",\n      \"currencyCode\": \"LSL\",\n      \"currencyNameEn\": \"Lesotho loti\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"266\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇱🇸\"\n    },\n    {\n      \"countryNameEn\": \"Lithuania\",\n      \"countryNameLocal\": \"Lietuva\",\n      \"countryCode\": \"LT\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"PVM kodas\",\n      \"tinName\": \"PVM (abbrev. Pridėtinės vertės mokestis) mokėtojo kodas\",\n      \"officialLanguageCode\": \"lt\",\n      \"officialLanguageNameEn\": \"Lithuanian\",\n      \"officialLanguageNameLocal\": \"lietuvių kalba\",\n      \"countryCallingCode\": \"370\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇱🇹\"\n    },\n    {\n      \"countryNameEn\": \"Luxembourg\",\n      \"countryNameLocal\": \"Lëtzebuerg, Luxembourg, Luxemburg\",\n      \"countryCode\": \"LU\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"No. TVA\",\n      \"tinName\": \"Numéro d'identification à la taxe sur la valeur ajoutée\",\n      \"officialLanguageCode\": \"lb\",\n      \"officialLanguageNameEn\": \"Luxembourgish, Letzeburgesch\",\n      \"officialLanguageNameLocal\": \"Lëtzebuergesch\",\n      \"countryCallingCode\": \"352\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇱🇺\"\n    },\n    {\n      \"countryNameEn\": \"Latvia\",\n      \"countryNameLocal\": \"Latvija\",\n      \"countryCode\": \"LV\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"PVN\",\n      \"tinName\": \"Pievienotās vērtības nodokļa (PVN) reģistrācijas numurs\",\n      \"officialLanguageCode\": \"lv\",\n      \"officialLanguageNameEn\": \"Latvian\",\n      \"officialLanguageNameLocal\": \"latviešu valoda\",\n      \"countryCallingCode\": \"371\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇱🇻\"\n    },\n    {\n      \"countryNameEn\": \"Libya\",\n      \"countryNameLocal\": \"ليبيا\",\n      \"countryCode\": \"LY\",\n      \"currencyCode\": \"LYD\",\n      \"currencyNameEn\": \"Libyan dinar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ar\",\n      \"officialLanguageNameEn\": \"Arabic\",\n      \"officialLanguageNameLocal\": \"العربية\",\n      \"countryCallingCode\": \"218\",\n      \"areaCodes\": [],\n      \"region\": \"Arab States\",\n      \"flag\": \"🇱🇾\"\n    },\n    {\n      \"countryNameEn\": \"Morocco\",\n      \"countryNameLocal\": \"Maroc, ⵍⵎⵖⵔⵉⴱ, المغرب\",\n      \"countryCode\": \"MA\",\n      \"currencyCode\": \"MAD\",\n      \"currencyNameEn\": \"Moroccan dirham\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"212\",\n      \"areaCodes\": [],\n      \"region\": \"Arab States\",\n      \"flag\": \"🇲🇦\"\n    },\n    {\n      \"countryNameEn\": \"Monaco\",\n      \"countryNameLocal\": \"Monaco\",\n      \"countryCode\": \"MC\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"377\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇲🇨\"\n    },\n    {\n      \"countryNameEn\": \"Montenegro\",\n      \"countryNameLocal\": \"Crna Gora, Црна Гора\",\n      \"countryCode\": \"ME\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"srp\",\n      \"officialLanguageNameEn\": \"српски језик\",\n      \"officialLanguageNameLocal\": \"\",\n      \"countryCallingCode\": \"382\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇲🇪\"\n    },\n    {\n      \"countryNameEn\": \"Saint Martin (French part)\",\n      \"countryNameLocal\": \"Saint-Martin\",\n      \"countryCode\": \"MF\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"590\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇲🇫\"\n    },\n    {\n      \"countryNameEn\": \"Madagascar\",\n      \"countryNameLocal\": \"Madagasikara, Madagascar\",\n      \"countryCode\": \"MG\",\n      \"currencyCode\": \"MGA\",\n      \"currencyNameEn\": \"Malagasy ariary\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"mg\",\n      \"officialLanguageNameEn\": \"Malagasy\",\n      \"officialLanguageNameLocal\": \"fiteny malagasy\",\n      \"countryCallingCode\": \"261\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇲🇬\"\n    },\n    {\n      \"countryNameEn\": \"Mali\",\n      \"countryNameLocal\": \"Mali\",\n      \"countryCode\": \"ML\",\n      \"currencyCode\": \"XOF\",\n      \"currencyNameEn\": \"CFA franc BCEAO\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"223\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇲🇱\"\n    },\n    {\n      \"countryNameEn\": \"Myanmar\",\n      \"countryNameLocal\": \"မြန်မာ\",\n      \"countryCode\": \"MM\",\n      \"currencyCode\": \"MMK\",\n      \"currencyNameEn\": \"Myanmar kyat\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"my\",\n      \"officialLanguageNameEn\": \"Burmese\",\n      \"officialLanguageNameLocal\": \"ဗမာစာ\",\n      \"countryCallingCode\": \"95\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇲🇲\"\n    },\n    {\n      \"countryNameEn\": \"Mongolia\",\n      \"countryNameLocal\": \"Монгол Улс\",\n      \"countryCode\": \"MN\",\n      \"currencyCode\": \"MNT\",\n      \"currencyNameEn\": \"Mongolian tögrög\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"mn\",\n      \"officialLanguageNameEn\": \"Mongolian\",\n      \"officialLanguageNameLocal\": \"Монгол хэл\",\n      \"countryCallingCode\": \"976\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇲🇳\"\n    },\n    {\n      \"countryNameEn\": \"Macao\",\n      \"countryNameLocal\": \"澳門, Macau\",\n      \"countryCode\": \"MO\",\n      \"currencyCode\": \"MOP\",\n      \"currencyNameEn\": \"Macanese pataca\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"zh-hant\",\n      \"officialLanguageNameEn\": \"\",\n      \"officialLanguageNameLocal\": \"\",\n      \"countryCallingCode\": \"853\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇲🇴\"\n    },\n    {\n      \"countryNameEn\": \"Martinique\",\n      \"countryNameLocal\": \"Martinique\",\n      \"countryCode\": \"MQ\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"596\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇲🇶\"\n    },\n    {\n      \"countryNameEn\": \"Mauritania\",\n      \"countryNameLocal\": \"موريتانيا, Mauritanie\",\n      \"countryCode\": \"MR\",\n      \"currencyCode\": \"MRU\",\n      \"currencyNameEn\": \"\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ar\",\n      \"officialLanguageNameEn\": \"Arabic\",\n      \"officialLanguageNameLocal\": \"العربية\",\n      \"countryCallingCode\": \"222\",\n      \"areaCodes\": [],\n      \"region\": \"Arab States\",\n      \"flag\": \"🇲🇷\"\n    },\n    {\n      \"countryNameEn\": \"Montserrat\",\n      \"countryNameLocal\": \"Montserrat\",\n      \"countryCode\": \"MS\",\n      \"currencyCode\": \"XCD\",\n      \"currencyNameEn\": \"East Caribbean dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"1664\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇲🇸\"\n    },\n    {\n      \"countryNameEn\": \"Malta\",\n      \"countryNameLocal\": \"Malta\",\n      \"countryCode\": \"MT\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"Vat No.\",\n      \"tinName\": \"Vat reg. no.\",\n      \"officialLanguageCode\": \"mt\",\n      \"officialLanguageNameEn\": \"Maltese\",\n      \"officialLanguageNameLocal\": \"Malti\",\n      \"countryCallingCode\": \"356\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇲🇹\"\n    },\n    {\n      \"countryNameEn\": \"Mauritius\",\n      \"countryNameLocal\": \"Maurice, Mauritius\",\n      \"countryCode\": \"MU\",\n      \"currencyCode\": \"MUR\",\n      \"currencyNameEn\": \"Mauritian rupee\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"mfe\",\n      \"officialLanguageNameEn\": \"\",\n      \"officialLanguageNameLocal\": \"\",\n      \"countryCallingCode\": \"230\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇲🇺\"\n    },\n    {\n      \"countryNameEn\": \"Maldives\",\n      \"countryNameLocal\": \"\",\n      \"countryCode\": \"MV\",\n      \"currencyCode\": \"MVR\",\n      \"currencyNameEn\": \"Maldivian rufiyaa\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"dv\",\n      \"officialLanguageNameEn\": \"Divehi, Dhivehi, Maldivian\",\n      \"officialLanguageNameLocal\": \"ދިވެހި\",\n      \"countryCallingCode\": \"960\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇲🇻\"\n    },\n    {\n      \"countryNameEn\": \"Malawi\",\n      \"countryNameLocal\": \"Malawi\",\n      \"countryCode\": \"MW\",\n      \"currencyCode\": \"MWK\",\n      \"currencyNameEn\": \"Malawian kwacha\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"265\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇲🇼\"\n    },\n    {\n      \"countryNameEn\": \"Mexico\",\n      \"countryNameLocal\": \"México\",\n      \"countryCode\": \"MX\",\n      \"currencyCode\": \"MXN\",\n      \"currencyNameEn\": \"Mexican peso\",\n      \"tinType\": \"RFC\",\n      \"tinName\": \"Registro Federal de Contribuyentes\",\n      \"officialLanguageCode\": \"es\",\n      \"officialLanguageNameEn\": \"Spanish, Castilian\",\n      \"officialLanguageNameLocal\": \"Español\",\n      \"countryCallingCode\": \"52\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇲🇽\"\n    },\n    {\n      \"countryNameEn\": \"Malaysia\",\n      \"countryNameLocal\": \"\",\n      \"countryCode\": \"MY\",\n      \"currencyCode\": \"MYR\",\n      \"currencyNameEn\": \"Malaysian ringgit\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ms\",\n      \"officialLanguageNameEn\": \"Malay\",\n      \"officialLanguageNameLocal\": \"Bahasa Melayu, بهاس ملايو‎\",\n      \"countryCallingCode\": \"60\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇲🇾\"\n    },\n    {\n      \"countryNameEn\": \"Mozambique\",\n      \"countryNameLocal\": \"Mozambique\",\n      \"countryCode\": \"MZ\",\n      \"currencyCode\": \"MZN\",\n      \"currencyNameEn\": \"Mozambican metical\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"pt\",\n      \"officialLanguageNameEn\": \"Portuguese\",\n      \"officialLanguageNameLocal\": \"Português\",\n      \"countryCallingCode\": \"258\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇲🇿\"\n    },\n    {\n      \"countryNameEn\": \"Namibia\",\n      \"countryNameLocal\": \"Namibia\",\n      \"countryCode\": \"NA\",\n      \"currencyCode\": \"NAD\",\n      \"currencyNameEn\": \"Namibian dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"264\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇳🇦\"\n    },\n    {\n      \"countryNameEn\": \"New Caledonia\",\n      \"countryNameLocal\": \"Nouvelle-Calédonie\",\n      \"countryCode\": \"NC\",\n      \"currencyCode\": \"XPF\",\n      \"currencyNameEn\": \"CFP franc (franc Pacifique)\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"687\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇳🇨\"\n    },\n    {\n      \"countryNameEn\": \"Norfolk Island\",\n      \"countryNameLocal\": \"Norfolk Island\",\n      \"countryCode\": \"NF\",\n      \"currencyCode\": \"AUD\",\n      \"currencyNameEn\": \"Australian dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"672\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇳🇫\"\n    },\n    {\n      \"countryNameEn\": \"Nigeria\",\n      \"countryNameLocal\": \"Nigeria\",\n      \"countryCode\": \"NG\",\n      \"currencyCode\": \"NGN\",\n      \"currencyNameEn\": \"Nigerian naira\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"234\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇳🇬\"\n    },\n    {\n      \"countryNameEn\": \"Nicaragua\",\n      \"countryNameLocal\": \"Nicaragua\",\n      \"countryCode\": \"NI\",\n      \"currencyCode\": \"NIO\",\n      \"currencyNameEn\": \"Nicaraguan córdoba\",\n      \"tinType\": \"RUC\",\n      \"tinName\": \"Registro Unico de Contribuyentes\",\n      \"officialLanguageCode\": \"es\",\n      \"officialLanguageNameEn\": \"Spanish, Castilian\",\n      \"officialLanguageNameLocal\": \"Español\",\n      \"countryCallingCode\": \"505\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇳🇮\"\n    },\n    {\n      \"countryNameEn\": \"Norway\",\n      \"countryNameLocal\": \"Norge, Noreg\",\n      \"countryCode\": \"NO\",\n      \"currencyCode\": \"NOK\",\n      \"currencyNameEn\": \"Norwegian krone\",\n      \"tinType\": \"Orgnr\",\n      \"tinName\": \"Organisasjonsnummer\",\n      \"officialLanguageCode\": \"nb\",\n      \"officialLanguageNameEn\": \"Norwegian Bokmål\",\n      \"officialLanguageNameLocal\": \"Norsk Bokmål\",\n      \"countryCallingCode\": \"47\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇳🇴\"\n    },\n    {\n      \"countryNameEn\": \"Nepal\",\n      \"countryNameLocal\": \"\",\n      \"countryCode\": \"NP\",\n      \"currencyCode\": \"NPR\",\n      \"currencyNameEn\": \"Nepalese rupee\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ne\",\n      \"officialLanguageNameEn\": \"Nepali\",\n      \"officialLanguageNameLocal\": \"नेपाली\",\n      \"countryCallingCode\": \"977\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇳🇵\"\n    },\n    {\n      \"countryNameEn\": \"Nauru\",\n      \"countryNameLocal\": \"Nauru\",\n      \"countryCode\": \"NR\",\n      \"currencyCode\": \"AUD\",\n      \"currencyNameEn\": \"Australian dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"na\",\n      \"officialLanguageNameEn\": \"Nauru\",\n      \"officialLanguageNameLocal\": \"Dorerin Naoero\",\n      \"countryCallingCode\": \"674\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇳🇷\"\n    },\n    {\n      \"countryNameEn\": \"Niue\",\n      \"countryNameLocal\": \"Niue\",\n      \"countryCode\": \"NU\",\n      \"currencyCode\": \"NZD\",\n      \"currencyNameEn\": \"New Zealand dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"niu\",\n      \"officialLanguageNameEn\": \"\",\n      \"officialLanguageNameLocal\": \"\",\n      \"countryCallingCode\": \"683\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇳🇺\"\n    },\n    {\n      \"countryNameEn\": \"New Zealand\",\n      \"countryNameLocal\": \"New Zealand\",\n      \"countryCode\": \"NZ\",\n      \"currencyCode\": \"NZD\",\n      \"currencyNameEn\": \"New Zealand dollar\",\n      \"tinType\": \"NZBN\",\n      \"tinName\": \"NZ Business Number\",\n      \"officialLanguageCode\": \"mi\",\n      \"officialLanguageNameEn\": \"Maori\",\n      \"officialLanguageNameLocal\": \"te reo Māori\",\n      \"countryCallingCode\": \"64\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇳🇿\"\n    },\n    {\n      \"countryNameEn\": \"Oman\",\n      \"countryNameLocal\": \"سلطنة عُمان\",\n      \"countryCode\": \"OM\",\n      \"currencyCode\": \"OMR\",\n      \"currencyNameEn\": \"Omani rial\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ar\",\n      \"officialLanguageNameEn\": \"Arabic\",\n      \"officialLanguageNameLocal\": \"العربية\",\n      \"countryCallingCode\": \"968\",\n      \"areaCodes\": [],\n      \"region\": \"Arab States\",\n      \"flag\": \"🇴🇲\"\n    },\n    {\n      \"countryNameEn\": \"Panama\",\n      \"countryNameLocal\": \"Panama\",\n      \"countryCode\": \"PA\",\n      \"currencyCode\": \"PAB\",\n      \"currencyNameEn\": \"Panamanian balboa\",\n      \"tinType\": \"RUC\",\n      \"tinName\": \"Registro Unico de Contribuyentes\",\n      \"officialLanguageCode\": \"es\",\n      \"officialLanguageNameEn\": \"Spanish, Castilian\",\n      \"officialLanguageNameLocal\": \"Español\",\n      \"countryCallingCode\": \"507\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇵🇦\"\n    },\n    {\n      \"countryNameEn\": \"Peru\",\n      \"countryNameLocal\": \"Perú\",\n      \"countryCode\": \"PE\",\n      \"currencyCode\": \"PEN\",\n      \"currencyNameEn\": \"Peruvian sol\",\n      \"tinType\": \"RUC\",\n      \"tinName\": \"Registro Unico de Contribuyentes\",\n      \"officialLanguageCode\": \"es\",\n      \"officialLanguageNameEn\": \"Spanish, Castilian\",\n      \"officialLanguageNameLocal\": \"Español\",\n      \"countryCallingCode\": \"51\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇵🇪\"\n    },\n    {\n      \"countryNameEn\": \"French Polynesia\",\n      \"countryNameLocal\": \"Polynésie française\",\n      \"countryCode\": \"PF\",\n      \"currencyCode\": \"XPF\",\n      \"currencyNameEn\": \"CFP franc (franc Pacifique)\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"689\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇵🇫\"\n    },\n    {\n      \"countryNameEn\": \"Papua New Guinea\",\n      \"countryNameLocal\": \"Papua New Guinea\",\n      \"countryCode\": \"PG\",\n      \"currencyCode\": \"PGK\",\n      \"currencyNameEn\": \"Papua New Guinean kina\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"675\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇵🇬\"\n    },\n    {\n      \"countryNameEn\": \"Pakistan\",\n      \"countryNameLocal\": \"پاکستان\",\n      \"countryCode\": \"PK\",\n      \"currencyCode\": \"PKR\",\n      \"currencyNameEn\": \"Pakistani rupee\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"92\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇵🇰\"\n    },\n    {\n      \"countryNameEn\": \"Poland\",\n      \"countryNameLocal\": \"Polska\",\n      \"countryCode\": \"PL\",\n      \"currencyCode\": \"PLN\",\n      \"currencyNameEn\": \"Polish złoty\",\n      \"tinType\": \"NIP\",\n      \"tinName\": \"numer identyfikacji podatkowej\",\n      \"officialLanguageCode\": \"pl\",\n      \"officialLanguageNameEn\": \"Polish\",\n      \"officialLanguageNameLocal\": \"język polski, polszczyzna\",\n      \"countryCallingCode\": \"48\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇵🇱\"\n    },\n    {\n      \"countryNameEn\": \"Saint Pierre and Miquelon\",\n      \"countryNameLocal\": \"Saint-Pierre-et-Miquelon\",\n      \"countryCode\": \"PM\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"508\",\n      \"areaCodes\": [],\n      \"region\": \"North America\",\n      \"flag\": \"🇵🇲\"\n    },\n    {\n      \"countryNameEn\": \"Pitcairn\",\n      \"countryNameLocal\": \"Pitcairn\",\n      \"countryCode\": \"PN\",\n      \"currencyCode\": \"NZD\",\n      \"currencyNameEn\": \"New Zealand dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"64\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇵🇳\"\n    },\n    {\n      \"countryNameEn\": \"Puerto Rico\",\n      \"countryNameLocal\": \"Puerto Rico\",\n      \"countryCode\": \"PR\",\n      \"currencyCode\": \"USD\",\n      \"currencyNameEn\": \"United States dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"es\",\n      \"officialLanguageNameEn\": \"Spanish, Castilian\",\n      \"officialLanguageNameLocal\": \"Español\",\n      \"countryCallingCode\": \"1\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇵🇷\"\n    },\n    {\n      \"countryNameEn\": \"Palestine, State of\",\n      \"countryNameLocal\": \"Palestinian Territory\",\n      \"countryCode\": \"PS\",\n      \"currencyCode\": \"\",\n      \"currencyNameEn\": \"\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ar\",\n      \"officialLanguageNameEn\": \"Arabic\",\n      \"officialLanguageNameLocal\": \"العربية\",\n      \"countryCallingCode\": \"970\",\n      \"areaCodes\": [],\n      \"region\": \"Arab States\",\n      \"flag\": \"🇵🇸\"\n    },\n    {\n      \"countryNameEn\": \"Portugal\",\n      \"countryNameLocal\": \"Portugal\",\n      \"countryCode\": \"PT\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"NIPC\",\n      \"tinName\": \"Número de Identificação de Pessoa Coletiva (NIPC)\",\n      \"officialLanguageCode\": \"pt\",\n      \"officialLanguageNameEn\": \"Portuguese\",\n      \"officialLanguageNameLocal\": \"Português\",\n      \"countryCallingCode\": \"351\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇵🇹\"\n    },\n    {\n      \"countryNameEn\": \"Palau\",\n      \"countryNameLocal\": \"Palau\",\n      \"countryCode\": \"PW\",\n      \"currencyCode\": \"USD\",\n      \"currencyNameEn\": \"United States dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"680\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇵🇼\"\n    },\n    {\n      \"countryNameEn\": \"Paraguay\",\n      \"countryNameLocal\": \"Paraguay\",\n      \"countryCode\": \"PY\",\n      \"currencyCode\": \"PYG\",\n      \"currencyNameEn\": \"Paraguayan guaraní\",\n      \"tinType\": \"RUC\",\n      \"tinName\": \"Registro Unico de Contribuyentes\",\n      \"officialLanguageCode\": \"es\",\n      \"officialLanguageNameEn\": \"Spanish, Castilian\",\n      \"officialLanguageNameLocal\": \"Español\",\n      \"countryCallingCode\": \"595\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇵🇾\"\n    },\n    {\n      \"countryNameEn\": \"Qatar\",\n      \"countryNameLocal\": \"قطر\",\n      \"countryCode\": \"QA\",\n      \"currencyCode\": \"QAR\",\n      \"currencyNameEn\": \"Qatari riyal\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ar\",\n      \"officialLanguageNameEn\": \"Arabic\",\n      \"officialLanguageNameLocal\": \"العربية\",\n      \"countryCallingCode\": \"974\",\n      \"areaCodes\": [],\n      \"region\": \"Arab States\",\n      \"flag\": \"🇶🇦\"\n    },\n    {\n      \"countryNameEn\": \"Réunion\",\n      \"countryNameLocal\": \"La Réunion\",\n      \"countryCode\": \"RE\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"262\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇷🇪\"\n    },\n    {\n      \"countryNameEn\": \"Romania\",\n      \"countryNameLocal\": \"România\",\n      \"countryCode\": \"RO\",\n      \"currencyCode\": \"RON\",\n      \"currencyNameEn\": \"Romanian leu\",\n      \"tinType\": \"CIF\",\n      \"tinName\": \"Codul de identificare fiscală\",\n      \"officialLanguageCode\": \"ro\",\n      \"officialLanguageNameEn\": \"Romanian, Moldavian, Moldovan\",\n      \"officialLanguageNameLocal\": \"Română\",\n      \"countryCallingCode\": \"40\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇷🇴\"\n    },\n    {\n      \"countryNameEn\": \"Serbia\",\n      \"countryNameLocal\": \"Србија\",\n      \"countryCode\": \"RS\",\n      \"currencyCode\": \"RSD\",\n      \"currencyNameEn\": \"Serbian dinar\",\n      \"tinType\": \"PIB\",\n      \"tinName\": \"Poreski identifikacioni broj\",\n      \"officialLanguageCode\": \"sr\",\n      \"officialLanguageNameEn\": \"Serbian\",\n      \"officialLanguageNameLocal\": \"српски језик\",\n      \"countryCallingCode\": \"381\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇷🇸\"\n    },\n    {\n      \"countryNameEn\": \"Russia\",\n      \"countryNameLocal\": \"Россия\",\n      \"countryCode\": \"RU\",\n      \"currencyCode\": \"RUB\",\n      \"currencyNameEn\": \"Russian ruble\",\n      \"tinType\": \"ИНН\",\n      \"tinName\": \"Идентификационный номер налогоплательщика\",\n      \"officialLanguageCode\": \"ru\",\n      \"officialLanguageNameEn\": \"Russian\",\n      \"officialLanguageNameLocal\": \"русский\",\n      \"countryCallingCode\": \"7\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇷🇺\"\n    },\n    {\n      \"countryNameEn\": \"Rwanda\",\n      \"countryNameLocal\": \"Rwanda\",\n      \"countryCode\": \"RW\",\n      \"currencyCode\": \"RWF\",\n      \"currencyNameEn\": \"Rwandan franc\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"rw\",\n      \"officialLanguageNameEn\": \"Kinyarwanda\",\n      \"officialLanguageNameLocal\": \"Ikinyarwanda\",\n      \"countryCallingCode\": \"250\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇷🇼\"\n    },\n    {\n      \"countryNameEn\": \"Saudi Arabia\",\n      \"countryNameLocal\": \"السعودية\",\n      \"countryCode\": \"SA\",\n      \"currencyCode\": \"SAR\",\n      \"currencyNameEn\": \"Saudi riyal\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ar\",\n      \"officialLanguageNameEn\": \"Arabic\",\n      \"officialLanguageNameLocal\": \"العربية\",\n      \"countryCallingCode\": \"966\",\n      \"areaCodes\": [],\n      \"region\": \"Arab States\",\n      \"flag\": \"🇸🇦\"\n    },\n    {\n      \"countryNameEn\": \"Solomon Islands\",\n      \"countryNameLocal\": \"Solomon Islands\",\n      \"countryCode\": \"SB\",\n      \"currencyCode\": \"SBD\",\n      \"currencyNameEn\": \"Solomon Islands dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"677\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇸🇧\"\n    },\n    {\n      \"countryNameEn\": \"Seychelles\",\n      \"countryNameLocal\": \"Seychelles\",\n      \"countryCode\": \"SC\",\n      \"currencyCode\": \"SCR\",\n      \"currencyNameEn\": \"Seychelles rupee\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"248\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇸🇨\"\n    },\n    {\n      \"countryNameEn\": \"Sweden\",\n      \"countryNameLocal\": \"Sverige\",\n      \"countryCode\": \"SE\",\n      \"currencyCode\": \"SEK\",\n      \"currencyNameEn\": \"Swedish krona/kronor\",\n      \"tinType\": \"Momsnr.\",\n      \"tinName\": \"VAT-nummer\",\n      \"officialLanguageCode\": \"sv\",\n      \"officialLanguageNameEn\": \"Swedish\",\n      \"officialLanguageNameLocal\": \"Svenska\",\n      \"countryCallingCode\": \"46\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇸🇪\"\n    },\n    {\n      \"countryNameEn\": \"Singapore\",\n      \"countryNameLocal\": \"Singapore\",\n      \"countryCode\": \"SG\",\n      \"currencyCode\": \"SGD\",\n      \"currencyNameEn\": \"Singapore dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"zh-hans\",\n      \"officialLanguageNameEn\": \"\",\n      \"officialLanguageNameLocal\": \"\",\n      \"countryCallingCode\": \"65\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇸🇬\"\n    },\n    {\n      \"countryNameEn\": \"Saint Helena, Ascension and Tristan da Cunha\",\n      \"countryNameLocal\": \"Saint Helena\",\n      \"countryCode\": \"SH\",\n      \"currencyCode\": \"SHP\",\n      \"currencyNameEn\": \"Saint Helena pound\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"290\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇸🇭\"\n    },\n    {\n      \"countryNameEn\": \"Slovenia\",\n      \"countryNameLocal\": \"Slovenija\",\n      \"countryCode\": \"SI\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"ID za DDV\",\n      \"tinName\": \"Davčna številka\",\n      \"officialLanguageCode\": \"sl\",\n      \"officialLanguageNameEn\": \"Slovenian\",\n      \"officialLanguageNameLocal\": \"Slovenski Jezik, Slovenščina\",\n      \"countryCallingCode\": \"386\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇸🇮\"\n    },\n    {\n      \"countryNameEn\": \"Svalbard and Jan Mayen\",\n      \"countryNameLocal\": \"Svalbard and Jan Mayen\",\n      \"countryCode\": \"SJ\",\n      \"currencyCode\": \"NOK\",\n      \"currencyNameEn\": \"Norwegian krone\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"no\",\n      \"officialLanguageNameEn\": \"Norwegian\",\n      \"officialLanguageNameLocal\": \"Norsk\",\n      \"countryCallingCode\": \"4779\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇸🇯\"\n    },\n    {\n      \"countryNameEn\": \"Slovakia\",\n      \"countryNameLocal\": \"Slovensko\",\n      \"countryCode\": \"SK\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"IČ DPH\",\n      \"tinName\": \"Identifikačné číslo pre daň z pridanej hodnoty\",\n      \"officialLanguageCode\": \"sk\",\n      \"officialLanguageNameEn\": \"Slovak\",\n      \"officialLanguageNameLocal\": \"Slovenčina, Slovenský Jazyk\",\n      \"countryCallingCode\": \"421\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇸🇰\"\n    },\n    {\n      \"countryNameEn\": \"Sierra Leone\",\n      \"countryNameLocal\": \"Sierra Leone\",\n      \"countryCode\": \"SL\",\n      \"currencyCode\": \"SLL\",\n      \"currencyNameEn\": \"Sierra Leonean leone\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"232\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇸🇱\"\n    },\n    {\n      \"countryNameEn\": \"Republic of San Marino\",\n      \"countryNameLocal\": \"Repubblica di San Marino\",\n      \"countryCode\": \"SM\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"C.O.E.\",\n      \"tinName\": \"Codice operatore economico\",\n      \"officialLanguageCode\": \"it\",\n      \"officialLanguageNameEn\": \"Italian\",\n      \"officialLanguageNameLocal\": \"Italiano\",\n      \"countryCallingCode\": \"378\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇸🇲\"\n    },\n    {\n      \"countryNameEn\": \"Senegal\",\n      \"countryNameLocal\": \"Sénégal\",\n      \"countryCode\": \"SN\",\n      \"currencyCode\": \"XOF\",\n      \"currencyNameEn\": \"CFA franc BCEAO\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"221\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇸🇳\"\n    },\n    {\n      \"countryNameEn\": \"Somalia\",\n      \"countryNameLocal\": \"Somalia, الصومال\",\n      \"countryCode\": \"SO\",\n      \"currencyCode\": \"SOS\",\n      \"currencyNameEn\": \"Somali shilling\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"so\",\n      \"officialLanguageNameEn\": \"Somali\",\n      \"officialLanguageNameLocal\": \"Soomaaliga, af Soomaali\",\n      \"countryCallingCode\": \"252\",\n      \"areaCodes\": [],\n      \"region\": \"Arab States\",\n      \"flag\": \"🇸🇴\"\n    },\n    {\n      \"countryNameEn\": \"Suriname\",\n      \"countryNameLocal\": \"Suriname\",\n      \"countryCode\": \"SR\",\n      \"currencyCode\": \"SRD\",\n      \"currencyNameEn\": \"Surinamese dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"nl\",\n      \"officialLanguageNameEn\": \"Dutch, Flemish\",\n      \"officialLanguageNameLocal\": \"Nederlands, Vlaams\",\n      \"countryCallingCode\": \"597\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇸🇷\"\n    },\n    {\n      \"countryNameEn\": \"South Sudan\",\n      \"countryNameLocal\": \"South Sudan\",\n      \"countryCode\": \"SS\",\n      \"currencyCode\": \"SSP\",\n      \"currencyNameEn\": \"South Sudanese pound\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"211\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇸🇸\"\n    },\n    {\n      \"countryNameEn\": \"Sao Tome and Principe\",\n      \"countryNameLocal\": \"São Tomé e Príncipe\",\n      \"countryCode\": \"ST\",\n      \"currencyCode\": \"STN\",\n      \"currencyNameEn\": \"\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"pt\",\n      \"officialLanguageNameEn\": \"Portuguese\",\n      \"officialLanguageNameLocal\": \"Português\",\n      \"countryCallingCode\": \"239\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇸🇹\"\n    },\n    {\n      \"countryNameEn\": \"El Salvador\",\n      \"countryNameLocal\": \"El Salvador\",\n      \"countryCode\": \"SV\",\n      \"currencyCode\": \"SVC\",\n      \"currencyNameEn\": \"Salvadoran colón\",\n      \"tinType\": \"NIT\",\n      \"tinName\": \"Número de Identificación Tributaria\",\n      \"officialLanguageCode\": \"es\",\n      \"officialLanguageNameEn\": \"Spanish, Castilian\",\n      \"officialLanguageNameLocal\": \"Español\",\n      \"countryCallingCode\": \"503\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇸🇻\"\n    },\n    {\n      \"countryNameEn\": \"Sint Maarten (Dutch part)\",\n      \"countryNameLocal\": \"Sint Maarten\",\n      \"countryCode\": \"SX\",\n      \"currencyCode\": \"ANG\",\n      \"currencyNameEn\": \"Netherlands Antillean guilder\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"nl\",\n      \"officialLanguageNameEn\": \"Dutch, Flemish\",\n      \"officialLanguageNameLocal\": \"Nederlands, Vlaams\",\n      \"countryCallingCode\": \"1721\",\n      \"areaCodes\": [],\n      \"region\": \"Unknown\",\n      \"flag\": \"🇸🇽\"\n    },\n    {\n      \"countryNameEn\": \"Syrian Arab Republic\",\n      \"countryNameLocal\": \"سوريا, Sūriyya\",\n      \"countryCode\": \"SY\",\n      \"currencyCode\": \"SYP\",\n      \"currencyNameEn\": \"Syrian pound\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ar\",\n      \"officialLanguageNameEn\": \"Arabic\",\n      \"officialLanguageNameLocal\": \"العربية\",\n      \"countryCallingCode\": \"963\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇸🇾\"\n    },\n    {\n      \"countryNameEn\": \"Chad\",\n      \"countryNameLocal\": \"Tchad, تشاد\",\n      \"countryCode\": \"TD\",\n      \"currencyCode\": \"XAF\",\n      \"currencyNameEn\": \"CFA franc BEAC\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"235\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇹🇩\"\n    },\n    {\n      \"countryNameEn\": \"Togo\",\n      \"countryNameLocal\": \"Togo\",\n      \"countryCode\": \"TG\",\n      \"currencyCode\": \"XOF\",\n      \"currencyNameEn\": \"CFA franc BCEAO\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"228\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇹🇬\"\n    },\n    {\n      \"countryNameEn\": \"Thailand\",\n      \"countryNameLocal\": \"ประเทศไทย\",\n      \"countryCode\": \"TH\",\n      \"currencyCode\": \"THB\",\n      \"currencyNameEn\": \"Thai baht\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"th\",\n      \"officialLanguageNameEn\": \"Thai\",\n      \"officialLanguageNameLocal\": \"ไทย\",\n      \"countryCallingCode\": \"66\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇹🇭\"\n    },\n    {\n      \"countryNameEn\": \"Tajikistan\",\n      \"countryNameLocal\": \",\",\n      \"countryCode\": \"TJ\",\n      \"currencyCode\": \"TJS\",\n      \"currencyNameEn\": \"Tajikistani somoni\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"tg\",\n      \"officialLanguageNameEn\": \"Tajik\",\n      \"officialLanguageNameLocal\": \"тоҷикӣ, toçikī, تاجیکی‎\",\n      \"countryCallingCode\": \"992\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇹🇯\"\n    },\n    {\n      \"countryNameEn\": \"Tokelau\",\n      \"countryNameLocal\": \"Tokelau\",\n      \"countryCode\": \"TK\",\n      \"currencyCode\": \"NZD\",\n      \"currencyNameEn\": \"New Zealand dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"tkl\",\n      \"officialLanguageNameEn\": \"\",\n      \"officialLanguageNameLocal\": \"\",\n      \"countryCallingCode\": \"690\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇹🇰\"\n    },\n    {\n      \"countryNameEn\": \"Timor-Leste\",\n      \"countryNameLocal\": \"Timor-Leste, Timor Lorosa'e\",\n      \"countryCode\": \"TL\",\n      \"currencyCode\": \"USD\",\n      \"currencyNameEn\": \"United States dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"pt\",\n      \"officialLanguageNameEn\": \"Portuguese\",\n      \"officialLanguageNameLocal\": \"Português\",\n      \"countryCallingCode\": \"670\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇹🇱\"\n    },\n    {\n      \"countryNameEn\": \"Turkmenistan\",\n      \"countryNameLocal\": \"Türkmenistan\",\n      \"countryCode\": \"TM\",\n      \"currencyCode\": \"TMT\",\n      \"currencyNameEn\": \"Turkmenistan manat\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"tk\",\n      \"officialLanguageNameEn\": \"Turkmen\",\n      \"officialLanguageNameLocal\": \"Türkmen, Түркмен\",\n      \"countryCallingCode\": \"993\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇹🇲\"\n    },\n    {\n      \"countryNameEn\": \"Tunisia\",\n      \"countryNameLocal\": \"تونس, Tunisie\",\n      \"countryCode\": \"TN\",\n      \"currencyCode\": \"TND\",\n      \"currencyNameEn\": \"Tunisian dinar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ar\",\n      \"officialLanguageNameEn\": \"Arabic\",\n      \"officialLanguageNameLocal\": \"العربية\",\n      \"countryCallingCode\": \"216\",\n      \"areaCodes\": [],\n      \"region\": \"Arab States\",\n      \"flag\": \"🇹🇳\"\n    },\n    {\n      \"countryNameEn\": \"Tonga\",\n      \"countryNameLocal\": \"Tonga\",\n      \"countryCode\": \"TO\",\n      \"currencyCode\": \"TOP\",\n      \"currencyNameEn\": \"Tongan paʻanga\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"676\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇹🇴\"\n    },\n    {\n      \"countryNameEn\": \"Turkey\",\n      \"countryNameLocal\": \"Türkiye\",\n      \"countryCode\": \"TR\",\n      \"currencyCode\": \"TRY\",\n      \"currencyNameEn\": \"Turkish lira\",\n      \"tinType\": \"KDV\",\n      \"tinName\": \"Vergi Kimlik Numarası\",\n      \"officialLanguageCode\": \"tr\",\n      \"officialLanguageNameEn\": \"Turkish\",\n      \"officialLanguageNameLocal\": \"Türkçe\",\n      \"countryCallingCode\": \"90\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇹🇷\"\n    },\n    {\n      \"countryNameEn\": \"Trinidad and Tobago\",\n      \"countryNameLocal\": \"Trinidad and Tobago\",\n      \"countryCode\": \"TT\",\n      \"currencyCode\": \"TTD\",\n      \"currencyNameEn\": \"Trinidad and Tobago dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"868\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇹🇹\"\n    },\n    {\n      \"countryNameEn\": \"Tuvalu\",\n      \"countryNameLocal\": \"Tuvalu\",\n      \"countryCode\": \"TV\",\n      \"currencyCode\": \"AUD\",\n      \"currencyNameEn\": \"Australian dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"688\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇹🇻\"\n    },\n    {\n      \"countryNameEn\": \"United Republic of Tanzania\",\n      \"countryNameLocal\": \"Tanzania\",\n      \"countryCode\": \"TZ\",\n      \"currencyCode\": \"TZS\",\n      \"currencyNameEn\": \"Tanzanian shilling\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"sw\",\n      \"officialLanguageNameEn\": \"Swahili\",\n      \"officialLanguageNameLocal\": \"Kiswahili\",\n      \"countryCallingCode\": \"255\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇹🇿\"\n    },\n    {\n      \"countryNameEn\": \"Ukraine\",\n      \"countryNameLocal\": \"Україна\",\n      \"countryCode\": \"UA\",\n      \"currencyCode\": \"UAH\",\n      \"currencyNameEn\": \"Ukrainian hryvnia\",\n      \"tinType\": \"ІНПП\",\n      \"tinName\": \"Ідентифікаційний номер платника податків\",\n      \"officialLanguageCode\": \"uk\",\n      \"officialLanguageNameEn\": \"Ukrainian\",\n      \"officialLanguageNameLocal\": \"Українська\",\n      \"countryCallingCode\": \"380\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇺🇦\"\n    },\n    {\n      \"countryNameEn\": \"Uganda\",\n      \"countryNameLocal\": \"Uganda\",\n      \"countryCode\": \"UG\",\n      \"currencyCode\": \"UGX\",\n      \"currencyNameEn\": \"Ugandan shilling\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"256\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇺🇬\"\n    },\n    {\n      \"countryNameEn\": \"United States of America\",\n      \"countryNameLocal\": \"United States of America\",\n      \"countryCode\": \"US\",\n      \"currencyCode\": \"USD\",\n      \"currencyNameEn\": \"United States dollar\",\n      \"tinType\": \"EIN\",\n      \"tinName\": \"Tax Identification Number\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"1\",\n      \"areaCodes\": [],\n      \"region\": \"North America\",\n      \"flag\": \"🇺🇸\"\n    },\n    {\n      \"countryNameEn\": \"Uruguay\",\n      \"countryNameLocal\": \"Uruguay\",\n      \"countryCode\": \"UY\",\n      \"currencyCode\": \"UYU\",\n      \"currencyNameEn\": \"Uruguayan peso\",\n      \"tinType\": \"RUT\",\n      \"tinName\": \"Registro Único Tributario\",\n      \"officialLanguageCode\": \"es\",\n      \"officialLanguageNameEn\": \"Spanish, Castilian\",\n      \"officialLanguageNameLocal\": \"Español\",\n      \"countryCallingCode\": \"598\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇺🇾\"\n    },\n    {\n      \"countryNameEn\": \"Uzbekistan\",\n      \"countryNameLocal\": \"\",\n      \"countryCode\": \"UZ\",\n      \"currencyCode\": \"UZS\",\n      \"currencyNameEn\": \"Uzbekistan som\",\n      \"tinType\": \"СТИР\",\n      \"tinName\": \"Солиқ тўловчиларнинг идентификация рақами\",\n      \"officialLanguageCode\": \"uz\",\n      \"officialLanguageNameEn\": \"Uzbek\",\n      \"officialLanguageNameLocal\": \"Oʻzbek, Ўзбек, أۇزبېك‎\",\n      \"countryCallingCode\": \"998\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇺🇿\"\n    },\n    {\n      \"countryNameEn\": \"Saint Vincent and the Grenadines\",\n      \"countryNameLocal\": \"Saint Vincent and the Grenadines\",\n      \"countryCode\": \"VC\",\n      \"currencyCode\": \"XCD\",\n      \"currencyNameEn\": \"East Caribbean dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"1784\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇻🇨\"\n    },\n    {\n      \"countryNameEn\": \"Venezuela (Bolivarian Republic of)\",\n      \"countryNameLocal\": \"Venezuela\",\n      \"countryCode\": \"VE\",\n      \"currencyCode\": \"VES\",\n      \"currencyNameEn\": \"\",\n      \"tinType\": \"RIF\",\n      \"tinName\": \"Registro de Informacion Fiscal\",\n      \"officialLanguageCode\": \"es\",\n      \"officialLanguageNameEn\": \"Spanish, Castilian\",\n      \"officialLanguageNameLocal\": \"Español\",\n      \"countryCallingCode\": \"58\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇻🇪\"\n    },\n    {\n      \"countryNameEn\": \"Virgin Islands (British)\",\n      \"countryNameLocal\": \"British Virgin Islands\",\n      \"countryCode\": \"VG\",\n      \"currencyCode\": \"USD\",\n      \"currencyNameEn\": \"United States dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"1284\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇻🇬\"\n    },\n    {\n      \"countryNameEn\": \"Virgin Islands (U.S.)\",\n      \"countryNameLocal\": \"United States Virgin Islands\",\n      \"countryCode\": \"VI\",\n      \"currencyCode\": \"USD\",\n      \"currencyNameEn\": \"United States dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"1340\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇻🇮\"\n    },\n    {\n      \"countryNameEn\": \"Vietnam\",\n      \"countryNameLocal\": \"Việt Nam\",\n      \"countryCode\": \"VN\",\n      \"currencyCode\": \"VND\",\n      \"currencyNameEn\": \"Vietnamese đồng\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"vi\",\n      \"officialLanguageNameEn\": \"Vietnamese\",\n      \"officialLanguageNameLocal\": \"Tiếng Việt\",\n      \"countryCallingCode\": \"84\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇻🇳\"\n    },\n    {\n      \"countryNameEn\": \"Vanuatu\",\n      \"countryNameLocal\": \"Vanuatu\",\n      \"countryCode\": \"VU\",\n      \"currencyCode\": \"VUV\",\n      \"currencyNameEn\": \"Vanuatu vatu\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"bi\",\n      \"officialLanguageNameEn\": \"Bislama\",\n      \"officialLanguageNameLocal\": \"Bislama\",\n      \"countryCallingCode\": \"678\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇻🇺\"\n    },\n    {\n      \"countryNameEn\": \"Wallis and Futuna\",\n      \"countryNameLocal\": \"Wallis-et-Futuna\",\n      \"countryCode\": \"WF\",\n      \"currencyCode\": \"XPF\",\n      \"currencyNameEn\": \"CFP franc (franc Pacifique)\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"681\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇼🇫\"\n    },\n    {\n      \"countryNameEn\": \"Samoa\",\n      \"countryNameLocal\": \"Samoa\",\n      \"countryCode\": \"WS\",\n      \"currencyCode\": \"WST\",\n      \"currencyNameEn\": \"Samoan tala\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"sm\",\n      \"officialLanguageNameEn\": \"Samoan\",\n      \"officialLanguageNameLocal\": \"gagana fa'a Samoa\",\n      \"countryCallingCode\": \"685\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇼🇸\"\n    },\n    {\n      \"countryNameEn\": \"Yemen\",\n      \"countryNameLocal\": \"اليَمَن\",\n      \"countryCode\": \"YE\",\n      \"currencyCode\": \"YER\",\n      \"currencyNameEn\": \"Yemeni rial\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ar\",\n      \"officialLanguageNameEn\": \"Arabic\",\n      \"officialLanguageNameLocal\": \"العربية\",\n      \"countryCallingCode\": \"967\",\n      \"areaCodes\": [],\n      \"region\": \"Arab States\",\n      \"flag\": \"🇾🇪\"\n    },\n    {\n      \"countryNameEn\": \"Mayotte\",\n      \"countryNameLocal\": \"Mayotte\",\n      \"countryCode\": \"YT\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"262\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇾🇹\"\n    },\n    {\n      \"countryNameEn\": \"South Africa\",\n      \"countryNameLocal\": \"South Africa\",\n      \"countryCode\": \"ZA\",\n      \"currencyCode\": \"ZAR\",\n      \"currencyNameEn\": \"South African rand\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"27\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇿🇦\"\n    },\n    {\n      \"countryNameEn\": \"Zambia\",\n      \"countryNameLocal\": \"Zambia\",\n      \"countryCode\": \"ZM\",\n      \"currencyCode\": \"ZMW\",\n      \"currencyNameEn\": \"Zambian kwacha\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"260\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇿🇲\"\n    },\n    {\n      \"countryNameEn\": \"Zimbabwe\",\n      \"countryNameLocal\": \"Zimbabwe\",\n      \"countryCode\": \"ZW\",\n      \"currencyCode\": \"ZWL\",\n      \"currencyNameEn\": \"Zimbabwean dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"263\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇿🇼\"\n    },\n    {\n      \"countryNameEn\": \"Eswatini\",\n      \"countryNameLocal\": \"Swaziland\",\n      \"countryCode\": \"SZ\",\n      \"currencyCode\": \"SZL\",\n      \"currencyNameEn\": \"Swazi lilangeni\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"268\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇸🇿\"\n    },\n    {\n      \"countryNameEn\": \"North Macedonia\",\n      \"countryNameLocal\": \"Македонија\",\n      \"countryCode\": \"MK\",\n      \"currencyCode\": \"MKD\",\n      \"currencyNameEn\": \"Macedonian denar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"mk\",\n      \"officialLanguageNameEn\": \"Macedonian\",\n      \"officialLanguageNameLocal\": \"македонски јазик\",\n      \"countryCallingCode\": \"389\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇲🇰\"\n    },\n    {\n      \"countryNameEn\": \"Philippines\",\n      \"countryNameLocal\": \"Philippines\",\n      \"countryCode\": \"PH\",\n      \"currencyCode\": \"PHP\",\n      \"currencyNameEn\": \"Philippine peso\",\n      \"tinType\": \"TIN\",\n      \"tinName\": \"Tax Identification Number\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"63\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇵🇭\"\n    },\n    {\n      \"countryNameEn\": \"Netherlands\",\n      \"countryNameLocal\": \"Nederland\",\n      \"countryCode\": \"NL\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"Btw-nr.\",\n      \"tinName\": \"Btw-nummer\",\n      \"officialLanguageCode\": \"nl\",\n      \"officialLanguageNameEn\": \"Dutch, Flemish\",\n      \"officialLanguageNameLocal\": \"Nederlands, Vlaams\",\n      \"countryCallingCode\": \"31\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇳🇱\"\n    },\n    {\n      \"countryNameEn\": \"United Arab Emirates\",\n      \"countryNameLocal\": \"دولة الإمارات العربيّة المتّحدة\",\n      \"countryCode\": \"AE\",\n      \"currencyCode\": \"AED\",\n      \"currencyNameEn\": \"United Arab Emirates dirham\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ar\",\n      \"officialLanguageNameEn\": \"Arabic\",\n      \"officialLanguageNameLocal\": \"العربية\",\n      \"countryCallingCode\": \"971\",\n      \"areaCodes\": [],\n      \"region\": \"Arab States\",\n      \"flag\": \"🇦🇪\"\n    },\n    {\n      \"countryNameEn\": \"Republic of Moldova\",\n      \"countryNameLocal\": \"Moldova, Молдавия\",\n      \"countryCode\": \"MD\",\n      \"currencyCode\": \"MDL\",\n      \"currencyNameEn\": \"Moldovan leu\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ro\",\n      \"officialLanguageNameEn\": \"Romanian, Moldavian, Moldovan\",\n      \"officialLanguageNameLocal\": \"Română\",\n      \"countryCallingCode\": \"373\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇲🇩\"\n    },\n    {\n      \"countryNameEn\": \"Gambia\",\n      \"countryNameLocal\": \"The Gambia\",\n      \"countryCode\": \"GM\",\n      \"currencyCode\": \"GMD\",\n      \"currencyNameEn\": \"Gambian dalasi\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"220\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇬🇲\"\n    },\n    {\n      \"countryNameEn\": \"Dominican Republic\",\n      \"countryNameLocal\": \"República Dominicana\",\n      \"countryCode\": \"DO\",\n      \"currencyCode\": \"DOP\",\n      \"currencyNameEn\": \"Dominican peso\",\n      \"tinType\": \"RNC\",\n      \"tinName\": \"Registro Nacional del Contribuyente\",\n      \"officialLanguageCode\": \"es\",\n      \"officialLanguageNameEn\": \"Spanish, Castilian\",\n      \"officialLanguageNameLocal\": \"Español\",\n      \"countryCallingCode\": \"1\",\n      \"areaCodes\": [],\n      \"region\": \"South/Latin America\",\n      \"flag\": \"🇩🇴\"\n    },\n    {\n      \"countryNameEn\": \"Sudan\",\n      \"countryNameLocal\": \"السودان\",\n      \"countryCode\": \"SD\",\n      \"currencyCode\": \"SDG\",\n      \"currencyNameEn\": \"Sudanese pound\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"ar\",\n      \"officialLanguageNameEn\": \"Arabic\",\n      \"officialLanguageNameLocal\": \"العربية\",\n      \"countryCallingCode\": \"249\",\n      \"areaCodes\": [],\n      \"region\": \"Arab States\",\n      \"flag\": \"🇸🇩\"\n    },\n    {\n      \"countryNameEn\": \"Lao People's Democratic Republic\",\n      \"countryNameLocal\": \"ປະຊາຊົນລາວ\",\n      \"countryCode\": \"LA\",\n      \"currencyCode\": \"LAK\",\n      \"currencyNameEn\": \"Lao kip\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"lo\",\n      \"officialLanguageNameEn\": \"Lao\",\n      \"officialLanguageNameLocal\": \"ພາສາລາວ\",\n      \"countryCallingCode\": \"856\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇱🇦\"\n    },\n    {\n      \"countryNameEn\": \"Taiwan, Province of China\",\n      \"countryNameLocal\": \"Taiwan\",\n      \"countryCode\": \"TW\",\n      \"currencyCode\": \"TWD\",\n      \"currencyNameEn\": \"New Taiwan dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"zh-hant\",\n      \"officialLanguageNameEn\": \"\",\n      \"officialLanguageNameLocal\": \"\",\n      \"countryCallingCode\": \"886\",\n      \"areaCodes\": [],\n      \"region\": \"Asia & Pacific\",\n      \"flag\": \"🇹🇼\"\n    },\n    {\n      \"countryNameEn\": \"Republic of the Congo\",\n      \"countryNameLocal\": \"République du Congo\",\n      \"countryCode\": \"CG\",\n      \"currencyCode\": \"XAF\",\n      \"currencyNameEn\": \"CFA franc BEAC\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"242\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇨🇬\"\n    },\n    {\n      \"countryNameEn\": \"Czechia\",\n      \"countryNameLocal\": \"Česká republika\",\n      \"countryCode\": \"CZ\",\n      \"currencyCode\": \"CZK\",\n      \"currencyNameEn\": \"Czech koruna\",\n      \"tinType\": \"DIČ\",\n      \"tinName\": \"Daňové identifikační číslo\",\n      \"officialLanguageCode\": \"cs\",\n      \"officialLanguageNameEn\": \"Czech\",\n      \"officialLanguageNameLocal\": \"Čeština\",\n      \"countryCallingCode\": \"420\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇨🇿\"\n    },\n    {\n      \"countryNameEn\": \"United Kingdom\",\n      \"countryNameLocal\": \"Great Britain\",\n      \"countryCode\": \"GB\",\n      \"currencyCode\": \"GBP\",\n      \"currencyNameEn\": \"Pound sterling\",\n      \"tinType\": \"VAT Reg No\",\n      \"tinName\": \"Value added tax registration number\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"44\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇬🇧\"\n    },\n    {\n      \"countryNameEn\": \"Niger\",\n      \"countryNameLocal\": \"Niger\",\n      \"countryCode\": \"NE\",\n      \"currencyCode\": \"XOF\",\n      \"currencyNameEn\": \"CFA franc BCEAO\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"227\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇳🇪\"\n    },\n    {\n      \"countryNameEn\": \"Democratic Republic of the Congo\",\n      \"countryNameLocal\": \"Democratic Republic of the Congo\",\n      \"countryCode\": \"CD\",\n      \"currencyCode\": \"CDF\",\n      \"currencyNameEn\": \"Congolese franc\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"243\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇨🇩\",\n    },\n    {\n      \"countryNameEn\": \"Commonwealth of The Bahamas\",\n      \"countryNameLocal\": \"Commonwealth of The Bahamas\",\n      \"countryCode\": \"BS\",\n      \"currencyCode\": \"BSD\",\n      \"currencyNameEn\": \"Bahamian dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"1 242\",\n      \"areaCodes\": [],\n      \"region\": \"Caribbean\",\n      \"flag\": \"🇧🇸\",\n    },\n    {\n      \"countryNameEn\": \"Cocos (Keeling) Islands\",\n      \"countryNameLocal\": \"Pulu Kokos (Keeling)\",\n      \"countryCode\": \"CC\",\n      \"currencyCode\": \"AUD\",\n      \"currencyNameEn\": \"Australian dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"61 891\",\n      \"areaCodes\": [],\n      \"region\": \"Australia\",\n      \"flag\": \"🇨🇨\",\n    },\n    {\n      \"countryNameEn\": \"Central African Republic\",\n      \"countryNameLocal\": \"République centrafricaine\",\n      \"countryCode\": \"CF\",\n      \"currencyCode\": \"XAF\",\n      \"currencyNameEn\": \"Central African CFA\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"236\",\n      \"areaCodes\": [],\n      \"region\": \"Africa\",\n      \"flag\": \"🇨🇫\",\n    },\n    {\n      \"countryNameEn\": \"Cook Islands\",\n      \"countryNameLocal\": \"Kūki 'Āirani\",\n      \"countryCode\": \"CK\",\n      \"currencyCode\": \"NZD\",\n      \"currencyNameEn\": \"New Zealand dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"682\",\n      \"areaCodes\": [],\n      \"region\": \"South Pacific Ocean\",\n      \"flag\": \"🇨🇰\",\n    },\n    {\n      \"countryNameEn\": \"Falkland Islands\",\n      \"countryNameLocal\": \"Falkland Islands\",\n      \"countryCode\": \"FK\",\n      \"currencyCode\": \"FKP\",\n      \"currencyNameEn\": \"Falklands pound\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"500\",\n      \"areaCodes\": [],\n      \"region\": \"South Atlantic Ocean\",\n      \"flag\": \"🇫🇰\",\n    },\n    {\n      \"countryNameEn\": \"Faroe Islands\",\n      \"countryNameLocal\": \"Færøerne\",\n      \"countryCode\": \"FO\",\n      \"currencyCode\": \"DKK\",\n      \"currencyNameEn\": \"Faroese króna\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"da\",\n      \"officialLanguageNameEn\": \"Danish\",\n      \"officialLanguageNameLocal\": \"dansk\",\n      \"countryCallingCode\": \"298\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇫🇴\",\n    },\n    {\n      \"countryNameEn\": \"Territory of Heard Island and McDonald Islands\",\n      \"countryNameLocal\": \"Territory of Heard Island and McDonald Islands\",\n      \"countryCode\": \"HM\",\n      \"currencyCode\": \"AUD\",\n      \"currencyNameEn\": \"Australian dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"672\",\n      \"areaCodes\": [],\n      \"region\": \"Indian Ocean\",\n      \"flag\": \"🇭🇲\",\n    },\n    {\n      \"countryNameEn\": \"British Indian Ocean Territory\",\n      \"countryNameLocal\": \"British Indian Ocean Territory\",\n      \"countryCode\": \"IO\",\n      \"currencyCode\": \"USD\",\n      \"currencyNameEn\": \"United States Dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"246\",\n      \"areaCodes\": [],\n      \"region\": \"Indian Ocean\",\n      \"flag\": \"🇮🇴\",\n    },\n    {\n      \"countryNameEn\": \"Comoros\",\n      \"countryNameLocal\": \"Umoja wa Komori\",\n      \"countryCode\": \"KM\",\n      \"currencyCode\": \"KMF\",\n      \"currencyNameEn\": \"Comorian franc\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"269\",\n      \"areaCodes\": [],\n      \"region\": \"Indian Ocean\",\n      \"flag\": \"🇰🇲\",\n    },\n    {\n      \"countryNameEn\": \"Cayman Islands\",\n      \"countryNameLocal\": \"Cayman Islands\",\n      \"countryCode\": \"KY\",\n      \"currencyCode\": \"KYD\",\n      \"currencyNameEn\": \"Cayman Islands dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"1 345\",\n      \"areaCodes\": [],\n      \"region\": \"Caribbean Sea\",\n      \"flag\": \"🇰🇾\",\n    },\n    {\n      \"countryNameEn\": \"Republic of the Marshall Islands\",\n      \"countryNameLocal\": \"Aolepān Aorōkin Ṃajeḷ\",\n      \"countryCode\": \"MH\",\n      \"currencyCode\": \"USD\",\n      \"currencyNameEn\": \"United States dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"692\",\n      \"areaCodes\": [],\n      \"region\": \"Pacific Ocean\",\n      \"flag\": \"🇲🇭\",\n    },\n    {\n      \"countryNameEn\": \"Commonwealth of the Northern Mariana Islands\",\n      \"countryNameLocal\": \"Sankattan Siha Na Islas Mariånas\",\n      \"countryCode\": \"MP\",\n      \"currencyCode\": \"USD\",\n      \"currencyNameEn\": \"United States dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"1 670\",\n      \"areaCodes\": [],\n      \"region\": \"Pacific Ocean\",\n      \"flag\": \"🇲🇵\",\n    },\n    {\n      \"countryNameEn\": \"Turks and Caicos Islands\",\n      \"countryNameLocal\": \"Turks and Caicos Islands\",\n      \"countryCode\": \"TC\",\n      \"currencyCode\": \"USD\",\n      \"currencyNameEn\": \"United States dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"1 649\",\n      \"areaCodes\": [],\n      \"region\": \"Atlantic Ocean\",\n      \"flag\": \"🇹🇨\",\n    },\n    {\n      \"countryNameEn\": \"French Southern and Antarctic Lands\",\n      \"countryNameLocal\": \"Terres australes et antarctiques françaises\",\n      \"countryCode\": \"TF\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"fr\",\n      \"officialLanguageNameEn\": \"French\",\n      \"officialLanguageNameLocal\": \"Français\",\n      \"countryCallingCode\": \"672\",\n      \"areaCodes\": [],\n      \"region\": \"Indian Ocean\",\n      \"flag\": \"🇹🇫\",\n    },\n    {\n      \"countryNameEn\": \"United States Minor Outlying Islands\",\n      \"countryNameLocal\": \"United States Minor Outlying Islands\",\n      \"countryCode\": \"UM\",\n      \"currencyCode\": \"USD\",\n      \"currencyNameEn\": \"United States dollar\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"en\",\n      \"officialLanguageNameEn\": \"English\",\n      \"officialLanguageNameLocal\": \"English\",\n      \"countryCallingCode\": \"246\",\n      \"areaCodes\": [],\n      \"region\": \"Pacific Ocean\",\n      \"flag\": \"🇺🇲\",\n    },\n    {\n      \"countryNameEn\": \"Holy See\",\n      \"countryNameLocal\": \"Sancta Sedes\",\n      \"countryCode\": \"VA\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"la\",\n      \"officialLanguageNameEn\": \"Latin\",\n      \"officialLanguageNameLocal\": \"lingua latīna\",\n      \"countryCallingCode\": \"39\",\n      \"areaCodes\": [],\n      \"region\": \"Europe\",\n      \"flag\": \"🇻🇦\",\n    },\n    {\n      \"countryNameEn\": \"Republic of Kosovo\",\n      \"countryNameLocal\": \"Republika e Kosovës\",\n      \"countryCode\": \"XK\",\n      \"currencyCode\": \"EUR\",\n      \"currencyNameEn\": \"Euro\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"sq\",\n      \"officialLanguageNameEn\": \"Albanian\",\n      \"officialLanguageNameLocal\": \"Shqip\",\n      \"countryCallingCode\": \"383\",\n      \"region\": \"Europe\",\n      \"flag\": \"🇽🇰\",\n    },\n    {\n      \"countryNameEn\": \"Netherlands Antilles\",\n      \"countryNameLocal\": \"Nederlandse Antillen\",\n      \"countryCode\": \"AN\",\n      \"currencyCode\": \"ANG\",\n      \"currencyNameEn\": \"Netherlands Antillean guilder\",\n      \"tinType\": \"\",\n      \"tinName\": \"\",\n      \"officialLanguageCode\": \"nl\",\n      \"officialLanguageNameEn\": \"Dutch, Flemish\",\n      \"officialLanguageNameLocal\": \"Nederlands, Vlaams\",\n      \"countryCallingCode\": \"599\",\n      \"region\": \"Europe\",\n      \"flag\": \"🇧🇶\",\n    },\n  ]",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/constants/currencySymbols/getCurrencySymbol.ts",
    "exports": [
      {
        "name": " getCurrencySymbol",
        "text": "\n\nexport const getCurrencySymbol = (currency: string): string => {\n    return currecySymbolsMap[currency];\n}",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/constants/currencySymbols/map.constant.ts",
    "exports": [
      {
        "name": " currecySymbolsMap",
        "text": "export const currecySymbolsMap = {\n    AED: 'د.إ',\n    AFN: '؋',\n    ALL: 'L',\n    AMD: '֏',\n    ANG: 'ƒ',\n    AOA: 'Kz',\n    ARS: '$',\n    AUD: '$',\n    AWG: 'ƒ',\n    AZN: '₼',\n    BAM: 'KM',\n    BBD: '$',\n    BDT: '৳',\n    BGN: 'лв',\n    BHD: '.د.ب',\n    BIF: 'FBu',\n    BMD: '$',\n    BND: '$',\n    BOB: '$b',\n    BOV: 'BOV',\n    BRL: 'R$',\n    BSD: '$',\n    BTC: '₿',\n    BTN: 'Nu.',\n    BWP: 'P',\n    BYN: 'Br',\n    BYR: 'Br',\n    BZD: 'BZ$',\n    CAD: '$',\n    CDF: 'FC',\n    CHE: 'CHE',\n    CHF: 'CHF',\n    CHW: 'CHW',\n    CLF: 'CLF',\n    CLP: '$',\n    CNH: '¥',\n    CNY: '¥',\n    COP: '$',\n    COU: 'COU',\n    CRC: '₡',\n    CUC: '$',\n    CUP: '₱',\n    CVE: '$',\n    CZK: 'Kč',\n    DJF: 'Fdj',\n    DKK: 'kr',\n    DOP: 'RD$',\n    DZD: 'دج',\n    EEK: 'kr',\n    EGP: '£',\n    ERN: 'Nfk',\n    ETB: 'Br',\n    ETH: 'Ξ',\n    EUR: '€',\n    FJD: '$',\n    FKP: '£',\n    GBP: '£',\n    GEL: '₾',\n    GGP: '£',\n    GHC: '₵',\n    GHS: 'GH₵',\n    GIP: '£',\n    GMD: 'D',\n    GNF: 'FG',\n    GTQ: 'Q',\n    GYD: '$',\n    HKD: '$',\n    HNL: 'L',\n    HRK: 'kn',\n    HTG: 'G',\n    HUF: 'Ft',\n    IDR: 'Rp',\n    ILS: '₪',\n    IMP: '£',\n    INR: '₹',\n    IQD: 'ع.د',\n    IRR: '﷼',\n    ISK: 'kr',\n    JEP: '£',\n    JMD: 'J$',\n    JOD: 'JD',\n    JPY: '¥',\n    KES: 'KSh',\n    KGS: 'лв',\n    KHR: '៛',\n    KMF: 'CF',\n    KPW: '₩',\n    KRW: '₩',\n    KWD: 'KD',\n    KYD: '$',\n    KZT: '₸',\n    LAK: '₭',\n    LBP: '£',\n    LKR: '₨',\n    LRD: '$',\n    LSL: 'M',\n    LTC: 'Ł',\n    LTL: 'Lt',\n    LVL: 'Ls',\n    LYD: 'LD',\n    MAD: 'MAD',\n    MDL: 'lei',\n    MGA: 'Ar',\n    MKD: 'ден',\n    MMK: 'K',\n    MNT: '₮',\n    MOP: 'MOP$',\n    MRO: 'UM',\n    MRU: 'UM',\n    MUR: '₨',\n    MVR: 'Rf',\n    MWK: 'MK',\n    MXN: '$',\n    MXV: 'MXV',\n    MYR: 'RM',\n    MZN: 'MT',\n    NAD: '$',\n    NGN: '₦',\n    NIO: 'C$',\n    NOK: 'kr',\n    NPR: '₨',\n    NZD: '$',\n    OMR: '﷼',\n    PAB: 'B/.',\n    PEN: 'S/.',\n    PGK: 'K',\n    PHP: '₱',\n    PKR: '₨',\n    PLN: 'zł',\n    PYG: 'Gs',\n    QAR: '﷼',\n    RMB: '￥',\n    RON: 'lei',\n    RSD: 'Дин.',\n    RUB: '₽',\n    RWF: 'R₣',\n    SAR: '﷼',\n    SBD: '$',\n    SCR: '₨',\n    SDG: 'ج.س.',\n    SEK: 'kr',\n    SGD: 'S$',\n    SHP: '£',\n    SLL: 'Le',\n    SOS: 'S',\n    SRD: '$',\n    SSP: '£',\n    STD: 'Db',\n    STN: 'Db',\n    SVC: '$',\n    SYP: '£',\n    SZL: 'E',\n    THB: '฿',\n    TJS: 'SM',\n    TMT: 'T',\n    TND: 'د.ت',\n    TOP: 'T$',\n    TRL: '₤',\n    TRY: '₺',\n    TTD: 'TT$',\n    TVD: '$',\n    TWD: 'NT$',\n    TZS: 'TSh',\n    UAH: '₴',\n    UGX: 'USh',\n    USD: '$',\n    UYI: 'UYI',\n    UYU: '$U',\n    UYW: 'UYW',\n    UZS: 'лв',\n    VEF: 'Bs',\n    VES: 'Bs.S',\n    VND: '₫',\n    VUV: 'VT',\n    WST: 'WS$',\n    XAF: 'FCFA',\n    XBT: 'Ƀ',\n    XCD: '$',\n    XOF: 'CFA',\n    XPF: '₣',\n    XSU: 'Sucre',\n    XUA: 'XUA',\n    YER: '﷼',\n    ZAR: 'R',\n    ZMW: 'ZK',\n    ZWD: 'Z$',\n    ZWL: '$'\n  }",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/constants/environments.ts",
    "exports": [
      {
        "name": " projectId",
        "text": "\n\nexport const projectId = process.env.PROJECT_ID;",
        "type": "variable"
      },
      {
        "name": " serviceId",
        "text": "\nexport const serviceId = process.env.SERVICE_ID;",
        "type": "variable"
      },
      {
        "name": " providerId",
        "text": "\nexport const providerId = process.env.PROVIDER_ID;",
        "type": "variable"
      },
      {
        "name": " isProd",
        "text": "\nexport const isProd = isProdFunc(projectId);",
        "type": "variable"
      },
      {
        "name": " isStaging",
        "text": "\nexport const isStaging = isStagingFunc(projectId);",
        "type": "variable"
      },
      {
        "name": " isLocal",
        "text": "\nexport const isLocal = process.env.IS_LOCAL === 'true';",
        "type": "variable"
      },
      {
        "name": " isK8s",
        "text": "\nexport const isK8s = Boolean(process.env.IS_K8S);",
        "type": "variable"
      },
      {
        "name": " isDocker",
        "text": "\nexport const isDocker = process.env.IS_DOCKER === 'true';",
        "type": "variable"
      },
      {
        "name": " serviceAccountFile",
        "text": "\nexport const serviceAccountFile = process.env.GOOGLE_APPLICATION_CREDENTIALS;",
        "type": "variable"
      },
      {
        "name": " localHost",
        "text": "\n\nexport const localHost = isDocker ? '172.17.0.1' : 'localhost';",
        "type": "variable"
      },
      {
        "name": " projectIds",
        "text": "\n\nexport const projectIds = ['shofifi', 'triple-whale-staging'];",
        "type": "variable"
      },
      {
        "name": " projectIdToHostMap",
        "text": "\n\n// backend\nexport const projectIdToHostMap = {\n  'triple-whale-staging': 'staging.api.triplewhale.com',\n  shofifi: 'api.triplewhale.com',\n};",
        "type": "variable"
      },
      {
        "name": " projectIdToAppDomain",
        "text": "\n\n// frontend\nexport const projectIdToAppDomain = {\n  'triple-whale-staging': 'stg.app.triplewhale.com',\n  shofifi: 'app.triplewhale.com',\n};",
        "type": "variable"
      },
      {
        "name": " projectIdToAdminDomain",
        "text": "\n\n// admin frontend\nexport const projectIdToAdminDomain = {\n  'triple-whale-staging': 'staging.admin.triplewhale.com',\n  shofifi: 'admin.triplewhale.com',\n};",
        "type": "variable"
      },
      {
        "name": " projectIdToDevPortalDomain",
        "text": "\n\nexport const projectIdToDevPortalDomain = {\n  'triple-whale-staging': 'staging.developers.triplewhale.com',\n  shofifi: 'developers.triplewhale.com',\n};",
        "type": "variable"
      },
      {
        "name": " appDomain",
        "text": "\n\nexport const appDomain = projectIdToAppDomain[projectId];",
        "type": "variable"
      },
      {
        "name": " adminDomain",
        "text": "\nexport const adminDomain = projectIdToAdminDomain[projectId];",
        "type": "variable"
      },
      {
        "name": " devPortalDomain",
        "text": "\nexport const devPortalDomain = projectIdToDevPortalDomain[projectId];",
        "type": "variable"
      },
      {
        "name": " appLink",
        "text": "\n\nexport const appLink = 'https://app.triplewhale.com/';",
        "type": "variable"
      },
      {
        "type": "function",
        "name": " getProjectSubDomain",
        "text": "\n\nexport function getProjectSubDomain(projectId) {\n  const projectMap = {\n    shofifi: '',\n    'triple-whale-staging': 'stg.',\n  };\n  return projectMap[projectId];\n}",
        "parameters": [
          {
            "name": "projectId",
            "text": "projectId",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " projectIdAsSubDomain",
        "text": "\n\nexport function projectIdAsSubDomain(projectId) {\n  return `${projectId}.`;\n}",
        "parameters": [
          {
            "name": "projectId",
            "text": "projectId",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/constants/forecasting/Forecasting.ts",
    "exports": [
      {
        "name": " ForecastingGroupByOptions",
        "text": "\n\nexport const ForecastingGroupByOptions: ForecastingOptions = [\n  { id: 'week', definition: 'isoWeek', transformFrom: 'day', name: 'Week' },\n  { id: 'month', definition: 'month', transformFrom: 'month', name: 'Month' },\n  { id: 'quarter', definition: 'quarter', transformFrom: 'month', name: 'Quarter' },\n  { id: 'year', definition: 'year', transformFrom: 'month', name: 'Year' },\n];",
        "type": "ForecastingOptions"
      },
      {
        "name": " adsServices",
        "text": "\n\nexport const adsServices = pickBy(services, (s) => {\n  return ['google-ads', 'facebook-ads', 'tiktok-ads', 'snapchat-ads', 'pinterest-ads'].includes(\n    s.id\n  );\n});",
        "type": "variable"
      },
      {
        "name": " otherChannels",
        "text": "\n\nexport const otherChannels = [\n  {\n    id: 'organic',\n    name: 'Organic',\n  },\n  {\n    id: 'other',\n    name: 'Other',\n  },\n];",
        "type": "variable"
      },
      {
        "name": " returningCustomerSegmentTypes",
        "text": "\n\nexport const returningCustomerSegmentTypes = [\n  { id: 'Newly Acquired Customer', title: 'Newly Aquired (last month)' },\n  { id: 'Recently Acquired Customer', title: 'Recently Acquired (2-6 months)' },\n  { id: 'Non-Recently Acquired Active Customer', title: 'Non-Recent Active (7+ months)' },\n  { id: 'Reactivated', title: 'Reactivated (>7 months)' },\n];",
        "type": "variable"
      },
      {
        "name": " segmentedSegmentTypes",
        "text": "\n\nexport const segmentedSegmentTypes = [\n  { id: 'New Customer', title: 'New Customer' },\n  ...returningCustomerSegmentTypes,\n];",
        "type": "variable"
      },
      {
        "name": " returingCustomerSegmentType",
        "text": "\n\nexport const returingCustomerSegmentType = {\n  id: 'CUSTOM Returning Customer',\n  title: 'Returning Customer',\n};",
        "type": "variable"
      },
      {
        "name": " allSegementTypes",
        "text": "\n\nexport const allSegementTypes = [\n  { id: 'All Segments', title: 'All Customers' },\n  ...segmentedSegmentTypes,\n];",
        "type": "variable"
      },
      {
        "name": " allSegementWithCustomTypes",
        "text": "\n\nexport const allSegementWithCustomTypes = [...allSegementTypes, returingCustomerSegmentType];",
        "type": "variable"
      },
      {
        "name": " allSourcesTrafficSources",
        "text": "\n\nexport const allSourcesTrafficSources = ['All Sources'];",
        "type": "variable"
      },
      {
        "name": " allSourcesMetricNames",
        "text": "\n\nexport const allSourcesMetricNames = [\n  'spend',\n  'conversion_value',\n  'clicks',\n  'impressions',\n  'purchases',\n  'reported_aov',\n  'reported_ROAS',\n  'blended_ROAS',\n  'nc_blended_ROAS',\n  'blended_cpa',\n  'nc_blended_cpa',\n  'customer_cnt_attribution',\n  'nc_customer_cnt_attribution',\n  'aov_attribution',\n  'nc_aov_attribution',\n  'total_price_attribution',\n];",
        "type": "variable"
      },
      {
        "name": " shopTrafficSources",
        "text": "\n\nexport const shopTrafficSources = ['shopify'];",
        "type": "variable"
      },
      {
        "name": " shopMetricNames",
        "text": "\n\nexport const shopMetricNames = [\n  'total_revenue',\n  'first_order_revenue',\n  'order_cnt',\n  'num_customers',\n  'purchase_rate',\n  'aov',\n];",
        "type": "variable"
      },
      {
        "name": " paidTrafficSources",
        "text": "\n\nexport const paidTrafficSources = [\n  'facebook-ads',\n  'google-ads',\n  'tiktok-ads',\n  'snapchat-ads',\n  'pinterest-ads',\n  'All Paid Sources',\n];",
        "type": "variable"
      },
      {
        "name": " paidMetricNames",
        "text": "\n\nexport const paidMetricNames = [\n  'spend',\n  'conversion_value',\n  'clicks',\n  'impressions',\n  'purchases',\n  'reported_aov',\n  'reported_ROAS',\n  'customer_cnt_attribution',\n  'nc_customer_cnt_attribution',\n  'aov_attribution',\n  'nc_aov_attribution',\n  'pixel_roas_calculated',\n  'total_price_attribution',\n];",
        "type": "variable"
      },
      {
        "name": " organicTrafficSources",
        "text": "\n\nexport const organicTrafficSources = ['organic', 'All Organic Sources'];",
        "type": "variable"
      },
      {
        "name": " otherTrafficSources",
        "text": "\n\nexport const otherTrafficSources = ['other', 'All Other Sources'];",
        "type": "variable"
      },
      {
        "name": " organicOtherMetricNames",
        "text": "\n\nexport const organicOtherMetricNames = [\n  'customer_cnt_attribution',\n  'nc_customer_cnt_attribution',\n  'aov_attribution',\n  'nc_aov_attribution',\n  'new_visitor_count',\n  'nc_conversion_rate',\n  'total_price_attribution',\n];",
        "type": "variable"
      },
      {
        "name": " trafficSourceTypes",
        "text": "\n\nexport const trafficSourceTypes = [\n  { type: 'organic', trafficSources: organicTrafficSources, metrics: organicOtherMetricNames },\n  { type: 'other', trafficSources: otherTrafficSources, metrics: organicOtherMetricNames },\n  { type: 'paid', trafficSources: paidTrafficSources, metrics: paidMetricNames },\n  { type: 'shop', trafficSources: shopTrafficSources, metrics: shopMetricNames },\n  {\n    type: 'All Source Types',\n    trafficSources: allSourcesTrafficSources,\n    metrics: allSourcesMetricNames,\n  },\n];",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/constants/general.ts",
    "exports": [
      {
        "name": " TZ",
        "text": "export const TZ = 'Etc/UTC';",
        "type": "variable"
      },
      {
        "name": " AnalyticsTableKeyDelimiter",
        "text": "\nexport const AnalyticsTableKeyDelimiter = '#';",
        "type": "variable"
      },
      {
        "name": " TW_SHOP_ID_HEADER",
        "text": "\nexport const TW_SHOP_ID_HEADER = 'x-tw-shop-id';",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/constants/index.ts",
    "exports": []
  },
  {
    "file": "@tw/constants/industries.ts",
    "exports": [
      {
        "name": " IndustryTypeArr",
        "text": "\nexport const IndustryTypeArr = [\n  'health_beauty',\n  'clothing',\n  'home_garden',\n  'food_beverages',\n  'fashion_accessories',\n  'sporting_goods',\n  'pet_supplies',\n  'electronics',\n  'baby',\n  'other',\n  'art',\n  'all',\n  'books',\n  'toys_hobbies',\n  'automotive',\n  'car_truck_parts',\n  'jewelry_watches',\n  'shoes',\n  'crafts',\n  'computers',\n  'collectibles',\n  'office_products',\n  'digital_products',\n  'hair_braids',\n] as const;",
        "type": "variable"
      },
      {
        "name": " IndustryTypes",
        "text": "\n\nexport type IndustryTypes = (typeof IndustryTypeArr)[number];",
        "type": "(typeof IndustryTypeArr)[number]"
      },
      {
        "name": " IndustryElement",
        "text": "\n\nexport type IndustryElement<I extends IndustryTypes> = {\n  id: I;\n  label: string;\n  color: string;\n};",
        "type": "{\n  id: I;\n  label: string;\n  color: string;\n}"
      },
      {
        "name": " IndustryDictionary",
        "text": "\n\nexport type IndustryDictionary = {\n  [industry in IndustryTypes]: IndustryElement<industry>;\n};",
        "type": "{\n  [industry in IndustryTypes]: IndustryElement<industry>;\n}"
      }
    ]
  },
  {
    "file": "@tw/constants/infra.ts",
    "exports": [
      {
        "name": " iapClientId",
        "text": "export const iapClientId =\n  '1072436220726-86rad4jgos75mvk081kvp1al9n0gfkuh.apps.googleusercontent.com';",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/constants/notifications/index.ts",
    "exports": []
  },
  {
    "file": "@tw/constants/notifications/notificationEvents.ts",
    "exports": [
      {
        "name": " notificationEvents",
        "text": "export const notificationEvents = {\n  SENT: 'sent',\n  RECEIVED: 'received',\n  OPENED: 'opened',\n  CLICKED: 'clicked',\n  FAILED: 'failed',\n  CANCELLED: 'cancelled',\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/constants/pixel/PixelTopics.ts",
    "exports": [
      {
        "name": " PIXEL_REGULAR_EVENT",
        "text": "export const PIXEL_REGULAR_EVENT = `PIXEL_REGULAR_EVENT`;",
        "type": "variable"
      },
      {
        "name": " PIXEL_ORDER_EVENT",
        "text": "\nexport const PIXEL_ORDER_EVENT = `PIXEL_ORDER_EVENT`;",
        "type": "variable"
      },
      {
        "name": " PIXEL_REGULAR_EVENT_FOR_ATTRIBUTION",
        "text": "\nexport const PIXEL_REGULAR_EVENT_FOR_ATTRIBUTION = `PIXEL_REGULAR_EVENT_FOR_ATTRIBUTION`;",
        "type": "variable"
      },
      {
        "name": " PIXEL_ORDER_EVENT_FOR_ATTRIBUTION",
        "text": "\nexport const PIXEL_ORDER_EVENT_FOR_ATTRIBUTION = `PIXEL_ORDER_EVENT_FOR_ATTRIBUTION`;",
        "type": "variable"
      },
      {
        "name": " PIXEL_CHECKOUT_EVENT_FOR_ATTRIBUTION",
        "text": "\nexport const PIXEL_CHECKOUT_EVENT_FOR_ATTRIBUTION = `PIXEL_CHECKOUT_EVENT_FOR_ATTRIBUTION`;",
        "type": "variable"
      },
      {
        "name": " PIXEL_CUSTOM_EVENT",
        "text": "\nexport const PIXEL_CUSTOM_EVENT = `PIXEL_CUSTOM_EVENT`;",
        "type": "variable"
      },
      {
        "name": " PIXEL_IDENTIFY_EVENT",
        "text": "\nexport const PIXEL_IDENTIFY_EVENT = `PIXEL_IDENTIFY_EVENT`;",
        "type": "variable"
      },
      {
        "name": " PIXEL_CHECKOUT_EVENT",
        "text": "\nexport const PIXEL_CHECKOUT_EVENT = `PIXEL_CHECKOUT_EVENT`;",
        "type": "variable"
      },
      {
        "name": " PIXEL_CAPI_CORRELATIONS",
        "text": "\nexport const PIXEL_CAPI_CORRELATIONS = `PIXEL_CAPI_CORRELATIONS`;",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/constants/pixel/capi.ts",
    "exports": [
      {
        "name": " CapiEventsConfigMapper",
        "text": "\n\nexport const CapiEventsConfigMapper: CapiEventsConfig = {\n  [PixelEventType.PAGE_LOAD]: [\n    { type: 'pageLoad', condition: (e: PixelPageLoadEvent) => true, sources: ['meta'] },\n    { type: 'newSession', condition: (e: PixelPageLoadEvent) => e.__eid == e.info.__tab, sources: ['klaviyo'] },\n    { type: 'viewContent', condition: (e: PixelPageLoadEvent) => !!e.info.add_prd_i, sources: ['meta', 'klaviyo', 'tiktok'] },\n    { type: 'search', condition: (e: PixelPageLoadEvent) => !!e.info.add_search, sources: ['meta'] }\n  ],\n  [PixelEventType.CONTACT_DETAILS]: [\n    { type: 'signup', condition: (e: PixelCustomerDetailsEvent) => true, sources: ['meta'] },\n    { type: 'newSession', condition: (e: PixelCustomerDetailsEvent) => e.source === 'klaviyo', sources: ['klaviyo'] }\n  ],\n  [PixelEventType.CART_CHANGES]: [\n    { type: 'addToCart', condition: (e: PixelCartChangesEvent) => !!e.info.added?.length, sources: ['meta', 'klaviyo'] },\n  ],\n  [PixelEventType.CUSTOM]: [\n    { type: 'custom', condition: (e: PixelCustomEvent) => true, sources: ['meta'] }\n  ],\n  [PixelEventType.IDENTIFY]: [],\n  [PixelEventType.PURCHASE]: [\n    { type: 'purchase', condition: (e: PixelPurchaseEvent) => true, sources: ['meta'] }\n  ],\n  [PixelEventType.CHECKOUT]: [\n    { type: 'initiateCheckout', condition: (e: PixelCheckoutEvent) => e.info.sub_type == 'checkout_started', sources: ['meta'] },\n    { type: 'addPaymentInfo', condition: (e: PixelCheckoutEvent) => e.info.sub_type == 'payment_info_submitted', sources: ['meta'] },\n    { type: 'purchase', condition: (e: PixelCheckoutEvent) => e.info.sub_type == 'checkout_completed', sources: ['meta'] }\n  ],\n  [PixelEventType.PUBLISH_ORDER]: [\n    { type: 'purchase', condition: (e: PixelPublishOrderEvent) => true, sources: ['meta'] }\n  ],\n}",
        "type": "CapiEventsConfig"
      }
    ]
  },
  {
    "file": "@tw/constants/pixel/index.ts",
    "exports": []
  },
  {
    "file": "@tw/constants/redirectUrls.ts",
    "exports": [
      {
        "name": " integrationConnectedRedirectUrl",
        "text": "\n\nexport const integrationConnectedRedirectUrl = (success: boolean) =>\n  `https://${appDomain}?integrationConnected=${success}&service-id=${serviceId}`;",
        "type": "variable"
      },
      {
        "name": " trendsIntegrationConnectedRedirectUrl",
        "text": "\n\nexport const trendsIntegrationConnectedRedirectUrl = (success: boolean) => {\n  const integrationConnectedQueryParam = `integrationConnected=${success}&service-id=${serviceId}`;\n  return isProd ? `https://${appDomain}/trends?${integrationConnectedQueryParam}` :\n    `https://trends.triplewhale.com?${integrationConnectedQueryParam}`;\n}",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/constants/shopify/webhooktopics.ts",
    "exports": []
  },
  {
    "file": "@tw/constants/stripe/vatIds.ts",
    "exports": [
      {
        "name": " vatIds",
        "text": "export const vatIds = [\n  {\n    COUNTRY: 'Andorra',\n    ENUM: 'ad_nrt',\n    DESCRIPTION: 'Andorran NRT number',\n    EXAMPLE: 'A-123456-Z',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Argentina',\n    ENUM: 'ar_cuit',\n    DESCRIPTION: 'Argentinian tax ID number',\n    EXAMPLE: '12-3456789-01',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Australia',\n    ENUM: 'au_abn',\n    DESCRIPTION: 'Australian Business Number (AU ABN)',\n    EXAMPLE: '12345678912',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Australia',\n    ENUM: 'au_arn',\n    DESCRIPTION: 'Australian Taxation Office Reference Number',\n    EXAMPLE: '123456789123',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Austria',\n    ENUM: 'eu_vat',\n    DESCRIPTION: 'European VAT number',\n    EXAMPLE: 'ATU12345678',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Belgium',\n    ENUM: 'eu_vat',\n    DESCRIPTION: 'European VAT number',\n    EXAMPLE: 'BE0123456789',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Bolivia',\n    ENUM: 'bo_tin',\n    DESCRIPTION: 'Bolivian tax ID',\n    EXAMPLE: '123456789',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Brazil',\n    ENUM: 'br_cnpj',\n    DESCRIPTION: 'Brazilian CNPJ number',\n    EXAMPLE: '01.234.456/5432-10',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Brazil',\n    ENUM: 'br_cpf',\n    DESCRIPTION: 'Brazilian CPF number',\n    EXAMPLE: '123.456.789-87',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Bulgaria',\n    ENUM: 'bg_uic',\n    DESCRIPTION: 'Bulgaria Unified Identification Code',\n    EXAMPLE: '123456789',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Bulgaria',\n    ENUM: 'eu_vat',\n    DESCRIPTION: 'European VAT number',\n    EXAMPLE: 'BG0123456789',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Canada',\n    ENUM: 'ca_bn',\n    DESCRIPTION: 'Canadian BN',\n    EXAMPLE: '123456789',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Canada',\n    ENUM: 'ca_gst_hst',\n    DESCRIPTION: 'Canadian GST/HST number',\n    EXAMPLE: '123456789RT0002',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Canada',\n    ENUM: 'ca_pst_bc',\n    DESCRIPTION: 'Canadian PST number (British Columbia)',\n    EXAMPLE: 'PST-1234-5678',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Canada',\n    ENUM: 'ca_pst_mb',\n    DESCRIPTION: 'Canadian PST number (Manitoba)',\n    EXAMPLE: '123456-7',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Canada',\n    ENUM: 'ca_pst_sk',\n    DESCRIPTION: 'Canadian PST number (Saskatchewan)',\n    EXAMPLE: '1234567',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Canada',\n    ENUM: 'ca_qst',\n    DESCRIPTION: 'Canadian QST number (Québec)',\n    EXAMPLE: '1234567890TQ1234',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Chile',\n    ENUM: 'cl_tin',\n    DESCRIPTION: 'Chilean TIN',\n    EXAMPLE: '12.345.678-K',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'China',\n    ENUM: 'cn_tin',\n    DESCRIPTION: 'Chinese tax ID',\n    EXAMPLE: '123456789012345678',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Colombia',\n    ENUM: 'co_nit',\n    DESCRIPTION: 'Colombian NIT number',\n    EXAMPLE: '123.456.789-0',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Costa Rica',\n    ENUM: 'cr_tin',\n    DESCRIPTION: 'Costa Rican tax ID',\n    EXAMPLE: '1-234-567890',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Croatia',\n    ENUM: 'eu_vat',\n    DESCRIPTION: 'European VAT number',\n    EXAMPLE: 'HR12345678912',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Cyprus',\n    ENUM: 'eu_vat',\n    DESCRIPTION: 'European VAT number',\n    EXAMPLE: 'CY12345678Z',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Czech Republic',\n    ENUM: 'eu_vat',\n    DESCRIPTION: 'European VAT number',\n    EXAMPLE: 'CZ1234567890',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Denmark',\n    ENUM: 'eu_vat',\n    DESCRIPTION: 'European VAT number',\n    EXAMPLE: 'DK12345678',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Dominican Republic',\n    ENUM: 'do_rcn',\n    DESCRIPTION: 'Dominican RCN number',\n    EXAMPLE: '123-4567890-1',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Ecuador',\n    ENUM: 'ec_ruc',\n    DESCRIPTION: 'Ecuadorian RUC number',\n    EXAMPLE: '1234567890001',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Egypt',\n    ENUM: 'eg_tin',\n    DESCRIPTION: 'Egyptian Tax Identification Number',\n    EXAMPLE: '123456789',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'El Salvador',\n    ENUM: 'sv_nit',\n    DESCRIPTION: 'El Salvadorian NIT number',\n    EXAMPLE: '1234-567890-123-4',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Estonia',\n    ENUM: 'eu_vat',\n    DESCRIPTION: 'European VAT number',\n    EXAMPLE: 'EE123456789',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'EU',\n    ENUM: 'eu_oss_vat',\n    DESCRIPTION: 'European One Stop Shop VAT number for non-Union scheme',\n    EXAMPLE: 'EU123456789',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Finland',\n    ENUM: 'eu_vat',\n    DESCRIPTION: 'European VAT number',\n    EXAMPLE: 'FI12345678',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'France',\n    ENUM: 'eu_vat',\n    DESCRIPTION: 'European VAT number',\n    EXAMPLE: 'FRAB123456789',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Georgia',\n    ENUM: 'ge_vat',\n    DESCRIPTION: 'Georgian VAT',\n    EXAMPLE: '123456789',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Germany',\n    ENUM: 'eu_vat',\n    DESCRIPTION: 'European VAT number',\n    EXAMPLE: 'DE123456789',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Greece',\n    ENUM: 'eu_vat',\n    DESCRIPTION: 'European VAT number',\n    EXAMPLE: 'EL123456789',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Hong Kong',\n    ENUM: 'hk_br',\n    DESCRIPTION: 'Hong Kong BR number',\n    EXAMPLE: '12345678',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Hungary',\n    ENUM: 'eu_vat',\n    DESCRIPTION: 'European VAT number',\n    EXAMPLE: 'HU12345678',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Hungary',\n    ENUM: 'hu_tin',\n    DESCRIPTION: 'Hungary tax number (adószám)',\n    EXAMPLE: '12345678-1-23',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Iceland',\n    ENUM: 'is_vat',\n    DESCRIPTION: 'Icelandic VAT',\n    EXAMPLE: '123456',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'India',\n    ENUM: 'in_gst',\n    DESCRIPTION: 'Indian GST number',\n    EXAMPLE: '12ABCDE3456FGZH',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Indonesia',\n    ENUM: 'id_npwp',\n    DESCRIPTION: 'Indonesian NPWP number',\n    EXAMPLE: '12.345.678.9-012.345',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Ireland',\n    ENUM: 'eu_vat',\n    DESCRIPTION: 'European VAT number',\n    EXAMPLE: 'IE1234567AB',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Israel',\n    ENUM: 'il_vat',\n    DESCRIPTION: 'Israel VAT',\n    EXAMPLE: '000012345',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Italy',\n    ENUM: 'eu_vat',\n    DESCRIPTION: 'European VAT number',\n    EXAMPLE: 'IT12345678912',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Japan',\n    ENUM: 'jp_cn',\n    DESCRIPTION: 'Japanese Corporate Number (Hōjin Bangō)',\n    EXAMPLE: '1234567891234',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Japan',\n    ENUM: 'jp_rn',\n    DESCRIPTION:\n      \"Japanese Registered Foreign Businesses' Registration Number (Tōroku Kokugai Jigyōsha no Tōroku Bangō)\",\n    EXAMPLE: '12345',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Japan',\n    ENUM: 'jp_trn',\n    DESCRIPTION: 'Japanese Tax Registration Number (Tōroku Bangō)',\n    EXAMPLE: 'T1234567891234',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Kenya',\n    ENUM: 'ke_pin',\n    DESCRIPTION: 'Kenya Revenue Authority Personal Identification Number',\n    EXAMPLE: 'P000111111A',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Latvia',\n    ENUM: 'eu_vat',\n    DESCRIPTION: 'European VAT number',\n    EXAMPLE: 'LV12345678912',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Liechtenstein',\n    ENUM: 'li_uid',\n    DESCRIPTION: 'Liechtensteinian UID number',\n    EXAMPLE: 'CHE123456789',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Lithuania',\n    ENUM: 'eu_vat',\n    DESCRIPTION: 'European VAT number',\n    EXAMPLE: 'LT123456789123',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Luxembourg',\n    ENUM: 'eu_vat',\n    DESCRIPTION: 'European VAT number',\n    EXAMPLE: 'LU12345678',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Malaysia',\n    ENUM: 'my_frp',\n    DESCRIPTION: 'Malaysian FRP number',\n    EXAMPLE: '12345678',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Malaysia',\n    ENUM: 'my_itn',\n    DESCRIPTION: 'Malaysian ITN',\n    EXAMPLE: 'C 1234567890',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Malaysia',\n    ENUM: 'my_sst',\n    DESCRIPTION: 'Malaysian SST number',\n    EXAMPLE: 'A12-3456-78912345',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Malta',\n    ENUM: 'eu_vat',\n    DESCRIPTION: 'European VAT number',\n    EXAMPLE: 'MT12345678',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Mexico',\n    ENUM: 'mx_rfc',\n    DESCRIPTION: 'Mexican RFC number',\n    EXAMPLE: 'ABC010203AB9',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Netherlands',\n    ENUM: 'eu_vat',\n    DESCRIPTION: 'European VAT number',\n    EXAMPLE: 'NL123456789B12',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'New Zealand',\n    ENUM: 'nz_gst',\n    DESCRIPTION: 'New Zealand GST number',\n    EXAMPLE: '123456789',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Norway',\n    ENUM: 'no_vat',\n    DESCRIPTION: 'Norwegian VAT number',\n    EXAMPLE: '123456789MVA',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Peru',\n    ENUM: 'pe_ruc',\n    DESCRIPTION: 'Peruvian RUC number',\n    EXAMPLE: '12345678901',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Philippines',\n    ENUM: 'ph_tin',\n    DESCRIPTION: 'Philippines Tax Identification Number',\n    EXAMPLE: '123456789012',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Poland',\n    ENUM: 'eu_vat',\n    DESCRIPTION: 'European VAT number',\n    EXAMPLE: 'PL1234567890',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Portugal',\n    ENUM: 'eu_vat',\n    DESCRIPTION: 'European VAT number',\n    EXAMPLE: 'PT123456789',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Romania',\n    ENUM: 'eu_vat',\n    DESCRIPTION: 'European VAT number',\n    EXAMPLE: 'RO1234567891',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Romania',\n    ENUM: 'ro_tin',\n    DESCRIPTION: 'Romanian tax ID number',\n    EXAMPLE: '1234567890123',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Russia',\n    ENUM: 'ru_inn',\n    DESCRIPTION: 'Russian INN',\n    EXAMPLE: '1234567891',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Russia',\n    ENUM: 'ru_kpp',\n    DESCRIPTION: 'Russian KPP',\n    EXAMPLE: '123456789',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Saudi Arabia',\n    ENUM: 'sa_vat',\n    DESCRIPTION: 'Saudi Arabia VAT',\n    EXAMPLE: '123456789012345',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Serbia',\n    ENUM: 'rs_pib',\n    DESCRIPTION: 'Serbian PIB number',\n    EXAMPLE: '123456789',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Singapore',\n    ENUM: 'sg_gst',\n    DESCRIPTION: 'Singaporean GST',\n    EXAMPLE: 'M12345678X',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Singapore',\n    ENUM: 'sg_uen',\n    DESCRIPTION: 'Singaporean UEN',\n    EXAMPLE: '123456789F',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Slovakia',\n    ENUM: 'eu_vat',\n    DESCRIPTION: 'European VAT number',\n    EXAMPLE: 'SK1234567891',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Slovenia',\n    ENUM: 'eu_vat',\n    DESCRIPTION: 'European VAT number',\n    EXAMPLE: 'SI12345678',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Slovenia',\n    ENUM: 'si_tin',\n    DESCRIPTION: 'Slovenia tax number (davčna številka)',\n    EXAMPLE: '12345678',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'South Africa',\n    ENUM: 'za_vat',\n    DESCRIPTION: 'South African VAT number',\n    EXAMPLE: '4123456789',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'South Korea',\n    ENUM: 'kr_brn',\n    DESCRIPTION: 'Korean BRN',\n    EXAMPLE: '123-45-67890',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Spain',\n    ENUM: 'es_cif',\n    DESCRIPTION: 'Spanish NIF number (previously Spanish CIF number)',\n    EXAMPLE: 'A12345678',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Spain',\n    ENUM: 'eu_vat',\n    DESCRIPTION: 'European VAT number',\n    EXAMPLE: 'ESA1234567Z',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Sweden',\n    ENUM: 'eu_vat',\n    DESCRIPTION: 'European VAT number',\n    EXAMPLE: 'SE123456789123',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Switzerland',\n    ENUM: 'ch_vat',\n    DESCRIPTION: 'Switzerland VAT number',\n    EXAMPLE: 'CHE-123.456.789 MWST',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Taiwan',\n    ENUM: 'tw_vat',\n    DESCRIPTION: 'Taiwanese VAT',\n    EXAMPLE: '12345678',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Thailand',\n    ENUM: 'th_vat',\n    DESCRIPTION: 'Thai VAT',\n    EXAMPLE: '1234567891234',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Turkey',\n    ENUM: 'tr_tin',\n    DESCRIPTION: 'Turkish Tax Identification Number',\n    EXAMPLE: '0123456789',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Ukraine',\n    ENUM: 'ua_vat',\n    DESCRIPTION: 'Ukrainian VAT',\n    EXAMPLE: '123456789',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'United Arab Emirates',\n    ENUM: 'ae_trn',\n    DESCRIPTION: 'United Arab Emirates TRN',\n    EXAMPLE: '123456789012345',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'United Kingdom',\n    ENUM: 'eu_vat',\n    DESCRIPTION: 'Northern Ireland VAT number',\n    EXAMPLE: 'XI123456789',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'United Kingdom',\n    ENUM: 'gb_vat',\n    DESCRIPTION: 'United Kingdom VAT number',\n    EXAMPLE: 'GB123456789',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'United States',\n    ENUM: 'us_ein',\n    DESCRIPTION: 'United States EIN',\n    EXAMPLE: '12-3456789',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Uruguay',\n    ENUM: 'uy_ruc',\n    DESCRIPTION: 'Uruguayan RUC number',\n    EXAMPLE: '123456789012',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Venezuela',\n    ENUM: 've_rif',\n    DESCRIPTION: 'Venezuelan RIF number',\n    EXAMPLE: 'A-12345678-9',\n    VALIDATION: null,\n  },\n  {\n    COUNTRY: 'Vietnam',\n    ENUM: 'vn_tin',\n    DESCRIPTION: 'Vietnamese tax ID number',\n    EXAMPLE: '1234567890',\n    VALIDATION: null,\n  },\n];",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/constants/utils.ts",
    "exports": [
      {
        "name": " isProdFunc",
        "text": "export const isProdFunc = (projectId: string) => projectId === 'shofifi';",
        "type": "variable"
      },
      {
        "name": " isStagingFunc",
        "text": "\nexport const isStagingFunc = (projectId: string) => projectId === 'triple-whale-staging';",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/constants/comboMethodConfig.ts",
    "exports": [
      {
        "name": " comboMethodConfig",
        "text": "\n\nexport const comboMethodConfig: Record<FeatureFlagCombinationMethod, FeatureFlagCombinationConfig> =\n  {\n    [FeatureFlagCombinationMethod.OR]: {\n      combinationFunction: (args: FeatureFlagConfigValue[]) => {\n        return args.reduce((acc, x) => acc || x, false);\n      },\n      defaultValue: false,\n    },\n    [FeatureFlagCombinationMethod.AND]: {\n      combinationFunction: (args: FeatureFlagConfigValue[]) => {\n        return args.reduce((acc, x) => acc && x, true);\n      },\n      defaultValue: false,\n    },\n    [FeatureFlagCombinationMethod.ARRAY_CONCAT]: {\n      combinationFunction: (args: FeatureFlagConfigValue[]) => {\n        const arrs = extract2dArray(args, isString);\n        return [...new Set(arrs.flat())];\n      },\n      defaultValue: [],\n    },\n    [FeatureFlagCombinationMethod.ARRAY_INTERSECT]: {\n      combinationFunction: (args: FeatureFlagConfigValue[]) => {\n        const arrs = extract2dArray(args, isString);\n        const numArrs = arrs.length;\n        if (numArrs === 1) return arrs[0];\n\n        const flatArr = arrs.flat();\n        const tracker = new Map<string, number>();\n        const intersection: string[] = [];\n\n        // get number of each item in array\n        for (const el of flatArr) {\n          const val = tracker.get(el);\n          tracker.set(el, !val ? 1 : val + 1);\n        }\n\n        // val can be part of intersection if num of times it appears is equal to numArrs\n        for (const [key, val] of tracker) {\n          if (val === numArrs) intersection.push(key);\n        }\n\n        return intersection;\n      },\n      defaultValue: [],\n    },\n    [FeatureFlagCombinationMethod.ARRAY_COMBINE_BY_RANK]: {\n      combinationFunction: (args: FeatureFlagConfigValue[]) => {\n        const arr = extract2dArray(args, isFeatureFlagRankedControlListValue).flat();\n        const tracker = new Map<string, FeatureFlagRankedControlListValue>(); // string is val.id\n\n        for (const val of arr) {\n          const current = tracker.get(val.id);\n          if (!current || current.rank < val.rank) tracker.set(val.id, val);\n        }\n\n        return [...tracker.values()];\n      },\n      defaultValue: [],\n    },\n    [FeatureFlagCombinationMethod.MAX]: {\n      combinationFunction: (args: FeatureFlagConfigValue[]) => {\n        const numbers = args.filter(isNumber);\n        return numbers.reduce((a, b) => Math.max(a, b));\n      },\n      defaultValue: 0,\n    },\n    [FeatureFlagCombinationMethod.MIN]: {\n      combinationFunction: (args: FeatureFlagConfigValue[]) => {\n        const numbers = args.filter(isNumber);\n        return numbers.reduce((a, b) => Math.min(a, b));\n      },\n      defaultValue: 0,\n    },\n    [FeatureFlagCombinationMethod.SUM]: {\n      combinationFunction: (args: FeatureFlagConfigValue[]) => {\n        const numbers = args.filter(isNumber);\n        return numbers.reduce((a, b) => a + b);\n      },\n      defaultValue: 0,\n    },\n  };",
        "type": "Record<FeatureFlagCombinationMethod, FeatureFlagCombinationConfig>"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/constants/comboMethodRanking.ts",
    "exports": [
      {
        "name": " PACKAGE_CONFIG_RANKS",
        "text": "\n\n// plans with higher numbers have higher rankings\nexport const PACKAGE_CONFIG_RANKS: Readonly<\n  Record<FeatureFlagConfigKey, number>\n> = {\n  CONF_FREE: 0,\n  CONF_BASIC: 0,\n  CONF_A: 1,\n  CONF_B: 2,\n  CONF_C: 3,\n};",
        "type": "Readonly<\n  Record<FeatureFlagConfigKey, number>\n>"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/constants/featureFlagValueSources.ts",
    "exports": [
      {
        "name": " featureFlagValueSources",
        "text": "\n\nexport const featureFlagValueSources = new Set<FeatureFlagValueSource>([\n  'subscription',\n  'shop',\n  'user',\n]);",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/constants/featureToComboMap.ts",
    "exports": [
      {
        "name": " validCombos",
        "text": "\n\nexport const validCombos: {\n  [key in FeatureFlagValueType]: Set<FeatureFlagCombinationMethod>;\n} = {\n  [FeatureFlagValueType.AllowList]: new Set([\n    FeatureFlagCombinationMethod.ARRAY_CONCAT,\n    FeatureFlagCombinationMethod.ARRAY_INTERSECT,\n  ]),\n  [FeatureFlagValueType.BlockList]: new Set([\n    FeatureFlagCombinationMethod.ARRAY_CONCAT,\n    FeatureFlagCombinationMethod.ARRAY_INTERSECT,\n  ]),\n  [FeatureFlagValueType.Boolean]: new Set([\n    FeatureFlagCombinationMethod.AND,\n    FeatureFlagCombinationMethod.OR,\n  ]),\n  [FeatureFlagValueType.Number]: new Set([\n    FeatureFlagCombinationMethod.SUM,\n    FeatureFlagCombinationMethod.MAX,\n    FeatureFlagCombinationMethod.MIN,\n  ]),\n  [FeatureFlagValueType.RankedControlList]: new Set([\n    FeatureFlagCombinationMethod.ARRAY_COMBINE_BY_RANK\n  ]),\n};",
        "type": "{\n  [key in FeatureFlagValueType]: Set<FeatureFlagCombinationMethod>;\n}"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/constants/index.ts",
    "exports": []
  },
  {
    "file": "@tw/feature-flag-system/constants/strings.ts",
    "exports": [
      {
        "name": " CONFIG_KEY_PREFIX",
        "text": "export const CONFIG_KEY_PREFIX = \"CONF_\";",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/constants/valueToValueTypeMap.ts",
    "exports": [
      {
        "name": " ValidValueMap",
        "text": "\n\nexport type ValidValueMap = {\n  [FeatureFlagValueType.AllowList]: string[];\n  [FeatureFlagValueType.BlockList]: string[];\n  [FeatureFlagValueType.RankedControlList]: FeatureFlagRankedControlListValue[];\n  [FeatureFlagValueType.Boolean]: boolean;\n  [FeatureFlagValueType.Number]: number;\n};",
        "type": "{\n  [FeatureFlagValueType.AllowList]: string[];\n  [FeatureFlagValueType.BlockList]: string[];\n  [FeatureFlagValueType.RankedControlList]: FeatureFlagRankedControlListValue[];\n  [FeatureFlagValueType.Boolean]: boolean;\n  [FeatureFlagValueType.Number]: number;\n}"
      },
      {
        "name": " ValidationFunction",
        "text": "\n\nexport type ValidationFunction<K extends FeatureFlagValueType> = (\n  val: unknown\n) => val is ValidValueMap[K];",
        "type": "(\n  val: unknown\n) => val is ValidValueMap[K]"
      },
      {
        "name": " valueToValueTypeMap",
        "text": "\n\nexport const valueToValueTypeMap: {\n  [K in FeatureFlagValueType]: ValidationFunction<K>;\n} = {\n  [FeatureFlagValueType.AllowList]: (val): val is string[] => {\n    if (!Array.isArray(val)) return false;\n    return val.every((val) => typeof val === 'string');\n  },\n  [FeatureFlagValueType.BlockList]: (val): val is string[] => {\n    if (!Array.isArray(val)) return false;\n    return val.every((val) => typeof val === 'string');\n  },\n  [FeatureFlagValueType.Boolean]: (val): val is boolean => {\n    return typeof val === 'boolean';\n  },\n  [FeatureFlagValueType.Number]: (val): val is number => {\n    return typeof val === 'number';\n  },\n  [FeatureFlagValueType.RankedControlList]: (val): val is FeatureFlagRankedControlListValue[] => {\n    if (!Array.isArray(val)) return false;\n    return val.every((val) => isFeatureFlagRankedControlListValue(val));\n  },\n};",
        "type": "{\n  [K in FeatureFlagValueType]: ValidationFunction<K>;\n}"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/types/FeatureFlag.ts",
    "exports": [
      {
        "type": "enum",
        "name": " FeatureFlag",
        "text": "export enum FeatureFlag {\n\n  /** 2.0 */\n  AD_BUILDER_FF = 'AD_BUILDER_FF',\n  CART_ANALYSIS_FF = 'CART_ANALYSIS_FF',\n  CC_CREATIVE_ANALYSIS_FF = 'CC_CREATIVE_ANALYSIS_FF',\n  CC_CREATIVE_HUB_FF = 'CC_CREATIVE_HUB_FF',\n  CUSTOM_METRICS_FF = 'CUSTOM_METRICS_FF',\n  CUSTOMERS_PAGE_FF = 'CUSTOMERS_PAGE_FF',\n  EXPENSES_ACCESS_FF = 'EXPENSES_ACCESS_FF', // deprecated\n  EXPORT_TO_SHEETS_FF = 'EXPORT_TO_SHEETS_FF',\n  EXTERNAL_API_FF = 'EXTERNAL_API_FF',\n  FINHUB_FF = 'FINHUB_FF',// deprecated\n  INSIGHT_GENERAL_FF = 'INSIGHT_GENERAL_FF',\n  LIGHTHOUSE_FF = 'LIGHTHOUSE_FF',\n  LIMIT_CUSTOM_METRICS_FF = 'LIMIT_CUSTOM_METRICS_FF',// deprecated\n  LIMIT_METRICS_FF = 'LIMIT_METRICS_FF',//hybrid?\n  LIMIT_PIXEL_COLUMNS_FF = 'LIMIT_PIXEL_COLUMNS_FF',\n  LIMIT_SUMMARY_SECTIONS_FF = 'LIMIT_SUMMARY_SECTIONS_FF',\n  ORDERS_PAGE_FF = 'ORDERS_PAGE_FF',\n  PIXEL_ALL_FF = 'PIXEL_ALL_FF',\n  PIXEL_CHANNEL_OVERLAP_FF = 'PIXEL_CHANNEL_OVERLAP_FF',\n  PIXEL_EMAIL_FF = 'PIXEL_EMAIL_FF',\n  PIXEL_LIVE_ORDERS_FF = 'PIXEL_LIVE_ORDERS_FF',\n  PIXEL_ORGANIC_FF = 'PIXEL_ORGANIC_FF',\n  PIXEL_PURCHASE_POPUP_FF = 'PIXEL_PURCHASE_POPUP_FF',\n  POST_PURCHASE_SURVEY_FF = 'POST_PURCHASE_SURVEY_FF',// deprecated\n  PRODUCT_ANALYTICS_FF = 'PRODUCT_ANALYTICS_FF',\n  SEGMENTATION_FF = 'SEGMENTATION_FF',\n  SUMMARY_PAGE_FF = 'SUMMARY_PAGE_FF',\n  USE_NEW_DESIGN_FF = 'USE_NEW_DESIGN_FF',// deprecated\n  STORE_DATA_FF = 'STORE_DATA_FF',\n\n  /** hybrid */\n  SCDP_PAGE_FF = 'SCDP_PAGE_FF',\n  SHIPPING_PAGE_FF = 'SHIPPING_PAGE_FF',\n  PAYMENT_GATEWAY_COSTS_PAGE_FF = 'PAYMENT_GATEWAY_COSTS_PAGE_FF',\n  LIMIT_INTEGRATIONS_FF = 'LIMIT_INTEGRATIONS_FF',\n  FORECASTING_FF = 'FORECASTING_FF',\n  FORECASTING_MENU_FF = 'FORECASTING_MENU_FF',\n  FB_ADVANCED_BREAKDOWN_FF = 'FB_ADVANCED_BREAKDOWN_FF', // deprecated\n  ACTIVITY_FEED_FF = 'ACTIVITY_FEED_FF',\n  LIMIT_LOOKBACK_FF = 'LIMIT_LOOKBACK_FF',\n  COGS_PAGE_FF = 'COGS_PAGE_FF',\n  CUSTOM_EXPENSES_FF = 'CUSTOM_EXPENSES_FF',\n  SPENDS_PAGE_FF = 'SPENDS_PAGE_FF',\n  EMAIL_SLACK_REPORT_FF = 'EMAIL_SLACK_REPORT_FF',\n  COST_SETTINGS_FF = 'COST_SETTINGS_FF',\n  HUBSPOT_MEETING_FF = 'HUBSPOT_MEETING_FF',\n  INVITE_USER_LIMIT_FF = 'INVITE_USER_LIMIT_FF',\n  LIMIT_NOTIFICATIONS_FF = 'LIMIT_NOTIFICATIONS_FF',\n  PIXEL_AFFLUENCER_HUB_FF = 'PIXEL_AFFLUENCER_HUB_FF',\n  API_KEYS_FF = 'API_KEYS_FF',\n  LIMIT_ROUTES_FF = 'LIMIT_ROUTES_FF',\n  ADVANCED_BREAKDOWN_FF = 'ADVANCED_BREAKDOWN_FF',\n\n\n  /** 3.0 */\n  TEMPLATES_FF = 'TEMPLATES_FF',\n  WILLY_CHAT_FF ='WILLY_CHAT_FF', // deprecated, use CHAT_FF\n  PIXEL_CAPI_FF = 'PIXEL_CAPI_FF',\n  WILLY_DEFAULT_TEMPLATES_FF = 'WILLY_DEFAULT_TEMPLATES_FF',\n  TW_3_0_FF = 'TW_3_0_FF',\n  TW_ONLY_3_0_FF = 'TW_ONLY_3_0_FF',\n  CHAT_FF = 'CHAT_FF',\n  SQL_FF = 'SQL_FF',\n  MULTI_GEO_FF = 'MULTI_GEO_FF',\n  WAREHOUSE_SYNC_FF = 'WAREHOUSE_SYNC_FF',\n  CSV_EXPORTING_FF = 'CSV_EXPORTING_FF',\n  AD_MANAGEMENT_FF = 'AD_MANAGEMENT_FF',\n  METRIC_LIBRARY_CALCULATED_METRIC_FF = 'METRIC_LIBRARY_CALCULATED_METRIC_FF',\n}"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/types/FeatureFlagBlockingMethod.ts",
    "exports": [
      {
        "type": "enum",
        "name": " FeatureFlagBlockingMethod",
        "text": "export enum FeatureFlagBlockingMethod {\n  Hide = \"Hide\",\n  Block = \"Block\",\n  Limitation = \"Limitation\",\n}"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/types/FeatureFlagCombinationConfig.ts",
    "exports": [
      {
        "name": " FeatureFlagCombinationConfig",
        "text": "\n\nexport type FeatureFlagCombinationConfig = {\n  combinationFunction: (\n    values: FeatureFlagConfigValue[]\n  ) => FeatureFlagConfigValue;\n  defaultValue: FeatureFlagConfigValue;\n};",
        "type": "{\n  combinationFunction: (\n    values: FeatureFlagConfigValue[]\n  ) => FeatureFlagConfigValue;\n  defaultValue: FeatureFlagConfigValue;\n}"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/types/FeatureFlagCombinationMethod.ts",
    "exports": [
      {
        "type": "enum",
        "name": " FeatureFlagCombinationMethod",
        "text": "export enum FeatureFlagCombinationMethod {\n  OR = 'OR',\n  AND = 'AND',\n  MIN = 'MIN',\n  MAX = 'MAX',\n  SUM = 'SUM',\n  ARRAY_CONCAT = 'ARRAY_CONCAT',\n  ARRAY_INTERSECT = 'ARRAY_INTERSECT',\n  ARRAY_COMBINE_BY_RANK = 'ARRAY_COMBINE_BY_RANK',\n}"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/types/FeatureFlagConfig.ts",
    "exports": [
      {
        "name": " FeatureFlagConfig",
        "text": "\n\nexport type FeatureFlagConfig = {\n  [key in FeatureFlag]?: {\n    value: FeatureFlagConfigValue;\n    [key: string]: any;\n  };\n};",
        "type": "{\n  [key in FeatureFlag]?: {\n    value: FeatureFlagConfigValue;\n    [key: string]: any;\n  };\n}"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/types/FeatureFlagConfigKey.ts",
    "exports": [
      {
        "name": " FeatureFlagConfigKey",
        "text": "export type FeatureFlagConfigKey = `CONF_${string}`;",
        "type": "`CONF_${string}`"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/types/FeatureFlagConfigValue.ts",
    "exports": [
      {
        "name": " FeatureFlagConfigValue",
        "text": "\n\nexport type FeatureFlagConfigValue =\n  | boolean\n  | number\n  | string[]\n  | FeatureFlagRankedControlListValue[];",
        "type": "| boolean\n  | number\n  | string[]\n  | FeatureFlagRankedControlListValue[]"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/types/FeatureFlagDiffValueMap.ts",
    "exports": [
      {
        "name": " FeatureFlagDiffValueMap",
        "text": "\n\nexport type FeatureFlagDiffValueMap = {\n  [key in FeatureFlag]?: { old: FeatureFlagConfigValue; new: FeatureFlagConfigValue };\n};",
        "type": "{\n  [key in FeatureFlag]?: { old: FeatureFlagConfigValue; new: FeatureFlagConfigValue };\n}"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/types/FeatureFlagMetaData.ts",
    "exports": [
      {
        "name": " FeatureFlagMetaData",
        "text": "\n\nexport type FeatureFlagMetaData = {\n  [key in FeatureFlag]: {\n    description: string;\n    ffKey: FeatureFlag;\n    valueType: FeatureFlagValueType;\n    combinationMethod: FeatureFlagCombinationMethod;\n    blockingMethod: FeatureFlagBlockingMethod;\n    defaultValue?: FeatureFlagConfigValue;\n    deprecated?: boolean;\n    blockingText?: string;\n    unblockText?: string;\n    [key: string]: any;\n  };\n};",
        "type": "{\n  [key in FeatureFlag]: {\n    description: string;\n    ffKey: FeatureFlag;\n    valueType: FeatureFlagValueType;\n    combinationMethod: FeatureFlagCombinationMethod;\n    blockingMethod: FeatureFlagBlockingMethod;\n    defaultValue?: FeatureFlagConfigValue;\n    deprecated?: boolean;\n    blockingText?: string;\n    unblockText?: string;\n    [key: string]: any;\n  };\n}"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/types/FeatureFlagPackagesConfig.ts",
    "exports": [
      {
        "name": " FeatureFlagPackagesConfig",
        "text": "\n\nexport type FeatureFlagPackagesConfig = {\n  [plan: FeatureFlagConfigKey]: FeatureFlagConfig;\n};",
        "type": "{\n  [plan: FeatureFlagConfigKey]: FeatureFlagConfig;\n}"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/types/FeatureFlagRankedControlListValue.ts",
    "exports": [
      {
        "name": " FeatureFlagRankedControlListValue",
        "text": "export type FeatureFlagRankedControlListValue = {\n  id: string;\n  type: 'allow' | 'block';\n  rank: number;\n};",
        "type": "{\n  id: string;\n  type: 'allow' | 'block';\n  rank: number;\n}"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/types/FeatureFlagResult.ts",
    "exports": [
      {
        "name": " FeatureFlagResultProperties",
        "text": "\n\nexport type FeatureFlagResultProperties = OmitMethods<FeatureFlagResult>;",
        "type": "OmitMethods<FeatureFlagResult>"
      },
      {
        "name": " FeatureFlagResult",
        "text": "\n\nexport class FeatureFlagResult {\n  private featureFlag: FeatureFlag | null = null;\n  private showConsoleErrors: boolean = true;\n\n  public readonly metadata: Readonly<NullableFeatureFlagMetaData> = {\n    ffKey: null,\n    description: '',\n    valueType: null,\n    combinationMethod: null,\n    blockingMethod: null,\n  };\n\n  /**\n   * @description Think twice before using this - class `FeatureFlagResult` has a variety of getters that cover most situations.\n   */\n  public readonly result: NullableFeatureFlagConfigValue = null;\n\n  /**\n   * @description Computed list of the sources of the configs that ended up deciding the final value for this feature flag.\n   */\n  public readonly sources: ReadonlyArray<FeatureFlagValueSource> | null = null;\n\n  public constructor(args?: {\n    metadata?: NullableFeatureFlagMetaData;\n    result?: NullableFeatureFlagValueWithMetaData;\n  }) {\n    if (args) {\n      const { metadata, result } = args;\n      if (metadata !== undefined) this.metadata = metadata;\n      if (result !== undefined) {\n        this.result = result.value;\n        this.sources = result.metadata.sources || null;\n      }\n    }\n    this.featureFlag = this.metadata.ffKey || null;\n  }\n\n  private printWarning_NotMatchingValType(valueType: FeatureFlagValueType): void {\n    if (!this.showConsoleErrors) return;\n\n    console.warn(\n      `Possible incorrect use of FeatureFlag \"${this.featureFlag}\".\n       This FeatureFlag's valueType is ${valueType}.`\n    );\n  }\n\n  /**\n   * @description Method automatically used by JSON.stringify when attempting to stringify an object\n   */\n  public toJSON(): FeatureFlagResultProperties {\n    // need to shut off and restart showing console errors for this case\n    // , since we always want to see the all the values for all the limitations\n    // even if the limitation doesn't match\n    this.showConsoleErrors = false;\n\n    const obj = {\n      metadata: this.metadata,\n      result: this.result,\n      sources: this.sources,\n      shouldBeBlocked: this.shouldBeBlocked,\n      shouldBeHidden: this.shouldBeHidden,\n      shouldNotBeSeen: this.shouldNotBeSeen,\n      numericLimit: this.numericLimit,\n      allowList: this.allowList,\n      blockList: this.blockList,\n      rankedControlList: this.rankedControlList,\n    };\n\n    this.showConsoleErrors = true;\n\n    return obj;\n  }\n\n  /**\n   * @description Determines if a single entity should be blocked\n   * by another UI component.\n   */\n  public get shouldBeBlocked(): boolean {\n    if (this.result === null) return false;\n\n    const { valueType, blockingMethod } = this.metadata;\n\n    if (valueType && valueType !== FeatureFlagValueType.Boolean) {\n      this.printWarning_NotMatchingValType(valueType);\n    }\n\n    return (\n      valueType === FeatureFlagValueType.Boolean &&\n      blockingMethod === FeatureFlagBlockingMethod.Block &&\n      this.result === false\n    );\n  }\n\n  /**\n   * @description Determines if a single entity should be hidden\n   * instead of being blocked by a different UI component\n   */\n  public get shouldBeHidden(): boolean {\n    if (!this.featureFlag || this.result === null) return false;\n\n    const { valueType, blockingMethod } = this.metadata;\n\n    if (valueType && valueType !== FeatureFlagValueType.Boolean) {\n      this.printWarning_NotMatchingValType(valueType);\n    }\n\n    return (\n      valueType === FeatureFlagValueType.Boolean &&\n      blockingMethod === FeatureFlagBlockingMethod.Hide &&\n      this.result === false\n    );\n  }\n\n  /**\n   * @description Checks if a component connected to this feature flag\n   * should just not be seen - whether blocked or hidden. More lenient\n   * option to quickly cover both cases.\n   */\n  public get shouldNotBeSeen(): boolean {\n    if (!this.featureFlag || this.result === null) return false;\n\n    const { valueType, blockingMethod } = this.metadata;\n    const { Hide, Block } = FeatureFlagBlockingMethod;\n\n    if (valueType && valueType !== FeatureFlagValueType.Boolean) {\n      this.printWarning_NotMatchingValType(valueType);\n    }\n\n    return (\n      valueType === FeatureFlagValueType.Boolean &&\n      (blockingMethod === Hide || blockingMethod === Block) &&\n      this.result === false\n    );\n  }\n\n  /**\n   * @description If the valueType of this feature flag is `Number`,\n   * returns the number in that feature flag's result. If valueType\n   * isn't `Number`, returns null.\n   */\n  public get numericLimit(): number | null {\n    if (!this.featureFlag) return null;\n\n    const { valueType } = this.metadata;\n    if (valueType && valueType !== FeatureFlagValueType.Number) {\n      this.printWarning_NotMatchingValType(valueType);\n    }\n\n    return typeof this.result === 'number' ? this.result : null;\n  }\n\n  /**\n   * @description List of entities that this shop/user can access for this\n   * feature flag.\n   */\n  public get allowList(): string[] {\n    if (!Array.isArray(this.result) || !this.featureFlag) return [];\n\n    const { valueType } = this.metadata;\n    if (\n      valueType &&\n      valueType !== FeatureFlagValueType.AllowList &&\n      valueType !== FeatureFlagValueType.RankedControlList\n    ) {\n      this.printWarning_NotMatchingValType(valueType);\n    }\n\n    if (valueType === FeatureFlagValueType.RankedControlList) {\n      // TODO: Maybe do some validation here?\n      return (this.result as FeatureFlagRankedControlListValue[])\n        .filter((item) => item.type === 'allow')\n        .map((item) => item.id);\n    }\n\n    if (valueType !== FeatureFlagValueType.AllowList) return [];\n\n    return this.result as string[];\n  }\n\n  /**\n   * @description List of entities that this shop/user can't access for this\n   * feature flag.\n   */\n  public get blockList(): string[] {\n    if (!Array.isArray(this.result) || !this.featureFlag) return [];\n\n    const { valueType } = this.metadata;\n    if (\n      valueType &&\n      valueType !== FeatureFlagValueType.BlockList &&\n      valueType !== FeatureFlagValueType.RankedControlList\n    ) {\n      this.printWarning_NotMatchingValType(valueType);\n    }\n\n    if (valueType === FeatureFlagValueType.RankedControlList) {\n      // TODO: Maybe do some validation here?\n      return (this.result as FeatureFlagRankedControlListValue[])\n        .filter((item) => item.type === 'block')\n        .map((item) => item.id);\n    }\n\n    if (valueType !== FeatureFlagValueType.BlockList) return [];\n\n    return this.result as string[];\n  }\n  /**\n   * @description Mixed list of allowed/blocked entities\n   */\n  public get rankedControlList(): FeatureFlagRankedControlListValue[] {\n    if (!Array.isArray(this.result) || !this.featureFlag) return [];\n\n    const { valueType } = this.metadata;\n    if (valueType && valueType !== FeatureFlagValueType.RankedControlList) {\n      this.printWarning_NotMatchingValType(valueType);\n      return [];\n    }\n\n    // TODO: Maybe do some validation here?\n    return this.result as FeatureFlagRankedControlListValue[];\n  }\n}",
        "type": "class"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/types/FeatureFlagValueMap.ts",
    "exports": [
      {
        "name": " FeatureFlagValueMap",
        "text": "\n\nexport type FeatureFlagValueMap = {\n  [key in FeatureFlag]?: FeatureFlagConfigValue;\n};",
        "type": "{\n  [key in FeatureFlag]?: FeatureFlagConfigValue;\n}"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/types/FeatureFlagValueSource.ts",
    "exports": [
      {
        "name": " FeatureFlagValueSource",
        "text": "/**\n * @description Possible sources of where a feature flag config is being used. Is part of `PackageMetaData`.\n */\nexport type FeatureFlagValueSource = 'subscription' | 'shop' | 'user';",
        "type": "'subscription' | 'shop' | 'user'"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/types/FeatureFlagValueType.ts",
    "exports": [
      {
        "type": "enum",
        "name": " FeatureFlagValueType",
        "text": "export enum FeatureFlagValueType {\n  Boolean = 'Boolean',\n  Number = 'Number',\n  AllowList = 'AllowList',\n  BlockList = 'BlockList',\n  RankedControlList = 'RankedControlList',\n}"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/types/FeatureFlagValueWithMetaData.ts",
    "exports": [
      {
        "name": " FeatureFlagValueWithMetaData",
        "text": "\n\nexport type FeatureFlagValueWithMetaData = {\n  value: FeatureFlagConfigValue;\n  metadata: {\n    sources?: FeatureFlagValueSource[];\n  };\n};",
        "type": "{\n  value: FeatureFlagConfigValue;\n  metadata: {\n    sources?: FeatureFlagValueSource[];\n  };\n}"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/types/FeatureFlagValueWithMetaDataMap.ts",
    "exports": [
      {
        "name": " FeatureFlagValueWithMetaDataMap",
        "text": "\n\nexport type FeatureFlagValueWithMetaDataMap = {\n  [key in FeatureFlag]?: FeatureFlagValueWithMetaData;\n};",
        "type": "{\n  [key in FeatureFlag]?: FeatureFlagValueWithMetaData;\n}"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/types/NullableFeatureFlagConfigValue.ts",
    "exports": [
      {
        "name": " NullableFeatureFlagConfigValue",
        "text": "\n\nexport type NullableFeatureFlagConfigValue = FeatureFlagConfigValue | null;",
        "type": "FeatureFlagConfigValue | null"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/types/NullableFeatureFlagMetaData.ts",
    "exports": [
      {
        "name": " NullableFeatureFlagMetaData",
        "text": "\n\nexport type NullableFeatureFlagMetaData = Nullable<FeatureFlagMetaData[FeatureFlag]>",
        "type": "Nullable<FeatureFlagMetaData[FeatureFlag]>"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/types/NullableFeatureFlagValueWithMetaData.ts",
    "exports": [
      {
        "name": " NullableFeatureFlagValueWithMetaData",
        "text": "\n\nexport type NullableFeatureFlagValueWithMetaData = Omit<FeatureFlagValueWithMetaData, 'value'> & {\n  value: FeatureFlagConfigValue | null;\n};",
        "type": "Omit<FeatureFlagValueWithMetaData, 'value'> & {\n  value: FeatureFlagConfigValue | null;\n}"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/types/NullableFeatureFlagValueWithMetaDataMap.ts",
    "exports": [
      {
        "name": " NullableFeatureFlagValueWithMetaDataMap",
        "text": "\n\nexport type NullableFeatureFlagValueWithMetaDataMap = {\n  [key in FeatureFlag]?: NullableFeatureFlagValueWithMetaData;\n};",
        "type": "{\n  [key in FeatureFlag]?: NullableFeatureFlagValueWithMetaData;\n}"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/types/PackageMetaData.ts",
    "exports": [
      {
        "name": " PackageMetaData",
        "text": "\n\n/**\n * Due to different specs when ff system was made, this type was called PackageMetaData,\n * but it should be called `ConfigMetaData`.  Not all feature flag configs are for packages.\n * \"Package\" implies a product in stripe.\n * // TODO: This type needs to be renamed, and we need to refactor/rename a bunch of places.\n */\nexport type PackageMetaData = {\n  id: FeatureFlagConfigKey;\n  name: string;\n  rank?: number;\n  description?: string;\n  sources?: FeatureFlagValueSource[];\n  /** Determines if this config is a stripe product or not */\n  isPackage?: boolean;\n};",
        "type": "{\n  id: FeatureFlagConfigKey;\n  name: string;\n  rank?: number;\n  description?: string;\n  sources?: FeatureFlagValueSource[];\n  /** Determines if this config is a stripe product or not */\n  isPackage?: boolean;\n}"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/types/PlainObject.ts",
    "exports": [
      {
        "name": " PlainObject",
        "text": "/**\n * @description Type that represents POJO - Plain Old Javascript Object.\n * Takes a generic T, depending on the level of type safety desired.\n */\nexport type PlainObject<T = unknown> = Record<string, T>;",
        "type": "Record<string, T>"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/types/index.ts",
    "exports": []
  },
  {
    "file": "@tw/feature-flag-system/utils/computations/computeFeatureFlagValue.ts",
    "exports": [
      {
        "name": " computeFeatureFlagValue",
        "text": "\n\nexport const computeFeatureFlagValue = (\n  featureFlagId: FeatureFlag,\n  ffMetadata: Partial<FeatureFlagMetaData>,\n  ffPackagesConfig: FeatureFlagPackagesConfig,\n  ffPackagesMetadata: PackageMetaData[]\n): NullableFeatureFlagValueWithMetaData => {\n  const metadata = ffMetadata[featureFlagId];\n  if (!metadata) {\n    return {\n      value: null,\n      metadata: {},\n    };\n  }\n\n  const comboConfig = comboMethodConfig[metadata.combinationMethod];\n  const packageMetaDataMap = ffPackagesMetadata.reduce(\n    (acc, pm) => ((acc[pm.id] = pm), acc),\n    {} as PackageMetaDataMap\n  );\n\n  let highestConfigRank = 0,\n    ffConfigValues: FeatureFlagConfigValue[] = [],\n    highestSources = new Set<FeatureFlagValueSource>();\n\n  for (const plan in ffPackagesConfig) {\n    const planKey = plan as FeatureFlagConfigKey;\n    const planConfig = ffPackagesConfig[planKey];\n\n    // only deal with configs that have a value for this feature flag\n    const ffConfig = planConfig[featureFlagId];\n    if (!ffConfig) continue;\n\n    const { rank = 0, sources = [] } = packageMetaDataMap[planKey] || {};\n    if (highestConfigRank && rank < highestConfigRank) continue;\n\n    if (rank === highestConfigRank) {\n      ffConfigValues.push(ffConfig.value);\n      sources.forEach((source) => highestSources.add(source));\n      continue;\n    }\n\n    highestConfigRank = rank;\n    highestSources = new Set(sources);\n    ffConfigValues = [ffConfig.value];\n  }\n\n  const value = !ffConfigValues.length\n    ? metadata.defaultValue ?? comboConfig.defaultValue\n    : comboConfig.combinationFunction(ffConfigValues);\n\n  return {\n    value,\n    metadata: {\n      sources: [...highestSources],\n    },\n  };\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/utils/computations/computePackageConfigKeys.ts",
    "exports": [
      {
        "name": " computePackageConfigKeys",
        "text": "\n\nexport const computePackageConfigKeys = (\n  ffConfigKeys: (string | null)[]\n): FeatureFlagConfigKey[] => {\n  return ffConfigKeys\n    .filter(\n      (key): key is FeatureFlagConfigKey =>\n        !!key?.startsWith(CONFIG_KEY_PREFIX)\n    )\n    .sort((a, b) => {\n      if (!(a in PACKAGE_CONFIG_RANKS)) return -1;\n      if (!(b in PACKAGE_CONFIG_RANKS)) return -1;\n      return PACKAGE_CONFIG_RANKS[a] - PACKAGE_CONFIG_RANKS[b];\n    });\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/utils/computations/computePackagesConfig.ts",
    "exports": [
      {
        "name": " computePackagesConfig",
        "text": "\n\nexport const computePackagesConfig = (\n  ffAllPackagesConfig: FeatureFlagPackagesConfig,\n  subFeatureKeys: (string | null)[]\n): FeatureFlagPackagesConfig => {\n  const packageConfigKeys = computePackageConfigKeys(subFeatureKeys);\n\n  const keys = Object.keys(\n    ffAllPackagesConfig\n  ) as FeatureFlagConfigKey[];\n\n  return keys.reduce((acc, key) => {\n    if (!packageConfigKeys.includes(key)) return acc;\n    acc[key] = ffAllPackagesConfig[key];\n    return acc;\n  }, {} as FeatureFlagPackagesConfig);\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/utils/computations/index.ts",
    "exports": []
  },
  {
    "file": "@tw/feature-flag-system/utils/index.ts",
    "exports": []
  },
  {
    "file": "@tw/feature-flag-system/utils/validators/assertions/assertHasKeys.ts",
    "exports": [
      {
        "type": "function",
        "name": " assertHasKeys",
        "text": "export function assertHasKeys<T extends object, K extends string>(\n  objName: string,\n  obj: T,\n  fields: K[]\n): asserts obj is T & { [P in K]: P extends keyof T ? T[P] : unknown } {\n  const missingKeys: string[] = [];\n\n  for (const field of fields) {\n    if (!(field in obj)) {\n      missingKeys.push(field);\n    }\n  }\n\n  if (missingKeys.length) {\n    throw new Error(`Invalid ${objName} - missing fields: \"${missingKeys.join()}\"`);\n  }\n}",
        "parameters": [
          {
            "name": "objName",
            "text": "objName: string",
            "type": "string"
          },
          {
            "name": "obj",
            "text": "obj: T",
            "type": "T"
          },
          {
            "name": "fields",
            "text": "fields: K[]",
            "type": "K[]"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/utils/validators/assertions/assertValidBlockingMethod.ts",
    "exports": [
      {
        "type": "function",
        "name": " assertValidBlockingMethod",
        "text": "\n\nexport function assertValidBlockingMethod(\n  method: unknown\n): asserts method is FeatureFlagBlockingMethod {\n  if (typeof method !== \"string\") {\n    throw new TypeError(\"Invalid FeatureFlagBlockingMethod - must be a string\");\n  }\n\n  if (!(method in FeatureFlagBlockingMethod)) {\n    throw new TypeError(\n      `Invalid FeatureFlagBlockingMethod - ${method} isn't a FeatureFlagBlockingMethod`\n    );\n  }\n}",
        "parameters": [
          {
            "name": "method",
            "text": "method: unknown",
            "type": "unknown"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/utils/validators/assertions/assertValidCombinationMethod.ts",
    "exports": [
      {
        "type": "function",
        "name": " assertValidCombinationMethod",
        "text": "\n\nexport function assertValidCombinationMethod(\n  comboMethod: unknown\n): asserts comboMethod is FeatureFlagCombinationMethod {\n  if (\n    typeof comboMethod !== \"string\" ||\n    comboMethod in FeatureFlagCombinationMethod === false\n  ) {\n    throw new TypeError(\n      `Invalid FeatureFlagCombinationMethod - ${comboMethod} isn't a valid FeatureFlagCombinationMethod`\n    );\n  }\n}",
        "parameters": [
          {
            "name": "comboMethod",
            "text": "comboMethod: unknown",
            "type": "unknown"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/utils/validators/assertions/assertValidConfigValue.ts",
    "exports": [
      {
        "type": "function",
        "name": " assertValidConfigValue",
        "text": "\n\nexport function assertValidConfigValue(value: unknown): asserts value is FeatureFlagConfigValue {\n  if (typeof value === 'number') return;\n  if (typeof value === 'boolean') return;\n  if (typeof value === 'object' && Array.isArray(value)) {\n    if (value.every((val) => typeof val === 'string')) return;\n    if (value.every((val) => isFeatureFlagRankedControlListValue(val))) return;\n  }\n\n  throw new TypeError(\n    `Invalid FeatureFlagConfigValue - ${value} isn't a valid FeatureFlagConfigValue`\n  );\n}",
        "parameters": [
          {
            "name": "value",
            "text": "value: unknown",
            "type": "unknown"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/utils/validators/assertions/assertValidFeatureFlag.ts",
    "exports": [
      {
        "type": "function",
        "name": " assertValidFeatureFlag",
        "text": "\n\nexport function assertValidFeatureFlag(ff: unknown): asserts ff is FeatureFlag {\n  if (typeof ff === \"string\" && ff in FeatureFlag) return;\n  throw new TypeError(`Invalid FeatureFlag - ${ff} isn't a valid FeatureFlag`);\n}",
        "parameters": [
          {
            "name": "ff",
            "text": "ff: unknown",
            "type": "unknown"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/utils/validators/assertions/assertValidFeatureFlagConfigKey.ts",
    "exports": [
      {
        "type": "function",
        "name": " assertValidFeatureFlagConfigKey",
        "text": "\n\nexport function assertValidFeatureFlagConfigKey(\n  key: unknown\n): asserts key is FeatureFlagConfigKey {\n  if (typeof key !== \"string\" || !key.startsWith(CONFIG_KEY_PREFIX)) {\n    throw new TypeError(\n      `Invalid FeatureFlagConfigKey - ${key} isn't a valid FeatureFlagConfigKey`\n    );\n  }\n}",
        "parameters": [
          {
            "name": "key",
            "text": "key: unknown",
            "type": "unknown"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/utils/validators/assertions/assertValidFeatureFlagValueSource.ts",
    "exports": [
      {
        "type": "function",
        "name": " assertValidFeatureFlagValueSource",
        "text": "\n\nexport function assertValidFeatureFlagValueSource(\n  source: unknown\n): asserts source is FeatureFlagValueSource {\n  if (typeof source !== 'string') {\n    throw new TypeError(`Invalid FeatureFlagValueSource: ${source} isn't a string.`);\n  }\n\n  // Just using the \"as any\" to make ts quiet.  We have to check source this way.\n  if (!featureFlagValueSources.has(source as any)) {\n    throw new TypeError(`Invalid FeatureFlagValueSource: ${source} isn't in the predefined list.`);\n  }\n}",
        "parameters": [
          {
            "name": "source",
            "text": "source: unknown",
            "type": "unknown"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/utils/validators/assertions/assertValidFeatureFlagValueType.ts",
    "exports": [
      {
        "type": "function",
        "name": " assertValidFeatureFlagValueType",
        "text": "\n\nexport function assertValidFeatureFlagValueType(\n  valType: unknown\n): asserts valType is FeatureFlagValueType {\n  if (\n    typeof valType !== \"string\" ||\n    valType in FeatureFlagValueType === false\n  ) {\n    throw new TypeError(\n      `Invalid FeatureFlagValueType - ${valType} isn't a valid FeatureFlagValueType`\n    );\n  }\n}",
        "parameters": [
          {
            "name": "valType",
            "text": "valType: unknown",
            "type": "unknown"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/utils/validators/assertions/assertValidFeatureFlagValueWithMetaData.ts",
    "exports": [
      {
        "type": "function",
        "name": " assertValidFeatureFlagValueWithMetaData",
        "text": "\n\nexport function assertValidFeatureFlagValueWithMetaData<M extends Mode>(\n  obj: unknown,\n  mode: M\n): asserts obj is M extends 'complete'\n  ? FeatureFlagValueWithMetaData\n  : FeatureFlagValueOrNullWithMetaData {\n  assertValidPOJO(obj, 'FeatureFlagValueWithMetaData');\n  assertHasKeys('FeatureFlagValueWithMetaData', obj, ['value', 'metadata']);\n\n  if (!(mode === 'partial' && obj.value === null)) {\n    assertValidConfigValue(obj.value);\n  }\n\n  assertValidPOJO(obj.metadata, 'FeatureFlagValueWithMetaData[metadata]');\n\n  if ('sources' in obj.metadata) {\n    if (!Array.isArray(obj.metadata.sources)) {\n      throw new TypeError(\n        'Invalid FeatureFlagValueWithMetaData[metadata][sources]:>> \"sources\" must be an array'\n      );\n    }\n\n    for (const source of obj.metadata.sources) {\n      assertValidFeatureFlagValueSource(source);\n    }\n  }\n}",
        "parameters": [
          {
            "name": "obj",
            "text": "obj: unknown",
            "type": "unknown"
          },
          {
            "name": "mode",
            "text": "mode: M",
            "type": "M"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/utils/validators/assertions/assertValidMetaData.ts",
    "exports": [
      {
        "type": "function",
        "name": " assertValidMetadata",
        "text": "\n\nexport function assertValidMetadata(\n  metadata: unknown\n): asserts metadata is Partial<FeatureFlagMetaData> {\n  if (!metadata || typeof metadata !== 'object') {\n    throw new TypeError('Invalid metadata - metadata must be an object');\n  }\n\n  const metadataKeys = Object.keys(metadata).filter(\n    (key): key is FeatureFlag => key in FeatureFlag\n  );\n\n  metadataKeys.forEach((key) => {\n    type UnresolveFeatureFlagMetaData = { [K in FeatureFlag]?: object };\n    const ffMetadata = (metadata as UnresolveFeatureFlagMetaData)[key];\n    if (!ffMetadata) return;\n\n    // check that we have required fields\n    assertHasKeys('metadata', ffMetadata, [\n      'ffKey',\n      'valueType',\n      'combinationMethod',\n      'description',\n      'blockingMethod',\n    ]);\n\n    const { valueType, combinationMethod, description, blockingMethod, ffKey } = ffMetadata;\n\n    if (typeof ffKey !== 'string' || !(ffKey in FeatureFlag)) {\n      throw new TypeError(`Invalid metadata: field \"ffKey\" isn't a valid FeatureFlag`);\n    }\n\n    if (typeof description !== 'string') {\n      throw new TypeError('Invalid metadata: field \"description\" must be a string');\n    }\n\n    if ('blockingText' in ffMetadata && typeof ffMetadata.blockingText !== 'string') {\n      throw new TypeError('Invalid metadata: field \"blockingText\" must be a string if provided');\n    }\n\n    assertValidBlockingMethod(blockingMethod);\n    assertValidFeatureFlagValueType(valueType);\n    assertValidCombinationMethod(combinationMethod);\n\n    if (!validCombos[valueType].has(combinationMethod)) {\n      throw new Error(\n        `metadata provided is invalid - combination method ${combinationMethod} \n        isn't compatible with type ${valueType}`\n      );\n    }\n\n    if ('defaultValue' in ffMetadata && !valueToValueTypeMap[valueType](ffMetadata.defaultValue)) {\n      throw new Error(\n        `defaultValue for metadata provided is invalid - valueType ${valueType} \n        isn't compatible with value ${ffMetadata.defaultValue}`\n      );\n    }\n  });\n}",
        "parameters": [
          {
            "name": "metadata",
            "text": "metadata: unknown",
            "type": "unknown"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/utils/validators/assertions/assertValidPOJO.ts",
    "exports": [
      {
        "type": "function",
        "name": " assertValidPOJO",
        "text": "\n\n/**\n * @description Asserts that an input is a POJO - Plain Old Javascript Object\n * @param obj - The object to check.\n * @param objectName - Optional parameter to allow for more descriptive error messages, in\n * order to specify for what type this check is coming from.\n */\nexport function assertValidPOJO(obj: unknown, objectName?: string): asserts obj is PlainObject {\n  if (typeof obj !== 'object' || !obj || Array.isArray(obj)) {\n    throw new TypeError(`Invalid ${objectName || 'POJO'}: must be non-null/non-array object`);\n  }\n}",
        "parameters": [
          {
            "name": "obj",
            "text": "obj: unknown",
            "type": "unknown"
          },
          {
            "name": "objectName",
            "text": "objectName?: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/utils/validators/assertions/assertValidPackageMetaData.ts",
    "exports": [
      {
        "type": "function",
        "name": " assertValidPackageMetaData",
        "text": "\n\nexport function assertValidPackageMetaData(metadata: unknown): asserts metadata is PackageMetaData {\n  if (!metadata) {\n    throw new TypeError('Invalid PackageMetaData: metadata must be defined.');\n  }\n\n  if (typeof metadata !== 'object') {\n    throw new TypeError('Invalid PackageMetaData: metadata must be an object.');\n  }\n\n  if (!('id' in metadata)) {\n    throw new TypeError('Invalid PackageMetaData: missing field \"id\"');\n  }\n\n  if (!('name' in metadata)) {\n    throw new TypeError('Invalid PackageMetaData: missing field \"name\"');\n  }\n\n  if ('rank' in metadata && typeof metadata.rank !== 'number') {\n    throw new TypeError('Invalid PackageMetaData: rank must be a number');\n  }\n\n  if ('isPackage' in metadata && typeof metadata.isPackage !== 'boolean') {\n    throw new TypeError('Invalid PackageMetaData: isPackage must be a boolean');\n  }\n\n  if ('sources' in metadata) {\n    if (!Array.isArray(metadata.sources)) {\n      throw new TypeError('Invalid PackageMetaData: sources must be an array');\n    }\n\n    for (const source of metadata.sources) {\n      assertValidFeatureFlagValueSource(source);\n    }\n  }\n\n  assertValidFeatureFlagConfigKey(metadata.id);\n\n  if (typeof metadata.name !== 'string') {\n    throw new TypeError(\n      `Invalid PackageMetaData - ${metadata.name}: metadata value must be of type \"string\"`\n    );\n  }\n}",
        "parameters": [
          {
            "name": "metadata",
            "text": "metadata: unknown",
            "type": "unknown"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/utils/validators/assertions/assertValidPackageMetaDataList.ts",
    "exports": [
      {
        "type": "function",
        "name": " assertValidPackageMetaDataList",
        "text": "\n\nexport function assertValidPackageMetaDataList(\n  list: unknown\n): asserts list is PackageMetaData[] {\n  if (!Array.isArray(list)) {\n    throw new TypeError(\"Invalid PackageMetaData[]: list must be an array\");\n  }\n\n  for (const metadata of list) {\n    assertValidPackageMetaData(metadata);\n  }\n}",
        "parameters": [
          {
            "name": "list",
            "text": "list: unknown",
            "type": "unknown"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/utils/validators/assertions/assertValidPackagesConfig.ts",
    "exports": [
      {
        "type": "function",
        "name": " assertValidPackagesConfig",
        "text": "\n\nexport function assertValidPackagesConfig(\n  config: unknown\n): asserts config is FeatureFlagPackagesConfig {\n  if (!config || typeof config !== \"object\") {\n    throw new TypeError(\"Invalid config - config must be an object\");\n  }\n\n  Object.keys(config).forEach((plan) => {\n    assertValidFeatureFlagConfigKey(plan);\n    if (!hasField(config, plan)) return;\n\n    const packageConfig: any = config[plan];\n    if (typeof packageConfig !== \"object\" || packageConfig === null) {\n      throw new Error(\n        `Package config for package \"${plan}\" must be a non-null object`\n      );\n    }\n\n    for (const featureFlag in packageConfig) {\n      if (!(featureFlag in FeatureFlag)) continue;\n\n      const { value } = packageConfig[featureFlag];\n      assertValidConfigValue(value);\n    }\n  });\n}",
        "parameters": [
          {
            "name": "config",
            "text": "config: unknown",
            "type": "unknown"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/utils/validators/assertions/index.ts",
    "exports": []
  },
  {
    "file": "@tw/feature-flag-system/utils/validators/checkers/index.ts",
    "exports": []
  },
  {
    "file": "@tw/feature-flag-system/utils/validators/checkers/isValidFFRankedControlListValue.ts",
    "exports": [
      {
        "name": " isFeatureFlagRankedControlListValue",
        "text": "\n\nexport const isFeatureFlagRankedControlListValue = (\n  v: unknown\n): v is FeatureFlagRankedControlListValue => {\n  if (typeof v !== 'object' || v === null || Array.isArray(v)) return false;\n\n  if (!('type' in v && 'rank' in v && 'id' in v)) return false;\n\n  if (!v.id) return false; // id must be non empty\n\n  return (v.type === 'allow' || v.type === 'block') && typeof v.rank === 'number';\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/utils/validators/checkers/isValidFeatureFlagConfigKey.ts",
    "exports": [
      {
        "type": "function",
        "name": " isValidFeatureFlagConfigKey",
        "text": "\n\nexport function isValidFeatureFlagConfigKey(\n  key: unknown\n): key is FeatureFlagConfigKey {\n  return typeof key === \"string\" && key.startsWith(CONFIG_KEY_PREFIX);\n}",
        "parameters": [
          {
            "name": "key",
            "text": "key: unknown",
            "type": "unknown"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/feature-flag-system/utils/validators/index.ts",
    "exports": []
  },
  {
    "file": "@tw/helpers/activityFeedFormatting.ts",
    "exports": [
      {
        "name": " formatChangeValue",
        "text": "\n\nexport const formatChangeValue = (change: any, currency: string) => {\n  if (!isNaN(change) && !isNaN(parseFloat(change))) {\n    return formatNumber(+change, {\n      currency: currency,\n      style: 'currency',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    });\n  } else return change;\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/helpers/creativeHubMedia.ts",
    "exports": [
      {
        "type": "function",
        "name": " creativeHubMedia",
        "text": "\n\nexport function creativeHubMedia(media: MediaItemType, isStaging = false): MediaItemType {\n  const bucketName = isStaging\n    ? 'file-hosting-bucket-triple-whale-staging'\n    : 'file-hosting-bucket-shofifi';\n  if (!media.url) {\n    let publicUrl = `${storageUrl}/${bucketName}/${media.source}`;\n    switch (media.source) {\n      case 'influencer-creatives':\n        publicUrl += `/${media.media_type}s/${media.shop_id}/${media.custom_id}`;\n        break;\n      case 'products':\n        if (media.service_id === 'shopify') {\n          publicUrl += `/${media.shop_id}/${media.service_id}/${media.custom_id}`;\n        } else {\n          publicUrl += `/${media.shop_id}/${media.service_id}/${media.media_type}s`;\n        }\n        break;\n      default:\n        publicUrl += `/${media.shop_id}/${media.service_id}/${media.media_type}s`;\n        //I dont think this is necessary\n        // if (media.custom_id) {\n        //   publicUrl += `${media.custom_id}/`;\n        // }\n        break;\n    }\n    publicUrl += media.gcs_path;\n    media.url = publicUrl;\n  }\n  if (media.media_type === 'video' && media.thumbnail) {\n    let regex = '/storage.googleapis.com/';\n    if (!media.thumbnail.match(regex)) {\n      let thumbnailUrl = `${storageUrl}/${bucketName}/${media.source}`;\n      switch (media.source) {\n        case 'influencer-creatives':\n          thumbnailUrl += `/${media.media_type}s/${media.shop_id}/${media.custom_id}`;\n          break;\n        default:\n          thumbnailUrl += `/${media.shop_id}/${media.service_id}/thumbnails`;\n          break;\n      }\n      thumbnailUrl += media.thumbnail;\n      media.thumbnail = thumbnailUrl;\n    }\n  }\n  return { ...media };\n}",
        "parameters": [
          {
            "name": "media",
            "text": "media: MediaItemType",
            "type": "MediaItemType"
          },
          {
            "name": "isStaging",
            "text": "isStaging = false",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/helpers/deepMerge.ts",
    "exports": [
      {
        "type": "function",
        "name": " deepMerge",
        "text": "\n\n/**\n * Recursively merges the properties of multiple source objects into a target object.\n * @param target - The target object to merge the sources into.\n * @param sources - The source objects to merge into the target object.\n * @returns The merged object.\n */\nexport function deepMerge(target: any, ...sources: any) {\n  if (!sources.length) return target;\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, { [key]: {} });\n        deepMerge(target[key], source[key]);\n      } else if (Array.isArray(source[key]) && (Array.isArray(target[key]) || !target[key])) {\n        if (!target[key]) Object.assign(target, { [key]: [] });\n        target[key] = target[key].concat(source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return deepMerge(target, ...sources);\n}",
        "parameters": [
          {
            "name": "target",
            "text": "target: any",
            "type": "any"
          },
          {
            "name": "sources",
            "text": "...sources: any",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/helpers/devops.ts",
    "exports": [
      {
        "type": "function",
        "name": " maybeAdd",
        "text": "export function maybeAdd(str: string, add: string, mode: 'append' | 'prepend' = 'append') {\n  if (!str) return '';\n  if (mode == 'append') {\n    return `${str}${add}`;\n  }\n  return `${add}${str}`;\n}",
        "parameters": [
          {
            "name": "str",
            "text": "str: string",
            "type": "string"
          },
          {
            "name": "add",
            "text": "add: string",
            "type": "string"
          },
          {
            "name": "mode",
            "text": "mode: 'append' | 'prepend' = 'append'",
            "type": "'append' | 'prepend'"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/helpers/forecasting/Forecasting.ts",
    "exports": [
      {
        "name": " forecastingRows",
        "text": "\n\nexport const forecastingRows = (\n  products: any[],\n  isScaled: boolean,\n  openAll: boolean,\n  view: string | null = null,\n  hasMoreProducts: boolean = false,\n  adsServicesToDisplay: any[] = []\n): ForecastingRow[] => {\n  if (view === 'cohort') {\n    return cohortForecastingRows(adsServicesToDisplay);\n  } else if (view === 'channel') {\n    return channelForecastingRows(adsServicesToDisplay);\n  } else if (view === 'inventory_revenue' || view === 'inventory_collection_revenue') {\n    return inventoryRevenueForecastingRows(products, isScaled, hasMoreProducts, openAll);\n  } else if (view === 'inventory_units' || view === 'inventory_collection_units') {\n    return inventoryUnitsForecastingRows(products, hasMoreProducts, openAll);\n  } else if (view === 'inventory_days_of_stock') {\n    return inventoryDaysOfStockForecastingRows(products, hasMoreProducts, openAll);\n  } else {\n    return [\n      ...cohortForecastingRows(adsServicesToDisplay),\n      ...channelForecastingRows(adsServicesToDisplay),\n      ...inventoryForecastingRows(products, isScaled, hasMoreProducts, openAll),\n    ];\n  }\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/helpers/forecasting/views/channel.ts",
    "exports": [
      {
        "name": " channelForecastingRows",
        "text": "\n\nexport const channelForecastingRows = (adsServicesToDisplay: string[]): ForecastingRow[] => {\n  return [\n    {\n      name: 'Total Revenue',\n      collapsable: true,\n      level: 1,\n      key: 'All Segments.shop.shopify.total_revenue',\n      type: 'money',\n      children: [\n        {\n          name: 'Paid',\n          collapsable: true,\n          level: 2,\n          key: 'All Segments.paid.All Paid Sources.conversion_value',\n          type: 'money',\n          children: adsServicesToDisplay.map((id) => {\n            return {\n              isAdServiceParentRow: true,\n              adServiceId: id,\n              name: adsServices[id].name,\n              level: 3,\n              key: `All Segments.paid.${id}.conversion_value`,\n              type: 'money',\n              collapsable: true,\n              children: [\n                {\n                  name: 'New Customers',\n                  level: 4,\n                  key: `New Customer.paid.${id}.conversion_value`,\n                  type: 'money',\n                  collapsable: true,\n                  children: [\n                    {\n                      name: 'Ad Spend',\n                      level: 5,\n                      key: `New Customer.paid.${id}.spend`,\n                      type: 'money',\n                    },\n                    {\n                      name: 'ROAs',\n                      level: 5,\n                      key: `New Customer.paid.${id}.reported_ROAS`,\n                      type: 'ratio',\n                    },\n                    {\n                      name: 'AOV',\n                      level: 5,\n                      key: `New Customer.paid.${id}.reported_aov`,\n                      type: 'money',\n                    },\n                    {\n                      name: 'Purchases',\n                      key: `New Customer.paid.${id}.purchases`,\n                      level: 5,\n                      type: 'count',\n                    },\n                    {\n                      name: 'New Customer CPA',\n                      key: `custom.New Customer.${id}.cpa`,\n                      type: 'money',\n                      customKeyFunction: 'divide',\n                      customKey: true,\n                      customKeyData: {\n                        top: `New Customer.paid.${id}.spend`,\n                        bottom: `New Customer.paid.${id}.nc_customer_cnt_attribution`,\n                      },\n                      level: 5,\n                    },\n                  ],\n                },\n                {\n                  name: 'Returning Customers',\n                  level: 4,\n                  key: `custom.Returning Customers.paid.${id}.conversion_value`,\n                  category: 'revenue',\n                  type: 'money',\n                  customKey: true,\n                  customKeyFunction: 'subtract',\n                  customKeyData: [\n                    `All Segments.paid.${id}.conversion_value`,\n                    `New Customer.paid.${id}.conversion_value`,\n                  ],\n                  collapsable: true,\n                  children: [\n                    {\n                      name: 'Ad Spend',\n                      level: 5,\n                      key: `custom.Returning Customer.paid.${id}.spend`,\n                      customKey: true,\n                      customKeyFunction: 'subtract',\n                      customKeyData: [\n                        `All Segments.paid.${id}.spend`,\n                        `New Customer.paid.${id}.spend`,\n                      ],\n                      type: 'money',\n                    },\n                    {\n                      name: 'ROAs',\n                      level: 5,\n                      key: `custom.Returning Customer.paid.${id}.reported_ROAS`,\n                      customKey: true,\n                      customKeyFunction: 'average',\n                      customKeyData: [\n                        `Newly Acquired Customer.paid.${id}.reported_ROAS`,\n                        `Recently Acquired Customer.paid.${id}.reported_ROAS`,\n                        `Non-Recently Acquired Active Customer.paid.${id}.reported_ROAS`,\n                        `Reactivated.paid.${id}.reported_ROAS`,\n                      ],\n                      type: 'ratio',\n                    },\n                    {\n                      name: 'AOV',\n                      level: 5,\n                      key: `custom.Returning Customer.paid.${id}.aov_attribution`,\n                      customKey: true,\n                      customKeyFunction: 'average',\n                      customKeyData: [\n                        `Newly Acquired Customer.paid.${id}.aov_attribution`,\n                        `Recently Acquired Customer.paid.${id}.aov_attribution`,\n                        `Non-Recently Acquired Active Customer.paid.${id}.aov_attribution`,\n                        `Reactivated.paid.${id}.aov_attribution`,\n                      ],\n                      type: 'money',\n                    },\n                    {\n                      name: 'Purchases',\n                      key: `custom.Returning Customer.paid.${id}.purchases`,\n                      customKey: true,\n                      customKeyFunction: 'subtract',\n                      customKeyData: [\n                        `All Segments.paid.${id}.purchases`,\n                        `New Customer.paid.${id}.purchases`,\n                      ],\n                      level: 5,\n                      type: 'count',\n                    },\n                    {\n                      name: 'CPA',\n                      type: 'money',\n                      key: `custom.Returning Customer.${id}.cpa`,\n                      customKeyFunction: 'divide',\n                      customKeyData: {\n                        top: {\n                          customKeyFunction: 'subtract',\n                          customKeyData: [\n                            `All Segments.paid.${id}.spend`,\n                            `New Customer.paid.${id}.spend`,\n                          ],\n                          type: 'money',\n                        },\n                        bottom: {\n                          customKeyFunction: 'subtract',\n                          customKeyData: [\n                            `All Segments.paid.${id}.customer_cnt_attribution`,\n                            `New Customer.paid.${id}.customer_cnt_attribution`,\n                          ],\n                          type: 'count',\n                        },\n                      },\n                      customKey: true,\n                      level: 5,\n                    },\n                  ],\n                },\n              ],\n            };\n          }),\n        },\n        {\n          name: 'Organic',\n          collapsable: true,\n          level: 2,\n          key: 'All Segments.organic.organic.total_price_attribution',\n          type: 'money',\n          children: [\n            {\n              name: 'New Customers',\n              level: 3,\n              key: `New Customer.organic.organic.total_price_attribution`,\n              type: 'money',\n              collapsable: true,\n              children: [\n                {\n                  name: 'Pixel New Unique Visitors',\n                  key: `New Customer.organic.organic.new_visitor_count`,\n                  level: 4,\n                  type: 'count',\n                },\n                {\n                  name: 'Pixel NC Conversion Rate',\n                  key: `New Customer.organic.organic.nc_conversion_rate`,\n                  level: 4,\n                  type: 'ratio',\n                },\n                {\n                  name: 'Pixel NC AOV',\n                  key: `New Customer.organic.organic.nc_aov_attribution`,\n                  level: 4,\n                  type: 'money',\n                },\n                {\n                  name: 'Pixel New Customers',\n                  key: `New Customer.organic.organic.nc_customer_cnt_attribution`,\n                  level: 4,\n                  type: 'count',\n                },\n              ],\n            },\n            {\n              name: 'Returning Customers',\n              level: 3,\n              type: 'money',\n              key: `custom.Returning Customer.organic.organic.total_price_attribution`,\n              customKey: true,\n              customKeyFunction: 'subtract',\n              customKeyData: [\n                'All Segments.organic.organic.total_price_attribution',\n                'New Customer.organic.organic.total_price_attribution',\n              ],\n              collapsable: true,\n              children: [\n                {\n                  name: 'Pixel Unique Visitors',\n                  customKey: true,\n                  key: `custom.Returning Customer.organic.organic.new_visitor_count`,\n                  level: 4,\n                  type: 'count',\n                },\n                {\n                  name: 'Pixel Conversion Rate',\n                  customKey: true,\n                  key: `custom.Returning Customer.organic.organic.nc_conversion_rate`,\n                  level: 4,\n                  type: 'ratio',\n                },\n                {\n                  name: 'Pixel AOV',\n                  key: `custom.Returing Customer.organic.organic.aov_attribution`,\n                  level: 4,\n                  customKey: true,\n                  customKeyFunction: 'average',\n                  customKeyData: [\n                    'Newly Acquired Customer.organic.organic.aov_attribution',\n                    'Recently Acquired Customer.organic.organic.aov_attribution',\n                    'Non-Recently Acquired Active Customer.organic.organic.aov_attribution',\n                    'Reactivated.organic.organic.aov_attribution',\n                  ],\n                  type: 'money',\n                },\n                {\n                  name: 'Pixel Customers',\n                  key: `custom.Returning Customer.organic.organic.customer_cnt_attribution`,\n                  level: 4,\n                  type: 'count',\n                  customKey: true,\n                  customKeyFunction: 'subtract',\n                  customKeyData: [\n                    'All Segments.organic.organic.customer_cnt_attribution',\n                    'New Customer.organic.organic.customer_cnt_attribution',\n                  ],\n                },\n              ],\n            },\n          ],\n        },\n        {\n          name: 'Other',\n          collapsable: true,\n          level: 2,\n          key: 'All Segments.other.other.total_price_attribution',\n          type: 'money',\n          children: [\n            {\n              name: 'New Customers',\n              level: 3,\n              key: `New Customer.other.other.total_price_attribution`,\n              type: 'money',\n              collapsable: true,\n              children: [\n                {\n                  name: 'Pixel New Unique Visitors',\n                  key: `New Customer.other.other.new_visitor_count`,\n                  level: 4,\n                  type: 'count',\n                },\n                {\n                  name: 'Pixel NC Conversion Rate',\n                  key: `New Customer.other.other.nc_conversion_rate`,\n                  level: 4,\n                  type: 'ratio',\n                },\n                {\n                  name: 'Pixel NC AOV',\n                  key: `New Customer.other.other.nc_aov_attribution`,\n                  level: 4,\n                  type: 'money',\n                },\n                {\n                  name: 'Pixel New Customers',\n                  key: `New Customer.other.other.nc_customer_cnt_attribution`,\n                  level: 4,\n                  type: 'count',\n                },\n              ],\n            },\n            {\n              name: 'Returning Customers',\n              level: 3,\n              type: 'money',\n              key: `custom.Returning Customer.other.other.total_price_attribution`,\n              customKey: true,\n              customKeyFunction: 'subtract',\n              customKeyData: [\n                'All Segments.other.other.total_price_attribution',\n                'New Customer.other.other.total_price_attribution',\n              ],\n              collapsable: true,\n              children: [\n                {\n                  name: 'Pixel Unique Visitors',\n                  customKey: true,\n                  key: `custom.Returning Customer.other.other.new_visitor_count`,\n                  level: 4,\n                  type: 'count',\n                },\n                {\n                  name: 'Pixel Conversion Rate',\n                  customKey: true,\n                  key: `custom.Returning Customer.other.other.nc_conversion_rate`,\n                  level: 4,\n                  type: 'ratio',\n                },\n                {\n                  name: 'Pixel AOV',\n                  key: `custom.Returing Customer.other.other.aov_attribution`,\n                  level: 4,\n                  customKey: true,\n                  customKeyFunction: 'average',\n                  customKeyData: [\n                    'Newly Acquired Customer.other.other.aov_attribution',\n                    'Recently Acquired Customer.other.other.aov_attribution',\n                    'Non-Recently Acquired Active Customer.other.other.aov_attribution',\n                    'Reactivated.other.other.aov_attribution',\n                  ],\n                  type: 'money',\n                },\n                {\n                  name: 'Pixel Customers',\n                  key: `custom.Returning Customer.other.other.customer_cnt_attribution`,\n                  level: 4,\n                  type: 'count',\n                  customKey: true,\n                  customKeyFunction: 'subtract',\n                  customKeyData: [\n                    'All Segments.other.other.customer_cnt_attribution',\n                    'New Customer.other.other.customer_cnt_attribution',\n                  ],\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    },\n  ];\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/helpers/forecasting/views/cohort.ts",
    "exports": [
      {
        "name": " cohortForecastingRows",
        "text": "\n\nexport const cohortForecastingRows = (adsServicesToDisplay: string[]): ForecastingRow[] => {\n  return [\n    {\n      name: 'Total Revenue',\n      collapsable: true,\n      level: 1,\n      key: 'All Segments.shop.shopify.total_revenue',\n      type: 'money',\n      children: [\n        {\n          name: 'New Customer Revenue',\n          collapsable: true,\n          key: 'New Customer.shop.shopify.total_revenue',\n          level: 2,\n          type: 'money',\n          children: [\n            {\n              name: 'Paid',\n              collapsable: true,\n              key: 'New Customer.paid.All Paid Sources.conversion_value',\n              // customKeyFunction: 'sum',\n              // customKey: true,\n              // customKeyData: adsServicesToDisplay.map(\n              //   (id) => `New Customer.paid.${id}.total_price_attribution`\n              // ),\n              type: 'money',\n              level: 3,\n              children: adsServicesToDisplay.map((id) => ({\n                level: 4,\n                name: adsServices[id].name,\n                isAdServiceParentRow: true,\n                adServiceId: id,\n                collapsable: true,\n                key: `New Customer.paid.${id}.conversion_value`,\n                type: 'money',\n                children: [\n                  {\n                    name: 'Ad Spend',\n                    level: 5,\n                    key: `New Customer.paid.${id}.spend`,\n                    type: 'money',\n                  },\n                  {\n                    name: 'New Customer ROAS',\n                    key: `New Customer.paid.${id}.reported_ROAS`,\n                    level: 5,\n                    type: 'ratio',\n                  },\n                  {\n                    name: 'New Customer AOV',\n                    key: `New Customer.paid.${id}.reported_aov`,\n                    level: 5,\n                    type: 'money',\n                  },\n                  {\n                    name: 'New Customer Purchases',\n                    key: `New Customer.paid.${id}.purchases`,\n                    level: 5,\n                    type: 'count',\n                  },\n                  {\n                    name: 'New Customer CPA',\n                    key: `custom.New Customer.${id}.cpa`,\n                    type: 'money',\n                    customKeyFunction: 'divide',\n                    customKey: true,\n                    customKeyData: {\n                      top: `New Customer.paid.${id}.spend`,\n                      bottom: `New Customer.paid.${id}.nc_customer_cnt_attribution`,\n                    },\n                    level: 5,\n                  },\n                ],\n              })),\n            },\n            {\n              name: 'Organic',\n              collapsable: true,\n              key: `New Customer.organic.organic.total_price_attribution`,\n              type: 'money',\n              level: 3,\n              children: [\n                {\n                  name: 'Pixel New Unique Visitors',\n                  key: `New Customer.organic.organic.new_visitor_count`,\n                  level: 4,\n                  type: 'count',\n                },\n                {\n                  name: 'Pixel NC Conversion Rate',\n                  key: `New Customer.organic.organic.nc_conversion_rate`,\n                  level: 4,\n                  type: 'ratio',\n                },\n                {\n                  name: 'Pixel NC AOV',\n                  key: `New Customer.organic.organic.nc_aov_attribution`,\n                  level: 4,\n                  type: 'money',\n                },\n                {\n                  name: 'Pixel New Customers',\n                  key: `New Customer.organic.organic.nc_customer_cnt_attribution`,\n                  level: 4,\n                  type: 'count',\n                },\n              ],\n            },\n            {\n              name: 'Other',\n              key: `New Customer.other.other.total_price_attribution`,\n              type: 'money',\n              collapsable: true,\n              level: 3,\n              children: [\n                {\n                  name: 'Pixel New Unique Visitors',\n                  key: `New Customer.other.other.new_visitor_count`,\n                  type: 'count',\n                  level: 4,\n                },\n                {\n                  name: 'Pixel NC Conversion Rate',\n                  key: `New Customer.other.other.nc_conversion_rate`,\n                  type: 'ratio',\n                  level: 4,\n                },\n                {\n                  name: 'Pixel NC AOV',\n                  key: `New Customer.other.other.nc_aov_attribution`,\n                  type: 'money',\n                  level: 4,\n                },\n                {\n                  name: 'Pixel New Customers',\n                  key: `New Customer.other.other.nc_customer_cnt_attribution`,\n                  level: 4,\n                  type: 'count',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          name: 'Returning Customer Revenue',\n          key: 'custom.Returning Customer.revenue',\n          type: 'money',\n          customKeyFunction: 'sum',\n          customKey: true,\n          customKeyData: returningCustomerSegmentTypes.map((s) => {\n            return `${s.id}.shop.shopify.total_revenue`;\n          }),\n          collapsable: true,\n          level: 2,\n\n          children: [\n            {\n              name: 'Revenue By Segment',\n              key: 'custom.Returning Customer.by_segment',\n              type: 'money',\n              customKeyFunction: 'sum',\n              customKey: true,\n              customKeyData: returningCustomerSegmentTypes.map((s) => {\n                return `${s.id}.shop.shopify.total_revenue`;\n              }),\n              collapsable: true,\n              level: 3,\n              children: returningCustomerSegmentTypes.map((s) => {\n                return {\n                  name: s.title,\n                  key: `${s.id}.shop.shopify.total_revenue`,\n                  type: 'money',\n                  level: 4,\n                };\n              }),\n            },\n            {\n              name: 'Number of Customers',\n              collapsable: true,\n              level: 3,\n              type: 'count',\n              key: 'All Segments.shop.shopify.num_customers',\n              children: segmentedSegmentTypes.map((s) => {\n                return {\n                  name: s.title,\n                  key: `${s.id}.shop.shopify.num_customers`,\n                  type: 'money',\n                  level: 4,\n                };\n              }),\n            },\n            {\n              name: 'Orders',\n              collapsable: true,\n              level: 3,\n              type: 'count',\n              key: 'All Segments.shop.shopify.order_cnt',\n              children: segmentedSegmentTypes.map((s) => {\n                return {\n                  name: s.title,\n                  key: `${s.id}.shop.shopify.order_cnt`,\n                  type: 'money',\n                  level: 4,\n                };\n              }),\n            },\n            {\n              name: 'AOV',\n              collapsable: true,\n              key: 'All Segments.shop.shopify.aov',\n              type: 'money',\n              level: 3,\n              children: segmentedSegmentTypes.map((s) => {\n                return {\n                  name: s.title,\n                  key: `${s.id}.shop.shopify.aov`,\n                  type: 'money',\n                  level: 4,\n                };\n              }),\n            },\n            {\n              name: 'Repeat Purchase Rates',\n              key: 'All Segments.shop.shopify.purchase_rate',\n              collapsable: true,\n              type: 'ratio',\n              level: 3,\n              children: segmentedSegmentTypes.map((s) => {\n                return {\n                  name: s.title,\n                  key: `${s.id}.shop.shopify.purchase_rate`,\n                  type: 'money',\n                  level: 4,\n                };\n              }),\n            },\n          ],\n        },\n      ],\n    },\n  ];\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/helpers/forecasting/views/cohortRecapture.ts",
    "exports": [
      {
        "name": " cohortRecaptureForecastingRow",
        "text": "\n\nexport const cohortRecaptureForecastingRow = (adsServicesToDisplay: string[]): ForecastingRow[] => {\n  return [\n    {\n      name: 'Total Revenue',\n      collapsable: true,\n      level: 1,\n      key: 'All Segments.shop.shopify.total_revenue',\n      type: 'money',\n      children: [\n        {\n          name: 'New Customer Revenue',\n          collapsable: true,\n          key: 'New Customer.shop.shopify.total_revenue',\n          level: 2,\n          type: 'money',\n          children: [\n            {\n              name: 'Paid',\n              collapsable: true,\n              key: 'New Customer.paid.All Paid Sources.conversion_value',\n              // customKeyFunction: 'sum',\n              // customKey: true,\n              // customKeyData: adsServicesToDisplay.map((id) => {\n              //   return `New Customer.paid.${id}.total_price_attribution`;\n              // }),\n              type: 'money',\n              level: 3,\n              children: adsServicesToDisplay.map((id) => ({\n                level: 4,\n                name: adsServices[id].name,\n                isAdServiceParentRow: true,\n                adServiceId: id,\n                collapsable: true,\n                key: `New Customer.paid.${id}.conversion_value`,\n                type: 'money',\n                children: [\n                  {\n                    name: 'Ad Spend',\n                    level: 5,\n                    key: `New Customer.paid.${id}.spend`,\n                    type: 'money',\n                  },\n                  {\n                    name: 'New Customer ROAS',\n                    key: `New Customer.paid.${id}.reported_ROAS`,\n                    level: 5,\n                    type: 'ratio',\n                  },\n                  {\n                    name: 'New Customer AOV',\n                    key: `New Customer.paid.${id}.reported_aov`,\n                    level: 5,\n                    type: 'money',\n                  },\n                  {\n                    name: 'New Customer Purchases',\n                    key: `New Customer.paid.${id}.purchases`,\n                    level: 5,\n                    type: 'count',\n                  },\n                  {\n                    name: 'New Customer CPA',\n                    key: `custom.New Customer.${id}.cpa`,\n                    type: 'money',\n                    customKeyFunction: 'divide',\n                    customKey: true,\n                    customKeyData: {\n                      top: `New Customer.paid.${id}.spend`,\n                      bottom: `New Customer.paid.${id}.nc_customer_cnt_attribution`,\n                    },\n                    level: 5,\n                  },\n                ],\n              })),\n            },\n            {\n              name: 'Organic',\n              collapsable: true,\n              key: `New Customer.organic.organic.total_price_attribution`,\n              type: 'money',\n              level: 3,\n              children: [\n                {\n                  name: 'Pixel New Unique Visitors',\n                  key: `New Customer.organic.organic.new_visitor_count`,\n                  level: 4,\n                  type: 'count',\n                },\n                {\n                  name: 'Pixel NC Conversion Rate',\n                  key: `New Customer.organic.organic.nc_conversion_rate`,\n                  level: 4,\n                  type: 'ratio',\n                },\n                {\n                  name: 'Pixel NC AOV',\n                  key: `New Customer.organic.organic.nc_aov_attribution`,\n                  level: 4,\n                  type: 'money',\n                },\n                {\n                  name: 'Pixel New Customers',\n                  key: `New Customer.organic.organic.nc_customer_cnt_attribution`,\n                  level: 4,\n                  type: 'count',\n                },\n              ],\n            },\n            {\n              name: 'Other',\n              key: `New Customer.other.other.total_price_attribution`,\n              type: 'money',\n              collapsable: true,\n              level: 3,\n              children: [\n                {\n                  name: 'Pixel New Unique Visitors',\n                  key: `New Customer.other.other.new_visitor_count`,\n                  type: 'count',\n                  level: 4,\n                },\n                {\n                  name: 'Pixel NC Conversion Rate',\n                  key: `New Customer.other.other.nc_conversion_rate`,\n                  type: 'ratio',\n                  level: 4,\n                },\n                {\n                  name: 'Pixel NC AOV',\n                  key: `New Customer.other.other.nc_aov_attribution`,\n                  type: 'money',\n                  level: 4,\n                },\n                {\n                  name: 'Pixel New Customers',\n                  key: `New Customer.other.other.nc_customer_cnt_attribution`,\n                  level: 4,\n                  type: 'count',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          name: 'Returning Customer Revenue',\n          key: 'custom.Returning Customer.revenue',\n          type: 'money',\n          customKeyFunction: 'sum',\n          customKey: true,\n          customKeyData: returningCustomerSegmentTypes.map((s) => {\n            return `${s.id}.shop.shopify.total_revenue`;\n          }),\n          collapsable: true,\n          level: 2,\n\n          children: [\n            {\n              name: 'Paid',\n              collapsable: true,\n              key: 'custom.Returning Customer.paid.All Paid Sources.conversion_value',\n              customKeyFunction: 'sum',\n              customKey: true,\n              customKeyData: adsServicesToDisplay\n                .map((id) => {\n                  return [\n                    `Newly Acquired Customer.paid.${id}.conversion_value`,\n                    `Recently Acquired Customer.paid.${id}.conversion_value`,\n                    `Non-Recently Acquired Active Customer.paid.${id}.conversion_value`,\n                    `Reactivated.paid.${id}.conversion_value`,\n                  ];\n                })\n                .flat(),\n              type: 'money',\n              level: 3,\n              children: adsServicesToDisplay.map(\n                (id): ForecastingRow => ({\n                  level: 4,\n                  name: adsServices[id].name,\n                  isAdServiceParentRow: true,\n                  adService: id,\n                  collapsable: true,\n                  key: `custom.paid.${id}.conversion_value`,\n                  customKey: true,\n                  type: 'money',\n                  customKeyFunction: 'subtract',\n                  customKeyData: [\n                    `All Segments.paid.${id}.conversion_value`,\n                    `New Customer.paid.${id}.conversion_value`,\n                  ],\n                  children: [\n                    {\n                      name: 'Ad Spend',\n                      level: 5,\n                      key: `custom.Returning Customer.paid.${id}.spend`,\n                      collapsable: true,\n                      customKey: true,\n                      customKeyFunction: 'subtract',\n                      customKeyData: [\n                        `All Segments.paid.${id}.spend`,\n                        `New Customer.paid.${id}.spend`,\n                      ],\n                      type: 'money',\n                      children: returningCustomerSegmentTypes.map((s) => {\n                        return {\n                          name: s.title,\n                          key: `${s.id}.paid.${id}.spend`,\n                          type: 'money',\n                          level: 6,\n                        };\n                      }),\n                    },\n                    {\n                      name: 'ROAS',\n                      key: `custom.Returning Customer.paid.${id}.reported_ROAS`,\n                      collapsable: true,\n                      customKey: true,\n                      customKeyFunction: 'average',\n                      customKeyData: [\n                        `Newly Acquired Customer.paid.${id}.reported_ROAS`,\n                        `Recently Acquired Customer.paid.${id}.reported_ROAS`,\n                        `Non-Recently Acquired Active Customer.paid.${id}.reported_ROAS`,\n                        `Reactivated.paid.${id}.reported_ROAS`,\n                      ],\n                      level: 5,\n                      type: 'ratio',\n                      children: returningCustomerSegmentTypes.map((s) => {\n                        return {\n                          name: s.title,\n                          key: `${s.id}.paid.${id}.reported_ROAS`,\n                          type: 'ratio',\n                          level: 6,\n                        };\n                      }),\n                    },\n                    {\n                      name: 'AOV',\n                      key: `custom.Returning Customer.paid.${id}.aov_attribution`,\n                      collapsable: true,\n                      customKey: true,\n                      customKeyFunction: 'average',\n                      customKeyData: [\n                        `Newly Acquired Customer.paid.${id}.aov_attribution`,\n                        `Recently Acquired Customer.paid.${id}.aov_attribution`,\n                        `Non-Recently Acquired Active Customer.paid.${id}.aov_attribution`,\n                        `Reactivated.paid.${id}.aov_attribution`,\n                      ],\n                      level: 5,\n                      type: 'money',\n                      children: returningCustomerSegmentTypes.map((s) => {\n                        return {\n                          name: s.title,\n                          key: `${s.id}.paid.${id}.aov_attribution`,\n                          type: 'money',\n                          level: 6,\n                        };\n                      }),\n                    },\n                    {\n                      name: 'Customers',\n                      key: `custom.Returning Customer.paid.${id}.purchases`,\n                      collapsable: true,\n                      customKey: true,\n                      customKeyFunction: 'subtract',\n                      customKeyData: [\n                        `All Segments.paid.${id}.purchases`,\n                        `New Customer.paid.${id}.purchases`,\n                      ],\n                      level: 5,\n                      type: 'count',\n                      children: returningCustomerSegmentTypes.map((s) => {\n                        return {\n                          name: s.title,\n                          key: `${s.id}.paid.${id}.purchases`,\n                          type: 'count',\n                          level: 6,\n                        };\n                      }),\n                    },\n                    {\n                      name: 'CPA',\n                      key: `custom.Returning Customer.${id}.cpa`,\n                      type: 'money',\n                      collapsable: true,\n                      customKeyFunction: 'divide',\n                      customKeyData: {\n                        top: {\n                          customKeyFunction: 'subtract',\n                          customKeyData: [\n                            `All Segments.paid.${id}.spend`,\n                            `New Customer.paid.${id}.spend`,\n                          ],\n                          type: 'money',\n                        },\n                        bottom: {\n                          customKeyFunction: 'subtract',\n                          customKeyData: [\n                            `All Segments.paid.${id}.customer_cnt_attribution`,\n                            `New Customer.paid.${id}.customer_cnt_attribution`,\n                          ],\n                          type: 'count',\n                        },\n                      },\n                      customKey: true,\n                      level: 5,\n                      children: returningCustomerSegmentTypes.map((s) => {\n                        return {\n                          name: s.title,\n                          key: `custom.${s.id}.paid.${id}.cpa`,\n                          type: 'count',\n                          customKey: true,\n                          customKeyFunction: 'divide',\n                          customKeyData: {\n                            top: `${s.id}.paid.${id}.spend`,\n                            bottom: `${s.id}.paid.${id}.customer_cnt_attribution`,\n                          },\n                          level: 6,\n                        };\n                      }),\n                    },\n                  ],\n                })\n              ),\n            },\n            {\n              name: 'Organic',\n              collapsable: true,\n              key: `custom.Returning Customer.organic.organic.total_price_attribution`,\n              customKey: true,\n              customKeyFunction: 'subtract',\n              customKeyData: [\n                'All Segments.organic.organic.total_price_attribution',\n                'New Customer.organic.organic.total_price_attribution',\n              ],\n              type: 'money',\n              level: 3,\n              children: [\n                {\n                  name: 'Pixel Unique Visitors',\n                  customKey: true,\n                  key: `custom.New Customer.organic.organic.new_visitor_count`,\n                  level: 4,\n                  type: 'count',\n                },\n                {\n                  name: 'Pixel Conversion Rate',\n                  customKey: true,\n                  key: `custom.New Customer.organic.organic.nc_conversion_rate`,\n                  level: 4,\n                  type: 'ratio',\n                },\n                {\n                  name: 'Pixel AOV',\n                  key: `custom.Returing Customer.organic.organic.aov_attribution`,\n                  level: 4,\n                  customKey: true,\n                  customKeyFunction: 'average',\n                  customKeyData: [\n                    'Newly Acquired Customer.organic.organic.aov_attribution',\n                    'Recently Acquired Customer.organic.organic.aov_attribution',\n                    'Non-Recently Acquired Active Customer.organic.organic.aov_attribution',\n                    'Reactivated.organic.organic.aov_attribution',\n                  ],\n                  type: 'money',\n                  collapsable: true,\n                  children: returningCustomerSegmentTypes.map((s) => {\n                    return {\n                      name: s.title,\n                      key: `${s.id}.organic.organic.aov_attribution`,\n                      type: 'money',\n                      level: 6,\n                    };\n                  }),\n                },\n                {\n                  name: 'Pixel Customers',\n                  key: `custom.Returning Customer.organic.organic.customer_cnt_attribution`,\n                  level: 4,\n                  type: 'count',\n                  customKey: true,\n                  customKeyFunction: 'subtract',\n                  customKeyData: [\n                    'All Segments.organic.organic.customer_cnt_attribution',\n                    'New Customer.organic.organic.customer_cnt_attribution',\n                  ],\n                  collapsable: true,\n                  children: returningCustomerSegmentTypes.map((s) => {\n                    return {\n                      name: s.title,\n                      key: `${s.id}.organic.organic.customer_cnt_attribution`,\n                      type: 'count',\n                      level: 6,\n                    };\n                  }),\n                },\n              ],\n            },\n            {\n              name: 'Other',\n              collapsable: true,\n              key: `custom.Returning Customer.other.other.total_price_attribution`,\n              customKey: true,\n              customKeyFunction: 'subtract',\n              customKeyData: [\n                'All Segments.other.other.total_price_attribution',\n                'New Customer.other.other.total_price_attribution',\n              ],\n              type: 'money',\n              level: 3,\n              children: [\n                {\n                  name: 'Pixel Unique Visitors',\n                  customKey: true,\n                  key: `custom.Returning Customer.other.other.new_visitor_count`,\n                  level: 4,\n                  type: 'count',\n                },\n                {\n                  name: 'Pixel Conversion Rate',\n                  customKey: true,\n                  key: `custom.Returning Customer.other.other.nc_conversion_rate`,\n                  level: 4,\n                  type: 'ratio',\n                },\n                {\n                  name: 'Pixel AOV',\n                  key: `custom.Returing Customer.other.other.aov_attribution`,\n                  level: 4,\n                  customKey: true,\n                  customKeyFunction: 'average',\n                  customKeyData: [\n                    'Newly Acquired Customer.other.other.aov_attribution',\n                    'Recently Acquired Customer.other.other.aov_attribution',\n                    'Non-Recently Acquired Active Customer.other.other.aov_attribution',\n                    'Reactivated.other.other.aov_attribution',\n                  ],\n                  type: 'money',\n                  collapsable: true,\n                  children: returningCustomerSegmentTypes.map((s) => {\n                    return {\n                      name: s.title,\n                      key: `${s.id}.other.other.aov_attribution`,\n                      type: 'money',\n                      level: 6,\n                    };\n                  }),\n                },\n                {\n                  name: 'Pixel Customers',\n                  key: `custom.Returning Customer.other.other.customer_cnt_attribution`,\n                  level: 4,\n                  type: 'count',\n                  customKey: true,\n                  customKeyFunction: 'subtract',\n                  customKeyData: [\n                    'All Segments.other.other.customer_cnt_attribution',\n                    'New Customer.other.other.customer_cnt_attribution',\n                  ],\n                  collapsable: true,\n                  children: returningCustomerSegmentTypes.map((s) => {\n                    return {\n                      name: s.title,\n                      key: `${s.id}.other.other.customer_cnt_attribution`,\n                      type: 'count',\n                      level: 6,\n                    };\n                  }),\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    },\n  ];\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/helpers/forecasting/views/inventory.ts",
    "exports": [
      {
        "name": " inventoryForecastingRows",
        "text": "\n\nexport const inventoryForecastingRows = (\n  products: any[],\n  isScaled: boolean,\n  hasMoreProducts: boolean = false,\n  openAll: boolean = false\n): ForecastingRow[] => {\n  const productsToDisplay = products.filter((prod) => {\n    return prod.id !== 'all_products';\n  });\n  return [\n    {\n      name: 'Orders',\n      collapsable: false,\n      key: 'all_products.product_orders_count',\n      level: 1,\n      type: 'count',\n    },\n    {\n      name: 'Average line items/order',\n      key: 'custom.avg_line_items_per_order',\n      customKeyFunction: 'divide',\n      customKey: true,\n      customKeyData: {\n        top: 'all_products.product_total_quantity',\n        bottom: 'all_products.product_orders_count',\n      },\n      type: 'count',\n      collapsable: false,\n      level: 1,\n    },\n    {\n      name: 'Mix',\n      collapsable: true,\n      key: 'all_products.product_catalog_ratio_mix_by_quantity',\n      level: 1,\n      type: 'ratio',\n      children: [\n        {\n          key: 'search',\n          name: 'Search',\n          level: 2,\n          collapsable: false,\n          hidden: openAll,\n          type: 'count',\n        },\n        ...productsToDisplay.map(\n          (prod): ForecastingRow => ({\n            level: 2,\n            name: prod.title,\n            key: `${prod.id}.product_catalog_ratio_mix_by_quantity`,\n            type: 'ratio',\n            collapsable: prod?.num_variants > 1,\n            isParentProductRow: true,\n            children:\n              prod?.num_variants > 1\n                ? prod.variants\n                  ? prod.variants.map((v: any) => ({\n                      key: `${v.id}.product_catalog_ratio_mix_by_quantity`,\n                      level: 3,\n                      name: v.title,\n                    }))\n                  : [{ level: 3, name: '', key: 'spinner', type: 'count' }]\n                : null,\n          })\n        ),\n        {\n          name: 'Pagination',\n          key: 'pagination',\n          level: 2,\n          type: 'count',\n          collapsable: false,\n          hidden: openAll || !hasMoreProducts,\n        },\n      ],\n    },\n    {\n      name: 'Revenue',\n      collapsable: true,\n      type: 'money',\n      key: isScaled\n        ? 'all_products.product_total_revenue_scaled'\n        : 'all_products.product_total_revenue',\n      level: 1,\n      children: [\n        {\n          name: 'Search',\n          key: 'search',\n          type: 'count',\n          level: 2,\n          collapsable: false,\n        },\n        ...productsToDisplay.map(\n          (prod): ForecastingRow => ({\n            level: 2,\n            name: prod.title,\n            key: isScaled\n              ? `${prod.id}.product_total_revenue_scaled`\n              : `${prod.id}.product_total_revenue`,\n            collapsable: prod?.num_variants > 1,\n            isParentProductRow: true,\n            type: 'money',\n            children:\n              prod?.num_variants > 1\n                ? prod.variants\n                  ? prod.variants.map((v: any) => ({\n                      key: isScaled\n                        ? `${v.id}.product_total_revenue_scaled`\n                        : `${v.id}.product_total_revenue`,\n                      level: 3,\n                      name: v.title,\n                    }))\n                  : [{ level: 3, name: '', key: 'spinner', type: 'count' }]\n                : null,\n          })\n        ),\n        {\n          type: 'count',\n          key: 'pagination',\n          name: 'Pagination',\n          level: 2,\n          collapsable: false,\n          hidden: openAll || !hasMoreProducts,\n        },\n      ],\n    },\n    {\n      name: 'Gross Units',\n      collapsable: true,\n      level: 1,\n      key: 'all_products.product_total_quantity',\n      type: 'count',\n      children: [\n        {\n          name: 'Search',\n          key: 'search',\n          level: 2,\n          collapsable: false,\n          type: 'count',\n        },\n        ...productsToDisplay.map(\n          (prod): ForecastingRow => ({\n            level: 2,\n            key: `${prod.id}.product_total_quantity`,\n            name: prod.title,\n            collapsable: prod?.num_variants > 1,\n            isParentProductRow: true,\n            type: 'count',\n            children:\n              prod?.num_variants > 1\n                ? prod.variants\n                  ? prod.variants.map((v: any) => ({\n                      level: 3,\n                      key: `${v.id}.product_total_quantity`,\n                      name: v.title,\n                    }))\n                  : [{ type: 'count', level: 3, name: '', key: 'spinner' }]\n                : null,\n          })\n        ),\n        {\n          type: 'count',\n          name: 'Pagination',\n          key: 'pagination',\n          level: 2,\n          collapsable: false,\n          hidden: openAll || !hasMoreProducts,\n        },\n      ],\n    },\n    {\n      name: 'Days of Stock',\n      collapsable: true,\n      key: 'all_products.stock_level_days',\n      level: 1,\n      type: 'count',\n      children: [\n        {\n          type: 'count',\n          name: 'Search',\n          key: 'search',\n          level: 2,\n          collapsable: false,\n        },\n        ...productsToDisplay.map(\n          (prod): ForecastingRow => ({\n            level: 2,\n            name: prod.title,\n            type: 'count',\n            collapsable: prod?.num_variants > 1,\n            isParentProductRow: true,\n            key: `${prod.id}.stock_level_days`,\n            children:\n              prod?.num_variants > 1\n                ? prod.variants\n                  ? prod.variants.map((v: any) => ({\n                      level: 3,\n                      key: `${v.id}.stock_level_days`,\n                      name: v.title,\n                    }))\n                  : [{ type: 'count', level: 3, name: '', key: 'spinner' }]\n                : null,\n          })\n        ),\n        {\n          type: 'count',\n          name: 'Pagination',\n          key: 'pagination',\n          level: 2,\n          collapsable: false,\n          hidden: openAll || !hasMoreProducts,\n        },\n      ],\n    },\n  ];\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/helpers/forecasting/views/inventoryDaysOfStock.ts",
    "exports": [
      {
        "name": " inventoryDaysOfStockForecastingRows",
        "text": "\n\nexport const inventoryDaysOfStockForecastingRows = (\n  products: any[],\n  hasMoreProducts: boolean = false,\n  openAll: boolean = false\n): ForecastingRow[] => {\n  const productsToDisplay = products.filter((prod) => {\n    return prod.id !== 'all_products';\n  });\n  return [\n    {\n      name: 'Days of Stock',\n      collapsable: true,\n      key: 'all_products.stock_level_days',\n      level: 1,\n      type: 'count',\n      children: [\n        {\n          type: 'count',\n          name: 'Search',\n          key: 'search',\n          level: 2,\n          collapsable: false,\n        },\n        ...productsToDisplay.map(\n          (prod): ForecastingRow => ({\n            level: 2,\n            name: prod.title,\n            type: 'count',\n            collapsable: prod?.num_variants > 1,\n            isParentProductRow: true,\n            key: `${prod.id}.stock_level_days`,\n            children:\n              prod?.num_variants > 1\n                ? prod.variants\n                  ? prod.variants.map((v: any) => ({\n                      level: 3,\n                      key: `${v.id}.stock_level_days`,\n                      name: v.title,\n                    }))\n                  : [{ type: 'count', level: 3, name: '', key: 'spinner' }]\n                : null,\n          })\n        ),\n        {\n          type: 'count',\n          name: 'Pagination',\n          key: 'pagination',\n          level: 2,\n          collapsable: false,\n          hidden: openAll || !hasMoreProducts,\n        },\n      ],\n    },\n  ];\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/helpers/forecasting/views/inventoryRevenue.ts",
    "exports": [
      {
        "name": " inventoryRevenueForecastingRows",
        "text": "\n\nexport const inventoryRevenueForecastingRows = (\n  products: any[],\n  isScaled: boolean,\n  hasMoreProducts: boolean = false,\n  openAll: boolean = false\n): ForecastingRow[] => {\n  const productsToDisplay = products.filter((prod) => {\n    return prod.id !== 'all_products';\n  });\n  return [\n    {\n      name: 'Orders',\n      collapsable: false,\n      key: 'all_products.product_orders_count',\n      level: 1,\n      type: 'count',\n    },\n    {\n      name: 'Revenue',\n      collapsable: true,\n      type: 'money',\n      key: isScaled\n        ? 'all_products.product_total_revenue_scaled'\n        : 'all_products.product_total_revenue',\n      level: 1,\n      children: [\n        {\n          name: 'Search',\n          key: 'search',\n          type: 'count',\n          level: 2,\n          collapsable: false,\n        },\n        ...productsToDisplay.map(\n          (prod): ForecastingRow => ({\n            level: 2,\n            name: prod.title,\n            key: isScaled\n              ? `${prod.id}.product_total_revenue_scaled`\n              : `${prod.id}.product_total_revenue`,\n            collapsable: prod?.num_variants > 1,\n            isParentProductRow: true,\n            type: 'money',\n            children:\n              prod?.num_variants > 1\n                ? prod.variants\n                  ? prod.variants.map((v: any) => ({\n                      key: isScaled\n                        ? `${v.id}.product_total_revenue_scaled`\n                        : `${v.id}.product_total_revenue`,\n                      level: 3,\n                      name: v.title,\n                    }))\n                  : [{ level: 3, name: '', key: 'spinner', type: 'count' }]\n                : null,\n          })\n        ),\n        {\n          type: 'count',\n          key: 'pagination',\n          name: 'Pagination',\n          level: 2,\n          collapsable: false,\n          hidden: openAll || !hasMoreProducts,\n        },\n      ],\n    },\n  ];\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/helpers/forecasting/views/inventoryUnits.ts",
    "exports": [
      {
        "name": " inventoryUnitsForecastingRows",
        "text": "\n\nexport const inventoryUnitsForecastingRows = (\n  products: any[],\n  hasMoreProducts: boolean = false,\n  openAll: boolean = false\n): ForecastingRow[] => {\n  const productsToDisplay = products.filter((prod) => {\n    return prod.id !== 'all_products';\n  });\n  return [\n    {\n      name: 'Orders',\n      collapsable: false,\n      key: 'all_products.product_orders_count',\n      level: 1,\n      type: 'count',\n    },\n    {\n      name: 'Gross Units',\n      collapsable: true,\n      level: 1,\n      key: 'all_products.product_total_quantity',\n      type: 'count',\n      children: [\n        {\n          name: 'Search',\n          key: 'search',\n          level: 2,\n          collapsable: false,\n          type: 'count',\n        },\n        ...productsToDisplay.map(\n          (prod): ForecastingRow => ({\n            level: 2,\n            key: `${prod.id}.product_total_quantity`,\n            name: prod.title,\n            collapsable: prod?.num_variants > 1,\n            isParentProductRow: true,\n            type: 'count',\n            children:\n              prod?.num_variants > 1\n                ? prod.variants\n                  ? prod.variants.map((v: any) => ({\n                      level: 3,\n                      key: `${v.id}.product_total_quantity`,\n                      name: v.title,\n                    }))\n                  : [{ type: 'count', level: 3, name: '', key: 'spinner' }]\n                : null,\n          })\n        ),\n        {\n          type: 'count',\n          name: 'Pagination',\n          key: 'pagination',\n          level: 2,\n          collapsable: false,\n          hidden: openAll || !hasMoreProducts,\n        },\n      ],\n    },\n  ];\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/helpers/formatNumbers.ts",
    "exports": [
      {
        "name": " valueFormats",
        "text": "export type valueFormats = 'decimal' | 'percent' | 'currency' | 'string';",
        "type": "'decimal' | 'percent' | 'currency' | 'string'"
      },
      {
        "name": " TwNumberFormatOptions",
        "text": "\n\nexport interface TwNumberFormatOptions extends Intl.NumberFormatOptions {\n  style: valueFormats;\n  dateFormat?: string;\n}",
        "type": "interface"
      },
      {
        "name": " formatNumber",
        "text": "\n\nexport const formatNumber = (value: number, options: TwNumberFormatOptions): string => {\n  // if you explicitly want a string, you get a string\n  if (options.style === 'string') {\n    return value.toString();\n  }\n  if (!value || Number.isNaN(+value) || !Number.isFinite(+value)) {\n    value = 0;\n  }\n  return value.toLocaleString(undefined, options);\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/helpers/index.ts",
    "exports": []
  },
  {
    "file": "@tw/helpers/notifications.ts",
    "exports": [
      {
        "type": "function",
        "name": " getNotificationSubtopic",
        "text": "\n\nexport function getNotificationSubtopic(notification: LighthouseNotification) {\n  if (notification.subtopic) {\n    return notification.subtopic;\n  }\n  switch (notification.type) {\n    case 'generative':\n      return 'ads';\n    case 'inventory':\n      return notification?.data?.type;\n    case 'anomaly':\n      return notification?.data?.metric;\n    case 'cdp-audience':\n      return notification?.data?.eventType;\n    case 'data-stories':\n      return 'data-stories';\n    case 'metrics-report':\n      return 'total_impact';\n    case 'opportunity-report':\n      return 'opportunity-report';\n    case 'rule':\n      return 'facebook-ads';\n    case 'rules-report':\n      return 'facebook';\n    case 'klaviyo':\n      return 'campaign_sent';\n    case 'data-stories':\n      return 'data-stories';\n  }\n  return;\n}",
        "parameters": [
          {
            "name": "notification",
            "text": "notification: LighthouseNotification",
            "type": "LighthouseNotification"
          }
        ]
      },
      {
        "type": "function",
        "name": " notificationDefaultSettingOn",
        "text": "\n\nexport function notificationDefaultSettingOn(topic: string, subtopic: string) {\n  if (topic === 'activities') {\n    if (['shopify_product_in_stock', 'shopify_product_out_of_stock'].includes(subtopic)) {\n      return false;\n    }\n    return true;\n  }\n  return true;\n}",
        "parameters": [
          {
            "name": "topic",
            "text": "topic: string",
            "type": "string"
          },
          {
            "name": "subtopic",
            "text": "subtopic: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/helpers/promiser.ts",
    "exports": [
      {
        "name": " Promiser",
        "text": "\n\nexport class Promiser {\n  private _promises: Promise<any>[] = [];\n\n  add(p: any) {\n    this._promises.push(p);\n    if (isPromise(p)) {\n      // this will avoid a unawaited uncaught promise rejection\n      p.catch((_e: any) => {});\n    }\n    return p;\n  }\n\n  all() {\n    if (this._promises.length) {\n      return Promise.all(this._promises);\n    }\n  }\n}",
        "type": "class"
      }
    ]
  },
  {
    "file": "@tw/helpers/sensoryProviderConvertResponse.ts",
    "exports": [
      {
        "name": " sensoryProviderConvertResponse",
        "text": "\n\nexport const sensoryProviderConvertResponse: (providerResponse: Provider[]) => {\n  [key in ServicesIds]: { integrations: Integration[]; credentials: ProviderCredential[] };\n} = (providerResponse: Provider[]) => {\n  return providerResponse.reduce((acc, provider) => {\n    const { integrations, id, credentials } = provider;\n    return {\n      ...acc,\n      [id]: {\n        integrations,\n        credentials,\n      },\n    };\n  }, {} as { [key in ServicesIds]: { integrations: Integration[]; credentials: ProviderCredential[] } });\n};",
        "type": "(providerResponse: Provider[]) => {\n  [key in ServicesIds]: { integrations: Integration[]; credentials: ProviderCredential[] };\n}"
      }
    ]
  },
  {
    "file": "@tw/moment-cached/cache.ts",
    "exports": [
      {
        "type": "function",
        "name": " createCached",
        "text": "\n\nexport function createCached(moment: typeof momentType) {\n  const cache: Record<string, moment.Moment> = {};\n  try {\n    // @ts-ignore\n    window.dataCaches.push(cache);\n  } catch {}\n  if (!isBrowser) return moment;\n  function momentCached(inp?: moment.MomentInput, strict?: boolean | undefined): moment.Moment {\n    let mainKey: any = inp;\n    let inpNotMoment = typeof inp === 'string' || inp instanceof Date;\n    if (typeof inp === 'string') {\n      mainKey = strInputCacheKey(inp);\n      momentCache.hit++;\n      if (cache[mainKey]) return cache[mainKey].clone();\n    }\n    if (!inp) {\n      // get epoch time to rounded second using Date\n      mainKey = new Date().getTime().toString().slice(0, -3);\n    } else if (inp instanceof Date) {\n      mainKey = String(inp.getTime().toString().slice(0, -3));\n    }\n    if (mainKey && inpNotMoment && cache[mainKey]) {\n      momentCache.hit++;\n      return cache[mainKey].clone();\n    }\n    const res = moment(...arguments);\n    res.clone = () => momentCached(res);\n    if (mainKey && inpNotMoment) {\n      cache[mainKey] = res.clone();\n    }\n\n    function createCompareCache(compare: string) {\n      // @ts-ignore\n      const org = res[compare];\n      function compareCache(): moment.Moment {\n        const input = arguments[0];\n        if (typeof input === 'string') {\n          const key = strInputCacheKey(input);\n          if (cache[key]) {\n            momentCache.comparesHit++;\n            arguments[0] = cache[key].clone();\n          } else {\n            momentCache.comparesMiss++;\n          }\n        }\n        // @ts-ignore\n        return org.call(res, ...arguments);\n      }\n      return compareCache;\n    }\n\n    compares.forEach((compare) => {\n      // @ts-ignore\n      res[compare] = createCompareCache(compare);\n    });\n\n    const format = res.format;\n    // @ts-ignore\n    res.format = (formatStr?: string | undefined) => {\n      const key = `format_${momentValueKey(res)}_${formatStr}`;\n      if (mainKey && formatStr && cache[key]) {\n        momentCache.formatHit++;\n        return cache[key];\n      } else {\n        momentCache.formatMiss++;\n      }\n      const formatRes = format.call(res, formatStr);\n      if (mainKey && formatStr) {\n        cache[key] = formatRes as any;\n      }\n      return formatRes;\n    };\n    return res;\n  }\n\n  // copy methods from moment\n  Object.keys(moment).forEach((key) => {\n    // @ts-ignore\n    momentCached[key] = moment[key];\n  });\n\n  function strInputCacheKey(input: string) {\n    // @ts-ignore\n    return `${input}_${moment.defaultZone?.name || ''}` as string;\n  }\n\n  function momentValueKey(m: moment.Moment) {\n    // @ts-ignore\n    return `${m._d.getTime()}_${m._z?.name || ''}`;\n  }\n  return momentCached;\n}",
        "parameters": [
          {
            "name": "moment",
            "text": "moment: typeof momentType",
            "type": "typeof momentType"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/moment-cached/index.ts",
    "exports": [
      {
        "type": "specifier",
        "name": " Moment",
        "text": " Moment"
      }
    ]
  },
  {
    "file": "@tw/moment-cached/timezone.ts",
    "exports": [
      {
        "type": "specifier",
        "name": " Moment",
        "text": " Moment"
      }
    ]
  },
  {
    "file": "@tw/pulumi/api-gateway/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/api-gateway/openapi.ts",
    "exports": [
      {
        "type": "function",
        "name": " uploadAPIConfig",
        "text": "\n\nexport function uploadAPIConfig(\n  filePath: string,\n  service: serviceTarget,\n  settings: { removePrefix?: boolean } = {}\n) {\n  if (!fs.existsSync(filePath)) {\n    if (!(process.env.IS_LOCAL === 'true')) console.log(`file ${filePath} does not exist!`);\n    return;\n  }\n  const { removePrefix } = settings;\n  const { serviceId, projectId } = getConfigs();\n  const rawConfig = yaml.parse(fs.readFileSync(filePath).toString());\n  const finalSpec = configureForEndpoints(rawConfig, service, removePrefix);\n  const outputOpenAPIspecs = [\n    {\n      ext: 'yml',\n      contents: toYamlOutput(finalSpec),\n    },\n    {\n      ext: 'json',\n      contents: finalSpec.apply((v) => JSON.stringify(v)),\n    },\n  ];\n  for (const spec of outputOpenAPIspecs) {\n    new gcp.storage.BucketObject(`api-gateway-config-${spec.ext}`, {\n      bucket: `devops-${projectId}`,\n      content: spec.contents,\n      name: `api-gateway/${spec.ext}/${serviceId}.${spec.ext}`,\n    });\n  }\n}",
        "parameters": [
          {
            "name": "filePath",
            "text": "filePath: string",
            "type": "string"
          },
          {
            "name": "service",
            "text": "service: serviceTarget",
            "type": "serviceTarget"
          },
          {
            "name": "settings",
            "text": "settings: { removePrefix?: boolean } = {}",
            "type": "{ removePrefix?: boolean }"
          }
        ]
      },
      {
        "type": "function",
        "name": " configureForEndpoints",
        "text": "\n\nexport function configureForEndpoints(\n  rawConfig: any,\n  service: serviceTarget,\n  removePrefix: boolean\n) {\n  const serviceId = pulumi.getProject();\n  const newPaths = {};\n  for (let path of Object.keys(rawConfig.paths)) {\n    if (path === '/') path = '';\n    let newPath = `/${serviceId}${path}`;\n    newPaths[newPath] = {};\n    for (const method of Object.keys(rawConfig.paths[path])) {\n      const operation = rawConfig.paths[path][method];\n      const xTw = operation?.['x-tw'] || {};\n      const pathPrefix = xTw?.pathPrefix;\n      if (!xTw?.deployment) {\n        // @ts-ignore\n        xTw.deployment = service.name || serviceId;\n      }\n      const altPathPrefix = pathPrefix && pathPrefix !== serviceId;\n      if (altPathPrefix) {\n        newPath = `/${pathPrefix}${path}`;\n        if (!newPaths[newPath]) newPaths[newPath] = {};\n      }\n      newPaths[newPath][method] = operation;\n      let backendSettings;\n      const audience = {\n        ...(!(service instanceof CloudRun) ? { jwt_audience: getAudience(service) } : null),\n      };\n      if (!removePrefix && !altPathPrefix) {\n        backendSettings = {\n          address: getBaseUrl(service),\n          protocol: 'http/1.1',\n          path_translation: 'APPEND_PATH_TO_ADDRESS',\n          ...audience,\n        };\n      } else {\n        backendSettings = {\n          address: pulumi.interpolate`${getBaseUrl(service)}${path}`,\n          protocol: 'http/1.1',\n          path_translation: 'CONSTANT_ADDRESS',\n          ...audience,\n        };\n      }\n      newPaths[newPath][method]['x-google-backend'] = {\n        ...backendSettings,\n        ...newPaths[newPath][method]['x-google-backend'],\n      };\n      newPaths[newPath][method]['operationId'] = `${\n        operation?.tags?.length ? operation?.tags[0] : serviceId\n      }-${operation['operationId']}`;\n    }\n  }\n  Object.keys(newPaths).map((p) => {\n    if (!Object.keys(newPaths[p]).length) delete newPaths[p];\n  });\n  rawConfig.paths = newPaths;\n  return pulumi.output(rawConfig);\n}",
        "parameters": [
          {
            "name": "rawConfig",
            "text": "rawConfig: any",
            "type": "any"
          },
          {
            "name": "service",
            "text": "service: serviceTarget",
            "type": "serviceTarget"
          },
          {
            "name": "removePrefix",
            "text": "removePrefix: boolean",
            "type": "boolean"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/clickhouse/backup.ts",
    "exports": [
      {
        "type": "function",
        "name": " createBackupJob",
        "text": "\n\nexport function createBackupJob(args: {\n  name: string;\n  k8sServiceAccount: kubernetes.core.v1.ServiceAccount;\n  passwordBackup: pulumi.Output<string>;\n  shardsCount: number;\n  replicasCount: number;\n  provider: K8sProvider;\n}) {\n  const { name, k8sServiceAccount, passwordBackup, shardsCount, replicasCount, provider } = args;\n  new kubernetes.batch.v1.CronJob(\n    k8sUniqueName(name, provider),\n    {\n      apiVersion: 'batch/v1',\n      metadata: {\n        name: 'clickhouse-backup-cron',\n      },\n      spec: {\n        schedule: '0 0 * * *',\n        concurrencyPolicy: 'Forbid',\n        jobTemplate: {\n          spec: {\n            backoffLimit: 1,\n            completions: 1,\n            parallelism: 1,\n            template: {\n              metadata: {\n                labels: {\n                  app: 'clickhouse-backup-cron',\n                },\n              },\n              spec: {\n                restartPolicy: 'Never',\n                serviceAccountName: k8sServiceAccount.metadata.name,\n                containers: [\n                  {\n                    name: 'run-backup-cron',\n                    image: 'clickhouse/clickhouse-client:latest',\n                    imagePullPolicy: 'IfNotPresent',\n                    env: [\n                      {\n                        name: 'CLICKHOUSE_SERVICES',\n                        value: enumerateNumber(shardsCount)\n                          .map((shard) =>\n                            enumerateNumber(replicasCount)\n                              .map((replica) => `chi-${name}-main-${shard}-${replica}`)\n                              .join(',')\n                          )\n                          .join(','),\n                      },\n                      {\n                        name: 'CLICKHOUSE_PORT',\n                        value: '9000',\n                      },\n                      {\n                        name: 'BACKUP_USER',\n                        value: 'backup',\n                      },\n                      {\n                        name: 'BACKUP_PASSWORD',\n                        value: passwordBackup,\n                      },\n                      {\n                        name: 'MAKE_INCREMENT_BACKUP',\n                        value: '1',\n                      },\n                      {\n                        name: 'FULL_BACKUP_WEEKDAY',\n                        value: '1',\n                      },\n                    ],\n                    command: [\n                      'bash',\n                      '-ec',\n                      `CLICKHOUSE_SERVICES=$(echo $CLICKHOUSE_SERVICES | tr \",\" \" \");\n                      BACKUP_DATE=$(date +%Y-%m-%d-%H-%M-%S);\n                      declare -A BACKUP_NAMES;\n                      declare -A DIFF_FROM;\n                      if [[ \"\" != \"$BACKUP_PASSWORD\" ]]; then\n                        BACKUP_PASSWORD=\"--password=$BACKUP_PASSWORD\";\n                      fi;\n                      for SERVER in $CLICKHOUSE_SERVICES; do\n                        if [[ \"1\" == \"$MAKE_INCREMENT_BACKUP\" ]]; then\n                          LAST_FULL_BACKUP=$(clickhouse-client -q \"SELECT name FROM system.backup_list WHERE location='remote' AND name LIKE '%\\${SERVER}%' AND name LIKE '%full%' AND desc NOT LIKE 'broken%' ORDER BY created DESC LIMIT 1 FORMAT TabSeparatedRaw\" --host=\"$SERVER\" --port=\"$CLICKHOUSE_PORT\" --user=\"$BACKUP_USER\" $BACKUP_PASSWORD);\n                          TODAY_FULL_BACKUP=$(clickhouse-client -q \"SELECT name FROM system.backup_list WHERE location='remote' AND name LIKE '%\\${SERVER}%' AND name LIKE '%full%' AND desc NOT LIKE 'broken%' AND toDate(created) = today() ORDER BY created DESC LIMIT 1 FORMAT TabSeparatedRaw\" --host=\"$SERVER\" --port=\"$CLICKHOUSE_PORT\" --user=\"$BACKUP_USER\" $BACKUP_PASSWORD)\n                          PREV_BACKUP_NAME=$(clickhouse-client -q \"SELECT name FROM system.backup_list WHERE location='remote' AND desc NOT LIKE 'broken%' ORDER BY created DESC LIMIT 1 FORMAT TabSeparatedRaw\" --host=\"$SERVER\" --port=\"$CLICKHOUSE_PORT\" --user=\"$BACKUP_USER\" $BACKUP_PASSWORD);\n                          DIFF_FROM[$SERVER]=\"\";\n                          if [[ (\"$FULL_BACKUP_WEEKDAY\" == \"$(date +%u)\" && \"\" == \"$TODAY_FULL_BACKUP\") || \"\" == \"$PREV_BACKUP_NAME\" || \"\" == \"$LAST_FULL_BACKUP\" ]]; then\n                            BACKUP_NAMES[$SERVER]=\"full-$BACKUP_DATE\";\n                          else\n                            BACKUP_NAMES[$SERVER]=\"increment-$BACKUP_DATE\";\n                            DIFF_FROM[$SERVER]=\"--diff-from-remote=$PREV_BACKUP_NAME\";\n                          fi\n                        else\n                          BACKUP_NAMES[$SERVER]=\"full-$BACKUP_DATE\";\n                        fi;\n                        echo \"set backup name on $SERVER = \\${BACKUP_NAMES[$SERVER]}\";\n                      done;\n                      for SERVER in $CLICKHOUSE_SERVICES; do\n                        echo \"create \\${BACKUP_NAMES[$SERVER]} on $SERVER\";\n                        clickhouse-client --echo -mn -q \"INSERT INTO system.backup_actions(command) VALUES('create \\${SERVER}-\\${BACKUP_NAMES[$SERVER]}')\" --host=\"$SERVER\" --port=\"$CLICKHOUSE_PORT\" --user=\"$BACKUP_USER\" $BACKUP_PASSWORD;\n                      done;\n                      for SERVER in $CLICKHOUSE_SERVICES; do\n                        while [[ \"in progress\" == $(clickhouse-client -mn -q \"SELECT status FROM system.backup_actions WHERE command='create \\${SERVER}-\\${BACKUP_NAMES[$SERVER]}' FORMAT TabSeparatedRaw\" --host=\"$SERVER\" --port=\"$CLICKHOUSE_PORT\" --user=\"$BACKUP_USER\" $BACKUP_PASSWORD) ]]; do\n                          echo \"still in progress \\${BACKUP_NAMES[$SERVER]} on $SERVER\";\n                          sleep 1;\n                        done;\n                        if [[ \"success\" != $(clickhouse-client -mn -q \"SELECT status FROM system.backup_actions WHERE command='create \\${SERVER}-\\${BACKUP_NAMES[$SERVER]}' FORMAT TabSeparatedRaw\" --host=\"$SERVER\" --port=\"$CLICKHOUSE_PORT\" --user=\"$BACKUP_USER\" $BACKUP_PASSWORD) ]]; then\n                          echo \"error create \\${BACKUP_NAMES[$SERVER]} on $SERVER\";\n                          clickhouse-client -mn --echo -q \"SELECT status,error FROM system.backup_actions WHERE command='create \\${SERVER}-\\${BACKUP_NAMES[$SERVER]}'\" --host=\"$SERVER\" --port=\"$CLICKHOUSE_PORT\" --user=\"$BACKUP_USER\" $BACKUP_PASSWORD;\n                          exit 1;\n                        fi;\n                      done;\n                      for SERVER in $CLICKHOUSE_SERVICES; do\n                        echo \"upload \\${DIFF_FROM[$SERVER]} \\${BACKUP_NAMES[$SERVER]} on $SERVER\";\n                        clickhouse-client --echo -mn -q \"INSERT INTO system.backup_actions(command) VALUES('upload \\${DIFF_FROM[$SERVER]} \\${SERVER}-\\${BACKUP_NAMES[$SERVER]}')\" --host=\"$SERVER\" --port=\"$CLICKHOUSE_PORT\" --user=\"$BACKUP_USER\" $BACKUP_PASSWORD;\n                      done;\n                      for SERVER in $CLICKHOUSE_SERVICES; do\n                        while [[ \"in progress\" == $(clickhouse-client -mn -q \"SELECT status FROM system.backup_actions WHERE command='upload \\${DIFF_FROM[$SERVER]} \\${SERVER}-\\${BACKUP_NAMES[$SERVER]}'\" --host=\"$SERVER\" --port=\"$CLICKHOUSE_PORT\" --user=\"$BACKUP_USER\" $BACKUP_PASSWORD) ]]; do\n                          echo \"upload still in progress \\${BACKUP_NAMES[$SERVER]} on $SERVER\";\n                          sleep 5;\n                        done;\n                        if [[ \"success\" != $(clickhouse-client -mn -q \"SELECT status FROM system.backup_actions WHERE command='upload \\${DIFF_FROM[$SERVER]} \\${SERVER}-\\${BACKUP_NAMES[$SERVER]}'\" --host=\"$SERVER\" --port=\"$CLICKHOUSE_PORT\" --user=\"$BACKUP_USER\" $BACKUP_PASSWORD) ]]; then\n                          echo \"error \\${BACKUP_NAMES[$SERVER]} on $SERVER\";\n                          clickhouse-client -mn --echo -q \"SELECT status,error FROM system.backup_actions WHERE command='upload \\${DIFF_FROM[$SERVER]} \\${SERVER}-\\${BACKUP_NAMES[$SERVER]}'\" --host=\"$SERVER\" --port=\"$CLICKHOUSE_PORT\" --user=\"$BACKUP_USER\" $BACKUP_PASSWORD;\n                          exit 1;\n                        fi;\n                        clickhouse-client --echo -mn -q \"INSERT INTO system.backup_actions(command) VALUES('delete local \\${SERVER}-\\${BACKUP_NAMES[$SERVER]}')\" --host=\"$SERVER\" --port=\"$CLICKHOUSE_PORT\" --user=\"$BACKUP_USER\" $BACKUP_PASSWORD;\n                      done;\n                      echo \"BACKUP CREATED\"`,\n                    ],\n                  },\n                ],\n              },\n            },\n          },\n        },\n      },\n    },\n    { provider }\n  );\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  k8sServiceAccount: kubernetes.core.v1.ServiceAccount;\n  passwordBackup: pulumi.Output<string>;\n  shardsCount: number;\n  replicasCount: number;\n  provider: K8sProvider;\n}",
            "type": "{\n  name: string;\n  k8sServiceAccount: kubernetes.core.v1.ServiceAccount;\n  passwordBackup: pulumi.Output<string>;\n  shardsCount: number;\n  replicasCount: number;\n  provider: K8sProvider;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/clickhouse/clickcat.ts",
    "exports": [
      {
        "type": "function",
        "name": " createClickCatInstance",
        "text": "\n\nexport function createClickCatInstance(args: {\n  name: string;\n  userName: string;\n  provider: K8sProvider;\n  password: RandomPassword;\n  clickSelector: Record<string, string>;\n  shardsCount: number;\n  replicasCount: number;\n  clusterInfo: Partial<ClusterInfo>;\n  tag?: string;\n  domain: TWDomain;\n}) {\n  const {\n    name,\n    userName,\n    password,\n    clickSelector,\n    tag,\n    shardsCount,\n    replicasCount,\n    clusterInfo,\n    domain,\n  } = args;\n\n  let provider = args.provider;\n\n  const { backendService: catBackendService, autoNegConfigEntry: catAutoNegConfigEntry } =\n    createBackendServiceForK8s({\n      name: `${name}-clickcat-iap`,\n      mode: 'iap',\n      useTcpProbe: false,\n    });\n\n  createK8sService({\n    name: `${name}-clickcat-iap`,\n    autoNeg: {\n      backend_services: { '80': [catAutoNegConfigEntry] },\n    },\n    selector: {\n      'triplewhale.com/deployment': `${name}-clickcat`,\n    },\n    provider,\n    ports: [{ port: 80, targetPort: 8080 }],\n    dependsOn: provider.dependsOn,\n  });\n\n  const { backendService: clickBackendService, autoNegConfigEntry: clickAutoNegConfigEntry } =\n    createBackendServiceForK8s({\n      name: `${name}-clickhouse-iap`,\n      mode: 'iap',\n      useTcpProbe: false,\n      sessionAffinity: 'CLIENT_IP',\n    });\n\n  createK8sService({\n    name: `${name}-clickhouse-iap`,\n    autoNeg: {\n      backend_services: { '80': [clickAutoNegConfigEntry] },\n    },\n    selector: clickSelector,\n    provider,\n    ports: [{ port: 80, targetPort: 8123 }],\n    dependsOn: provider.dependsOn,\n  });\n\n  const replicaRules: gcp.types.input.compute.RegionUrlMapPathMatcherPathRule[] = [];\n  const replicaIps: ClusterInfo['replicas'] = [];\n\n  for (const shard of enumerateNumber(shardsCount)) {\n    for (const replica of enumerateNumber(replicasCount)) {\n      const path = `instance-${shard}-${replica}`;\n      const { backendService, autoNegConfigEntry } = createBackendServiceForK8s({\n        name: `${name}-clickhouse-${shard}-${replica}-iap`,\n        mode: 'iap',\n        useTcpProbe: false,\n        sessionAffinity: 'CLIENT_IP',\n      });\n      const domain = new TWDomain(\n        'whaledb.io',\n        `${name}-${shard}-${replica}.clickhouse`,\n        'internal'\n      );\n\n      const { k8sService } = createK8sService({\n        name: `${name}-clickhouse-${shard}-${replica}-iap`,\n        autoNeg: {\n          backend_services: { '8123': [autoNegConfigEntry] },\n        },\n        selector: {\n          ...clickSelector,\n          'clickhouse.altinity.com/replica': `${replica}`,\n          'clickhouse.altinity.com/shard': `${shard}`,\n        },\n        provider,\n        ingressMode: 'internal',\n        twDomain: domain,\n        type: 'LoadBalancer',\n        ports: [\n          { port: 8123, targetPort: 8123, name: 'http' },\n          { port: 9000, targetPort: 9000, name: 'client' },\n        ],\n        dependsOn: provider.dependsOn,\n      });\n\n      replicaIps.push({\n        ip: k8sService.status.loadBalancer.ingress[0].ip,\n        name: path,\n        domain: domain.fqdn,\n      });\n\n      replicaRules.push({\n        service: backendService.id,\n        routeAction: {\n          urlRewrite: { pathPrefixRewrite: '/' },\n        },\n        paths: [`/_clickhouse/${path}`, `/_clickhouse/${path}/*`],\n      });\n    }\n  }\n\n  clusterInfo.replicas = replicaIps;\n\n  createUrlMapForK8s({\n    name: `${name}-clickhouse-ui`,\n    backendService: catBackendService,\n    mode: 'iap',\n    pathRules: [\n      ...replicaRules,\n      {\n        service: clickBackendService.id,\n        routeAction: {\n          urlRewrite: { pathPrefixRewrite: '/' },\n        },\n        paths: ['/_clickhouse', '/_clickhouse/*'],\n      },\n    ],\n    twDomain: domain,\n    dependsOn: provider.dependsOn,\n  });\n\n  createK8sDeployment({\n    provider,\n    name: `${name}-clickcat`,\n    envs: {\n      CONNECTION_USER: userName,\n      CONNECTION_PASS: password.result,\n      CONNECTION_URL: `https://${domain.fqdn}/_clickhouse`,\n      CLUSTER_INFO: toJSONOutput(args.clusterInfo),\n    },\n    podArgs: {\n      image: getDevopsImage('clickcat', tag),\n      ports: [{ containerPort: 8080 }],\n      allowSpot: false,\n      CPURequest: '100m',\n      memoryRequest: '128Mi',\n    },\n    maxReplicas: 1,\n  });\n\n  return { domain };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  userName: string;\n  provider: K8sProvider;\n  password: RandomPassword;\n  clickSelector: Record<string, string>;\n  shardsCount: number;\n  replicasCount: number;\n  clusterInfo: Partial<ClusterInfo>;\n  tag?: string;\n  domain: TWDomain;\n}",
            "type": "{\n  name: string;\n  userName: string;\n  provider: K8sProvider;\n  password: RandomPassword;\n  clickSelector: Record<string, string>;\n  shardsCount: number;\n  replicasCount: number;\n  clusterInfo: Partial<ClusterInfo>;\n  tag?: string;\n  domain: TWDomain;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/clickhouse/db.ts",
    "exports": [
      {
        "type": "function",
        "name": " createDb",
        "text": "\n\nexport function createDb(dbArgs: DbArgs): Db {\n  if (!dbArgs.cluster) {\n    dbArgs.cluster = 'main';\n  }\n  return new Db(dbArgs.name as string, dbArgs, {\n    provider: getClickhouseProvider(),\n  });\n}",
        "parameters": [
          {
            "name": "dbArgs",
            "text": "dbArgs: DbArgs",
            "type": "DbArgs"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/clickhouse/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/clickhouse/installation.ts",
    "exports": [
      {
        "name": " ClusterInfo",
        "text": "\n\nexport type ClusterInfo = {\n  name: string;\n  username: string;\n  password: pulumi.Input<string>;\n  clickCatDomain: string;\n  clickhouseTcpDomain: string;\n  clickhouseHttpDomain: string;\n  replicas: { ip: pulumi.Input<string>; name: string; domain: pulumi.Input<string> }[];\n};",
        "type": "{\n  name: string;\n  username: string;\n  password: pulumi.Input<string>;\n  clickCatDomain: string;\n  clickhouseTcpDomain: string;\n  clickhouseHttpDomain: string;\n  replicas: { ip: pulumi.Input<string>; name: string; domain: pulumi.Input<string> }[];\n}"
      },
      {
        "type": "function",
        "name": " createClickhouseInstallation",
        "text": "\n\nexport function createClickhouseInstallation(args: {\n  name: string;\n  userName: string;\n  createNamespace?: boolean;\n  keeper?: boolean;\n  provider: K8sProvider;\n  clickCatTag?: string;\n  shardsCount?: number;\n  replicasCount?: number;\n  storageSize?: string;\n  storageClass?: string;\n  zones?: string[];\n  // https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings\n  // https://clickhouse.com/docs/en/operations/settings/settings\n  settings?: Record<string, string | number | boolean>;\n  profileSettings?: Record<string, string | number | boolean>;\n  machineFamily?: 'n2' | 'e2' | 'c3d';\n  cpus?: number;\n  memory?: number;\n}) {\n  const {\n    name,\n    userName,\n    createNamespace = true,\n    keeper = true,\n    clickCatTag,\n    shardsCount = 1,\n    replicasCount = 3,\n    settings,\n    machineFamily = 'n2',\n    cpus = 64,\n    memory = 256,\n    storageSize = '1000Gi',\n    storageClass = 'premium-rwo',\n    zones,\n    profileSettings,\n  } = args;\n\n  let provider = args.provider;\n\n  if (createNamespace) {\n    const namespace = createK8sNamespace({ provider: provider, name: provider.namespace });\n    provider = provider.dependOn(namespace);\n  }\n\n  const { password, entires } = createCHUser({ name, userName });\n\n  const { password: passwordDD, entires: entiresDD } = createCHUser({ name, userName: 'datadog' });\n\n  let { tolerations, nodeSelector } = getSelectorsForPrivatePoolParty({\n    friendlyName: `${name}-ch`,\n  });\n\n  nodeSelector = {\n    ...nodeSelector,\n    'cloud.google.com/machine-family': machineFamily,\n  } as any;\n\n  if (keeper) {\n    const clickhouseKeeper = createClickhouseKeeper({ name, provider, zones });\n    provider = provider.dependOn(clickhouseKeeper);\n  }\n\n  const { serviceAccount } = createServiceAccount({ name: `${name}-ch` });\n\n  const { k8sServiceAccount } = createK8sServiceAccount({\n    name: `${name}-ch`,\n    serviceAccount,\n    provider,\n  });\n\n  const { projectId } = getConfigs();\n\n  const backupBucket = new gcp.storage.Bucket(`${name}-ch-backup`, {\n    location: 'us-central1',\n    name: `${name}-ch-backup-${projectId}`,\n    storageClass: 'STANDARD',\n  });\n\n  // https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md\n  const clickHouseInstallation = new kubernetes.apiextensions.CustomResource(\n    name,\n    {\n      apiVersion: 'clickhouse.altinity.com/v1',\n      kind: 'ClickHouseInstallation',\n      metadata: { name },\n      spec: {\n        defaults: {\n          templates: {\n            dataVolumeClaimTemplate: name,\n            serviceTemplate: name,\n          },\n        },\n        configuration: {\n          profiles: {\n            ...profileSettings,\n          },\n          zookeeper: {\n            nodes: [{ host: 'clickhouse-keeper', port: 2181 }],\n          },\n          clusters: [\n            {\n              name: 'main',\n              layout: { shardsCount, replicasCount },\n              templates: {\n                podTemplate: name,\n              },\n            },\n          ],\n          users: {\n            ...entires,\n            ...entiresDD,\n          },\n          settings: {\n            // https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings\n            ...settings,\n          },\n          files: {\n            'http_options_response.xml': `<yandex>\n              <http_options_response>\n                <header>\n                  <name>Access-Control-Allow-Origin</name>\n                  <value>*</value>\n                </header>\n                <header>\n                  <name>Access-Control-Allow-Headers</name>\n                  <value>*</value>\n                </header>\n                <header>\n                  <name>Access-Control-Expose-Headers</name>\n                  <value>*</value>\n                </header>\n              </http_options_response>\n            </yandex>`,\n            'logging.xml': `<yandex>\n            <logger>\n                <level>information</level>\n                <log>console</log>\n                <errorlog>console</errorlog>\n            </logger>\n                <asynchronous_insert_log>\n                  <database>system</database>\n                  <table>asynchronous_insert_log</table>\n                  <flush_interval_milliseconds>7500</flush_interval_milliseconds>\n                  <partition_by>toYYYYMM(event_date)</partition_by>\n                  <max_size_rows>1048576</max_size_rows>\n                  <reserved_size_rows>8192</reserved_size_rows>\n                  <buffer_size_rows_flush_threshold>524288</buffer_size_rows_flush_threshold>\n                  <flush_on_crash>false</flush_on_crash>\n                </asynchronous_insert_log>\n            </yandex>`,\n          },\n        },\n        templates: {\n          serviceTemplates: [\n            {\n              name,\n              spec: {\n                ports: [\n                  { name: 'http', port: 8123 },\n                  { name: 'client', port: 9000 },\n                ],\n                type: 'ClusterIP',\n              },\n            },\n          ],\n          podTemplates: [\n            {\n              name,\n              metadata: {\n                annotations: {\n                  'ad.datadoghq.com/clickhouse.checks': toJSONOutput({\n                    clickhouse: {\n                      init_config: {},\n                      instances: [\n                        {\n                          server: '%%host%%',\n                          port: 9000,\n                          username: 'datadog',\n                          password: passwordDD.result,\n                        },\n                      ],\n                    },\n                  }),\n                },\n              },\n              spec: {\n                serviceAccountName: k8sServiceAccount.metadata.name,\n                terminationGracePeriodSeconds: 300,\n                containers: [\n                  {\n                    image: 'clickhouse/clickhouse-server:24.5',\n                    name: 'clickhouse',\n                    resources: {\n                      requests: {\n                        cpu: String(cpus - 4),\n                        memory: `${memory}Gi`,\n                      },\n                    },\n                    livenessProbe: {\n                      failureThreshold: 10,\n                      httpGet: {\n                        path: '/ping',\n                        port: 'interserver',\n                        scheme: 'HTTP',\n                      },\n                      initialDelaySeconds: 60,\n                      periodSeconds: 3,\n                      successThreshold: 1,\n                      timeoutSeconds: 1,\n                    },\n                    readinessProbe: {\n                      failureThreshold: 10,\n                      httpGet: {\n                        path: '/ping',\n                        port: 'interserver',\n                        scheme: 'HTTP',\n                      },\n                      initialDelaySeconds: 10,\n                      periodSeconds: 3,\n                      successThreshold: 1,\n                      timeoutSeconds: 1,\n                    },\n\n                    volumeMounts: [\n                      {\n                        name,\n                        mountPath: '/var/lib/clickhouse',\n                      },\n                    ],\n                  },\n                ],\n                nodeSelector,\n                tolerations,\n              },\n            },\n          ],\n          volumeClaimTemplates: [\n            {\n              name,\n              spec: {\n                storageClassName: storageClass,\n                accessModes: ['ReadWriteOnce'],\n                resources: { requests: { storage: storageSize } },\n              },\n            },\n          ],\n        },\n      },\n    },\n    { provider, dependsOn: [...provider.dependsOn], protect: false }\n  );\n\n  provider = provider.dependOn(clickHouseInstallation);\n\n  const clickSelector = {\n    'clickhouse.altinity.com/app': 'chop',\n    'clickhouse.altinity.com/chi': name,\n    'clickhouse.altinity.com/namespace': provider.namespace,\n    'clickhouse.altinity.com/ready': 'yes',\n  };\n\n  const internalDomain = new TWDomain('whaledb.io', `${name}.clickhouse`, 'internal');\n\n  const internalHttpDomain = new TWDomain('whaledb.io', `${name}-http.clickhouse`, 'internal');\n\n  const clickcatDomain = new TWDomain(\n    'whaledb.io',\n    `${name}.clickcat`,\n    'iap',\n    projectIdAsSubDomain\n  );\n\n  createK8sService({\n    name: `${name}-clickhouse`,\n    provider,\n    ingressMode: 'internal',\n    type: 'LoadBalancer',\n    selector: clickSelector,\n    ports: [\n      { port: 8123, targetPort: 8123, name: 'http' },\n      { port: 9000, targetPort: 9000, name: 'client' },\n    ],\n    twDomain: internalDomain,\n    dependsOn: provider.dependsOn,\n  });\n\n  createK8sIngress({\n    name: `${name}-clickhouse-http`,\n    provider,\n    ingressMode: 'internal',\n    selector: clickSelector,\n    port: 8123,\n    targetPort: 8123,\n    twDomain: internalHttpDomain,\n    dependsOn: provider.dependsOn,\n    sessionAffinity: 'GENERATED_COOKIE',\n  });\n\n  const clusterInfo: ClusterInfo = {\n    name,\n    username: userName,\n    password: password.result,\n    clickCatDomain: clickcatDomain.fqdn,\n    clickhouseTcpDomain: internalDomain.fqdn,\n    clickhouseHttpDomain: internalHttpDomain.fqdn,\n    replicas: [],\n  };\n\n  const { domain } = createClickCatInstance({\n    name,\n    userName,\n    password,\n    provider,\n    clickSelector,\n    shardsCount,\n    replicasCount,\n    clusterInfo,\n    tag: clickCatTag,\n    domain: clickcatDomain,\n  });\n\n  storeHostedServiceInfo({\n    name,\n    type: 'clickhouse',\n    data: clusterInfo,\n  });\n\n  return { clickHouseInstallation, password, internalDomain, domain, internalHttpDomain };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  userName: string;\n  createNamespace?: boolean;\n  keeper?: boolean;\n  provider: K8sProvider;\n  clickCatTag?: string;\n  shardsCount?: number;\n  replicasCount?: number;\n  storageSize?: string;\n  storageClass?: string;\n  zones?: string[];\n  // https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings\n  // https://clickhouse.com/docs/en/operations/settings/settings\n  settings?: Record<string, string | number | boolean>;\n  profileSettings?: Record<string, string | number | boolean>;\n  machineFamily?: 'n2' | 'e2' | 'c3d';\n  cpus?: number;\n  memory?: number;\n}",
            "type": "{\n  name: string;\n  userName: string;\n  createNamespace?: boolean;\n  keeper?: boolean;\n  provider: K8sProvider;\n  clickCatTag?: string;\n  shardsCount?: number;\n  replicasCount?: number;\n  storageSize?: string;\n  storageClass?: string;\n  zones?: string[];\n  // https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings\n  // https://clickhouse.com/docs/en/operations/settings/settings\n  settings?: Record<string, string | number | boolean>;\n  profileSettings?: Record<string, string | number | boolean>;\n  machineFamily?: 'n2' | 'e2' | 'c3d';\n  cpus?: number;\n  memory?: number;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/clickhouse/keeper.ts",
    "exports": [
      {
        "type": "function",
        "name": " createClickhouseKeeper",
        "text": "\n\n// https://clickhouse.com/docs/en/guides/sre/keeper/clickhouse-keeper\n\nexport function createClickhouseKeeper(args: {\n  name: string;\n  provider: K8sProvider;\n  zones?: string[];\n}) {\n  const { name } = args;\n  let provider = args.provider;\n\n  const { tolerations, nodeSelector } = getSelectorsForPrivatePoolParty({\n    friendlyName: `${name}-keeper`,\n  });\n\n  const keeper = new kubernetes.yaml.ConfigFile(\n    `keeper-${name}-${provider.cluster_uuid}`,\n    {\n      file: `${dirname}/keeper.yaml`,\n      resourcePrefix: `${name}-${provider.cluster_uuid}`,\n      transformations: [\n        (obj) => {\n          if (obj.kind === 'StatefulSet') {\n            obj.spec.template.spec.tolerations = tolerations;\n            obj.spec.template.spec.nodeSelector = nodeSelector;\n          }\n        },\n      ],\n    },\n    { provider, dependsOn: provider.dependsOn }\n  );\n\n  createPrometheusMonitor({\n    kind: 'Pod',\n    release: 'devops',\n    name: 'clickhouse-keeper',\n    provider,\n    endpoints: [{ portName: 'metrics' }],\n    labels: { app: 'clickhouse-keeper' },\n  });\n\n  return keeper;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  provider: K8sProvider;\n  zones?: string[];\n}",
            "type": "{\n  name: string;\n  provider: K8sProvider;\n  zones?: string[];\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/clickhouse/keeper.yaml",
    "exports": []
  },
  {
    "file": "@tw/pulumi/clickhouse/level.ts",
    "exports": [
      {
        "type": "function",
        "name": " createLevel",
        "text": "\n\nexport function createLevel(args: {\n  name: string;\n  mode: 'LEVEL' | 'LEVEL_SPLIT';\n  database: string;\n  pipelineArgs: ClickhousePipelineArgs['pipelineArgs'];\n  tableArgs: ClickhousePipelineArgs['tableArgs'];\n}) {\n  const { name, database, pipelineArgs, mode, tableArgs } = args;\n  const { projectId } = getConfigs();\n\n  const { splitNumDays, interval = '5 minutes', streamEngine } = pipelineArgs;\n  const {\n    metadata,\n    columns,\n    engine,\n    engineParams,\n    indices,\n    orderBies,\n    settings,\n    comment,\n    protect,\n    cluster,\n  } = tableArgs;\n\n  if (streamEngine !== 'saber') {\n    throw new Error('Only saber stream engine is supported for level pipelines');\n  }\n\n  const tableName = name.replace(/-/g, '_');\n\n  const partitionBies = getPartitionBies({\n    metadata: {\n      dateField: metadata.dateField,\n    },\n    columns,\n  });\n\n  if (mode === 'LEVEL_SPLIT') {\n    createClickhouseTable({\n      name: `${tableName}__live`,\n      database,\n      cluster,\n      engine,\n      engineParams,\n      indices,\n      orderBies,\n      partitionBies,\n      metadata,\n      columns,\n      settings,\n      comment,\n      protect,\n    });\n  }\n\n  createKafkaTopic({ name });\n\n  createTemporalSchedule(name, {\n    projectId,\n    serviceId: 'clickhouse-ops',\n    namespace: 'clickhouse-ops-ns',\n    scheduleId: name,\n    spec: {\n      intervals: [{ every: interval }],\n    },\n    action: {\n      type: 'startWorkflow',\n      workflowType: 'optimizeFull',\n      taskQueue: 'queue',\n      args: [\n        {\n          table: tableName,\n          database,\n          splitNumDays,\n        },\n      ],\n      searchAttributes: {\n        merge_table: [tableName], // 'table' is reserved\n      },\n    },\n    policies: { overlap: ScheduleOverlapPolicy.BUFFER_ONE },\n  });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  mode: 'LEVEL' | 'LEVEL_SPLIT';\n  database: string;\n  pipelineArgs: ClickhousePipelineArgs['pipelineArgs'];\n  tableArgs: ClickhousePipelineArgs['tableArgs'];\n}",
            "type": "{\n  name: string;\n  mode: 'LEVEL' | 'LEVEL_SPLIT';\n  database: string;\n  pipelineArgs: ClickhousePipelineArgs['pipelineArgs'];\n  tableArgs: ClickhousePipelineArgs['tableArgs'];\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/clickhouse/pipeline.ts",
    "exports": [
      {
        "name": " PipelineArgs",
        "text": "\n\nexport type PipelineArgs = Partial<KafkaArgs> & {\n  splitNumDays: number;\n  interval?: IntervalSpec['every'];\n  streamEngine?: 'kafka-connect' | 'clickhouse-table' | 'saber';\n};",
        "type": "Partial<KafkaArgs> & {\n  splitNumDays: number;\n  interval?: IntervalSpec['every'];\n  streamEngine?: 'kafka-connect' | 'clickhouse-table' | 'saber';\n}"
      },
      {
        "name": " Mode",
        "text": "\n\nexport type Mode = 'DIRECT' | 'STREAM' | 'STREAM_SPLIT' | 'LEVEL' | 'LEVEL_SPLIT';",
        "type": "'DIRECT' | 'STREAM' | 'STREAM_SPLIT' | 'LEVEL' | 'LEVEL_SPLIT'"
      },
      {
        "name": " ClickhousePipelineArgs",
        "text": "\nexport type ClickhousePipelineArgs = {\n  name: string;\n  mode?: Mode;\n  tableArgs: Omit<Partial<ClickhouseTableArgs>, 'name'>;\n  pipelineArgs?: Partial<PipelineArgs>;\n  loading?: boolean;\n};",
        "type": "{\n  name: string;\n  mode?: Mode;\n  tableArgs: Omit<Partial<ClickhouseTableArgs>, 'name'>;\n  pipelineArgs?: Partial<PipelineArgs>;\n  loading?: boolean;\n}"
      },
      {
        "type": "function",
        "name": " createClickhousePipeline",
        "text": "\n\nexport function createClickhousePipeline(args: ClickhousePipelineArgs) {\n  const { tableArgs, pipelineArgs = {} as PipelineArgs, loading, name } = args;\n  let { mode } = args;\n\n  if (name.includes('_')) {\n    throw new Error('Pipeline name must not contain underscores');\n  }\n\n  mode =\n    mode ||\n    (tableArgs.metadata?.dateField || tableArgs.metadata?.providerAccountField\n      ? 'STREAM_SPLIT'\n      : 'STREAM');\n\n  tableArgs.columns = tableArgs.columns.concat([\n    {\n      name: sonicUpdatedAtColumn,\n      type: 'DateTime',\n    },\n  ]);\n  tableArgs.cluster = tableArgs.cluster || useCluster(tableArgs.engine);\n\n  if (!tableArgs.partitionBies?.length && tableArgs.metadata) {\n    tableArgs.partitionBies = getPartitionBies({\n      metadata: tableArgs.metadata,\n      columns: tableArgs.columns,\n      allowTwoPartitionBies: mode === 'LEVEL_SPLIT',\n    });\n  }\n\n  pipelineArgs.topic = pipelineArgs.topic || name;\n  pipelineArgs.streamEngine = pipelineArgs.streamEngine || 'saber';\n\n  const {\n    engine,\n    cluster,\n    engineParams,\n    indices,\n    orderBies,\n    metadata,\n    columns,\n    partitionBies,\n    settings,\n    comment,\n    protect = isProduction,\n  } = tableArgs;\n\n  const { projectId } = getConfigs();\n\n  if (mode === 'STREAM_SPLIT' || mode === 'LEVEL_SPLIT') {\n    pipelineArgs.splitNumDays = pipelineArgs.splitNumDays ?? 1;\n  }\n\n  new gcp.storage.BucketObject(\n    `${name}-table`,\n    {\n      bucket: `devops-${projectId}`,\n      content: toJSONOutput(tableArgs),\n      name: `sonic-tables/${name}.json`,\n    },\n    { retainOnDelete: true }\n  );\n\n  const table = createClickhouseTable({\n    name,\n    database: clickhouseSystemDatabase,\n    cluster,\n    engine,\n    engineParams,\n    indices,\n    orderBies,\n    partitionBies,\n    metadata,\n    columns,\n    settings,\n    comment,\n    protect,\n  });\n\n  createMainView({\n    table,\n    tableName: table.name,\n    name,\n    mode,\n    splitNumDays: pipelineArgs.splitNumDays,\n    columns,\n    metadata,\n    cluster,\n  });\n\n  if (pipelineArgs.streamEngine === 'saber') {\n    const nameUnderscore = name.replace(/-/g, '_');\n    let tableName: string, oldTableName: string;\n    if (mode === 'LEVEL') {\n      tableName = nameUnderscore;\n    } else if (mode === 'LEVEL_SPLIT') {\n      tableName = `${nameUnderscore}__live`;\n      oldTableName = nameUnderscore;\n    } else if (mode === 'STREAM') {\n      tableName = `${nameUnderscore}__old`;\n    } else if (mode === 'STREAM_SPLIT') {\n      tableName = nameUnderscore;\n      oldTableName = `${nameUnderscore}__old`;\n    }\n\n    deploySaber({\n      name: name,\n      main: 'kafkaCHPipeline',\n      concurrencyLimit: 40000,\n      concurrencyTarget: 0,\n      createK8sDeploymentArgs: {\n        envs: {\n          KAFKA_TOPIC_NAME: pipelineArgs.topic,\n          CLICKHOUSE_TABLE_NAME: tableName,\n          CLICKHOUSE_OLD_TABLE_NAME: oldTableName,\n          CLICKHOUSE_DATABASE: clickhouseSystemDatabase,\n          CLICKHOUSE_DATE_FIELD: metadata?.dateField,\n          CLICKHOUSE_SPLIT_NUM_DAYS: pipelineArgs.splitNumDays,\n          CLICKHOUSE_DIRECT: mode === 'LEVEL' || undefined,\n        },\n        maxReplicas: 20,\n        podArgs: {\n          k8sServiceAccountName: getConfigs().serviceId,\n          image: getServiceImage({ serviceId: 'sonic', imageTag: 'latest', resolve: true }),\n        },\n      },\n    });\n  }\n\n  if (mode === 'STREAM' || mode === 'STREAM_SPLIT') {\n    createStream({\n      name,\n      mode,\n      pipelineArgs,\n      tableArgs,\n      table,\n    });\n  } else if (mode === 'LEVEL' || mode === 'LEVEL_SPLIT') {\n    createLevel({\n      name,\n      mode,\n      database: clickhouseSystemDatabase,\n      pipelineArgs,\n      tableArgs,\n    });\n  }\n\n  return { table };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: ClickhousePipelineArgs",
            "type": "ClickhousePipelineArgs"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/clickhouse/provider.ts",
    "exports": [
      {
        "type": "function",
        "name": " getClickhouseProvider",
        "text": "\n\nexport function getClickhouseProvider(args?: { name?: string; replicaName?: string }) {\n  const { name = 'sonic-cluster', replicaName = 'instance-0-2' } = args || {};\n  const clusterReplicaName = `${name}__${replicaName}`;\n  if (providers[clusterReplicaName]) return providers[clusterReplicaName];\n  const secret = getSecretValue(`${name}-clickhouse`).apply(JSON.parse);\n  const username = secret.apply((s) => s.username);\n  const password = pulumi.secret(secret.apply((s) => s.password));\n\n  const replica = secret.apply((s) => s.replicas.find((r: any) => r.name === replicaName).domain);\n  const provider = new clickhouse.Provider(\n    clusterReplicaName,\n    {\n      username,\n      password,\n      host: replica,\n      port: 9000,\n    },\n    { aliases: [{ name: 'clickhouse' }] }\n  );\n  providers[clusterReplicaName] = provider;\n  return provider;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args?: { name?: string; replicaName?: string }",
            "type": "{ name?: string; replicaName?: string }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/clickhouse/stream.ts",
    "exports": [
      {
        "type": "function",
        "name": " createStream",
        "text": "\n\nexport function createStream(args: {\n  name: string;\n  tableArgs: ClickhousePipelineArgs['tableArgs'];\n  pipelineArgs: ClickhousePipelineArgs['pipelineArgs'];\n  table: Table;\n  mode: 'STREAM' | 'STREAM_SPLIT';\n}) {\n  const { mode, tableArgs, pipelineArgs, table } = args;\n\n  const { metadata, columns, engineParams, orderBies, partitionBies, settings } = tableArgs;\n\n  const {\n    topic,\n    consumerGroup,\n    kafkaFormat,\n    kafkaThreadPerConsumer,\n    kafkaNumConsumers,\n    streamEngine,\n    splitNumDays,\n    interval = '5 minutes',\n  } = pipelineArgs || {};\n\n  const { projectId } = getConfigs();\n\n  const tableName = args.name.replace(/-/g, '_');\n  const name = args.name.replace(/_/g, '-');\n\n  createKafkaTopic({ name });\n\n  // TODO mode is top level, streamEngine is inner level\n  let oldTable;\n  if (mode === 'STREAM_SPLIT') {\n    oldTable = createClickhouseTable({\n      name: `${tableName}__old`,\n      database: clickhouseSystemDatabase,\n      engine: 'MergeTree',\n      metadata,\n      // 15 minute chunks\n      partitionBies: [\n        { by: sonicUpdatedAtColumn, partitionFunction: 'toYYYYMMDD' },\n        { by: sonicUpdatedAtColumn, partitionFunction: 'toHour' },\n        { by: `intDiv(toMinute(${sonicUpdatedAtColumn}), 15)` },\n      ],\n      orderBies: (partitionBies.length ? partitionBies.map((p) => p.by) : orderBies) as string[],\n      columns,\n      settings,\n    });\n    createClickhouseTable({\n      name: `${tableName}__temp`,\n      database: clickhouseSystemDatabase,\n      engine: 'ReplacingMergeTree',\n      engineParams,\n      orderBies,\n      partitionBies,\n      metadata,\n      columns,\n      settings,\n    });\n  }\n\n  if (streamEngine === 'clickhouse-table') {\n    createStreamKafkaEngine({\n      tableName,\n      topic,\n      consumerGroup,\n      columns,\n      kafkaFormat,\n      kafkaThreadPerConsumer,\n      kafkaNumConsumers,\n      mode,\n      splitNumDays,\n      metadata,\n      table,\n      oldTable,\n    });\n  }\n\n  if (streamEngine === 'kafka-connect') {\n    const defaultTable = mode === 'STREAM_SPLIT' ? oldTable.name : table.name;\n    createKafkaConnectorClickhouse({\n      name: name,\n      provider: getK8sProvider({ cluster: 'sonic-cluster', namespace: 'kafka-connect' }),\n      topics: [pipelineArgs.topic],\n      defaultTable,\n      realtimeTable: table.name,\n      dateField: metadata?.dateField || 'event_date',\n      splitDays: splitNumDays,\n    });\n  }\n\n  if (mode === 'STREAM_SPLIT') {\n    createTemporalSchedule(name, {\n      projectId,\n      serviceId: 'clickhouse-ops',\n      namespace: 'clickhouse-ops-ns',\n      scheduleId: name,\n      spec: {\n        intervals: [{ every: interval }],\n      },\n      action: {\n        type: 'startWorkflow',\n        workflowType: 'mergePartition',\n        taskQueue: 'queue',\n        args: [\n          {\n            table: table.name,\n            partitioning: partitionBies[0],\n            splitNumDays,\n          },\n        ],\n        searchAttributes: {\n          merge_table: [tableName], // 'table' is reserved\n        },\n      },\n      policies: { overlap: ScheduleOverlapPolicy.BUFFER_ONE },\n    });\n\n    if (metadata.dateField) {\n      // once a day, run optimize on the day that just dropped off the end of the dedup window\n      // run at a random hour between 1 and 22\n      createTemporalSchedule(`${name}-optimize`, {\n        projectId,\n        serviceId: 'clickhouse-ops',\n        namespace: 'clickhouse-ops-ns',\n        scheduleId: `${name}-optimize`,\n        spec: {\n          calendars: [{ second: 0, ...getScheduleOffset(name) }],\n        },\n        action: {\n          type: 'startWorkflow',\n          workflowType: 'optimize',\n          taskQueue: 'queue',\n          args: [\n            { database: clickhouseSystemDatabase, table: tableName, daysBack: splitNumDays + 1 },\n          ],\n        },\n        policies: { overlap: ScheduleOverlapPolicy.BUFFER_ONE },\n      });\n    }\n  }\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  tableArgs: ClickhousePipelineArgs['tableArgs'];\n  pipelineArgs: ClickhousePipelineArgs['pipelineArgs'];\n  table: Table;\n  mode: 'STREAM' | 'STREAM_SPLIT';\n}",
            "type": "{\n  name: string;\n  tableArgs: ClickhousePipelineArgs['tableArgs'];\n  pipelineArgs: ClickhousePipelineArgs['pipelineArgs'];\n  table: Table;\n  mode: 'STREAM' | 'STREAM_SPLIT';\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/clickhouse/table.ts",
    "exports": [
      {
        "name": " ClickhouseTableArgs",
        "text": "\n\nexport type ClickhouseTableArgs = {\n  name: string;\n  database: Input<string>;\n  cluster?: Input<string>;\n  engine: ClickhouseTableEngines;\n  engineParams?: Input<Input<string>[]>;\n  orderBies?: string[];\n  metadata?: {\n    dateField: string;\n    providerIdField: Input<string>;\n    providerAccountField: Input<string>;\n  };\n  indices?: Input<Input<ClickhouseIndex>[]>;\n  partitionBies?: types.input.TablePartitionBy[];\n  columns?: ClickhouseColumn[];\n  settings?: { [key: string]: any };\n  comment?: Input<string>;\n  protect?: boolean;\n};",
        "type": "{\n  name: string;\n  database: Input<string>;\n  cluster?: Input<string>;\n  engine: ClickhouseTableEngines;\n  engineParams?: Input<Input<string>[]>;\n  orderBies?: string[];\n  metadata?: {\n    dateField: string;\n    providerIdField: Input<string>;\n    providerAccountField: Input<string>;\n  };\n  indices?: Input<Input<ClickhouseIndex>[]>;\n  partitionBies?: types.input.TablePartitionBy[];\n  columns?: ClickhouseColumn[];\n  settings?: { [key: string]: any };\n  comment?: Input<string>;\n  protect?: boolean;\n}"
      },
      {
        "name": " KafkaArgs",
        "text": "\n\nexport type KafkaArgs = {\n  name: string;\n  topic?: string;\n  columns: ClickhouseColumn[];\n  consumerGroup?: string;\n  kafkaFormat?: string;\n  kafkaThreadPerConsumer?: number;\n  kafkaNumConsumers?: number;\n};",
        "type": "{\n  name: string;\n  topic?: string;\n  columns: ClickhouseColumn[];\n  consumerGroup?: string;\n  kafkaFormat?: string;\n  kafkaThreadPerConsumer?: number;\n  kafkaNumConsumers?: number;\n}"
      },
      {
        "type": "function",
        "name": " createKafkaTable",
        "text": "\n\nexport function createKafkaTable(args: KafkaArgs & { database: string }) {\n  const {\n    name,\n    database,\n    topic,\n    consumerGroup = topic,\n    kafkaFormat: kafka_format = 'JSONEachRow',\n    columns,\n    kafkaThreadPerConsumer = 0,\n    kafkaNumConsumers = 4,\n  } = args;\n\n  const kafkaProvider = getKafkaProvider();\n\n  return createClickhouseTable({\n    database,\n    engine: 'Kafka',\n    settings: {\n      kafka_broker_list: kafkaProvider.bootstrapServers.apply((s: any) => JSON.parse(s)[0]),\n      kafka_topic_list: topic,\n      kafka_group_name: consumerGroup,\n      kafka_format,\n      kafka_thread_per_consumer: String(kafkaThreadPerConsumer),\n      kafka_num_consumers: String(kafkaNumConsumers),\n      // kafka_handle_error_mode: 'stream',\n      kafka_commit_every_batch: '1',\n      kafka_handle_error_mode: 'stream',\n    },\n    metadata: null,\n    name,\n    columns: columnsForKafka(columns),\n  });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: KafkaArgs & { database: string }",
            "type": "KafkaArgs & { database: string }"
          }
        ]
      },
      {
        "type": "function",
        "name": " createClickhouseTable",
        "text": "\n\nexport function createClickhouseTable(tableArgs: ClickhouseTableArgs) {\n  const {\n    engine,\n    cluster = useCluster(engine),\n    database,\n    name,\n    columns,\n    indices,\n    orderBies,\n    engineParams = [],\n    comment,\n    metadata,\n    protect,\n  } = tableArgs;\n\n  const tableName = name.replace(/-/g, '_');\n\n  if (!/^[a-zA-Z0-9_]+$/.test(tableName)) {\n    throw new Error('Table name must contain only characters, numbers and underscores');\n  }\n\n  var { settings, partitionBies } = tableArgs;\n\n  if (!partitionBies?.length && metadata) {\n    partitionBies = getPartitionBies({ metadata, columns });\n  }\n\n  settings = {\n    ...defaultSettings(engine),\n    ...settings,\n  };\n\n  const unnestedColumns = columns.map((column) => convertColumn(column)).flat();\n  const table = new Table(\n    `${database}.${tableName}`,\n    {\n      cluster,\n      database,\n      name: tableName,\n      columns: unnestedColumns,\n      engine,\n      engineParams,\n      indices,\n      orderBies,\n      partitionBies,\n      comment,\n      settings,\n    },\n    {\n      replaceOnChanges: engine === 'Kafka' || engine === 'Null' ? ['columns'] : undefined,\n      protect,\n      deleteBeforeReplace: true,\n      provider: getClickhouseProvider(),\n      aliases: [{ name: `${database}.${name.replace(/_/g, '-')}` }],\n    }\n  );\n  return table;\n}",
        "parameters": [
          {
            "name": "tableArgs",
            "text": "tableArgs: ClickhouseTableArgs",
            "type": "ClickhouseTableArgs"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/clickhouse/utils.ts",
    "exports": [
      {
        "name": " clickhouseSystemDatabase",
        "text": "\n\nexport const clickhouseSystemDatabase = 'sonic_system';",
        "type": "variable"
      },
      {
        "name": " clickhousePublicDatabase",
        "text": "\nexport const clickhousePublicDatabase = 'public';",
        "type": "variable"
      },
      {
        "name": " sonicUpdatedAtColumn",
        "text": "\nexport const sonicUpdatedAtColumn = 'sonic_updated_at';",
        "type": "variable"
      },
      {
        "type": "function",
        "name": " useCluster",
        "text": "\n\nexport function useCluster(engine: string) {\n  return engine.includes('Replicated') ? 'main' : undefined;\n}",
        "parameters": [
          {
            "name": "engine",
            "text": "engine: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " getPartitionBies",
        "text": "\n\nexport function getPartitionBies(args: {\n  metadata: any;\n  columns: ClickhouseColumn[];\n  allowTwoPartitionBies?: boolean;\n}) {\n  const { metadata, columns, allowTwoPartitionBies = false } = args;\n  const partitionBies: types.input.TablePartitionBy[] = [];\n\n  if (metadata?.dateField) {\n    const dateField = columns.find((column) => column.name === metadata.dateField);\n    const partitionBy = ['DateTime', 'DateTime64'].includes(dateField?.type)\n      ? {\n          by: metadata.dateField,\n          partitionFunction: 'toYYYYMMDD',\n        }\n      : {\n          by: metadata.dateField,\n        };\n\n    partitionBies.push(partitionBy);\n  }\n\n  if (metadata?.providerAccountField && (allowTwoPartitionBies || !metadata?.dateField)) {\n    partitionBies.push({\n      by: metadata.providerAccountField,\n      partitionFunction: 'sipHash64',\n      mod: '1000',\n    });\n  }\n\n  return partitionBies;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  metadata: any;\n  columns: ClickhouseColumn[];\n  allowTwoPartitionBies?: boolean;\n}",
            "type": "{\n  metadata: any;\n  columns: ClickhouseColumn[];\n  allowTwoPartitionBies?: boolean;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/clickhouse/view.ts",
    "exports": [
      {
        "type": "function",
        "name": " createClickhouseView",
        "text": "\n\nexport function createClickhouseView(tableArgs: {\n  name: string;\n  database: Input<string>;\n  cluster?: Input<string>;\n  query: Input<string>;\n  materialized?: boolean;\n  toTable?: Table;\n  comment?: Input<string>;\n  dependsOn?: DependsOn;\n  recreateOn?: string;\n}) {\n  const {\n    cluster = 'main',\n    database,\n    name,\n    materialized = false,\n    query,\n    toTable,\n    dependsOn,\n    recreateOn,\n  } = tableArgs;\n  let { comment } = tableArgs;\n\n  if (recreateOn) {\n    comment = comment ? `${recreateOn}. ${comment}` : recreateOn;\n  }\n  const tableName = name.replace(/-/g, '_');\n\n  const table = new View(\n    `${database}.${tableName}`,\n    {\n      cluster,\n      database,\n      name: tableName,\n      materialized,\n      query,\n      toTable: toTable ? pulumi.interpolate`${toTable.database}.${toTable.name}` : undefined,\n      comment,\n    },\n    {\n      deleteBeforeReplace: true,\n      provider: getClickhouseProvider(),\n      dependsOn,\n      aliases: [{ name: `${database}.${name.replace(/_/g, '-')}` }],\n    }\n  );\n  return table;\n}",
        "parameters": [
          {
            "name": "tableArgs",
            "text": "tableArgs: {\n  name: string;\n  database: Input<string>;\n  cluster?: Input<string>;\n  query: Input<string>;\n  materialized?: boolean;\n  toTable?: Table;\n  comment?: Input<string>;\n  dependsOn?: DependsOn;\n  recreateOn?: string;\n}",
            "type": "{\n  name: string;\n  database: Input<string>;\n  cluster?: Input<string>;\n  query: Input<string>;\n  materialized?: boolean;\n  toTable?: Table;\n  comment?: Input<string>;\n  dependsOn?: DependsOn;\n  recreateOn?: string;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/cloud-build/buildNumber.ts",
    "exports": [
      {
        "name": " BuildNumber",
        "text": "\n\nexport class BuildNumber extends pulumi.dynamic.Resource {\n  public readonly buildNumber!: pulumi.Output<string>;\n  public readonly gitSha!: pulumi.Output<string>;\n  constructor(name: string, args: BuildNumberResourceInputs, opts?: pulumi.CustomResourceOptions) {\n    super(\n      new BuildNumberProvider(),\n      name,\n      { buildNumber: undefined, gitSha: undefined, ...args },\n      opts\n    );\n  }\n}",
        "type": " pulumi.dynamic.Resource"
      },
      {
        "type": "function",
        "name": " getBuildVersion",
        "text": "\n\nexport function getBuildVersion() {\n  const gitSha = getGitSha(true);\n  if (!buildNumber) {\n    buildNumber = new BuildNumber('build-number', {\n      name: 'build-number',\n      gitSha,\n    });\n    if (process.env.IS_CLOUD_BUILD) {\n      buildNumber.buildNumber.apply((buildNumber) => {\n        fs.writeFileSync('build-number.txt', buildNumber);\n      });\n    }\n  }\n  const version = buildNumber.buildNumber.apply((buildNumber) => `${buildNumber}.0.0`);\n  return version;\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/pulumi/cloud-build/createTriggerForService.ts",
    "exports": [
      {
        "type": "function",
        "name": " createBuildTrigger",
        "text": "\n\nexport function createBuildTrigger(args: CreateBuildTriggerArgs = {}) {\n  const { serviceId, projectId, location, isMultiPerProject, config } = getConfigs();\n  const {\n    name = `${serviceId}-service`,\n    workerPool,\n    runtime = 'node',\n    moreSteps = [],\n    k8s,\n    dockerfileRun,\n    baseDir = 'services',\n    dockerfileCacheRun,\n    dockerBuildEnvs = [],\n    machineType,\n    downloadFilesFromGcs,\n  } = args;\n  if (isMultiPerProject) return;\n  const stepsBefore: gcp.types.input.cloudbuild.TriggerBuildStep[] = [];\n\n  const volumes = [];\n\n  let runtimeBaseImage = args.runtimeBaseImage;\n  if (downloadFilesFromGcs?.length) {\n    volumes.push({ name: 'tw-extra', path: '/tw-extra' });\n    stepsBefore.push({\n      name: 'gcr.io/cloud-builders/gsutil:latest',\n      args: [\n        'cp',\n        '-r',\n        ...downloadFilesFromGcs.map((f) => `gs://${f.bucket}/${f.filename}`),\n        '/tw-extra',\n      ],\n      volumes,\n      id: 'download-files-from-gcs',\n    });\n  }\n  const pulumiImage = k8s ? 'pulumi-kubectl' : 'pulumi';\n  let runtimeImageTag = 'latest';\n  if (runtime === 'python' && k8s?.gpu) {\n    runtimeBaseImage = getDevopsImage('cuda-python');\n  } else if (runtime === 'node') {\n    // check in ../package-lock.json if there is a dependency on node-gyp\n    const packageLock = fs.readFileSync('../package-lock.json', 'utf8').toString();\n    const hasNodeGyp = packageLock.includes(`\"node-gyp\"`);\n    runtimeImageTag = hasNodeGyp ? 'fat' : 'latest';\n    runtimeBaseImage = getDevopsImage('base-node', '$_RUNTIME_IMAGE_TAG');\n  }\n  if (!runtimeBaseImage) {\n    if (globalState['gcp:dataflow/pipeline:Pipeline']) {\n      runtimeBaseImage = getDevopsImage(`base-beam-${runtime}`);\n    }\n  }\n  if (runtimeBaseImage) {\n    dockerBuildEnvs.push(pulumi.interpolate`RUNTIME_BASE_IMAGE=${runtimeBaseImage}`);\n  }\n  if (dockerfileRun) {\n    dockerBuildEnvs.push(`ADD_COMMAND=${dockerfileRun}`);\n  }\n  if (dockerfileCacheRun) {\n    dockerBuildEnvs.push(`ADD_COMMAND_CACHE=${dockerfileCacheRun}`);\n  }\n  const steps: gcp.types.input.cloudbuild.TriggerBuildStep[] = [\n    ...stepsBefore,\n    {\n      name: getDevopsImage('docker-builder'),\n      envs: [\n        'PROJECT_ID=$PROJECT_ID',\n        `SERVICE_ID=$_SERVICE_ID`,\n        `SERVICE_DIR=${baseDir}/$_SERVICE_ID`,\n        'COMMIT_SHA=$COMMIT_SHA',\n        'REF=$_REF',\n        'STACK=$_STACK',\n        `RUNTIME=$_RUNTIME`,\n        ...dockerBuildEnvs,\n      ],\n      volumes,\n      id: 'build',\n      waitFors: ['-'],\n    },\n    ...moreSteps,\n    {\n      name: getDevopsImage('$_PULUMI_IMAGE'),\n      script: 'run-pulumi',\n      dir: `${baseDir}/$_SERVICE_ID/infra`,\n      secretEnvs: ['PULUMI_ACCESS_TOKEN'],\n      envs: [\n        `SERVICE_ID=$_SERVICE_ID`,\n        'GITHUB_SHA=$COMMIT_SHA',\n        'COMMIT_SHA=$COMMIT_SHA',\n        'LOCATION=$LOCATION',\n        'BUILD_ID=$BUILD_ID',\n        'PROJECT_ID=$PROJECT_ID',\n        'STACK=$_STACK',\n        'AUTHOR=$_AUTHOR',\n        'IS_CLOUD_BUILD=true',\n        'BUILD_ENVS=$_BUILD_ENVS',\n      ],\n      waitFors: ['build', ...moreSteps?.map((s) => s.id).filter(Boolean)],\n      id: 'pulumi',\n    },\n  ];\n\n  // get all images needed for the steps, and add a step to pull them\n  const images = steps.filter((s) => s.waitFors[0] !== '-').map((s) => s.name);\n\n  steps.unshift({\n    name: 'gcr.io/cloud-builders/docker',\n    script: pulumi.all(images.map((i) => pulumi.interpolate`docker pull ${i}`)).apply((images) => {\n      return images.join(' & ');\n    }),\n    id: 'pull-images',\n    envs: [\n      '_SERVICE_ID=$_SERVICE_ID',\n      '_RUNTIME=$_RUNTIME',\n      '_RUNTIME_IMAGE_TAG=$_RUNTIME_IMAGE_TAG',\n      '_PULUMI_IMAGE=$_PULUMI_IMAGE',\n    ],\n    waitFors: ['-'],\n  });\n\n  const secretsUsed = steps\n    .filter((s) => s.secretEnvs)\n    .map((s) => s.secretEnvs as string[])\n    .reduce((acc, val) => acc.concat(val), []);\n\n  const secretManagers = [\n    {\n      versionName: getSecretId('pulumi-access-token'),\n      env: 'PULUMI_ACCESS_TOKEN',\n    },\n  ];\n\n  if (secretsUsed.includes('CLOUDFLARE_API_TOKEN')) {\n    secretManagers.push({\n      versionName: getSecretId('cloudflare-token-pulumi'),\n      env: 'CLOUDFLARE_API_TOKEN',\n    });\n  }\n\n  const options: gcp.cloudbuild.TriggerArgs = {\n    name: name,\n    build: {\n      steps,\n      substitutions: {\n        _SERVICE_ID: serviceId,\n        _RUNTIME: runtime,\n        _RUNTIME_IMAGE_TAG: runtimeImageTag,\n        _PULUMI_IMAGE: pulumiImage,\n      },\n      availableSecrets: {\n        secretManagers,\n      },\n      timeout: '3600s',\n      options: {\n        ...(machineType ? { machineType } : null),\n      },\n    },\n    tags: [`serviceId:${serviceId}`],\n    sourceToBuild: {\n      ref: 'refs/heads/master',\n      repoType: 'GITHUB',\n      uri: pulumi.interpolate`https://github.com/${pulumi.output(getGithubOrg())}/${pulumi.output(\n        getGitRepoName()\n      )}`,\n    },\n  };\n\n  if (workerPool) {\n    options.build['options'] = {\n      workerPool: `projects/${projectId}/locations/${location}/workerPools/${workerPool}`,\n    };\n  }\n\n  new gcp.cloudbuild.Trigger(name, options, { aliases: [{ name: 'cloud-build-trigger' }] });\n  if (config.getBoolean('require-approval')) {\n    new gcp.cloudbuild.Trigger('cloud-build-trigger-approve', {\n      ...options,\n      name: `${options.name}-approve`,\n      approvalConfig: { approvalRequired: true },\n    });\n  }\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: CreateBuildTriggerArgs = {}",
            "type": "CreateBuildTriggerArgs"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/cloud-build/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/cloud-build/types.ts",
    "exports": [
      {
        "name": " CreateBuildTriggerArgs",
        "text": "\n\nexport type CreateBuildTriggerArgs = {\n  name?: string;\n  workerPool?: string;\n  runtime?: 'node' | 'python' | 'clojure' | 'beam-python';\n  moreSteps?: gcp.types.input.cloudbuild.TriggerBuildStep[];\n  k8s?: { clusters?: { name: string; location: string }[]; gpu?: boolean };\n  dockerfileRun?: string;\n  dockerfileCacheRun?: string;\n  dockerBuildEnvs?: pulumi.Input<string>[];\n  machineType?: 'E2_HIGHCPU_8' | 'E2_HIGHCPU_32';\n  baseDir?: string;\n  downloadFilesFromGcs?: { bucket: string; filename: string }[];\n  runtimeBaseImage?: pulumi.Input<string>;\n};",
        "type": "{\n  name?: string;\n  workerPool?: string;\n  runtime?: 'node' | 'python' | 'clojure' | 'beam-python';\n  moreSteps?: gcp.types.input.cloudbuild.TriggerBuildStep[];\n  k8s?: { clusters?: { name: string; location: string }[]; gpu?: boolean };\n  dockerfileRun?: string;\n  dockerfileCacheRun?: string;\n  dockerBuildEnvs?: pulumi.Input<string>[];\n  machineType?: 'E2_HIGHCPU_8' | 'E2_HIGHCPU_32';\n  baseDir?: string;\n  downloadFilesFromGcs?: { bucket: string; filename: string }[];\n  runtimeBaseImage?: pulumi.Input<string>;\n}"
      }
    ]
  },
  {
    "file": "@tw/pulumi/cloud-build/utils.ts",
    "exports": [
      {
        "type": "function",
        "name": " getDevopsImage",
        "text": "\n\nexport function getDevopsImage(\n  imageName: string,\n  tag: pulumi.Input<string> = 'latest'\n): pulumi.Output<string> {\n  const { projectId } = getConfigs();\n  return pulumi.interpolate`us-central1-docker.pkg.dev/${projectId}/devops-docker/${imageName}:${tag}`;\n}",
        "parameters": [
          {
            "name": "imageName",
            "text": "imageName: string",
            "type": "string"
          },
          {
            "name": "tag",
            "text": "tag: pulumi.Input<string> = 'latest'",
            "type": "pulumi.Input<string>"
          }
        ]
      },
      {
        "name": " defaultCmd",
        "text": "\n\nexport const defaultCmd = {\n  python:\n    'exec gunicorn -k uvicorn.workers.UvicornWorker --bind :8080 --workers 1 --threads 8 --timeout 0 --chdir src app:app',\n  node: 'npm start',\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/pulumi/cloud-run/alerts.ts",
    "exports": [
      {
        "type": "function",
        "name": " createCloudRunAlert",
        "text": "\n\nexport function createCloudRunAlert(args: { serviceName: string }) {\n  const { serviceName } = args;\n\n  const conditions = [\n    {\n      displayName: `Cloud Run Requests 5xx, 4xx ${serviceName}`,\n      conditionThreshold: {\n        aggregations: [\n          {\n            alignmentPeriod: '3600s',\n            crossSeriesReducer: 'REDUCE_SUM',\n            groupByFields: ['metric.label.response_code_class'],\n            perSeriesAligner: 'ALIGN_SUM',\n          },\n          {\n            alignmentPeriod: '3600s',\n            perSeriesAligner: 'ALIGN_PERCENT_CHANGE',\n          },\n        ],\n        comparison: 'COMPARISON_GT',\n        duration: '3600s',\n        filter: `resource.type = \"cloud_run_revision\" AND resource.labels.service_name = \"${serviceName}\" AND metric.type = \"run.googleapis.com/request_count\" AND metric.labels.response_code_class = one_of(\"4xx\", \"5xx\")`,\n        thresholdValue: 30000,\n        trigger: {\n          count: 1,\n        },\n      },\n    },\n  ];\n\n  const alert = createAlert({\n    name: serviceName,\n    slack: true,\n    conditions,\n    displayName: `Cloud run ${serviceName} error codes`,\n  });\n  return alert;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { serviceName: string }",
            "type": "{ serviceName: string }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/cloud-run/createCloudRunService.ts",
    "exports": [
      {
        "type": "function",
        "name": " createCloudRunService",
        "text": "\n\nexport function createCloudRunService(\n  serviceId: string,\n  projectId: string,\n  location: string,\n  settings: {\n    secretVersion?: gcp.secretmanager.SecretVersion;\n    allowUnauthenticated?: boolean;\n    concurrency?: number;\n    maxInstances?: number;\n    minInstances?: number;\n    alwaysOnCPU?: boolean;\n    timeoutSeconds?: number;\n    memoryLimit?: string;\n    CPULimit?: K8sCPU;\n    vpcConnectorName?: any;\n    vpcAccessEgress?: 'private-ranges-only' | 'all';\n    serviceMod?: string;\n    legacySecrets?: boolean;\n    serviceAccount?: gcp.serviceaccount.Account;\n    executionEnvironment?: 'gen1' | 'gen2';\n    dockerImage?: string;\n    envs?: any;\n    ports?: number[];\n    containerArgs?: string[];\n    startupCpuBoost?: boolean;\n  } = {},\n  serviceArgs?: gcp.cloudrun.ServiceArgs\n) {\n  monitoringState.cloudRun.enabled = true;\n  const {\n    secretVersion,\n    allowUnauthenticated,\n    maxInstances,\n    minInstances,\n    alwaysOnCPU,\n    timeoutSeconds = 600,\n    memoryLimit = '1Gi',\n    CPULimit = 1,\n    vpcConnectorName = 'app-vpc-connector',\n    vpcAccessEgress = 'private-ranges-only',\n    serviceMod,\n    legacySecrets,\n    serviceAccount,\n    executionEnvironment,\n    dockerImage = getServiceImage(),\n    envs,\n    ports,\n    containerArgs,\n    startupCpuBoost = false,\n  } = settings;\n  // this is a temp solution to multiple resource settings for one\n  // service. the ideal here would be the ability to deploy multiple\n  // revisions as two different resources. this is something that we should still\n  // look into. also i'd like to check if k8s would have solved this one.\n  let cloudRunServiceName = serviceId;\n  if (serviceMod && !process.env.IS_LOCAL) {\n    cloudRunServiceName += `-${serviceMod}`;\n  }\n  const serviceConfig = loadServiceConfig();\n  const { workers, concurrency } = pythonWorkers({\n    cpu: CPULimit,\n    concurrency: settings.concurrency,\n    serviceConfig,\n  });\n  const deploymentEnvs = [\n    ...convertEnvs(envs),\n    ...convertEnvs(serviceConfig?.env),\n    ...getServiceDefaultEnvs(),\n\n    { name: 'gracefulTerminationTimeout', value: String(timeoutSeconds * 1000) || '' },\n    { name: 'WEB_CONCURRENCY', value: String(workers) },\n    { name: 'TW_MEM_REQUEST', value: String(k8sMemoryToNumberMi(memoryLimit)) },\n    ...convertEnvs(serviceEnvs),\n  ];\n  let ownServiceArgs: gcp.cloudrun.ServiceArgs = {\n    name: getUniqueNameInProject(cloudRunServiceName),\n    location,\n    autogenerateRevisionName: true,\n    metadata: {\n      labels: createLabels(),\n      annotations: {\n        'run.googleapis.com/ingress': 'all',\n      },\n    },\n    template: {\n      spec: {\n        containers: [\n          {\n            image: dockerImage,\n            resources: { limits: { memory: memoryLimit, cpu: String(CPULimit) || '1' } },\n            envs: sortEnvs(deploymentEnvs),\n            ports: ports?.map((port) => {\n              return { containerPort: port };\n            }),\n            args: containerArgs,\n          },\n        ],\n        containerConcurrency: concurrency ?? 80,\n        timeoutSeconds: timeoutSeconds ?? 300,\n      },\n      metadata: {\n        labels: {\n          'run.googleapis.com/startupProbeType': 'Default',\n          ...createLabels(),\n        },\n        annotations: {\n          'autoscaling.knative.dev/maxScale': String(maxInstances || 100),\n          'autoscaling.knative.dev/minScale': String((isProduction && minInstances) || 0),\n          'run.googleapis.com/cpu-throttling': String(alwaysOnCPU ? false : true),\n          ...(startupCpuBoost\n            ? { 'run.googleapis.com/startup-cpu-boost': String(startupCpuBoost) }\n            : null),\n        },\n      },\n    },\n    traffics: [\n      {\n        latestRevision: true,\n        percent: 100,\n      },\n    ],\n    ...serviceArgs,\n  };\n  if (secretVersion) {\n    ownServiceArgs = addSecrets(ownServiceArgs, serviceId, secretVersion, legacySecrets);\n  }\n  if (vpcConnectorName) {\n    ownServiceArgs = addVpcConnector(\n      ownServiceArgs,\n      projectId,\n      location,\n      vpcConnectorName,\n      vpcAccessEgress\n    );\n  }\n  if (serviceAccount) {\n    ownServiceArgs.template['spec'].serviceAccountName = serviceAccount.email;\n  } else {\n    ownServiceArgs.template['spec'].serviceAccountName = getDefaultComputeServiceAccount();\n  }\n  const service = new gcp.cloudrun.Service(\n    `${cloudRunServiceName}-default-cloud-run`,\n    ownServiceArgs,\n    { ignoreChanges: ['metadata.annotations.[\"run.googleapis.com/operation-id\"]'] }\n  );\n  if (allowUnauthenticated) {\n    serviceNoAuth(location, projectId, service.name);\n  }\n\n  if (executionEnvironment) {\n    ownServiceArgs.template['metadata']['annotations']['run.googleapis.com/execution-environment'] =\n      executionEnvironment;\n    if (executionEnvironment === 'gen2') {\n      ownServiceArgs['metadata']['annotations']['run.googleapis.com/launch-stage'] = 'BETA';\n    }\n  }\n\n  const cloudRunUrl = getCloudRunUrl(service) as any;\n  const deployment: pulumi.Input<ServiceEntryDeployment> = {\n    name: (serviceMod || serviceId) as any,\n    endpoints: {\n      authenticated: {\n        url: cloudRunUrl,\n        type: 'authenticated',\n        audience: cloudRunUrl,\n      },\n    },\n  };\n  addServiceEntryDeployment({ deployment, type: 'cloud-run' });\n\n  return service;\n}",
        "parameters": [
          {
            "name": "serviceId",
            "text": "serviceId: string",
            "type": "string"
          },
          {
            "name": "projectId",
            "text": "projectId: string",
            "type": "string"
          },
          {
            "name": "location",
            "text": "location: string",
            "type": "string"
          },
          {
            "name": "settings",
            "text": "settings: {\n    secretVersion?: gcp.secretmanager.SecretVersion;\n    allowUnauthenticated?: boolean;\n    concurrency?: number;\n    maxInstances?: number;\n    minInstances?: number;\n    alwaysOnCPU?: boolean;\n    timeoutSeconds?: number;\n    memoryLimit?: string;\n    CPULimit?: K8sCPU;\n    vpcConnectorName?: any;\n    vpcAccessEgress?: 'private-ranges-only' | 'all';\n    serviceMod?: string;\n    legacySecrets?: boolean;\n    serviceAccount?: gcp.serviceaccount.Account;\n    executionEnvironment?: 'gen1' | 'gen2';\n    dockerImage?: string;\n    envs?: any;\n    ports?: number[];\n    containerArgs?: string[];\n    startupCpuBoost?: boolean;\n  } = {}",
            "type": "{\n    secretVersion?: gcp.secretmanager.SecretVersion;\n    allowUnauthenticated?: boolean;\n    concurrency?: number;\n    maxInstances?: number;\n    minInstances?: number;\n    alwaysOnCPU?: boolean;\n    timeoutSeconds?: number;\n    memoryLimit?: string;\n    CPULimit?: K8sCPU;\n    vpcConnectorName?: any;\n    vpcAccessEgress?: 'private-ranges-only' | 'all';\n    serviceMod?: string;\n    legacySecrets?: boolean;\n    serviceAccount?: gcp.serviceaccount.Account;\n    executionEnvironment?: 'gen1' | 'gen2';\n    dockerImage?: string;\n    envs?: any;\n    ports?: number[];\n    containerArgs?: string[];\n    startupCpuBoost?: boolean;\n  }"
          },
          {
            "name": "serviceArgs",
            "text": "serviceArgs?: gcp.cloudrun.ServiceArgs",
            "type": "gcp.cloudrun.ServiceArgs"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/cloud-run/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/cloud-run/utils.ts",
    "exports": [
      {
        "type": "function",
        "name": " getCloudRunUrl",
        "text": "\n\nexport function getCloudRunUrl(cloudRunService: gcp.cloudrun.Service) {\n  return cloudRunService.statuses[0].url;\n}",
        "parameters": [
          {
            "name": "cloudRunService",
            "text": "cloudRunService: gcp.cloudrun.Service",
            "type": "gcp.cloudrun.Service"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/cloud-tasks/createQueue.ts",
    "exports": [
      {
        "type": "function",
        "name": " createQueue",
        "text": "\n\nexport function createQueue(name: string, args: gcp.cloudtasks.QueueArgs) {\n  const queue = new gcp.cloudtasks.Queue(name, args, { protect: true });\n  return queue;\n}",
        "parameters": [
          {
            "name": "name",
            "text": "name: string",
            "type": "string"
          },
          {
            "name": "args",
            "text": "args: gcp.cloudtasks.QueueArgs",
            "type": "gcp.cloudtasks.QueueArgs"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/cloud-tasks/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/cloudflare/constants.ts",
    "exports": [
      {
        "name": " cloudFlareDomainMap",
        "text": "export const cloudFlareDomainMap = {\n  'whale.camera': '7d258d8677d057ee61f72fe7b7de4406',\n  'config-security.com': '38abe6948e2f6b3608727cb372e3af63',\n  'whale3.io': 'd4696f0ddcfba625f989a68a86b80db8',\n  'triplewhale.com': 'b5ad17cb0720654650cd0f0ce61b33d9',\n  'whaledb.io': '737f70f0c8bbde9e15738f21035950ed',\n  'triplestack.io': '30ea7bb6a4317ebf1508eacfc2ec62a8',\n};",
        "type": "variable"
      },
      {
        "type": "function",
        "name": " getCloudFlareZone",
        "text": "\n\nexport function getCloudFlareZone(domainName: string) {\n  return cloudFlareDomainMap[domainName];\n}",
        "parameters": [
          {
            "name": "domainName",
            "text": "domainName: string",
            "type": "string"
          }
        ]
      },
      {
        "name": " cloudFlareAccountId",
        "text": "\n\nexport const cloudFlareAccountId = '8aba1045308f729cc27d0e25b5f1f301';",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/pulumi/cloudflare/dns.ts",
    "exports": [
      {
        "type": "function",
        "name": " addDnsRecord",
        "text": "\n\nexport function addDnsRecord(args: {\n  name: string;\n  domainName: string;\n  value?: pulumi.Input<string>;\n  type: 'A' | 'AAAA' | 'CNAME';\n  ttl?: number;\n  proxied?: boolean;\n}): cloudflare.Record {\n  const { domainName, value, type, ttl, proxied = false } = args || {};\n  let name = args.name;\n  if (name === '') {\n    name = '@';\n  }\n  const record = new cloudflare.Record(\n    `${name}.${domainName}-${type}`,\n    {\n      zoneId: getCloudFlareZone(domainName),\n      name,\n      value,\n      type,\n      ttl: ttl ?? (proxied ? 1 : 300),\n      proxied,\n    },\n    {\n      provider: getCloudFlareProvider(),\n      deleteBeforeReplace: true,\n      aliases: [{ name: `${name}.${domainName}` }],\n    }\n  );\n  return record;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  domainName: string;\n  value?: pulumi.Input<string>;\n  type: 'A' | 'AAAA' | 'CNAME';\n  ttl?: number;\n  proxied?: boolean;\n}",
            "type": "{\n  name: string;\n  domainName: string;\n  value?: pulumi.Input<string>;\n  type: 'A' | 'AAAA' | 'CNAME';\n  ttl?: number;\n  proxied?: boolean;\n}"
          }
        ]
      },
      {
        "name": " dnsUrl",
        "text": "\n\nexport const dnsUrl = (record: cloudflare.Record, secure?: boolean) =>\n  pulumi.interpolate`http${secure ? 's' : ''}://${record.hostname}`;",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/pulumi/cloudflare/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/cloudflare/provider.ts",
    "exports": [
      {
        "type": "function",
        "name": " getCloudFlareProvider",
        "text": "\n\nexport function getCloudFlareProvider() {\n  if (!cloudFlareProvider) {\n    cloudFlareProvider = new cloudflare.Provider('cloudflare', {\n      apiToken: getSecretValue('cloudflare-token-pulumi'),\n    });\n  }\n  return cloudFlareProvider;\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/pulumi/cloudflare/rules.ts",
    "exports": [
      {
        "type": "function",
        "name": " createCloudflarePageRule",
        "text": "\n\nexport function createCloudflarePageRule(args: {\n  name: string;\n  domainName: string;\n  actions: cloudflare.types.input.PageRuleActions;\n}) {\n  const { name, domainName, actions } = args;\n  const target = `${name ? name + '.' : ''}${domainName}/*`;\n  new cloudflare.PageRule(\n    target,\n    {\n      target,\n      actions,\n      zoneId: getCloudFlareZone(domainName),\n    },\n    { provider: getCloudFlareProvider() }\n  );\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  domainName: string;\n  actions: cloudflare.types.input.PageRuleActions;\n}",
            "type": "{\n  name: string;\n  domainName: string;\n  actions: cloudflare.types.input.PageRuleActions;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/cloudflare/workers.ts",
    "exports": [
      {
        "type": "function",
        "name": " createCloudFlareWorkerRoute",
        "text": "\n\nexport function createCloudFlareWorkerRoute(args: {\n  scriptName: string;\n  domain: string;\n  path: string;\n}) {\n  const { scriptName, domain, path } = args || {};\n  const workerRoute = new cloudflare.WorkerRoute(\n    scriptName,\n    {\n      zoneId: getCloudFlareZone(domain.split('.').splice(-2).join('.')),\n      pattern: `${domain}${path}`,\n      scriptName: scriptName,\n    },\n    { provider: getCloudFlareProvider(), deleteBeforeReplace: true }\n  );\n  return workerRoute;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  scriptName: string;\n  domain: string;\n  path: string;\n}",
            "type": "{\n  scriptName: string;\n  domain: string;\n  path: string;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/compliance/index.ts",
    "exports": [
      {
        "type": "function",
        "name": " createDataDeletionSubscription",
        "text": "\nexport function createDataDeletionSubscription({\n  endpoint,\n  service,\n}: {\n  endpoint?: string;\n  service: serviceTarget;\n}) {\n  return createSubscription({\n    name: `data-deletion-request-sub-${serviceId}`,\n    topicName: compliance.DELETE_DATA_REQUEST_TOPIC,\n    endpoint: endpoint || '/delete-data-request',\n    service,\n  });\n}",
        "parameters": [
          {
            "name": "{\n  endpoint,\n  service,\n}",
            "text": "{\n  endpoint,\n  service,\n}: {\n  endpoint?: string;\n  service: serviceTarget;\n}",
            "type": "{\n  endpoint?: string;\n  service: serviceTarget;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/constants/envs.ts",
    "exports": [
      {
        "name": " projectId",
        "text": "\n\nexport const projectId = new pulumi.Config('gcp').require('project');",
        "type": "variable"
      },
      {
        "name": " stackName",
        "text": "\nexport const stackName = pulumi.getStack();",
        "type": "variable"
      },
      {
        "name": " isProduction",
        "text": "\n\nexport const isProduction = stackName === 'shofifi';",
        "type": "variable"
      },
      {
        "name": " isStaging",
        "text": "\nexport const isStaging = projectId === 'triple-whale-staging';",
        "type": "variable"
      },
      {
        "name": " isLocal",
        "text": "\nexport const isLocal = Boolean(process.env.IS_LOCAL);",
        "type": "variable"
      },
      {
        "name": " defaultDomain",
        "text": "\n\nexport const defaultDomain = 'whale3.io';",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/pulumi/constants/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/cron-job/alerts.ts",
    "exports": [
      {
        "type": "function",
        "name": " createCronJobAlert",
        "text": "\n\nexport function createCronJobAlert(name: string) {\n  createLogBasedAlert({\n    name: name,\n    sendEverySeconds: 3600,\n    slack: true,\n    logSearch: `resource.type=\"cloud_scheduler_job\" severity>=ERROR resource.labels.job_id=\"${name}\"`,\n    displayName: `Cron job ${name} failed`,\n  });\n}",
        "parameters": [
          {
            "name": "name",
            "text": "name: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/cron-job/createJob.ts",
    "exports": [
      {
        "type": "function",
        "name": " createCronJob",
        "text": "\n\nexport function createCronJob(args: {\n  name: string;\n  schedule: string;\n  httpTarget?: {\n    endpoint: pulumi.Input<string>;\n    httpMethod?: 'GET' | 'POST';\n    service: serviceTarget;\n  };\n  pubsubTarget?: {\n    topicName: pulumi.Input<string>;\n    attributes?: Record<any, any>;\n  };\n  generalHttpTarget?: {\n    httpMethod: pulumi.Input<string>;\n    serviceAccount?: pulumi.Input<string>;\n    url: pulumi.Input<string>;\n  };\n  workflowTarget?: {\n    workflowName: pulumi.Input<string>;\n  };\n  retryCount?: number;\n  body?: Record<any, any>;\n  paused?: boolean;\n}) {\n  const {\n    name,\n    httpTarget,\n    generalHttpTarget,\n    workflowTarget,\n    schedule,\n    retryCount = 0,\n    body,\n    pubsubTarget,\n    paused = false,\n  } = args;\n  if ([httpTarget, pubsubTarget, generalHttpTarget, workflowTarget].filter(Boolean).length !== 1) {\n    throw new Error('Exactly one of the target parameters must be provided.');\n  }\n  const { location, projectId } = getConfigs();\n  const jobArgs: gcp.cloudscheduler.JobArgs = {\n    name: getUniqueNameInProject(name),\n    schedule: schedule,\n    region: location,\n    paused,\n  };\n  if (generalHttpTarget) {\n    jobArgs.httpTarget = {\n      body: '',\n      httpMethod: generalHttpTarget.httpMethod || 'POST',\n      oauthToken: {\n        serviceAccountEmail: generalHttpTarget.serviceAccount,\n      },\n      uri: generalHttpTarget.url,\n    };\n  }\n  if (httpTarget) {\n    jobArgs.httpTarget = {\n      body: '',\n      httpMethod: httpTarget.httpMethod || 'POST',\n      oidcToken: {\n        audience: getAudience(httpTarget.service),\n        serviceAccountEmail: getServiceAccountForService(),\n      },\n      uri: getFullUrl(httpTarget.service, httpTarget.endpoint),\n    };\n    jobArgs.attemptDeadline = '1800s';\n  }\n  if (workflowTarget) {\n    jobArgs.httpTarget = {\n      body: '',\n      httpMethod: 'POST',\n      oauthToken: {\n        serviceAccountEmail: getServiceAccountForService(),\n      },\n      uri: pulumi.interpolate`https://workflowexecutions.googleapis.com/v1/projects/${projectId}/locations/${location}/workflows/${workflowTarget.workflowName}/executions`,\n    };\n  }\n  if (pubsubTarget) {\n    jobArgs.pubsubTarget = {\n      topicName: getPubsubTopicId(pubsubTarget.topicName),\n      attributes: pubsubTarget.attributes || { from: 'pulumi' },\n    };\n  }\n  if (body) {\n    if (httpTarget || generalHttpTarget) {\n      (jobArgs.httpTarget as any).body = Buffer.from(JSON.stringify(body)).toString('base64');\n      (jobArgs.httpTarget as any).headers = {\n        'Content-Type': 'application/json',\n      };\n    } else if (workflowTarget) {\n      (jobArgs.httpTarget as any).body = toBase64Output(\n        toJSONOutput({\n          argument: toJSONOutput(body),\n        })\n      );\n    } else if (pubsubTarget) {\n      (jobArgs.pubsubTarget as any).data = Buffer.from(JSON.stringify(body)).toString('base64');\n    }\n  }\n  if (retryCount) {\n    jobArgs.retryConfig = { retryCount };\n  }\n  const job = new gcp.cloudscheduler.Job(name, jobArgs);\n  createCronJobAlert(name);\n  return job;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  schedule: string;\n  httpTarget?: {\n    endpoint: pulumi.Input<string>;\n    httpMethod?: 'GET' | 'POST';\n    service: serviceTarget;\n  };\n  pubsubTarget?: {\n    topicName: pulumi.Input<string>;\n    attributes?: Record<any, any>;\n  };\n  generalHttpTarget?: {\n    httpMethod: pulumi.Input<string>;\n    serviceAccount?: pulumi.Input<string>;\n    url: pulumi.Input<string>;\n  };\n  workflowTarget?: {\n    workflowName: pulumi.Input<string>;\n  };\n  retryCount?: number;\n  body?: Record<any, any>;\n  paused?: boolean;\n}",
            "type": "{\n  name: string;\n  schedule: string;\n  httpTarget?: {\n    endpoint: pulumi.Input<string>;\n    httpMethod?: 'GET' | 'POST';\n    service: serviceTarget;\n  };\n  pubsubTarget?: {\n    topicName: pulumi.Input<string>;\n    attributes?: Record<any, any>;\n  };\n  generalHttpTarget?: {\n    httpMethod: pulumi.Input<string>;\n    serviceAccount?: pulumi.Input<string>;\n    url: pulumi.Input<string>;\n  };\n  workflowTarget?: {\n    workflowName: pulumi.Input<string>;\n  };\n  retryCount?: number;\n  body?: Record<any, any>;\n  paused?: boolean;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/cron-job/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/datadog/dashboards.ts",
    "exports": [
      {
        "type": "function",
        "name": " getNewPos",
        "text": "\n\nexport function getNewPos() {\n  return { x: 0, y: 0 };\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " createDefaultDatadogDashboard",
        "text": "\n\nexport function createDefaultDatadogDashboard(thisPos?: { x: number; y: number }) {\n  thisPos = thisPos || pos;\n  const { serviceId, serviceConfig } = getConfigs();\n\n  let description = `Maintainers: \\`${serviceConfig.maintainers?.join(', ')}\\` \\n\n  Last deploy: ${moment().toLocaleString()} by ${getAuthor() || 'unknown'}`;\n\n  if (process.env.IS_CLOUD_BUILD) {\n    description += ` [build](https://console.cloud.google.com/cloud-build/builds;region=${process.env.LOCATION}/${process.env.BUILD_ID}?project=${process.env.PROJECT_ID})`;\n  } else {\n    description += ' (local)';\n  }\n  const links = [];\n\n  if (deployedToK8s) {\n    links.push(...getLinks(['logs', 'k8s', 'apm']));\n  } else {\n    links.push(...getLinks(['logs']));\n    links.push(\n      `[Cloud Run](https://console.cloud.google.com/run?project=$project_id.value&pageState=(%22cloudRunServicesTable%22:(%22f%22:%22%255B%257B_22k_22_3A_22_22_2C_22t_22_3A10_2C_22v_22_3A_22_5C_22service-id_3A${serviceId}_5C_22_22_2C_22s_22_3Atrue%257D%255D%22)))`\n    );\n  }\n\n  const maxReplicas = [...(globalState['kubernetes:serving.knative.dev/v1:Service'] || [])].map(\n    (deployment) => {\n      return {\n        name: deployment.props.metadata.name,\n        max: String(\n          deployment.props.spec.template.metadata.annotations['autoscaling.knative.dev/max-scale']\n        ),\n      };\n    }\n  );\n\n  const widgets: Partial<DashboardWidget>[] = [\n    setPos(thisPos, {\n      noteDefinition: {\n        content: links.join('\\n\\r'),\n        fontSize: '14',\n        textAlign: 'center',\n        verticalAlign: 'center',\n        hasPadding: false,\n      },\n      widgetLayout: { x: 0, y: 0, width: 4, height: 3 },\n    }),\n  ];\n  const templateVariables = [\n    {\n      name: 'project_id',\n      prefix: 'project_id',\n      availableValues: ['shofifi', 'triple-whale-staging'],\n      defaults: ['shofifi'],\n    },\n    { name: 'resource_name', prefix: 'resource_name', availableValues: [], defaults: ['*'] },\n    {\n      name: 'deployment',\n      prefix: 'kube_deployment',\n      availableValues: [],\n      defaults: ['*'],\n    },\n    {\n      name: 'pipeline',\n      prefix: 'pipeline',\n      availableValues: [],\n      defaults: ['*'],\n    },\n  ];\n  const data: datadog.DashboardArgs = {\n    title: `${serviceId} default`,\n    description,\n    templateVariables,\n    layoutType: 'ordered',\n    notifyLists: [],\n    reflowType: 'fixed',\n  };\n\n  if (monitoringState.temporal.enabled) {\n    widgets.push(...getDatadogWidgets('temporal'));\n    widgets.push(...getDatadogWidgets('k8s'));\n    if (monitoringState.apmHttp.enabled) {\n      widgets.push(...getDatadogWidgets('apmHttp'));\n    }\n    widgets[0].noteDefinition.content += `\\n\\r${getTemporalLink()}`;\n    const temporalNamespace = getTemporalNamespace();\n    const temporalNamespaceUnderscore = temporalNamespace.replaceAll('-', '_');\n    widgets[0].noteDefinition.content += `\\n\\r[Detailed dashboard](https://us5.datadoghq.com/dashboard/3fk-6sf-8nq/temporal-detailed?tpl_var_k8s_namespace%5B0%5D=${serviceId}-ns&tpl_var_service_id%5B0%5D=${serviceId}&tpl_var_temporal_namespace_underscore%5B0%5D=${temporalNamespaceUnderscore}&tpl_var_temporal_namespace%5B0%5D=${temporalNamespace})`;\n  } else if (deployedToK8s) {\n    if (monitoringState.apmHttp.enabled) {\n      widgets.push(...getDatadogWidgets('apmHttp'));\n    }\n    widgets.push(...getDatadogWidgets('k8s'));\n  } else {\n    if (globalState['gcp:cloudrun/service:Service']?.length) {\n      widgets.push(...getDatadogWidgets('cloudRun'));\n    }\n  }\n\n  if (monitoringState.saber.enabled) {\n    widgets[0].noteDefinition.content += `\\n\\r[Saber Apm](https://us5.datadoghq.com/apm/services/${serviceId}-saber/operations/saber.process/resources?env=$project_id.value)`;\n    widgets.push(...getDatadogWidgets('saber'));\n  }\n\n  if (monitoringState.pubsub.enabled) {\n    widgets.push(...getDatadogWidgets('pubsub'));\n    templateVariables.push({\n      name: 'subscription_id',\n      prefix: 'subscription_id',\n      availableValues: [],\n      defaults: ['*'],\n    });\n    widgets[0].noteDefinition.content += `\\n\\r[Pubsub Topics](https://console.cloud.google.com/cloudpubsub/topic/list?referrer=search&project=$project_id.value&pageState=(%22cpsTopicList%22:(%22f%22:%22%255B%257B_22k_22_3A_22_22_2C_22t_22_3A10_2C_22v_22_3A_22_5C_22service-id_3A%2520${serviceId}_5C_22_22_2C_22s_22_3Atrue%257D%255D%22)))`;\n    widgets[0].noteDefinition.content += `\\n\\r[Pubsub Subscriptions](https://console.cloud.google.com/cloudpubsub/subscription/list?referrer=search&project=$project_id.value&pageState=(%22cpsTopicList%22:(%22f%22:%22%255B%257B_22k_22_3A_22_22_2C_22t_22_3A10_2C_22v_22_3A_22_5C_22service-id_3A%2520pixel_5C_22_22_2C_22s_22_3Atrue%257D%255D%22),%22cpsSubscriptionList%22:(%22f%22:%22%255B%257B_22k_22_3A_22_22_2C_22t_22_3A10_2C_22v_22_3A_22_5C_22service-id_3A%2520${serviceId}_5C_22_22_2C_22s_22_3Atrue%257D%255D%22)))`;\n  }\n  if (monitoringState.pubsubPull.enabled) {\n    widgets.push(...getDatadogWidgets('pubsubPull'));\n  }\n  if (monitoringState.pubsubPush.enabled) {\n    widgets.push(...getDatadogWidgets('pubsubPush'));\n  }\n  if (monitoringState.redis.enabled) {\n    widgets.push(...getDatadogWidgets('redis'));\n  }\n  if (monitoringState.bigtable.enabled) {\n    widgets.push(...getDatadogWidgets('bigtable'));\n  }\n  if (monitoringState.storage.enabled) {\n    widgets.push(...getDatadogWidgets('storage'));\n  }\n  if (monitoringState.sql.enabled) {\n    widgets.push(...getDatadogWidgets('sql'));\n  }\n  if (monitoringState.cloudTasks.enabled) {\n    widgets.push(...getDatadogWidgets('cloudTasks'));\n  }\n  widgets.push(...getDatadogWidgets('logging'));\n  data.widgets = widgets;\n  const dashboard = new datadog.Dashboard('datadog-default-dashboard', data, {\n    provider: getDatadogProvider(),\n  });\n\n  return dashboard;\n}",
        "parameters": [
          {
            "name": "thisPos",
            "text": "thisPos?: { x: number; y: number }",
            "type": "{ x: number; y: number }"
          }
        ]
      },
      {
        "type": "function",
        "name": " getLinks",
        "text": "\n\nexport function getLinks(\n  linkTypes: Link[],\n  opts: {\n    webFramework?: string;\n    useTemplateVariables?: boolean;\n    forK8sNamespace?: string;\n    defaultContainerNameFilter?: boolean;\n  } = {}\n) {\n  const {\n    webFramework,\n    useTemplateVariables,\n    forK8sNamespace,\n    defaultContainerNameFilter = true,\n  } = opts;\n  const links = [];\n  if (linkTypes.includes('logs')) {\n    links.push(getLogsLink({ useTemplateVariables, forK8sNamespace, defaultContainerNameFilter }));\n  }\n  if (linkTypes.includes('k8s')) {\n    links.push(getK8sLink({ useTemplateVariables, forK8sNamespace }));\n  }\n  if (linkTypes.includes('apm')) {\n    links.push(getApmLink({ webFramework, useTemplateVariables }));\n  }\n  if (linkTypes.includes('temporal')) {\n    links.push(getTemporalLink({ useTemplateVariables }));\n  }\n  return links;\n}",
        "parameters": [
          {
            "name": "linkTypes",
            "text": "linkTypes: Link[]",
            "type": "Link[]"
          },
          {
            "name": "opts",
            "text": "opts: {\n    webFramework?: string;\n    useTemplateVariables?: boolean;\n    forK8sNamespace?: string;\n    defaultContainerNameFilter?: boolean;\n  } = {}",
            "type": "{\n    webFramework?: string;\n    useTemplateVariables?: boolean;\n    forK8sNamespace?: string;\n    defaultContainerNameFilter?: boolean;\n  }"
          }
        ]
      },
      {
        "type": "function",
        "name": " getDatadogWidgets",
        "text": "\n\nexport function getDatadogWidgets(\n  type: DatadogResources,\n  opts: {\n    webFramework?: string;\n    useTemplateVariables?: boolean;\n    temporalServer?: boolean;\n    forServiceId?: string;\n    forK8sNamespace?: string;\n  } = {},\n  thisPos?: { x: number; y: number }\n): Partial<DashboardWidget>[] {\n  let {\n    webFramework,\n    useTemplateVariables = false,\n    temporalServer = false,\n    forServiceId,\n    forK8sNamespace,\n  } = opts;\n  thisPos = thisPos || pos;\n\n  const { serviceConfig } = getConfigs();\n  if (!webFramework) {\n    webFramework = getWebFramework(serviceConfig.runtime);\n  }\n\n  const {\n    serviceId: sId,\n    temporalNamespaceUnderscore,\n    temporalNamespace,\n    k8sNamespace: kNamespace,\n  } = getFilterValues({ useTemplateVariables });\n  const serviceId = forServiceId || sId;\n  const k8sNamespace = forK8sNamespace || kNamespace;\n\n  let filters: any = '';\n  if (type === 'cloudTasks') {\n    filters = monitoringState.cloudTasks.resourceNames.join(',');\n  } else if (type === 'mongo') {\n    filters = pulumi.all(monitoringState.mongo.resourceNames).apply((v) => (v as any).join(','));\n  }\n  const deployment = temporalServer ? 'kube_deployment' : 'triplewhale_com_deployment';\n  const datadogWidgets: { [P in DatadogResources]?: Partial<DashboardWidget>[] } = {\n    apmHttp: [\n      {\n        timeseriesDefinition: {\n          title: 'RPS Per Path',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'horizontal',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'default_zero(query1)', alias: 'Hits' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    query: `sum:trace.${webFramework}.request.hits{service:${serviceId},env:$project_id.value,$resource_name} by {resource_name}.as_rate()`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n              displayType: 'line',\n            },\n          ],\n          markers: [],\n        },\n        widgetLayout: { x: 0, y: 0, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'RPS By Response Code',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'horizontal',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [\n                { formulaExpression: 'default_zero(query1)', alias: 'Hits' },\n                {\n                  alias: 'Proxy Errors',\n                  style: { paletteIndex: 7, palette: 'warm' },\n                  formulaExpression: 'default_zero(query2)',\n                },\n              ],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    query: `sum:trace.${webFramework}.request.hits{service:${serviceId},env:$project_id.value,$resource_name} by {http.status_code}.as_rate()`,\n                  },\n                },\n                {\n                  metricQuery: {\n                    name: 'query2',\n                    query: `sum:gcp.logging.user.knative_queue_proxy_errors{target_key:${serviceId}-ns/*,$project_id}.as_rate().fill(zero)`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n              displayType: 'line',\n            },\n          ],\n          markers: [],\n        },\n        widgetLayout: { x: 0, y: 0, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Overall Request Latency',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'horizontal',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [\n                { formulaExpression: 'query1', alias: 'p50' },\n                { formulaExpression: 'query2', alias: 'p90' },\n                { formulaExpression: 'query3', alias: 'p95' },\n                { formulaExpression: 'query4', alias: 'p99' },\n              ],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: `p50:trace.${webFramework}.request{service:${serviceId},env:$project_id.value,$resource_name}`,\n                  },\n                },\n                {\n                  metricQuery: {\n                    name: 'query2',\n                    dataSource: 'metrics',\n                    query: `p90:trace.${webFramework}.request{service:${serviceId},env:$project_id.value,$resource_name}`,\n                  },\n                },\n                {\n                  metricQuery: {\n                    name: 'query3',\n                    dataSource: 'metrics',\n                    query: `p95:trace.${webFramework}.request{service:${serviceId},env:$project_id.value,$resource_name}`,\n                  },\n                },\n                {\n                  metricQuery: {\n                    name: 'query4',\n                    dataSource: 'metrics',\n                    query: `p99:trace.${webFramework}.request{service:${serviceId},env:$project_id.value,$resource_name}`,\n                  },\n                },\n              ],\n              style: { palette: 'dog_classic', lineType: 'solid', lineWidth: 'normal' },\n              displayType: 'line',\n            },\n          ],\n        },\n        widgetLayout: { x: 4, y: 0, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'AVG Latency Per Path',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'horizontal',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1', alias: 'latency' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: `avg:trace.${webFramework}.request{service:${serviceId},env:$project_id.value,$resource_name} by {resource_name}`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n              displayType: 'line',\n            },\n          ],\n        },\n        widgetLayout: { x: 4, y: 0, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: `Errors on service ${serviceId}`,\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'horizontal',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    dataSource: 'metrics',\n                    name: 'query1',\n                    query: `sum:trace.${webFramework}.request.errors{service:${serviceId},env:$project_id.value,$resource_name} by {resource_name}.as_count()`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic' },\n              displayType: 'bars',\n            },\n          ],\n          markers: [],\n        },\n        widgetLayout: { x: 0, y: 2, width: 4, height: 3 },\n      },\n    ],\n    saber: [\n      {\n        timeseriesDefinition: {\n          title: 'Saber Transform Records',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: `sum:tw.saber.transform.records{service:${serviceId},$pipeline,env:$project_id.value} by {transform,pipeline}.as_rate()`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n              displayType: 'line',\n            },\n          ],\n        },\n        widgetLayout: { x: 0, y: 0, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Saber Latency',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    dataSource: 'metrics',\n                    name: 'query1',\n                    query: `avg:trace.saber.process{service:${serviceId}-saber,env:$project_id.value} by {resource_name}`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n              displayType: 'line',\n            },\n          ],\n        },\n        widgetLayout: { x: 0, y: 0, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Saber Errors',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: false,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    dataSource: 'metrics',\n                    name: 'query1',\n                    query: `sum:trace.saber.process.errors{env:$project_id.value,service:${serviceId}-saber} by {resource_name}.as_count()`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n              displayType: 'bars',\n            },\n          ],\n        },\n        widgetLayout: { x: 0, y: 0, width: 4, height: 3 },\n      },\n    ],\n    logging: [\n      {\n        timeseriesDefinition: {\n          title: 'Logging throughput',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: `sum:gcp.logging.byte_count{$project_id AND namespace_name:${serviceId}-ns or pulumi-project:${serviceId}} by {log}.as_rate()`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 4, y: 2, width: 4, height: 3 },\n      },\n    ],\n    pubsub: [\n      {\n        timeseriesDefinition: {\n          title: 'Pubsub Unacked Messages Age',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: `avg:gcp.pubsub.subscription.oldest_unacked_message_age{service-id:${serviceId},$project_id,$subscription_id,resource_version:*} by {subscription_id}`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 4, y: 2, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Pubsub Unacked Messages',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: `sum:gcp.pubsub.subscription.num_unacked_messages_by_region{service-id:${serviceId},$project_id,$subscription_id,resource_version:*} by {subscription_id}`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 8, y: 2, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Pubsub Dead Letter Messages',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: `sum:gcp.pubsub.subscription.dead_letter_message_count{service-id:${serviceId},$project_id,$subscription_id,resource_version:*} by {subscription_id}.as_count()`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 0, y: 0, width: 4, height: 3 },\n      },\n    ],\n    pubsubPush: [\n      {\n        timeseriesDefinition: {\n          title: 'Pubsub Push Request Latencies',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: `sum:gcp.pubsub.subscription.push_request_latencies.avg{service-id:${serviceId},$project_id,$subscription_id,resource_version:*} by {subscription_id}.fill(null)`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 8, y: 18, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Pubsub Push Request Count',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: `sum:gcp.pubsub.subscription.push_request_count{service-id:${serviceId},$project_id,$subscription_id,resource_version:*} by {response_code}.as_rate()`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 0, y: 0, width: 4, height: 3 },\n      },\n    ],\n    pubsubPull: [\n      {\n        timeseriesDefinition: {\n          title: 'Pubsub Ack Latencies',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: `sum:gcp.pubsub.subscription.ack_latencies.avg{service-id:${serviceId},$project_id,$subscription_id,resource_version:*} by {subscription_id}.fill(null)`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 8, y: 18, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Pubsub expired ack deadlines count',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: `sum:gcp.pubsub.subscription.expired_ack_deadlines_count{service-id:${serviceId},$project_id,$subscription_id,resource_version:*} by {subscription_id}.fill(null)`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 8, y: 18, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Pubsub Sent Message Count',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: `sum:gcp.pubsub.subscription.sent_message_count{service-id:${serviceId},$project_id,$subscription_id,resource_version:*} by {subscription_id}.fill(null)`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 8, y: 18, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Pubsub Ack Message Count',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: `sum:gcp.pubsub.subscription.ack_message_count{service-id:${serviceId},$project_id,$subscription_id,resource_version:*} by {subscription_id}.fill(null)`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 8, y: 18, width: 4, height: 3 },\n      },\n    ],\n    bigtable: [\n      {\n        timeseriesDefinition: {\n          title: 'Bigtable CPU Load',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [\n                { alias: 'avg', formulaExpression: 'query1' },\n                { alias: 'hottest', formulaExpression: 'query2' },\n              ],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: `avg:gcp.bigtable.cluster.cpu_load{service-id:${serviceId},$project_id} by {cluster}`,\n                  },\n                },\n                {\n                  metricQuery: {\n                    name: 'query2',\n                    dataSource: 'metrics',\n                    query: `max:gcp.bigtable.cluster.cpu_load_hottest_node_high_granularity{service-id:${serviceId},$project_id} by {cluster}`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 4, y: 18, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Bigtable Request Count',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: `sum:gcp.bigtable.server.request_count{$project_id,service-id:${serviceId}} by {method}.as_count()`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 8, y: 18, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Bigtable Latency',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: `avg:gcp.bigtable.server.latencies.avg{$project_id,service-id:${serviceId}} by {method}`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 0, y: 21, width: 4, height: 3 },\n      },\n    ],\n    redis: [\n      {\n        timeseriesDefinition: {\n          title: 'Redis Commands',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: `sum:gcp.redis.commands.calls{service-id:${serviceId},$project_id} by {cmd}.as_count()`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 8, y: 4, width: 4, height: 3 },\n      },\n    ],\n    k8s: [\n      {\n        timeseriesDefinition: {\n          title: 'CPU Requests, Limits and Usage',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'horizontal',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [\n                { alias: 'Cores used', formulaExpression: 'default_zero(query1)' },\n                { alias: 'Cores limits', formulaExpression: 'default_zero(query2)' },\n                { alias: 'Cores requests', formulaExpression: 'default_zero(query3)' },\n              ],\n              queries: [\n                {\n                  metricQuery: {\n                    dataSource: 'metrics',\n                    name: 'query1',\n                    query: `sum:kubernetes.cpu.usage.total{kube_namespace:${k8sNamespace},$project_id,$deployment}.fill(null).rollup(avg, 20)`,\n                  },\n                },\n                {\n                  metricQuery: {\n                    dataSource: 'metrics',\n                    name: 'query2',\n                    query: `sum:kubernetes.cpu.limits{kube_namespace:${k8sNamespace},$project_id,$deployment}.fill(null).rollup(avg, 20)`,\n                  },\n                },\n                {\n                  metricQuery: {\n                    dataSource: 'metrics',\n                    name: 'query3',\n                    query: `sum:kubernetes.cpu.requests{kube_namespace:${k8sNamespace},$project_id,$deployment}.fill(null).rollup(avg, 20)`,\n                  },\n                },\n              ],\n              style: { palette: 'dog_classic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n          yaxis: { scale: 'linear', label: '', includeZero: true, min: 'auto', max: 'auto' },\n        },\n        widgetLayout: { x: 0, y: 6, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Instances',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'horizontal',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ alias: 'Instances', formulaExpression: 'default_zero(query1)' }],\n              queries: [\n                {\n                  metricQuery: {\n                    dataSource: 'metrics',\n                    name: 'query1',\n                    query: `sum:kubernetes.pods.running{kube_namespace:${k8sNamespace},!pod_phase:pending,$project_id,$deployment} by {${deployment}}.fill(zero).rollup(max, 20)`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n          yaxis: { scale: 'linear', label: '', includeZero: true, min: 'auto', max: 'auto' },\n          // markers: maxReplicas.map((maxReplica) => ({\n          //   value: `y = ${maxReplica.max}`,\n          //   label: `Max ${maxReplica.name}`,\n          //   displayType: 'info bold',\n          // })),\n        },\n        widgetLayout: { x: 4, y: 6, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Network Rate',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'horizontal',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [\n                { alias: 'Bytes received', formulaExpression: 'default_zero(query1)' },\n                { alias: 'Bytes transmitted', formulaExpression: 'default_zero(query2)' },\n              ],\n              queries: [\n                {\n                  metricQuery: {\n                    dataSource: 'metrics',\n                    name: 'query1',\n                    query: `sum:kubernetes.network.rx_bytes{kube_namespace:${k8sNamespace},$project_id,$deployment}.rollup(avg, 20)`,\n                  },\n                },\n                {\n                  metricQuery: {\n                    dataSource: 'metrics',\n                    name: 'query2',\n                    query: `sum:kubernetes.network.tx_bytes{kube_namespace:${k8sNamespace},$project_id,$deployment}.rollup(avg, 20)`,\n                  },\n                },\n              ],\n              style: { palette: 'dog_classic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n          yaxis: { scale: 'linear', label: '', includeZero: true, min: 'auto', max: 'auto' },\n        },\n        widgetLayout: { x: 8, y: 6, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Memory Requests, Limits and Usage',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'horizontal',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [\n                { alias: 'Memory used', formulaExpression: 'default_zero(query1)' },\n                { alias: 'Memory limits', formulaExpression: 'default_zero(query2)' },\n                { alias: 'Memory requests', formulaExpression: 'default_zero(query3)' },\n              ],\n              queries: [\n                {\n                  metricQuery: {\n                    dataSource: 'metrics',\n                    name: 'query1',\n                    query: `sum:kubernetes.memory.usage{kube_namespace:${k8sNamespace},$project_id,$deployment}.rollup(avg, 20)`,\n                  },\n                },\n                {\n                  metricQuery: {\n                    dataSource: 'metrics',\n                    name: 'query2',\n                    query: `sum:kubernetes.memory.limits{kube_namespace:${k8sNamespace},$project_id,$deployment}.rollup(avg, 20)`,\n                  },\n                },\n                {\n                  metricQuery: {\n                    dataSource: 'metrics',\n                    name: 'query3',\n                    query: `sum:kubernetes.memory.requests{kube_namespace:${k8sNamespace},$project_id,$deployment}.rollup(avg, 20)`,\n                  },\n                },\n              ],\n              style: { palette: 'dog_classic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n          yaxis: { scale: 'linear', label: '', includeZero: true, min: 'auto', max: 'auto' },\n        },\n        widgetLayout: { x: 4, y: 8, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'CPU Usage % (requests)',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'horizontal',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [\n                {\n                  alias: 'Usage',\n                  formulaExpression:\n                    '((default_zero(query1) / 1000 / 1000 / 1000) / default_zero(query2)) * 100',\n                },\n              ],\n              queries: [\n                {\n                  metricQuery: {\n                    dataSource: 'metrics',\n                    name: 'query1',\n                    query: `sum:kubernetes.cpu.usage.total{kube_namespace:${k8sNamespace},$project_id,$deployment} by {${deployment}}.fill(null).rollup(avg, 20)`,\n                  },\n                },\n                {\n                  metricQuery: {\n                    dataSource: 'metrics',\n                    name: 'query2',\n                    query: `sum:kubernetes.cpu.requests{kube_namespace:${k8sNamespace},$project_id,$deployment} by {${deployment}}.fill(null).rollup(avg, 20)`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n          yaxis: { scale: 'linear', label: '', includeZero: true, min: 'auto', max: 'auto' },\n          markers: [{ value: 'y = 100', displayType: 'error bold' }],\n        },\n        widgetLayout: { x: 0, y: 0, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Memory Usage % (requests)',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'horizontal',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [\n                {\n                  alias: 'Usage',\n                  formulaExpression: '(default_zero(query1) / default_zero(query2)) * 100',\n                },\n              ],\n              queries: [\n                {\n                  metricQuery: {\n                    dataSource: 'metrics',\n                    name: 'query1',\n                    query: `sum:kubernetes.memory.usage{kube_namespace:${k8sNamespace},$project_id,$deployment} by {${deployment}}`,\n                  },\n                },\n                {\n                  metricQuery: {\n                    dataSource: 'metrics',\n                    name: 'query2',\n                    query: `sum:kubernetes.memory.requests{kube_namespace:${k8sNamespace},$project_id,$deployment} by {${deployment}}`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n          yaxis: { scale: 'linear', label: '', includeZero: true, min: 'auto', max: 'auto' },\n          markers: [{ value: 'y = 100', displayType: 'error bold' }],\n        },\n        widgetLayout: { x: 0, y: 0, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Pods',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'horizontal',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [\n                { alias: 'Container restarts', formulaExpression: 'per_minute(query1)' },\n                {\n                  alias: 'crashloopbackoff',\n                  formulaExpression: 'query2',\n                  style: { palette: 'red' },\n                },\n                {\n                  alias: 'Pod status',\n                  formulaExpression: 'default_zero(query3)',\n                },\n              ],\n              queries: [\n                {\n                  metricQuery: {\n                    dataSource: 'metrics',\n                    name: 'query1',\n                    query: `sum:kubernetes_state.container.restarts{kube_namespace:${k8sNamespace},$project_id,$deployment} by {${deployment}}`,\n                  },\n                },\n                {\n                  metricQuery: {\n                    dataSource: 'metrics',\n                    name: 'query2',\n                    query: `sum:kubernetes.containers.state.waiting{kube_namespace:${k8sNamespace},reason:crashloopbackoff,$project_id,$deployment} by {${deployment}}`,\n                  },\n                },\n                {\n                  metricQuery: {\n                    dataSource: 'metrics',\n                    name: 'query3',\n                    query: `sum:kubernetes_state.pod.status_phase{!pod_phase:running,!pod_phase:succeeded,kube_namespace:${k8sNamespace},$project_id,$deployment} by {pod_phase,${deployment}}`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n          yaxis: { scale: 'linear', label: '', includeZero: true, min: 'auto', max: 'auto' },\n        },\n        widgetLayout: { x: 0, y: 10, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'CPU Throttling',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'horizontal',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ alias: 'CPU Throttling', formulaExpression: 'default_zero(query1)' }],\n              queries: [\n                {\n                  metricQuery: {\n                    dataSource: 'metrics',\n                    name: 'query1',\n                    query: `sum:kubernetes.cpu.cfs.throttled.seconds{kube_namespace:${k8sNamespace},$project_id,$deployment} by {${deployment}}.rollup(avg, 20)`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n          yaxis: { scale: 'linear', label: '', includeZero: true, min: 'auto', max: 'auto' },\n        },\n        widgetLayout: { x: 4, y: 10, width: 4, height: 3 },\n      },\n    ],\n    sql: [\n      {\n        timeseriesDefinition: {\n          title: 'Cloud SQL CPU Utilization',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: temporalServer\n                      ? `avg:gcp.cloudsql.database.cpu.utilization{$project_id,pulumi-project:sensory}`\n                      : `avg:gcp.cloudsql.database.cpu.utilization{$project_id,pulumi-project:${serviceId}} by {database_id}`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 8, y: 8, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Cloud SQL Memory Utilization',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: temporalServer\n                      ? `avg:gcp.cloudsql.database.memory.utilization{$project_id,pulumi-project:sensory}`\n                      : `avg:gcp.cloudsql.database.memory.utilization{$project_id,pulumi-project:${serviceId}} by {database_id}`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 0, y: 10, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Cloud SQL Memory Free',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: temporalServer\n                      ? `avg:gcp.cloudsql.database.memory.components{$project_id,pulumi-project:sensory,component:free}`\n                      : `avg:gcp.cloudsql.database.memory.components{$project_id,pulumi-project:${serviceId},component:free} by {database_id}`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 0, y: 10, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Cloud SQL Rows Processed',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: temporalServer\n                      ? `sum:gcp.cloudsql.database.postgresql.tuples_processed_count{$project_id,pulumi-project:sensory}`\n                      : `sum:gcp.cloudsql.database.postgresql.tuples_processed_count{$project_id,pulumi-project:${serviceId}} by {database_id}`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 4, y: 10, width: 4, height: 3 },\n      },\n    ],\n    cloudTasks: [\n      {\n        timeseriesDefinition: {\n          title: 'Cloud Tasks Queue Depth',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: `sum:gcp.cloudtasks.queue.depth{$project_id AND queue_id IN (${filters})} by {queue_id}`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 8, y: 8, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Cloud Tasks Attempt Count',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: `sum:gcp.cloudtasks.queue.task_attempt_count{$project_id AND queue_id IN (${filters})} by {response_code,queue_id}.as_count()`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 0, y: 10, width: 4, height: 3 },\n      },\n    ],\n    storage: [\n      {\n        timeseriesDefinition: {\n          title: 'Storage API Request Count',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: `sum:gcp.storage.api.request_count{$project_id,service-id:${serviceId}} by {method}.as_rate()`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 8, y: 18, width: 4, height: 3 },\n      },\n    ],\n    cloudRun: [\n      {\n        timeseriesDefinition: {\n          title: 'RPS By Response Code (Cloud Run)',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: `sum:gcp.run.request_count{$project_id,service-id:${serviceId}} by {response_code}.as_rate()`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n              displayType: 'line',\n            },\n          ],\n        },\n        widgetLayout: { x: 4, y: 0, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Overall Request Latency (Cloud Run)',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [\n                { alias: 'Avg', formulaExpression: 'query1' },\n                { alias: 'p95', formulaExpression: 'query2' },\n                { alias: 'p99', formulaExpression: 'query3' },\n              ],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: `avg:gcp.run.request_latencies.avg{$project_id,service-id:${serviceId}}`,\n                  },\n                },\n                {\n                  metricQuery: {\n                    name: 'query2',\n                    dataSource: 'metrics',\n                    query: `max:gcp.run.request_latencies.p95{$project_id,service-id:${serviceId}}`,\n                  },\n                },\n                {\n                  metricQuery: {\n                    name: 'query3',\n                    dataSource: 'metrics',\n                    query: `max:gcp.run.request_latencies.p99{$project_id,service-id:${serviceId}}`,\n                  },\n                },\n              ],\n              style: { palette: 'dog_classic', lineType: 'solid', lineWidth: 'normal' },\n              displayType: 'line',\n            },\n          ],\n        },\n        widgetLayout: { x: 8, y: 0, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Instances (Cloud Run)',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: `sum:gcp.run.container.instance_count{$project_id,service-id:${serviceId}} by {state}.weighted()`,\n                  },\n                },\n              ],\n              style: { palette: 'dog_classic', lineType: 'solid', lineWidth: 'normal' },\n              displayType: 'line',\n            },\n          ],\n        },\n        widgetLayout: { x: 0, y: 3, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'CPU utilization (Cloud Run)',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [\n                { alias: 'Avg', formulaExpression: 'query1' },\n                { alias: 'p95', formulaExpression: 'query2' },\n                { alias: 'p99', formulaExpression: 'query3' },\n              ],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: `avg:gcp.run.container.cpu.utilizations.avg{$project_id,service-id:${serviceId}}`,\n                  },\n                },\n                {\n                  metricQuery: {\n                    name: 'query2',\n                    dataSource: 'metrics',\n                    query: `avg:gcp.run.container.cpu.utilizations.p95{$project_id,service-id:${serviceId}}`,\n                  },\n                },\n                {\n                  metricQuery: {\n                    name: 'query3',\n                    dataSource: 'metrics',\n                    query: `avg:gcp.run.container.cpu.utilizations.p99{$project_id,service-id:${serviceId}}`,\n                  },\n                },\n              ],\n              style: { palette: 'dog_classic', lineType: 'solid', lineWidth: 'normal' },\n              displayType: 'line',\n            },\n          ],\n        },\n        widgetLayout: { x: 4, y: 3, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Memory utilization (Cloud Run)',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [\n                { alias: 'Avg', formulaExpression: 'query1' },\n                { alias: 'p95', formulaExpression: 'query2' },\n                { alias: 'p99', formulaExpression: 'query3' },\n              ],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: `avg:gcp.run.container.memory.utilizations.avg{$project_id,service-id:${serviceId}}`,\n                  },\n                },\n                {\n                  metricQuery: {\n                    name: 'query2',\n                    dataSource: 'metrics',\n                    query: `avg:gcp.run.container.memory.utilizations.p95{$project_id,service-id:${serviceId}}`,\n                  },\n                },\n                {\n                  metricQuery: {\n                    name: 'query3',\n                    dataSource: 'metrics',\n                    query: `avg:gcp.run.container.memory.utilizations.p99{$project_id,service-id:${serviceId}}`,\n                  },\n                },\n              ],\n              style: { palette: 'dog_classic', lineType: 'solid', lineWidth: 'normal' },\n              displayType: 'line',\n            },\n          ],\n        },\n        widgetLayout: { x: 8, y: 3, width: 4, height: 3 },\n      },\n    ],\n    chronos: [\n      {\n        queryTableDefinition: {\n          title: 'Pipeline Status',\n          titleSize: '16',\n          titleAlign: 'left',\n          requests: [\n            {\n              queries: [\n                {\n                  metricQuery: {\n                    dataSource: 'metrics',\n                    name: 'success',\n                    query:\n                      'sum:custom.chronos.workflow.jobs{status:success} by {pipeline}.as_count()',\n                    aggregator: 'sum',\n                  },\n                },\n                {\n                  metricQuery: {\n                    dataSource: 'metrics',\n                    name: 'failure',\n                    query:\n                      'sum:custom.chronos.workflow.jobs{status:failure} by {pipeline}.as_count()',\n                    aggregator: 'sum',\n                  },\n                },\n              ],\n              formulas: [\n                {\n                  cellDisplayMode: 'bar',\n                  alias: 'success',\n                  formulaExpression: 'success',\n                  limit: { count: 500, order: 'desc' },\n                },\n                { cellDisplayMode: 'bar', alias: 'failure', formulaExpression: 'failure' },\n              ],\n            },\n          ],\n          hasSearchBar: 'auto',\n        },\n        widgetLayout: { x: 0, y: 0, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Success - Workflow Executions',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ style: { palette: 'classic' }, formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query:\n                      'sum:custom.chronos.workflow.jobs{status:success,$project_id,$stack,$label} by {pipeline}',\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 0, y: 0, width: 4, height: 3, isColumnBreak: false },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Failure - Workflow Executions',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ style: { palette: 'classic' }, formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query:\n                      'sum:custom.chronos.workflow.jobs{status:failure,$project_id,$stack,$label} by {pipeline}',\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 0, y: 0, width: 4, height: 3, isColumnBreak: false },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Skip - Workflow Executions',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ style: { palette: 'classic' }, formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query:\n                      'sum:custom.chronos.workflow.jobs{status:skip,$project_id,$stack,$label} by {pipeline}',\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 0, y: 0, width: 4, height: 3, isColumnBreak: false },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Force Complete - Workflow Executions',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ style: { palette: 'classic' }, formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query:\n                      'sum:custom.chronos.workflow.jobs{status:force_complete,$project_id,$stack,$label} by {pipeline}',\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 0, y: 0, width: 4, height: 3, isColumnBreak: false },\n      },\n    ],\n    temporal: [\n      {\n        timeseriesDefinition: {\n          title: 'Temporal Workflow Execution Succeeded',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [\n                {\n                  style: { palette: 'classic' },\n                  formulaExpression: 'query1',\n                  alias: 'successful workflows',\n                },\n              ],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: temporalServer\n                      ? 'sum:temporal.server.workflow.success.count{$project_id} by {namespace}.as_rate()'\n                      : `sum:temporal.server.workflow.success.count{$project_id,namespace:${temporalNamespaceUnderscore}}.as_rate()`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 8, y: 4, width: 4, height: 3, isColumnBreak: false },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Temporal Workflow Percent Failed',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [\n                {\n                  alias: 'failed %',\n                  formulaExpression: '100 * fail / (success + fail)',\n                },\n              ],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'success',\n                    dataSource: 'metrics',\n                    query: temporalServer\n                      ? 'sum:temporal.server.workflow.success.count{$project_id} by {namespace}.as_rate().rollup(sum, 3600)'\n                      : `sum:temporal.server.workflow.success.count{$project_id,namespace:${temporalNamespaceUnderscore}}.as_rate().rollup(sum,3600)`,\n                  },\n                },\n                {\n                  metricQuery: {\n                    name: 'fail',\n                    dataSource: 'metrics',\n                    query: temporalServer\n                      ? 'sum:temporal.server.workflow.failed.count{$project_id} by {namespace}.as_rate().rollup(sum, 3600)'\n                      : `sum:temporal.server.workflow.failed.count{$project_id,namespace:${temporalNamespaceUnderscore}}.as_rate().rollup(sum,3600)`,\n                  },\n                },\n              ],\n              style: { palette: 'red', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 8, y: 4, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Temporal Activity Execution Failed',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: temporalServer\n                      ? 'sum:trace.temporal.activity.errors{$project_id} by {service}.as_rate()'\n                      : `sum:trace.temporal.activity.errors{$project_id, service:${serviceId}} by {resource_name}.as_rate()`,\n                  },\n                },\n              ],\n              style: { palette: 'red', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 8, y: 4, width: 4, height: 3 },\n      },\n    ],\n    temporalDetailed: [\n      {\n        timeseriesDefinition: {\n          title: 'Temporal Workflow Execution Failed',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: temporalServer\n                      ? 'sum:temporal.server.workflow.failed.count{$project_id} by {namespace}.as_rate()'\n                      : `sum:temporal.server.workflow.failed.count{$project_id,namespace:${temporalNamespaceUnderscore}}.as_rate()`,\n                  },\n                },\n              ],\n              style: { palette: 'red', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 8, y: 4, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Sensory - Temporal Distinct Failed Integration IDs (per hour)',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [\n                {\n                  formulaExpression: 'count_not_null(query1)',\n                },\n              ],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: temporalServer\n                      ? 'sum:custom.sensory.workflow.complete{success:false,$project_id} by {namespace}.as_count().rollup(sum, 3600)'\n                      : `sum:custom.sensory.workflow.complete{success:false,$project_id,namespace:${temporalNamespace}} by {integrationid}.as_count().rollup(sum, 3600)`,\n                  },\n                },\n              ],\n              style: { palette: 'red', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 8, y: 4, width: 4, height: 3 },\n      },\n      {\n        queryTableDefinition: {\n          title: 'Sensory - Failing Integrations',\n          titleSize: '16',\n          titleAlign: 'left',\n          requests: [\n            {\n              formulas: [\n                {\n                  alias: 'failure count',\n                  cellDisplayMode: 'bar',\n                  formulaExpression: 'query1',\n                  limit: { count: 10000, order: 'desc' },\n                  conditionalFormats: [{ comparator: '>=', palette: 'red_on_white', value: 0 }],\n                },\n              ],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: temporalServer\n                      ? 'sum:custom.sensory.workflow.complete{$project_id, success:false} by {namespace}.as_count()'\n                      : `sum:custom.sensory.workflow.complete{$project_id, namespace:${temporalNamespace}, success:false} by {integrationid}.as_count()`,\n                    aggregator: 'sum',\n                  },\n                },\n              ],\n            },\n          ],\n          hasSearchBar: 'auto',\n        },\n        widgetLayout: { x: 0, y: 21, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Temporal Workflow Execution Terminated',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'query1' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: temporalServer\n                      ? 'sum:temporal.server.workflow.terminate.count{$project_id} by {namespace}.as_count()'\n                      : `sum:temporal.server.workflow.terminate.count{$project_id,namespace:${temporalNamespaceUnderscore}}.as_count()`,\n                  },\n                },\n              ],\n              style: { palette: 'red', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 8, y: 4, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Temporal Activity End To End Latency',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [{ formulaExpression: 'sum / count' }],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'sum',\n                    dataSource: 'metrics',\n                    query: temporalServer\n                      ? 'avg:temporal.server.activity.end_to_end_latency.sum{$project_id} by {namespace}.as_count()'\n                      : `avg:temporal.server.activity.end_to_end_latency.sum{$project_id,namespace:${temporalNamespaceUnderscore}} by {activitytype}.as_count()`,\n                  },\n                },\n                {\n                  metricQuery: {\n                    name: 'count',\n                    dataSource: 'metrics',\n                    query: temporalServer\n                      ? 'avg:temporal.server.activity.end_to_end_latency.count{$project_id} by {namespace}.as_count()'\n                      : `avg:temporal.server.activity.end_to_end_latency.count{$project_id,namespace:${temporalNamespaceUnderscore}} by {activitytype}.as_count()`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 8, y: 4, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Temporal Schedule to Start Latency',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [\n                {\n                  style: { palette: 'classic', paletteIndex: 2 },\n                  formulaExpression: 'sum / count',\n                },\n              ],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'sum',\n                    dataSource: 'metrics',\n                    query: temporalServer\n                      ? 'avg:temporal.server.task.schedule_to_start_latency.sum{$project_id} by {namespace}.as_count()'\n                      : `avg:temporal.server.task.schedule_to_start_latency.sum{$project_id,namespace:${temporalNamespaceUnderscore}} by {task_type}.as_count()`,\n                  },\n                },\n                {\n                  metricQuery: {\n                    name: 'count',\n                    dataSource: 'metrics',\n                    query: temporalServer\n                      ? 'avg:temporal.server.task.schedule_to_start_latency.count{$project_id} by {namespace}.as_count()'\n                      : `avg:temporal.server.task.schedule_to_start_latency.count{$project_id,namespace:${temporalNamespaceUnderscore}} by {task_type}.as_count()`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 8, y: 4, width: 4, height: 3 },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Temporal Poller Timeouts Per Second',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [\n                {\n                  style: { palette: 'classic', paletteIndex: 2 },\n                  formulaExpression: 'per_second(query1)',\n                },\n              ],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query: temporalServer\n                      ? 'sum:temporal.server.poll.timeouts.count{$project_id} by {namespace}.as_count()'\n                      : `sum:temporal.server.poll.timeouts.count{$project_id,namespace:${temporalNamespaceUnderscore}}.as_count()`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 8, y: 4, width: 4, height: 3 },\n      },\n    ],\n    temporalServer: [\n      {\n        timeseriesDefinition: {\n          title: 'Temporal Server Errors',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [\n                {\n                  style: { palette: 'classic' },\n                  formulaExpression: 'query1',\n                  alias: 'server errors',\n                },\n              ],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query:\n                      'sum:temporal.server.service.error_with_type.count{$project_id, !error_type:serviceerror_stickyworkerunavailable} by {service_name}.as_rate()',\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 8, y: 4, width: 4, height: 3, isColumnBreak: false },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Temporal shard lock latency',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [\n                {\n                  style: { palette: 'classic' },\n                  formulaExpression: 'sum / count',\n                },\n              ],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'sum',\n                    dataSource: 'metrics',\n                    query:\n                      'avg:temporal.server.lock.latency.sum{$project_id} by {operation}.as_count()',\n                  },\n                },\n                {\n                  metricQuery: {\n                    name: 'count',\n                    dataSource: 'metrics',\n                    query:\n                      'avg:temporal.server.lock.latency.count{$project_id} by {operation}.as_count()',\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 8, y: 4, width: 4, height: 3, isColumnBreak: false },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Temporal persistence errors',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [\n                {\n                  style: { palette: 'classic' },\n                  formulaExpression: 'query1',\n                },\n              ],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query:\n                      'per_second(sum:temporal.server.persistence.error_with_type.count{$project_id} by {error_type,service_name}.as_count())',\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 8, y: 4, width: 4, height: 3, isColumnBreak: false },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Temporal Cache Latency',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [\n                {\n                  style: { palette: 'classic' },\n                  formulaExpression: 'sum / count',\n                  alias: 'cache latency',\n                },\n              ],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'sum',\n                    dataSource: 'metrics',\n                    query:\n                      'sum:temporal.server.cache.latency.sum{$project_id, operation:historycachegetorcreate}.as_count()',\n                  },\n                },\n                {\n                  metricQuery: {\n                    name: 'count',\n                    dataSource: 'metrics',\n                    query:\n                      'sum:temporal.server.cache.latency.count{$project_id, operation:historycachegetorcreate}.as_count()',\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 8, y: 4, width: 4, height: 3, isColumnBreak: false },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'Temporal Cache Miss',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'auto',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [\n                {\n                  style: { palette: 'classic' },\n                  formulaExpression: 'query1',\n                  alias: 'cache miss',\n                },\n              ],\n              queries: [\n                {\n                  metricQuery: {\n                    name: 'query1',\n                    dataSource: 'metrics',\n                    query:\n                      'temporal.server.cache.miss.count{$project_id, operation:historycachegetorcreate}.as_rate()',\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n        },\n        widgetLayout: { x: 8, y: 4, width: 4, height: 3, isColumnBreak: false },\n      },\n      {\n        timeseriesDefinition: {\n          title: 'CPU Usage % (requests) by pod',\n          titleSize: '16',\n          titleAlign: 'left',\n          showLegend: true,\n          legendLayout: 'horizontal',\n          legendColumns: ['avg', 'min', 'max', 'value', 'sum'],\n          requests: [\n            {\n              formulas: [\n                {\n                  alias: 'Usage',\n                  formulaExpression:\n                    '((default_zero(query1) / 1000 / 1000 / 1000) / default_zero(query2)) * 100',\n                },\n              ],\n              queries: [\n                {\n                  metricQuery: {\n                    dataSource: 'metrics',\n                    name: 'query1',\n                    query: `sum:kubernetes.cpu.usage.total{kube_namespace:temporal,$project_id,$deployment} by {pod_name}.fill(null).rollup(avg, 20)`,\n                  },\n                },\n                {\n                  metricQuery: {\n                    dataSource: 'metrics',\n                    name: 'query2',\n                    query: `sum:kubernetes.cpu.requests{kube_namespace:temporal,$project_id,$deployment} by {pod_name}.fill(null).rollup(avg, 20)`,\n                  },\n                },\n              ],\n              style: { palette: 'semantic', lineType: 'solid', lineWidth: 'normal' },\n            },\n          ],\n          yaxis: { scale: 'linear', label: '', includeZero: true, min: 'auto', max: 'auto' },\n          markers: [{ value: 'y = 100', displayType: 'error bold' }],\n        },\n        widgetLayout: { x: 0, y: 0, width: 4, height: 3 },\n      },\n    ],\n  };\n  return datadogWidgets[type]?.map((w) => setPos(thisPos, w)) || [];\n}",
        "parameters": [
          {
            "name": "type",
            "text": "type: DatadogResources",
            "type": "DatadogResources"
          },
          {
            "name": "opts",
            "text": "opts: {\n    webFramework?: string;\n    useTemplateVariables?: boolean;\n    temporalServer?: boolean;\n    forServiceId?: string;\n    forK8sNamespace?: string;\n  } = {}",
            "type": "{\n    webFramework?: string;\n    useTemplateVariables?: boolean;\n    temporalServer?: boolean;\n    forServiceId?: string;\n    forK8sNamespace?: string;\n  }"
          },
          {
            "name": "thisPos",
            "text": "thisPos?: { x: number; y: number }",
            "type": "{ x: number; y: number }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/datadog/envs.ts",
    "exports": [
      {
        "type": "function",
        "name": " getDDEnvs",
        "text": "\n\nexport function getDDEnvs() {\n  const { projectId, serviceId } = getConfigs();\n  const gitSha = getGitSha(false);\n  const envs: kubernetes.types.input.core.v1.EnvVar[] = [\n    { name: 'DD_ENV', value: projectId },\n    { name: 'DD_SERVICE', value: serviceId },\n    {\n      name: 'DD_TAGS',\n      value: pulumi.interpolate`git.commit.sha:${pulumi.output(\n        gitSha\n      )},git.repository_url:github.com/Triple-Whale/${pulumi.output(getGitRepoName())}`,\n    },\n  ];\n  return envs;\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/pulumi/datadog/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/datadog/monitors.ts",
    "exports": [
      {
        "type": "function",
        "name": " createDatadogMonitorMessage",
        "text": "\n\nexport function createDatadogMonitorMessage(\n  args: {\n    datadogDashboard?: datadog.Dashboard;\n    sendOnAlert?: boolean;\n    sendOnWarning?: boolean;\n    contacts?: string[];\n    slackChannelError?: string;\n    slackChannelWarning?: string;\n    includeOpsGenie?: boolean;\n  } = {}\n) {\n  const {\n    sendOnAlert = true,\n    sendOnWarning = true,\n    datadogDashboard,\n    contacts,\n    slackChannelError = 'slack-datadog-alerts',\n    slackChannelWarning = 'slack-datadog-warning',\n    includeOpsGenie = true,\n  } = args;\n  const slackTagsOutputs = contacts.map(\n    (email: string) => pulumi.interpolate`<@${getSlackUserByEmail(email).id}>`\n  );\n  const slackTags = pulumi.all(slackTagsOutputs).apply((emails) => (emails as any).join(' '));\n  let defaultMessage = pulumi.output('');\n  if (datadogDashboard) {\n    defaultMessage = appendToOutput(\n      defaultMessage,\n      pulumi.interpolate`Dashboard: https://us5.datadoghq.com${datadogDashboard.url}`\n    );\n  }\n  defaultMessage = appendToOutput(defaultMessage, 'Notify');\n  if (sendOnAlert) {\n    defaultMessage = appendToOutput(\n      defaultMessage,\n      `{{#is_alert}}@${slackChannelError} ${\n        includeOpsGenie ? '@opsgenie' : ''\n      }{{/is_alert}} {{#is_alert_recovery}}${\n        includeOpsGenie ? '@opsgenie' : ''\n      }{{/is_alert_recovery}}`\n    );\n  }\n  if (sendOnWarning) {\n    defaultMessage = appendToOutput(\n      defaultMessage,\n      `{{#is_warning}}@${slackChannelWarning}{{/is_warning}}`\n    );\n  }\n  if (contacts) {\n    defaultMessage = appendToOutput(\n      defaultMessage,\n      pulumi.interpolate`${contacts.map((v) => `@${v}`).join(' ')} \\n ${slackTags}`\n    );\n  }\n  return defaultMessage;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n    datadogDashboard?: datadog.Dashboard;\n    sendOnAlert?: boolean;\n    sendOnWarning?: boolean;\n    contacts?: string[];\n    slackChannelError?: string;\n    slackChannelWarning?: string;\n    includeOpsGenie?: boolean;\n  } = {}",
            "type": "{\n    datadogDashboard?: datadog.Dashboard;\n    sendOnAlert?: boolean;\n    sendOnWarning?: boolean;\n    contacts?: string[];\n    slackChannelError?: string;\n    slackChannelWarning?: string;\n    includeOpsGenie?: boolean;\n  }"
          }
        ]
      },
      {
        "type": "function",
        "name": " getDatadogMonitorDefaultSettings",
        "text": "\n\nexport function getDatadogMonitorDefaultSettings() {\n  return {\n    requireFullWindow: true,\n    notifyNoData: false,\n    renotifyInterval: 0,\n    includeTags: true,\n    newGroupDelay: 60,\n    notificationPresetName: 'hide_handles',\n    tags: createLabels(true),\n  };\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " createDefaultDatadogMonitors",
        "text": "\n\nexport function createDefaultDatadogMonitors(args: {\n  datadogDashboard: datadog.Dashboard;\n  excludePubsubSubs: gcp.pubsub.Subscription[];\n}) {\n  const { datadogDashboard } = args;\n  const contacts = getAlertEmails();\n\n  const { serviceId, projectId } = getConfigs();\n  const temporalNamespace = `${serviceId}-ns`.replaceAll('-', '_');\n\n  const monitors: (datadog.MonitorArgs & {\n    _id: string;\n  })[] = [];\n  const openDeployments = Object.values(getDeployments('k8s')).filter((d) => d.endpoints.open);\n  const defaultSettings = getDatadogMonitorDefaultSettings();\n  const simpleMonitors: Record<string, datadog.Monitor> = {};\n\n  if (monitoringState.k8s.enabled) {\n    monitors.push(...getDatadogMonitor('k8s'));\n  }\n  if (monitoringState.apmHttp.enabled) {\n    monitors.push(...getDatadogMonitor('apmHttp'));\n  }\n  if (monitoringState.pubsub.enabled) {\n    monitors.push(...getDatadogMonitor('pubsub'));\n  }\n  if (monitoringState.cloudTasks.enabled) {\n    monitors.push(...getDatadogMonitor('cloudTasks'));\n  }\n  if (monitoringState.sql.enabled) {\n    monitors.push(...getDatadogMonitor('sql'));\n  }\n  if (monitoringState.redis.enabled) {\n    monitors.push(...getDatadogMonitor('redis'));\n  }\n  if (monitoringState.temporal.enabled) {\n    monitors.push(...getDatadogMonitor('temporal'));\n  }\n  monitors.push(...getDatadogMonitor('logging'));\n  if (openDeployments?.length) {\n    for (const deployment of openDeployments) {\n      createDatadogUptimeCheck({\n        name: deployment.name,\n        // @ts-ignore\n        url: deployment.endpoints.open.url,\n        message: createDatadogMonitorMessage({ datadogDashboard, contacts }),\n      });\n    }\n  }\n  for (const monitor of monitors) {\n    const id = monitor._id;\n    delete monitor._id;\n    // @ts-ignore\n    monitor.tags = [...monitor.tags, `monitor-type:${id}`];\n    simpleMonitors[id] = new datadog.Monitor(id, monitor, { provider: getDatadogProvider() });\n  }\n\n  createCompositeMonitors(simpleMonitors);\n  function getDatadogMonitor(type: DatadogResources) {\n    const defaultMessage = createDatadogMonitorMessage({ datadogDashboard, contacts });\n    const monitors: { [P in DatadogResources]?: (datadog.MonitorArgs & { _id: string })[] } = {\n      pubsub: [\n        {\n          _id: 'pubsub-oldest-unacked',\n          message: defaultMessage,\n          name: `<${serviceId}> Oldest Unacked message is high for {{subscription_id.name}}`,\n          monitorThresholds: {\n            critical: '2800',\n            warning: '1800',\n          },\n          type: 'query alert',\n          query: `avg(last_1h):avg:gcp.pubsub.subscription.oldest_unacked_message_age{service-id:${serviceId},project_id:${projectId}} by {subscription_id} > 2800`,\n          evaluationDelay: 300,\n          ...defaultSettings,\n        },\n      ],\n      apmHttp: [\n        {\n          name: `<${serviceId}> Error Rate is high for {{resource_name.name}}`,\n          _id: 'apm-error-rate',\n          type: 'query alert',\n          query: `avg(last_5m):default_zero(sum:trace.express.request.errors{service:${serviceId},env:${projectId}} by {resource_name}.as_rate() / sum:trace.express.request.hits{service:${serviceId},env:${projectId}} by {resource_name}.as_rate() * 100) > 10`,\n          message: createDatadogMonitorMessage({ sendOnAlert: false, datadogDashboard, contacts }),\n          monitorThresholds: {\n            critical: '10',\n            warning: '7',\n          },\n          ...defaultSettings,\n        },\n        {\n          name: `<${serviceId}> Number of errors has gone above {{value}} for {{resource_name.name}}`,\n          _id: 'apm-error-count',\n          type: 'query alert',\n          query: `avg(last_5m):default_zero(sum:trace.express.request.errors{service:${serviceId},env:${projectId}} by {resource_name}.as_rate()) > 5`,\n          message: createDatadogMonitorMessage({\n            sendOnAlert: false,\n            sendOnWarning: false,\n            datadogDashboard,\n            contacts,\n          }),\n          monitorThresholds: {\n            critical: '5',\n          },\n          ...defaultSettings,\n        },\n        {\n          name: `<${serviceId}> Spike in request errors on {{resource_name.name}}`,\n          _id: 'apm-error-spike',\n          type: 'query alert',\n          query: `change(avg(last_5m),last_5m):100 * sum:trace.express.request.errors{service:${serviceId},env:${projectId}} by {resource_name}.as_rate() / sum:trace.express.request.hits{service:${serviceId},env:${projectId}} by {resource_name}.as_rate() > 1`,\n          monitorThresholds: {\n            critical: '1',\n          },\n          message: createDatadogMonitorMessage({\n            sendOnAlert: false,\n            sendOnWarning: false,\n            datadogDashboard,\n            contacts,\n          }),\n          ...defaultSettings,\n        },\n        {\n          name: `<${serviceId}> Service has a faulty deployment | {{event.title}}`,\n          _id: 'apm-faulty-deployment',\n          type: 'event-v2 alert',\n          query: `events(\"tags:deployment_analysis tags:\\\"env:${projectId}\\\" tags:\\\"service:${serviceId}\\\"\\\").rollup(\\\"count\\\").by(\\\"version\\\").last(\\\"70m\\\") > 0`,\n          monitorThresholds: {\n            critical: '0',\n          },\n          message: pulumi.interpolate`{{event.text}} ${defaultMessage}`,\n          ...defaultSettings,\n        },\n      ],\n      cloudTasks: [\n        {\n          name: `<${serviceId}> Cloud Tasks queue depth is high for {{queue_id.name}}`,\n          _id: 'cloud-tasks-queue-depth',\n          type: 'query alert',\n          query: `avg(last_1h):sum:gcp.cloudtasks.queue.depth{project_id:${projectId} AND queue_id IN (${monitoringState.cloudTasks.resourceNames.join(\n            ','\n          )})} by {queue_id} > 20000`,\n          evaluationDelay: 300,\n          message: defaultMessage,\n          ...defaultSettings,\n        },\n      ],\n      k8s: [\n        {\n          name: `<${serviceId}> Container restarts are high for {{triplewhale_com_deployment.name}}`,\n          _id: 'k8s-container-restarts',\n          type: 'query alert',\n          query: `avg(last_10m):per_minute(sum:kubernetes_state.container.restarts{project_id:${projectId},kube_namespace:${serviceId}-ns} by {triplewhale_com_deployment}) > 10`,\n          message: defaultMessage,\n          monitorThresholds: {\n            critical: '10',\n            warning: '3',\n          },\n          ...defaultSettings,\n        },\n        {\n          name: `<${serviceId}> K8s CrashLoopBackOff {{triplewhale_com_deployment.name}}`,\n          _id: 'k8s-crashloopbackoff',\n          type: 'query alert',\n          query: `avg(last_5m):avg:kubernetes.containers.state.waiting{project_id:${projectId},kube_namespace:${serviceId}-ns,reason:crashloopbackoff} by {triplewhale_com_deployment} >= 1`,\n          message: defaultMessage,\n          monitorThresholds: {\n            critical: '1',\n          },\n          ...defaultSettings,\n        },\n      ],\n      sql: [\n        {\n          name: `<${serviceId}> SQL CPU utilization is high for {{database_id.name}}`,\n          _id: 'sql-cpu-utilization',\n          type: 'query alert',\n          query: `avg(last_1h):avg:gcp.cloudsql.database.cpu.utilization{service-id:${serviceId},project_id:${projectId}} by {database_id} > 0.65`,\n          message: defaultMessage,\n          monitorThresholds: {\n            critical: '0.65',\n            warning: '0.5',\n          },\n          evaluationDelay: 300,\n          ...defaultSettings,\n        },\n        {\n          name: `<${serviceId}> SQL Memory utilization is high for {{database_id.name}}`,\n          _id: 'sql-memory-utilization',\n          type: 'query alert',\n          query: `avg(last_1h):avg:gcp.cloudsql.database.memory.utilization{service-id:${serviceId},project_id:${projectId}} by {database_id} > 0.70`,\n          message: defaultMessage,\n          monitorThresholds: {\n            critical: '0.70',\n            warning: '0.55',\n          },\n          evaluationDelay: 300,\n          ...defaultSettings,\n        },\n      ],\n      redis: [\n        {\n          name: `<${serviceId}> Redis Memory utilization is high for {{instance_id.name}}`,\n          _id: 'redis-memory-utilization',\n          type: 'query alert',\n          query: `avg(last_1h):avg:gcp.redis.stats.memory.usage_ratio{service-id:${serviceId},project_id:${projectId}} by {instance_id} > 0.85`,\n          message: defaultMessage,\n          monitorThresholds: {\n            critical: '0.85',\n            warning: '0.75',\n          },\n          evaluationDelay: 300,\n          ...defaultSettings,\n        },\n      ],\n      logging: [\n        {\n          name: `<${serviceId}> Logging Throughput is high for {{log.name}} in project {{project_id.name}}`,\n          _id: 'logging-throughput',\n          type: 'query alert',\n          query: `avg(last_1h):sum:gcp.logging.byte_count{namespace_name:${serviceId}-ns} by {log,project_id}.as_rate() > 2000000`, // 2MB\n          message: createDatadogMonitorMessage({\n            datadogDashboard,\n            contacts,\n            slackChannelError: 'slack-datadog-warning',\n            includeOpsGenie: false,\n          }),\n          monitorThresholds: {\n            critical: '2000000',\n            warning: '1500000',\n          },\n          evaluationDelay: 300,\n          ...defaultSettings,\n        },\n      ],\n      temporal: [\n        {\n          name: `<${serviceId}> Temporal Workflow Execution Failure Rate is High`,\n          _id: 'temporal-workflow-execution-failure-rate',\n          type: 'query alert',\n          query: `avg(last_2h):100*sum:temporal.server.workflow.failed.count{project_id:${projectId},namespace:${temporalNamespace}}.as_rate().rollup(sum, 3600) / (sum:temporal.server.workflow.success.count{project_id:${projectId},namespace:${temporalNamespace}}.as_rate().rollup(sum, 3600) + sum:temporal.server.workflow.failed.count{project_id:${projectId},namespace:${temporalNamespace}}.as_rate().rollup(sum, 3600)) > 10`,\n          message: defaultMessage,\n          monitorThresholds: {\n            critical: '10',\n            warning: '5',\n          },\n          evaluationDelay: 300,\n          ...defaultSettings,\n          newGroupDelay: null,\n        },\n        {\n          name: `<${serviceId}> Drop in temporal workflow execution successes`,\n          _id: 'temporal-workflow-execution-success-rate',\n          type: 'query alert',\n          query: `pct_change(avg(last_1h), last_1h): sum:temporal.server.workflow.success.count{project_id:${projectId},namespace:${temporalNamespace}}.rollup(sum, 3600) < -50`,\n          message: defaultMessage,\n          monitorThresholds: {\n            critical: '-50',\n          },\n          evaluationDelay: 3600,\n          ...defaultSettings,\n          newGroupDelay: null,\n        },\n      ],\n    };\n    return monitors[type];\n  }\n\n  function createCompositeMonitors(simpleMonitors: Record<string, datadog.Monitor> = {}) {\n    const defaultMessage = createDatadogMonitorMessage({ datadogDashboard, contacts });\n    const compositeMonitors: { _id: string; ids: string[]; monitor: datadog.MonitorArgs }[] = [\n      {\n        _id: 'apm-error-high',\n        ids: ['apm-error-rate', 'apm-error-count'],\n        monitor: {\n          ...defaultSettings,\n          name: `<${serviceId}> Errors is high for {{resource_name.name}}`,\n          type: 'composite',\n          query: ``,\n          message: defaultMessage,\n          newGroupDelay: null,\n        },\n      },\n      {\n        _id: 'apm-error-high-spike',\n        ids: ['apm-error-spike', 'apm-error-count'],\n        monitor: {\n          ...defaultSettings,\n          name: `<${serviceId}> Error spike for {{resource_name.name}}`,\n          type: 'composite',\n          query: ``,\n          message: defaultMessage,\n          newGroupDelay: null,\n        },\n      },\n    ];\n    for (const compositeMonitor of compositeMonitors) {\n      const relevantMonitors = compositeMonitor.ids.map((id) => simpleMonitors[id]).filter(Boolean);\n      if (relevantMonitors.length === compositeMonitor.ids.length) {\n        compositeMonitor.monitor.query = pulumi.all(relevantMonitors).apply((m) => {\n          return pulumi.interpolate`${m[0].id} && ${m[1].id}`;\n        });\n        new datadog.Monitor(compositeMonitor._id, compositeMonitor.monitor, {\n          provider: getDatadogProvider(),\n        });\n      }\n    }\n  }\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  datadogDashboard: datadog.Dashboard;\n  excludePubsubSubs: gcp.pubsub.Subscription[];\n}",
            "type": "{\n  datadogDashboard: datadog.Dashboard;\n  excludePubsubSubs: gcp.pubsub.Subscription[];\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " createDatadogMonitor",
        "text": "\n\nexport async function createDatadogMonitor({\n  id,\n  contacts,\n  datadogDashboard,\n  sendOnAlert,\n  sendOnWarning,\n  settings,\n  message,\n  slackChannelError,\n  slackChannelWarning,\n  includeOpsGenie,\n}: {\n  id: string;\n  contacts?: string[];\n  datadogDashboard?: datadog.Dashboard;\n  sendOnAlert?: boolean;\n  sendOnWarning?: boolean;\n  settings: Partial<datadog.MonitorArgs> & {\n    name: datadog.MonitorArgs['name'];\n    query: datadog.MonitorArgs['query'];\n    type: datadog.MonitorArgs['type'];\n  };\n  message?: string | pulumi.Input<string>;\n  slackChannelError?: string;\n  slackChannelWarning?: string;\n  includeOpsGenie?: boolean;\n}) {\n  contacts = contacts || getAlertEmails();\n  message =\n    settings.message ||\n    pulumi.interpolate`${message ? message + ' ' : ''}${createDatadogMonitorMessage({\n      datadogDashboard,\n      contacts,\n      sendOnAlert,\n      sendOnWarning,\n      slackChannelError,\n      slackChannelWarning,\n      includeOpsGenie,\n    })}`;\n  const defaultSettings = {\n    requireFullWindow: true,\n    notifyNoData: false,\n    renotifyInterval: 0,\n    includeTags: true,\n    notificationPresetName: 'hide_handles',\n    tags: createLabels(true),\n    newGroupDelay: null,\n    message,\n  };\n  return new datadog.Monitor(\n    id,\n    { ...defaultSettings, ...settings },\n    { provider: getDatadogProvider() }\n  );\n}",
        "parameters": [
          {
            "name": "{\n  id,\n  contacts,\n  datadogDashboard,\n  sendOnAlert,\n  sendOnWarning,\n  settings,\n  message,\n  slackChannelError,\n  slackChannelWarning,\n  includeOpsGenie,\n}",
            "text": "{\n  id,\n  contacts,\n  datadogDashboard,\n  sendOnAlert,\n  sendOnWarning,\n  settings,\n  message,\n  slackChannelError,\n  slackChannelWarning,\n  includeOpsGenie,\n}: {\n  id: string;\n  contacts?: string[];\n  datadogDashboard?: datadog.Dashboard;\n  sendOnAlert?: boolean;\n  sendOnWarning?: boolean;\n  settings: Partial<datadog.MonitorArgs> & {\n    name: datadog.MonitorArgs['name'];\n    query: datadog.MonitorArgs['query'];\n    type: datadog.MonitorArgs['type'];\n  };\n  message?: string | pulumi.Input<string>;\n  slackChannelError?: string;\n  slackChannelWarning?: string;\n  includeOpsGenie?: boolean;\n}",
            "type": "{\n  id: string;\n  contacts?: string[];\n  datadogDashboard?: datadog.Dashboard;\n  sendOnAlert?: boolean;\n  sendOnWarning?: boolean;\n  settings: Partial<datadog.MonitorArgs> & {\n    name: datadog.MonitorArgs['name'];\n    query: datadog.MonitorArgs['query'];\n    type: datadog.MonitorArgs['type'];\n  };\n  message?: string | pulumi.Input<string>;\n  slackChannelError?: string;\n  slackChannelWarning?: string;\n  includeOpsGenie?: boolean;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/datadog/provider.ts",
    "exports": [
      {
        "type": "function",
        "name": " getDatadogProvider",
        "text": "\n\nexport function getDatadogProvider() {\n  if (!datadogProvider) {\n    datadogProvider = new datadog.Provider('datadog', {\n      apiUrl: 'https://api.us5.datadoghq.com/',\n      apiKey: getSecretValue('datadog-api-key'),\n      appKey: getSecretValue('datadog-app-key'),\n      validate: String(false),\n    });\n  }\n  return datadogProvider;\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/pulumi/datadog/service.ts",
    "exports": [
      {
        "type": "function",
        "name": " createDatadogService",
        "text": "\n\nexport function createDatadogService(args: {\n  serviceConfig: ServiceConfig;\n  datadogDashboard: datadog.Dashboard;\n}) {\n  const { serviceId } = getConfigs();\n  const serviceDefinition: DatadogService = {\n    contacts: getAlertEmails().map((contact) => {\n      return {\n        contact: contact,\n        name: contact,\n        type: 'email',\n      };\n    }),\n    'dd-service': serviceId,\n    links: [\n      {\n        name: 'Default Dashboard',\n        type: 'dashboard',\n        url: pulumi.interpolate`https://us5.datadoghq.com${args.datadogDashboard.url}`,\n      },\n    ],\n    repos: [\n      {\n        name: 'github',\n        provider: 'github',\n        url: pulumi.output(getGitFullUrl()),\n      },\n    ],\n    'schema-version': 'v2',\n    tags: createLabels(true),\n  };\n  const service = new datadog.ServiceDefinitionYaml(\n    'service-definition',\n    {\n      serviceDefinition: toYamlOutput(pulumi.output(serviceDefinition)),\n    },\n    { provider: getDatadogProvider() }\n  );\n  return service;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  serviceConfig: ServiceConfig;\n  datadogDashboard: datadog.Dashboard;\n}",
            "type": "{\n  serviceConfig: ServiceConfig;\n  datadogDashboard: datadog.Dashboard;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/datadog/sqlMonitor.ts",
    "exports": [
      {
        "type": "function",
        "name": " createDatadogSqlMonitor",
        "text": "\n\nexport function createDatadogSqlMonitor(args: { instance: SqlDatabaseInstance; name: string }) {\n  const { instance, name } = args;\n  instances[name] = instance;\n  const { projectId } = getConfigs();\n  const provider = getK8sProvider({ cluster: 'knative-cluster', namespace: 'datadog' });\n  const userPassword = createPassword({ name: `${name}-datadog-sql-pass` });\n  const sqlUser = new gcp.sql.User(`${name}-datadog-sql-user`, {\n    instance: instance.name,\n    name: `datadog`,\n    password: userPassword.result,\n  });\n  sqlUsers[name] = sqlUser;\n  const host = instance.ipAddresses[0].ipAddress;\n  const postgresqlProvider = getPostgresqlProvider({\n    instance,\n    user: sqlUser,\n    database: 'postgres',\n  });\n  new postgresql.Extension(\n    `${name}-pg_stat_statements`,\n    {\n      name: 'pg_stat_statements',\n    },\n    { provider: postgresqlProvider, deleteBeforeReplace: true }\n  );\n\n  createDatadogPostgresqlSchema({\n    database: 'postgres',\n    instanceName: name,\n  });\n\n  new kubernetes.core.v1.Service(\n    name,\n    {\n      metadata: {\n        name: `${name}-datadog-sql`,\n        labels: {\n          'tags.datadoghq.com/env': projectId,\n          'tags.datadoghq.com/service': name,\n          'pulumi.com/skipAwait': 'true',\n        },\n        annotations: {\n          'pulumi.com/skipAwait': 'true',\n          'ad.datadoghq.com/service.check_names': '[\"postgres\"]',\n          'ad.datadoghq.com/service.init_configs': '[{}]',\n          'ad.datadoghq.com/service.instances': toJSONOutput([\n            {\n              dbm: true,\n              host,\n              port: 5432,\n              username: 'datadog',\n              password: userPassword.result,\n              gcp: { project_id: projectId, instance_id: instance.id },\n            },\n          ]),\n        },\n      },\n      spec: { ports: [{ port: 5432, protocol: 'TCP', targetPort: 5432, name: 'postgres' }] },\n    },\n    { provider }\n  );\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { instance: SqlDatabaseInstance; name: string }",
            "type": "{ instance: SqlDatabaseInstance; name: string }"
          }
        ]
      },
      {
        "type": "function",
        "name": " createDatadogPostgresqlSchema",
        "text": "\n\nexport function createDatadogPostgresqlSchema(args: { database: string; instanceName: string }) {\n  const { database, instanceName } = args;\n\n  const user = sqlUsers[instanceName];\n  const instance = instances[instanceName];\n  if (!instance) return;\n  const provider = getPostgresqlProvider({\n    instance: instance,\n    user,\n    database,\n  });\n  new postgresql.Schema(\n    `${instanceName}-${database}-datadog`,\n    {\n      name: 'datadog',\n      database,\n    },\n    { provider }\n  );\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { database: string; instanceName: string }",
            "type": "{ database: string; instanceName: string }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/datadog/types.ts",
    "exports": [
      {
        "name": " DatadogService",
        "text": "\n\nexport interface DatadogService {\n  'schema-version': string;\n  'dd-service': string;\n  team?: string;\n  contacts?: Contact[];\n  repos?: Repos[];\n  docs?: Doc[];\n  links?: Link[];\n  tags?: string[];\n  integrations?: Integrations;\n}",
        "type": "interface"
      },
      {
        "name": " DatadogResources",
        "text": "\n\nexport type DatadogResources =\n  | 'apmHttp'\n  | 'pubsub'\n  | 'pubsubPull'\n  | 'pubsubPush'\n  | 'saber'\n  | 'bigtable'\n  | 'redis'\n  | 'k8s'\n  | 'sql'\n  | 'cloudTasks'\n  | 'storage'\n  | 'mongo'\n  | 'cloudRun'\n  | 'temporal'\n  | 'temporalDetailed'\n  | 'temporalServer'\n  | 'chronos'\n  | 'logging';",
        "type": "| 'apmHttp'\n  | 'pubsub'\n  | 'pubsubPull'\n  | 'pubsubPush'\n  | 'saber'\n  | 'bigtable'\n  | 'redis'\n  | 'k8s'\n  | 'sql'\n  | 'cloudTasks'\n  | 'storage'\n  | 'mongo'\n  | 'cloudRun'\n  | 'temporal'\n  | 'temporalDetailed'\n  | 'temporalServer'\n  | 'chronos'\n  | 'logging'"
      }
    ]
  },
  {
    "file": "@tw/pulumi/datadog/utils.ts",
    "exports": [
      {
        "type": "function",
        "name": " setPos",
        "text": "\n\nexport function setPos(pos, widget: Partial<DashboardWidget>): Partial<DashboardWidget> {\n  const layout = widget.widgetLayout;\n  const width = layout.width;\n  const total = 12;\n  widget.widgetLayout.x = pos.x;\n  widget.widgetLayout.y = pos.y;\n  if (pos.x * (total / width) > total) {\n    pos.x = 0;\n    pos.y++;\n  } else {\n    pos.x += width;\n  }\n  return widget;\n}",
        "parameters": [
          {
            "name": "pos",
            "text": "pos",
            "type": "any"
          },
          {
            "name": "widget",
            "text": "widget: Partial<DashboardWidget>",
            "type": "Partial<DashboardWidget>"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/dataflow/api.ts",
    "exports": [
      {
        "type": "function",
        "name": " callApi",
        "text": "\n\nexport async function callApi(url: string) {\n  const authClient = new GoogleAuth();\n  const accessToken = await authClient.getAccessToken();\n  const response = await axios.get(url, {\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n      Accept: 'application/json',\n    },\n  });\n  return response;\n}",
        "parameters": [
          {
            "name": "url",
            "text": "url: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " getMostRecentJob",
        "text": "\n\n// currently no sdk support for this\nexport async function getMostRecentJob(): Promise<Job | undefined> {\n  const { projectId, serviceId, location } = getConfigs();\n  const response = await callApi(\n    `https://datapipelines.googleapis.com/v1/projects/${projectId}/locations/${location}/pipelines/${serviceId}/jobs`\n  );\n  return response.data.jobs[0];\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " isJobActive",
        "text": "\n\nexport async function isJobActive(job: Job): Promise<boolean> {\n  const { projectId, location } = getConfigs();\n  const dataflowClient = new JobsV1Beta3Client();\n  const jobInfo = await dataflowClient.getJob({\n    projectId,\n    location,\n    jobId: job.id,\n  });\n  return jobInfo[0].currentState === 'JOB_STATE_RUNNING';\n}",
        "parameters": [
          {
            "name": "job",
            "text": "job: Job",
            "type": "Job"
          }
        ]
      },
      {
        "type": "function",
        "name": " getPipeline",
        "text": "\n\n// currently no sdk support for this\nexport async function getPipeline(): Promise<boolean> {\n  const { projectId, serviceId, location } = getConfigs();\n  try {\n    await callApi(\n      `https://datapipelines.googleapis.com/v1/projects/${projectId}/locations/${location}/pipelines/${serviceId}`\n    );\n    return true;\n  } catch (e) {\n    return false;\n  }\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " getCurrentNumWorkers",
        "text": "\n\n// the sdk function for this, listJobMessages, does not return what we need - IListJobMessagesResponse (client is beta)\nexport async function getCurrentNumWorkers(jobId: string): Promise<number | undefined> {\n  const { projectId, location } = getConfigs();\n  let pageToken;\n  const autoscalingEvents = [];\n  do {\n    const pageTokenParam = pageToken ? `&pageToken=${pageToken}` : '';\n    const response = await callApi(\n      `https://dataflow.googleapis.com/v1b3/projects/${projectId}/locations/${location}/jobs/${jobId}/messages${pageTokenParam}`\n    );\n    const data: ListJobMessagesResponse = response.data;\n    pageToken = data.nextPageToken;\n    if (data.autoscalingEvents) {\n      autoscalingEvents.push(...data.autoscalingEvents);\n    }\n  } while (pageToken);\n  autoscalingEvents.reverse(); // most recent last -> most recent first\n\n  const mostRecentNumWorkers = autoscalingEvents.find((event) => event.currentNumWorkers);\n  if (mostRecentNumWorkers) {\n    return Number(mostRecentNumWorkers.currentNumWorkers);\n  }\n}",
        "parameters": [
          {
            "name": "jobId",
            "text": "jobId: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/dataflow/classic.ts",
    "exports": [
      {
        "type": "function",
        "name": " createDataFlowClassic",
        "text": "\n\nexport function createDataFlowClassic(args: {\n  parameters?: Record<string, pulumi.Input<string>>;\n  maxWorkers?: number;\n  runtime: 'node' | 'python';\n  entrypoint?: string;\n  secretVersion?: gcp.secretmanager.SecretVersion;\n  envs?: Record<string, any>;\n}) {\n  const { parameters = {}, maxWorkers = 10, runtime, secretVersion } = args;\n  const { projectId, serviceId, location, serviceConfig, stack } = getConfigs();\n\n  const entrypoint = args.entrypoint || (runtime == 'node' ? 'dist/app.js' : 'src/app.py');\n\n  if (secretVersion) {\n    parameters['tw_secret_name'] = secretVersion.name;\n  }\n\n  const envs = {\n    ...serviceConfig?.env,\n    SERVICE_ID: serviceId,\n    TW_VERSION: getBuildVersion(),\n    TW_DEPLOYMENT: serviceId,\n    STACK_NAME: stack,\n  };\n\n  parameters['tw_envs'] = toJSONOutput({ ...envs, ...args.envs });\n\n  const parametersString = dataflowParametersToCMDArgs(parameters);\n\n  const gitSha = pulumi.output(getGitSha(false));\n\n  const gcsPath = pulumi.interpolate`gs://dataflow-templates-${projectId}/classic/${serviceId}/${gitSha}.json`;\n\n  const standardArgs = pulumi.interpolate`--project=${projectId} --runner=dataflow --region=${location} \\\n    --temp_location gs://tw-dataflows-${projectId}/${serviceId}/temp --staging_location gs://tw-dataflows-${projectId}/${serviceId}/temp \\\n    --sdkContainerImage ${getDevopsImage(`beam-worker-${runtime}`)} ${parametersString}`;\n\n  let command = pulumi.output('');\n\n  if (runtime === 'node') {\n    command = pulumi.interpolate`node ${entrypoint} ${standardArgs} --template_location=\"${gcsPath}\"`;\n  } else if (runtime === 'python') {\n    command = pulumi.interpolate`python3 ${entrypoint} ${standardArgs} --template_location=\"${gcsPath}\"`;\n  }\n\n  const secretValue = secretVersion?.secret && getSecretValue(secretVersion.secret);\n  const dockerArgs: docker.ContainerArgs = {\n    image: getServiceImage(),\n    attach: true,\n    logs: false,\n    mustRun: false,\n    entrypoints: ['bash'],\n    envs: [\n      `PROJECT_ID=${projectId}`,\n      pulumi.interpolate`COMMIT_SHA=${gitSha}`,\n      `GOOGLE_CLOUD_PROJECT=${projectId}`,\n      pulumi.interpolate`TW_SECRETS=${secretValue}`,\n    ],\n    command: ['-c', command],\n  };\n\n  if (process.env.IS_CLOUD_BUILD) {\n    dockerArgs.networksAdvanced = [{ name: 'cloudbuild' }];\n  } else {\n    dockerArgs.mounts = [\n      {\n        source: `${process.env.HOME}/.config/gcloud`,\n        target: '/root/.config/gcloud',\n        type: 'bind',\n      },\n    ];\n  }\n\n  const container = new docker.Container(serviceId, dockerArgs, { retainOnDelete: true });\n\n  // container.name.apply((name) => {\n  //   try {\n  //     docker.getLogs({ name }).then((logs) => {\n  //       console.log(logs.logsListStrings.join('\\n'));\n  //     });\n  //   } catch {}\n  // });\n\n  const pipeline = createDataFlowPipeline({\n    name: serviceId,\n    parameters: parameters,\n    maxWorkers: maxWorkers,\n    gcsPath,\n    templateType: 'classic',\n    dependsOn: [container],\n  });\n  return { pipeline };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  parameters?: Record<string, pulumi.Input<string>>;\n  maxWorkers?: number;\n  runtime: 'node' | 'python';\n  entrypoint?: string;\n  secretVersion?: gcp.secretmanager.SecretVersion;\n  envs?: Record<string, any>;\n}",
            "type": "{\n  parameters?: Record<string, pulumi.Input<string>>;\n  maxWorkers?: number;\n  runtime: 'node' | 'python';\n  entrypoint?: string;\n  secretVersion?: gcp.secretmanager.SecretVersion;\n  envs?: Record<string, any>;\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " createDataFlowClassicBuild",
        "text": "\n\nexport function createDataFlowClassicBuild(args?: { runtime?: 'node' | 'python' }) {\n  const { serviceId } = getConfigs();\n  const { runtime } = args || {};\n  createBuildTrigger({\n    name: serviceId,\n    baseDir: 'pipelines',\n    runtime,\n    machineType: 'E2_HIGHCPU_8',\n    runtimeBaseImage: runtime === 'node' ? getDevopsImage('base-beam-node') : null,\n  });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args?: { runtime?: 'node' | 'python' }",
            "type": "{ runtime?: 'node' | 'python' }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/dataflow/flex.ts",
    "exports": [
      {
        "type": "function",
        "name": " createDataFlowTemplate",
        "text": "\n\nexport async function createDataFlowTemplate() {\n  const { projectId, serviceId } = getConfigs();\n  const metadata = JSON.parse(fs.readFileSync('../metadata.json', 'utf8').toString());\n\n  const completeMetadata = {\n    defaultEnvironment: {},\n    image: getServiceImage(),\n    metadata,\n    sdkInfo: { language: 'PYTHON' },\n  };\n  const object = new gcp.storage.BucketObject(\n    `${serviceId}-dataflow-flex`,\n    {\n      name: `flex/${serviceId}/${process.env.GITHUB_SHA || 'latest'}.json`,\n      bucket: `dataflow-templates-${projectId}`,\n      content: toJSONOutput(completeMetadata),\n    },\n    { retainOnDelete: true }\n  );\n\n  return { object };\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " createDataFlowFlex",
        "text": "\n\nexport async function createDataFlowFlex(args: {\n  parameters: Record<string, pulumi.Input<string>>;\n  maxWorkers?: number;\n}) {\n  const { parameters, maxWorkers = 10 } = args;\n  const { serviceId } = getConfigs();\n\n  const { object } = await createDataFlowTemplate();\n  const pipeline = createDataFlowPipeline({\n    name: serviceId,\n    templateType: 'flex',\n    maxWorkers,\n    parameters,\n    gcsPath: pulumi.interpolate`gs://${object.bucket}/${object.name}`,\n  });\n  return { pipeline };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  parameters: Record<string, pulumi.Input<string>>;\n  maxWorkers?: number;\n}",
            "type": "{\n  parameters: Record<string, pulumi.Input<string>>;\n  maxWorkers?: number;\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " createDataFlowFlexBuild",
        "text": "\n\nexport function createDataFlowFlexBuild() {\n  const { serviceId } = getConfigs();\n  createBuildTrigger({\n    name: serviceId,\n    baseDir: 'pipelines',\n    runtime: 'beam-python',\n  });\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/pulumi/dataflow/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/dataflow/pipeline.ts",
    "exports": [
      {
        "type": "function",
        "name": " createDataFlowPipeline",
        "text": "\n\nexport async function createDataFlowPipeline(args: {\n  name: string;\n  templateType: 'flex' | 'classic';\n  maxWorkers?: number;\n  parameters: dataflowParameters;\n  environment?: EnvironmentArgs;\n  gcsPath: pulumi.Input<string>;\n  dependsOn?: pulumi.Input<pulumi.Resource> | pulumi.Input<pulumi.Input<pulumi.Resource>[]>;\n}) {\n  globalState['gcp:dataflow/pipeline:Pipeline'] = [];\n  const { name, templateType, maxWorkers, parameters, environment, gcsPath, dependsOn } = args;\n  const { projectId, location } = getConfigs();\n\n  let mostRecentNumWorkers;\n  const pipelineExists = await getPipeline();\n  if (pipelineExists) {\n    const job = await getMostRecentJob();\n    if (job) {\n      if (await isJobActive(job)) {\n        mostRecentNumWorkers = await getCurrentNumWorkers(job.id);\n      }\n    }\n  }\n  const numWorkers = Math.min(mostRecentNumWorkers || INITIAL_WORKERS, maxWorkers);\n\n  const environmentArgs: EnvironmentArgs = {\n    additionalExperiments: ['enable_data_sampling'],\n    network: 'app',\n    subnetwork: `https://www.googleapis.com/compute/v1/projects/${projectId}/regions/${location}/subnetworks/app`,\n    tempLocation: `gs://tw-dataflows-${projectId}/${name}/temp`,\n    machineType: 'e2-standard-4',\n    additionalUserLabels: {\n      ...createLabels(),\n    },\n    workerRegion: location,\n    numWorkers,\n    maxWorkers,\n  };\n\n  const pipelineArgs: gcp.dataflow.PipelineArgs = {\n    displayName: name,\n    type: 'PIPELINE_TYPE_STREAMING',\n    state: 'STATE_ACTIVE',\n    name: name,\n    region: location,\n  };\n\n  const combinedEnvironment = { ...environmentArgs, ...environment };\n\n  if (templateType === 'flex') {\n    pipelineArgs.workload = {\n      dataflowFlexTemplateRequest: {\n        projectId,\n        launchParameter: {\n          jobName: name,\n          containerSpecGcsPath: gcsPath,\n          parameters,\n          environment: combinedEnvironment,\n        },\n        location,\n      },\n    };\n  } else if (templateType === 'classic') {\n    pipelineArgs.workload = {\n      dataflowLaunchTemplateRequest: {\n        projectId,\n        gcsPath,\n        launchParameters: {\n          jobName: name,\n          parameters,\n          environment: combinedEnvironment,\n        },\n        location,\n      },\n    };\n  }\n\n  const pipeline = new gcp.dataflow.Pipeline(name, pipelineArgs, {\n    deleteBeforeReplace: true,\n    replaceOnChanges: ['workload'],\n    dependsOn,\n  });\n  return pipeline;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  templateType: 'flex' | 'classic';\n  maxWorkers?: number;\n  parameters: dataflowParameters;\n  environment?: EnvironmentArgs;\n  gcsPath: pulumi.Input<string>;\n  dependsOn?: pulumi.Input<pulumi.Resource> | pulumi.Input<pulumi.Input<pulumi.Resource>[]>;\n}",
            "type": "{\n  name: string;\n  templateType: 'flex' | 'classic';\n  maxWorkers?: number;\n  parameters: dataflowParameters;\n  environment?: EnvironmentArgs;\n  gcsPath: pulumi.Input<string>;\n  dependsOn?: pulumi.Input<pulumi.Resource> | pulumi.Input<pulumi.Input<pulumi.Resource>[]>;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/dataflow/types.ts",
    "exports": [
      {
        "name": " dataflowParameters",
        "text": "\n\nexport type dataflowParameters = Record<string, pulumi.Input<string>>;",
        "type": "Record<string, pulumi.Input<string>>"
      },
      {
        "name": " EnvironmentArgs",
        "text": "\n\nexport type EnvironmentArgs =\n  | gcp.types.input.dataflow.PipelineWorkloadDataflowFlexTemplateRequestLaunchParameterEnvironment\n  | gcp.types.input.dataflow.PipelineWorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironment;",
        "type": "| gcp.types.input.dataflow.PipelineWorkloadDataflowFlexTemplateRequestLaunchParameterEnvironment\n  | gcp.types.input.dataflow.PipelineWorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironment"
      }
    ]
  },
  {
    "file": "@tw/pulumi/dataflow/utils.ts",
    "exports": [
      {
        "type": "function",
        "name": " dataflowParametersToCMDArgs",
        "text": "\n\nexport function dataflowParametersToCMDArgs(parameters: Record<string, pulumi.Input<string>>) {\n  const parametersString = pulumi\n    .all(\n      Object.entries(parameters || {}).map(([key, value]) => pulumi.interpolate`--${key}=${value}`)\n    )\n    .apply((v) => v.join(' '));\n  return parametersString;\n}",
        "parameters": [
          {
            "name": "parameters",
            "text": "parameters: Record<string, pulumi.Input<string>>",
            "type": "Record<string, pulumi.Input<string>>"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/dataland/add-iam-permissions.ts",
    "exports": [
      {
        "type": "function",
        "name": " getDataformDefaultServiceAccountEmail",
        "text": "\n\nexport function getDataformDefaultServiceAccountEmail(projectNumber: pulumi.Input<String>) {\n    return pulumi.interpolate`service-${projectNumber}@gcp-sa-dataform.iam.gserviceaccount.com`;\n}",
        "parameters": [
          {
            "name": "projectNumber",
            "text": "projectNumber: pulumi.Input<String>",
            "type": "pulumi.Input<String>"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/dataland/bq-routines.ts",
    "exports": [
      {
        "type": "function",
        "name": " buildRoutine",
        "text": "\n\nexport function buildRoutine(buildRoutineArgs: buildRoutineArgs) {\n  setDefaultLabelsForAllResources();\n\n  // Set defaults for nested object arguments\n  buildRoutineArgs = { ...buildViewDefaults, ...buildRoutineArgs };\n\n  // extracting keys and values from viewQueryParamsObject\n  const routineDefinitionBodyParamsObject =\n    buildRoutineArgs.routineDefinitionBodyParamsObject || defaultRoutineDefinitionBodyParamsObject;\n  let ks = Object.keys(routineDefinitionBodyParamsObject);\n  let vs = pulumi.all(ks.map((k) => routineDefinitionBodyParamsObject[k])).apply((v) => v);\n\n  const bqRoutine = new gcp.bigquery.Routine(\n    buildRoutineArgs.routineName,\n    {\n      datasetId: pulumi.interpolate`${buildRoutineArgs.routineDataset}`,\n      language: buildRoutineArgs.routineLanguage,\n      routineType: buildRoutineArgs.routineType,\n      routineId: buildRoutineArgs.routineName,\n      definitionBody: vs.apply(\n        (t: any) =>\n          `${buildRoutineArgs.routineDefinitionBody(\n            t.reduce(\n              (\n                obj: Record<string, pulumi.Output<string> | string>,\n                value: pulumi.Output<string> | string,\n                index: number\n              ) => {\n                obj[ks[index]] = value;\n                return obj;\n              },\n              {} as Record<string, pulumi.Output<string> | string>\n            )\n          )}`\n      ),\n      arguments: buildRoutineArgs.routineArguments,\n      description: buildRoutineArgs.routineDescription,\n      returnType: buildRoutineArgs.routineReturnType,\n    },\n    {\n      dependsOn: buildRoutineArgs.dependencies,\n    }\n  );\n\n  if (buildRoutineArgs.createViewForSchemaDefinition) {\n    if (!buildRoutineArgs.schema)\n      throw new Error('When creating a point the routine you must provide the schema');\n    const viewName = buildRoutineArgs.renameViewName\n      ? buildRoutineArgs.renameViewName\n      : buildRoutineArgs.routineName;\n\n    const routineExample = buildRoutineArgs.usingRoutineExample\n      ? buildRoutineArgs.usingRoutineExample\n      : buildRoutineArgs.routineArguments.map(\n          ({ name, dataType }) => `${name}:${JSON.parse(dataType).typeKind}`\n        );\n\n    const colSelection = `select ${buildRoutineArgs.schema.map(\n      (col) => `CAST(NULL AS ${columnType(col)}) AS ${col.name}`\n    )}`;\n\n    const viewQuery = `${colSelection}\n      from (${colSelection})\n      where ERROR(\"USE - SELECT * FROM \\`${buildRoutineArgs.routineDataset}.${buildRoutineArgs.routineName}\\`(${routineExample})\")\n      `;\n\n    buildView({\n      pulumiResourceName: `${viewName}-tvf-public-output`,\n      viewName: viewName,\n      viewDataset: publicDatasetId,\n      viewQuery: ({}) => viewQuery,\n      viewQueryParamsObject: {},\n      viewSchema: buildRoutineArgs.schema,\n      dependencies: [bqRoutine],\n    });\n  }\n\n  return bqRoutine;\n}",
        "parameters": [
          {
            "name": "buildRoutineArgs",
            "text": "buildRoutineArgs: buildRoutineArgs",
            "type": "buildRoutineArgs"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/dataland/bq-views.ts",
    "exports": [
      {
        "type": "function",
        "name": " buildView",
        "text": "\n\nexport function buildView(buildViewArgs: buildViewArgs): gcp.bigquery.Table {\n  setDefaultLabelsForAllResources();\n  // Set defaults for nested object arguments\n  buildViewArgs = { ...buildViewDefaults, ...buildViewArgs };\n\n  // extracting keys and values from viewQueryParamsObject\n  let ks = Object.keys(buildViewArgs.viewQueryParamsObject);\n  let vs = pulumi.all(ks.map((k) => buildViewArgs.viewQueryParamsObject[k])).apply((v) => v);\n\n  const query = vs.apply(\n    (t: any) =>\n      `${buildViewArgs.viewQuery(\n        t.reduce(\n          (\n            obj: Record<string, pulumi.Output<string> | string>,\n            value: pulumi.Output<string> | string,\n            index: number\n          ) => {\n            obj[ks[index]] = value;\n            return obj;\n          },\n          {} as Record<string, pulumi.Output<string> | string>\n        )\n      )}`\n  );\n\n  const pulumiResourceName = buildViewArgs.pulumiResourceName || buildViewArgs.viewName;\n  const bqView = new gcp.bigquery.Table(\n    pulumiResourceName,\n    {\n      datasetId: buildViewArgs.viewDataset,\n      tableId: buildViewArgs.viewName,\n      view: !buildViewArgs.materializedView\n        ? {\n            query: query,\n            useLegacySql: false,\n          }\n        : undefined,\n      materializedView: buildViewArgs.materializedView\n        ? {\n            query: query,\n            enableRefresh: buildViewArgs.materializedView.EnableRefresh,\n            refreshIntervalMs: buildViewArgs.materializedView.RefreshIntervalMs,\n          }\n        : undefined,\n      schema: buildViewArgs.viewSchema\n        ? JSON.stringify(asBqSchema(buildViewArgs.viewSchema, true))\n        : undefined,\n      description: buildViewArgs.viewDescription,\n      labels: { ...buildViewArgs.viewLabels },\n      deletionProtection: false,\n    },\n    {\n      replaceOnChanges: ['schema'],\n      deleteBeforeReplace: true,\n      dependsOn: buildViewArgs.dependencies,\n    }\n  );\n  return bqView;\n}",
        "parameters": [
          {
            "name": "buildViewArgs",
            "text": "buildViewArgs: buildViewArgs",
            "type": "buildViewArgs"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/dataland/cdc-pipeline-recent.ts",
    "exports": [
      {
        "type": "function",
        "name": " createRecentCdcPipeline",
        "text": "\n\nexport function createRecentCdcPipeline({\n  pipelineProperties, // Params with a pipeline-wide effect (name, labels)\n  schedulerConfig, // Scheduling configuration for the pipeline and its subruns\n  schema,\n  partitioning,\n  clusterings, // Output data model schema and datasets\n  inputDataModel, // Configuration for input datasets, used in pipelines with an upstream pipeline.\n  testConfig, // Output data model schema and datasets\n}: CdcRecentPipelineArgs) {\n  // Set defaults for nestesd object arguments\n  pipelineProperties = { ...pipelinePropertiesDefault, ...pipelineProperties };\n  schedulerConfig = { ...schedulerConfigArgsDefault, ...schedulerConfig };\n  inputDataModel = { ...inputDataModelDefault, ...inputDataModel };\n  testConfig = { ...testConfigDefault, ...testConfig };\n\n  const { serviceId: pipelineId, stack, projectId, location } = getConfigs();\n\n  let serviceAccountEmail;\n  if (stack === \"pre-prod\") {\n    serviceAccountEmail = `dl-${pipelineId}@${projectId}.iam.gserviceaccount.com`;\n  } else {\n    const { serviceAccount } = createServiceAccount({\n      name: `dl-${pipelineId}`,\n      roles: [`projects/${projectId}/roles/datalandService`],\n    });\n    serviceAccountEmail = serviceAccount.email;\n\n    if (stack === \"shofifi\") {\n      addRolesToServiceAccount(serviceAccount, Projects.DataLandOps, [\n        \"roles/dataform.editor\",\n        \"roles/bigquery.jobUser\",\n        \"roles/bigquery.dataOwner\",\n        \"roles/bigquery.resourceViewer\",\n      ]);\n      addRolesToServiceAccount(serviceAccount, \"triple-whale-ops\", [\n        \"roles/dataform.editor\",\n        \"roles/bigquery.jobUser\",\n        \"roles/bigquery.dataOwner\",\n        \"roles/bigquery.resourceViewer\",\n      ]);\n    }\n    if (stack === \"triple-whale-staging\") {\n      addRolesToServiceAccount(serviceAccount, \"shofifi\", [\n        \"roles/bigquery.dataViewer\",\n        \"roles/bigquery.connectionUser\",\n      ]);\n      addRolesToServiceAccount(serviceAccount, \"triple-whale-ops\", [\n        \"roles/bigquery.dataViewer\",\n      ]);\n    }\n  }\n\n  // Get labels from current stack and apply to all resources\n  setDefaultLabelsForAllResources();\n\n  // Override current stack with test config\n\n  const bqDifferentDataformResource =\n    pipelineProperties.runnerOnDifferentProject && stack === \"shofifi\"; // On development testing it manually using BQ UI\n\n  const dataformProject = bqDifferentDataformResource\n    ? pipelineProperties.runnerOnDifferentProject\n    : projectId;\n  const dataformStack = bqDifferentDataformResource\n    ? pipelineProperties.runnerOnDifferentProject\n    : stack;\n\n  const chronosStateStackRef = new pulumi.StackReference(\n    `triplewhale/chronos-state/${stack}`\n  );\n  const chronosStateServiceUrlOutput =\n    chronosStateStackRef.getOutput(\"serviceUrl\");\n\n  const tableArgs = buildTableArgs({\n    schema: schema,\n    clusterings: clusterings,\n    labels: pipelineProperties.pipelineLabels,\n    partitioning: partitioning,\n  });\n\n  new gcp.bigquery.Table(`${pipelineId}-output-recent`, {\n    ...tableArgs,\n    tableId: pipelineId,\n    datasetId: recentDatasetId,\n  });\n\n  // Set dataform branch. Use the one specified in test config. If none is specified:\n  // (1) This is a DLCP pipeline, use the appropriate branch name.\n  // (2) For legacy pipelines, 'develop' for staging and pre-prod, 'master' for prod.\n  var dataformBranch =\n    testConfig.forceDataformBranch ||\n    pipelineProperties.dlcpGitRef ||\n    (stack === \"shofifi\" ? \"master\" : \"develop\"); // Legacy!\n\n  // If the pipeline is running on a ideosyncratic stack (not staging, pre-prod or prod), ceate a new workspace\n  if (!isCanonicalStack()) {\n    const dataformWorkspaceId = getUniqueNameInProject(pipelineId) as string;\n    new pulumiGoogleNative.dataform.v1beta1.Workspace(\"workspace\", {\n      repositoryId: getDataformRepositoryNameForProject(dataformStack),\n      workspaceId: dataformWorkspaceId,\n    }); // TODO push branch. options: 1) trigger gcp to push branch. 2) user manually pushes branch. 3) create branch in github, then they will connect on their own\n    dataformBranch = dataformWorkspaceId;\n  }\n\n  // Create and configure workflow\n  const dirname = __dirname.replace(\"/pulumi/module/\", \"/pulumi/src/\");\n\n  const workflowDefinition = fs.readFileSync(\n    resolve(dirname + \"/cdcWorkflow.yaml\"),\n    \"utf8\"\n  );\n  const workflow = new gcp.workflows.Workflow(\"workflow\", {\n    name: getUniqueNameInProject(`dataland-pipeline-${pipelineId}`),\n    sourceContents: workflowDefinition,\n    serviceAccount: serviceAccountEmail,\n    labels: { ...pipelineProperties.pipelineLabels },\n  });\n  // pulumi does not currently expose a way to get the workflow execution URL. See ticket linked below.\n  // However, we can construct it ourselves based on the google docs, linked in that ticket\n  // https://github.com/pulumi/pulumi-gcp/issues/553\n  const workflowUri = pulumi.interpolate`https://workflowexecutions.googleapis.com/v1/projects/${projectId}/locations/${location}/workflows/${workflow.name}/executions`;\n\n  const workflowArgs = {\n    dataformRepositoryId: getDataformRepositoryIdForProject(\n      dataformStack,\n      dataformProject\n    ),\n    pipeline: pipelineProperties?.pipelineName || pipelineId,\n    serviceUrl: chronosStateServiceUrlOutput,\n    inputBQDataset: inputDataModel?.inputDatasetName || rawDatasetId,\n    inputBQTable: inputDataModel?.inputTableName || pipelineId,\n    isDerived: inputDataModel.isDerived,\n    dependencies: inputDataModel?.dependencies || {},\n    recentBQDataset: recentDatasetId,\n    publicBQDataset: latestDatasetId,\n    changesetDatasetId: changesetDatasetId,\n    outputBQTable: pipelineId,\n    dataformBranch: dataformBranch,\n    stack,\n    bqProjectResource: bqDifferentDataformResource\n      ? pipelineProperties?.runnerOnDifferentProject\n      : projectId,\n  };\n  for (const conf of [\n    { label: \"recent\", schedule: schedulerConfig.schedule },\n    ...schedulerConfig.subRuns,\n  ]) {\n    new gcp.cloudscheduler.Job(`job-${conf.label}`, {\n      name: getUniqueNameInProject(`dataland-${pipelineId}-${conf.label}`),\n      paused: schedulerConfig.paused,\n      httpTarget: {\n        uri: workflowUri,\n        httpMethod: \"POST\",\n        body: toBase64Output(\n          toJSONOutput({\n            argument: toJSONOutput({\n              ...workflowArgs,\n              labels: [conf.label],\n              subrun: conf.label,\n            }),\n            call_log_level: \"LOG_ERRORS_ONLY\",\n          })\n        ),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        oauthToken: {\n          serviceAccountEmail: serviceAccountEmail,\n        },\n      },\n      schedule: conf.schedule as pulumi.Input<string>,\n    });\n  }\n}",
        "parameters": [
          {
            "name": "{\n  pipelineProperties, // Params with a pipeline-wide effect (name, labels)\n  schedulerConfig, // Scheduling configuration for the pipeline and its subruns\n  schema,\n  partitioning,\n  clusterings, // Output data model schema and datasets\n  inputDataModel, // Configuration for input datasets, used in pipelines with an upstream pipeline.\n  testConfig, // Output data model schema and datasets\n}",
            "text": "{\n  pipelineProperties, // Params with a pipeline-wide effect (name, labels)\n  schedulerConfig, // Scheduling configuration for the pipeline and its subruns\n  schema,\n  partitioning,\n  clusterings, // Output data model schema and datasets\n  inputDataModel, // Configuration for input datasets, used in pipelines with an upstream pipeline.\n  testConfig, // Output data model schema and datasets\n}: CdcRecentPipelineArgs",
            "type": "CdcRecentPipelineArgs"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/dataland/cdc-pipeline.ts",
    "exports": [
      {
        "name": " SubRunConfig",
        "text": "\nexport class SubRunConfig {\n  constructor(schedule: string, label: string) {\n    this.schedule = schedule;\n    this.label = label;\n  }\n  schedule: string;\n  label: string;\n}",
        "type": "class"
      },
      {
        "name": " schedulerConfigArgs",
        "text": "\n\n// Parameters for the task scheduler\nexport interface schedulerConfigArgs {\n  schedule?: string;\n  paused?: boolean;\n  subRuns?: Array<SubRunConfig>;\n}",
        "type": "interface"
      },
      {
        "name": " schedulerConfigArgsDefault",
        "text": "\n\nexport const schedulerConfigArgsDefault: schedulerConfigArgs = {\n  schedule: '0 * * * *', // hourly\n  paused: false,\n  subRuns: [],\n};",
        "type": "schedulerConfigArgs"
      },
      {
        "name": " JobDetailsDep",
        "text": "\n\nexport interface JobDetailsDep {\n  proc_id_to?: string;\n  proc_id_from?: string;\n}",
        "type": "interface"
      },
      {
        "name": " inputDataModelArgs",
        "text": "\n\n// Parameters regarding input datasets, used in pipelines with an upstream pipeline.\nexport interface inputDataModelArgs {\n  inputTableName?: string;\n  inputDatasetName?: string;\n  dependencies?: Record<string, JobDetailsDep>;\n  isDerived?: boolean;\n}",
        "type": "interface"
      },
      {
        "name": " inputDataModelDefault",
        "text": "\n\nexport const inputDataModelDefault: inputDataModelArgs = {\n  inputTableName: '',\n  inputDatasetName: '',\n  dependencies: {},\n  isDerived: false,\n};",
        "type": "inputDataModelArgs"
      },
      {
        "name": " testConfigArgs",
        "text": "\n\n// Paramaters used for testing, including forcing parts of the pipeline to run on different stacks or branches.\nexport interface testConfigArgs {\n  forceDataformBranch?: string;\n}",
        "type": "interface"
      },
      {
        "name": " testConfigDefault",
        "text": "\n\nexport const testConfigDefault: testConfigArgs = {\n  forceDataformBranch: undefined,\n};",
        "type": "testConfigArgs"
      },
      {
        "name": " pipelinePropertiesArgs",
        "text": "\n\n// Misc params with a pipeline-wide effect\nexport interface pipelinePropertiesArgs {\n  pipelineName?: string; // Unique name for the pipeline. If one is not provided, defaults to the output data model name\n  pipelineLabels?: object;\n  runnerOnDifferentProject?: string;\n  dlcpGitRef?: string; // Git commit/branch/tag to use for DLCP pipelines\n}",
        "type": "interface"
      },
      {
        "name": " pipelinePropertiesDefault",
        "text": "\n\nexport const pipelinePropertiesDefault: pipelinePropertiesArgs = {\n  pipelineName: '',\n  pipelineLabels: {},\n  runnerOnDifferentProject: '',\n  dlcpGitRef: undefined, // For legacy pipelines!\n};",
        "type": "pipelinePropertiesArgs"
      },
      {
        "name": " rootTableConfig",
        "text": "\n\nexport interface rootTableConfig {\n  schema?: Array<Object>;\n  clusterings?: Array<string>;\n  partitioning?;\n  createRootTable?:boolean;\n}",
        "type": "interface"
      },
      {
        "name": " rootTableConfigBase",
        "text": "\n\nexport const rootTableConfigBase: rootTableConfig = {\n  schema: rootBaseSchema,\n  clusterings: rootBaseClusterings,\n  partitioning: rootTablePartitioning.field,\n  createRootTable: false\n}",
        "type": "rootTableConfig"
      },
      {
        "type": "function",
        "name": " createCdcPipeline",
        "text": "\n\nexport function createCdcPipeline({\n  pipelineProperties, // Params with a pipeline-wide effect (name, labels)\n  schedulerConfig, // Scheduling configuration for the pipeline and its subruns\n  outputDataModel, // Output data model schema and datasets\n  ingestSubscriptionConfig, // Configuration for subscriptions to ingest data into dataland-raw\n  inputDataModel, // Configuration for input datasets, used in pipelines with an upstream pipeline.\n  rootTableConfig, // Output root table\n  testConfig, // Output data model schema and datasets\n  currentConfig,\n}: CdcPipelineArgs) {\n  const returns: any = {};\n\n  // Set defaults for nestesd object arguments\n  pipelineProperties = { ...pipelinePropertiesDefault, ...pipelineProperties };\n  schedulerConfig = { ...schedulerConfigArgsDefault, ...schedulerConfig };\n  outputDataModel = { ...outputDataModelDefault, ...outputDataModel };\n  ingestSubscriptionConfig = { ...ingestSubscriptionConfigDefault, ...ingestSubscriptionConfig };\n  inputDataModel = { ...inputDataModelDefault, ...inputDataModel };\n  testConfig = { ...testConfigDefault, ...testConfig };\n\n  const { serviceId: pipelineId, stack, projectId, location } = getConfigs();\n\n  const { serviceAccount } = createServiceAccount({\n    name: `dl-${pipelineId}`,\n    roles: [`projects/${projectId}/roles/datalandService`],\n  });\n\n  if (stack === 'shofifi') {\n    addRolesToServiceAccount(serviceAccount, Projects.DataLandOps, [\n      'roles/dataform.editor',\n      'roles/bigquery.jobUser',\n      'roles/bigquery.dataOwner',\n      'roles/bigquery.resourceViewer',\n    ]);\n    addRolesToServiceAccount(serviceAccount, 'triple-whale-ops', [\n      'roles/dataform.editor',\n      'roles/bigquery.jobUser',\n      'roles/bigquery.dataOwner',\n      'roles/bigquery.resourceViewer',\n    ]);\n  } else {\n    addRolesToServiceAccount(serviceAccount, 'triple-whale-ops', ['roles/bigquery.dataViewer']);\n  }\n  if (stack === 'triple-whale-staging') {\n    addRolesToServiceAccount(serviceAccount, 'shofifi', [\n      'roles/bigquery.dataViewer',\n      'roles/bigquery.connectionUser',\n    ]);\n  }\n\n  // Get labels from current stack and apply to all resources\n  setDefaultLabelsForAllResources();\n\n  // Override current stack with test config\n\n  const bqDifferentDataformResource =\n    pipelineProperties.runnerOnDifferentProject && stack === 'shofifi'; // On development testing it manually using BQ UI\n\n  const dataformProject = bqDifferentDataformResource\n    ? pipelineProperties.runnerOnDifferentProject\n    : projectId;\n  const dataformStack = bqDifferentDataformResource\n    ? pipelineProperties.runnerOnDifferentProject\n    : stack;\n\n  const chronosStateStackRef = new pulumi.StackReference(`triplewhale/chronos-state/${stack}`);\n  const chronosStateServiceUrlOutput = chronosStateStackRef.getOutput('serviceUrl');\n  if (!outputDataModel.skip) {\n    const tableArgs = buildTableArgs({\n      schema: outputDataModel.schema,\n      clusterings: outputDataModel.clusterings,\n      labels: pipelineProperties.pipelineLabels,\n      partitioning: outputDataModel.partitioning,\n      rangePartitioning: outputDataModel.rangePartitioning,\n    });\n\n    for (var table of [\n      outputDataModel.outputTableName || pipelineId,\n      ...outputDataModel.additionalOutputTables,\n    ]) {\n      const t = buildTables({\n        latestConfig:{\n          createTableOutputLatest: outputDataModel.createTableOutputLatest\n        },\n        viewPublicConfig: {\n          createViewOutputPublic: outputDataModel.createViewOutputPublic,\n          publicViewAdditionalSQL: outputDataModel.outputViewAdditionalSQL,\n        },\n        changesetConfig:{\n          createTableOutputChangeset: outputDataModel.createTableOutputChangeset,\n          changesetPartitionSize: outputDataModel.changesetPartitionSize,\n          changesetClusterings: outputDataModel.changesetClusterings,\n          changesetSchema: outputDataModel.changesetSchema,\n          changesetTimePartitioning: outputDataModel.changesetTimePartitioning,\n        },\n        rootConfig:{\n          createRootTable: outputDataModel.createRootTable,\n          rootTableConfig\n        },\n        currentConfig:{\n          createTableOutputDirty: currentConfig?.createTableOutputDirty\n        },\n        table,\n        tableArgs,\n        schema:outputDataModel.schema,\n        labels: pipelineProperties.pipelineLabels\n        }\n      );  \n      returns.latestTables = returns.latestTables || [];\n      returns.latestTables[table] = t;\n    }\n  }\n\n  // Set dataform branch. Use the one specified in test config. If none is specified:\n  // (1) This is a DLCP pipeline, use the appropriate branch name.\n  // (2) For legacy pipelines, 'develop' for staging and pre-prod, 'master' for prod.\n  var dataformBranch =\n    testConfig.forceDataformBranch ||\n    pipelineProperties.dlcpGitRef ||\n    (stack === 'shofifi' ? 'master' : 'develop'); // Legacy!\n\n  // If the pipeline is running on a ideosyncratic stack (not staging, pre-prod or prod), ceate a new workspace\n  if (!isCanonicalStack()) {\n    const dataformWorkspaceId = getUniqueNameInProject(pipelineId) as string;\n    new pulumiGoogleNative.dataform.v1beta1.Workspace('workspace', {\n      repositoryId: getDataformRepositoryNameForProject(dataformStack),\n      workspaceId: dataformWorkspaceId,\n    }); // TODO push branch. options: 1) trigger gcp to push branch. 2) user manually pushes branch. 3) create branch in github, then they will connect on their own\n    dataformBranch = dataformWorkspaceId;\n  }\n\n  // Create and configure workflow\n  const dirname = __dirname.replace('/pulumi/module/', '/pulumi/src/');\n\n  const workflowDefinition = fs.readFileSync(resolve(dirname + '/cdcWorkflow.yaml'), 'utf8');\n  const workflow = new gcp.workflows.Workflow('workflow', {\n    name: getUniqueNameInProject(`dataland-pipeline-${pipelineId}`),\n    sourceContents: workflowDefinition,\n    serviceAccount: serviceAccount.email,\n    labels: { ...pipelineProperties.pipelineLabels },\n  });\n\n  // pulumi does not currently expose a way to get the workflow execution URL. See ticket linked below.\n  // However, we can construct it ourselves based on the google docs, linked in that ticket\n  // https://github.com/pulumi/pulumi-gcp/issues/553\n  const workflowUri = pulumi.interpolate`https://workflowexecutions.googleapis.com/v1/projects/${projectId}/locations/${location}/workflows/${workflow.name}/executions`;\n\n  const workflowArgs = {\n    dataformRepositoryId: getDataformRepositoryIdForProject(dataformStack, dataformProject),\n    pipeline: pipelineProperties?.pipelineName || pipelineId,\n    serviceUrl: chronosStateServiceUrlOutput,\n    inputBQDataset: inputDataModel?.inputDatasetName || rawDatasetId,\n    inputBQTable: inputDataModel?.inputTableName || pipelineId,\n    isDerived: inputDataModel.isDerived,\n    dependencies: inputDataModel?.dependencies || {},\n    recentBQDataset: recentDatasetId,\n    publicBQDataset: latestDatasetId,\n    changesetDatasetId,\n    outputBQTable: outputDataModel.outputTableName || pipelineId,\n    dataformBranch: dataformBranch,\n    stack,\n    bqProjectResource: bqDifferentDataformResource\n      ? pipelineProperties?.runnerOnDifferentProject\n      : projectId,\n  };\n\n  const currentWorkflowArgs = {\n    dataformRepositoryId: getDataformRepositoryIdForProject(dataformStack, dataformProject),\n    pipeline: `compaction`,\n    serviceUrl: chronosStateServiceUrlOutput,\n    inputBQDataset: inputDataModel?.inputDatasetName || rawDatasetId,\n    inputBQTable: inputDataModel?.inputTableName || pipelineId,\n    isDerived: false,\n    dependencies: {},\n    recentBQDataset: recentDatasetId,\n    publicBQDataset: latestDatasetId,\n    changesetDatasetId,\n    outputBQTable: outputDataModel.outputTableName || pipelineId,\n    dataformBranch: `dlcp-compaction${getDlcpTagByStack(stack)}`,\n    stack,\n    bqProjectResource: bqDifferentDataformResource\n      ? pipelineProperties?.runnerOnDifferentProject\n      : projectId,\n    additionalValues: {\n      tableToCompaction: pipelineId\n    }\n  };\n\n  for (const conf of [\n    { label: 'primary', schedule: schedulerConfig.schedule },\n    ...schedulerConfig.subRuns,\n  ]) {\n    new gcp.cloudscheduler.Job(`job-${conf.label}`, {\n      name: getUniqueNameInProject(`dataland-${pipelineId}-${conf.label}`),\n      paused: schedulerConfig.paused || PAUSE_ALL_PIPELINES,\n      httpTarget: {\n        uri: workflowUri,\n        httpMethod: 'POST',\n        body: toBase64Output(\n          toJSONOutput({\n            argument: toJSONOutput({   ...(conf.label == 'compaction' ? currentWorkflowArgs : workflowArgs), \n            labels: [conf.label == 'compaction' ?pipelineId :conf.label], subrun: conf.label }),\n            call_log_level: 'LOG_ERRORS_ONLY',\n          })\n        ),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        oauthToken: {\n          serviceAccountEmail: serviceAccount.email,\n        },\n      },\n      schedule: conf.schedule as pulumi.Input<string>,\n    });\n  }\n\n  // Create subscriptions for the bucket and/or topic, if applicable\n  for (const config of ingestSubscriptionConfig.bucketSubscriptionAndNotificationConfig) {\n    createTopicSubscriptionNotification(\n      config.bucketName,\n      config.objectNamePrefix,\n      ingestSubscriptionConfig.ingestEndPoint,\n      chronosIngestService,\n      deadLetterTopicId\n    );\n  }\n\n  for (const config of ingestSubscriptionConfig.subscriptionConfig) {\n    createSubscriptionToExistingTopic(\n      config.topicName,\n      projectId,\n      config.labels,\n      ingestSubscriptionConfig.ingestEndPoint,\n      chronosIngestService,\n      deadLetterTopicId\n    );\n  }\n  return returns;\n}",
        "parameters": [
          {
            "name": "{\n  pipelineProperties, // Params with a pipeline-wide effect (name, labels)\n  schedulerConfig, // Scheduling configuration for the pipeline and its subruns\n  outputDataModel, // Output data model schema and datasets\n  ingestSubscriptionConfig, // Configuration for subscriptions to ingest data into dataland-raw\n  inputDataModel, // Configuration for input datasets, used in pipelines with an upstream pipeline.\n  rootTableConfig, // Output root table\n  testConfig, // Output data model schema and datasets\n  currentConfig,\n}",
            "text": "{\n  pipelineProperties, // Params with a pipeline-wide effect (name, labels)\n  schedulerConfig, // Scheduling configuration for the pipeline and its subruns\n  outputDataModel, // Output data model schema and datasets\n  ingestSubscriptionConfig, // Configuration for subscriptions to ingest data into dataland-raw\n  inputDataModel, // Configuration for input datasets, used in pipelines with an upstream pipeline.\n  rootTableConfig, // Output root table\n  testConfig, // Output data model schema and datasets\n  currentConfig,\n}: CdcPipelineArgs",
            "type": "CdcPipelineArgs"
          }
        ]
      },
      {
        "name": " changesetConfigDefault",
        "text": "\n\nexport const changesetConfigDefault: changesetConfig ={\n  createTableOutputChangeset: true,\n  changesetPartitionSize: 50,\n  changesetClusterings: null,\n  changesetSchema: null,\n  changesetTimePartitioning: null\n}",
        "type": "changesetConfig"
      },
      {
        "name": " latestConfigDefault",
        "text": "\n\nexport const latestConfigDefault:latestConfig = {\n  createTableOutputLatest: true\n}",
        "type": "latestConfig"
      },
      {
        "name": " viewPublicConfigDefault",
        "text": "\n\nexport const viewPublicConfigDefault: viewPublicConfig = {\n  createViewOutputPublic: true,\n  publicViewAdditionalSQL: ''\n}",
        "type": "viewPublicConfig"
      },
      {
        "type": "function",
        "name": " buildTables",
        "text": "\n\nexport function buildTables(\n  {\n    latestConfig,\n    viewPublicConfig,\n    changesetConfig,\n    rootConfig,\n    currentConfig,\n    table,\n    tableArgs,\n    schema,\n    labels,\n    dependencies = []\n  }: BuildTablesArgs) {\n  latestConfig = {...latestConfigDefault, ...latestConfig};\n  viewPublicConfig = {...viewPublicConfigDefault, ...viewPublicConfig};\n  changesetConfig = {...changesetConfigDefault, ...changesetConfig};\n  rootConfig = {...rootTableConfigBase, ...rootConfig};\n\n  const { overwritenTableArgs, requirePartitionFilter } = overridePartitioning(tableArgs);\n  tableArgs = overwritenTableArgs;\n\n  let latestTable: gcp.bigquery.Table;\n  if (latestConfig.createTableOutputLatest) {\n    latestTable = new gcp.bigquery.Table(\n      `${table}-output-latest`,\n      {\n        datasetId: latestDatasetId,\n        tableId: table,\n        ...tableArgs,\n        requirePartitionFilter,\n      },\n      {\n        deleteBeforeReplace: true,\n      }\n    );\n    if (viewPublicConfig.createViewOutputPublic) {\n      buildView({\n        pulumiResourceName: `${table}`, // TODO - change to ${table}-output-public. Need to make rename to all pipelines\n        viewName: `${table}`,\n        viewDataset: publicDatasetId,\n        viewQuery: ({ projectId, datasetId, tableId }) =>\n          `select * from \\`${datasetId}.${tableId}\\` ${viewPublicConfig.publicViewAdditionalSQL}`,\n        viewQueryParamsObject: { datasetId: latestDatasetId, tableId: table },\n        viewSchema: schema,\n        dependencies: [latestTable, ...dependencies],\n      });\n    }\n  }\n\n  if (changesetConfig.createTableOutputChangeset) {\n    function calculateClustering() {\n      const clustering = ['proc_id'];\n      const partitioningField =\n        (tableArgs['timePartitioning'] || tableArgs['rangePartitioning'])?.field ?? null;\n      if (partitioningField) clustering.push(partitioningField);\n      if (tableArgs.clusterings)\n        clustering.push(...tableArgs.clusterings.filter((col) => !clustering.includes(col)));\n      return [...clustering].splice(0, 4);\n    }\n    const clusteringChangeset = changesetConfig.changesetClusterings || calculateClustering();\n    \n    let configuration = {\n      datasetId: changesetDatasetId,\n      tableId: table,\n      schema: JSON.stringify(asBqSchema(changesetConfig.changesetSchema || schema)),\n      clusterings: clusteringChangeset,\n      labels: { ...labels },\n    };\n    if(changesetConfig.changesetTimePartitioning) {configuration['timePartitioning'] = changesetConfig.changesetTimePartitioning;}\n    else{\n    const start = 10000;\n    const interval = Math.max(changesetConfig.changesetPartitionSize, 100);\n    const maxPartition = start - 1 + interval * 4000;\n    if (interval < 2000) {\n      configuration['rangePartitioning'] = {\n        field: 'proc_id',\n        range: {\n          end: maxPartition,\n          interval,\n          start,\n        },\n      };\n    }\n  }\n    new gcp.bigquery.Table(`${table}-output-change-track`, configuration, {\n      deleteBeforeReplace: true,\n    });\n  }\n  if (rootConfig.createRootTable){\n\n    const rootSchema = [...rootTableConfigBase.schema, ...(rootConfig.rootTableConfig?.schema || schema)];\n    const colsName = rootSchema.map(col => col.name)\n\n    const baseClusterings = rootTableConfigBase.clusterings.filter(field => colsName.includes(field))\n\n    const additionalClusterings = rootConfig.rootTableConfig?.clusterings? rootConfig.rootTableConfig.clusterings : tableArgs.clusterings;\n\n    const uniqueClustering = additionalClusterings.filter((value) => {\n      return !baseClusterings.includes(value);\n  });\n\n  const rootClusterings = [...(baseClusterings || []), ...(uniqueClustering || [])].slice(0, 4);\n\n    new gcp.bigquery.Table(`${table}-root`, {\n      datasetId: rootDatasetId,\n      tableId: table,\n      schema: JSON.stringify(rootSchema),\n      rangePartitioning: {\n        field: rootTableConfigBase.partitioning,\n        range: {\n          start: 1,\n          end: 1500,\n          interval: 1,\n        },\n      },\n      requirePartitionFilter: true,\n      clusterings: rootClusterings,\n    });\n  }\n\n  if (currentConfig?.createTableOutputDirty){\n    const filteredSchema = schema.filter(field => tableArgs.clusterings.includes(field.name));\n    const dirtySchema = [ ...filteredSchema, ...baseDirtySchema];\n    tableArgs.schema = JSON.stringify(dirtySchema);\n    new gcp.bigquery.Table(`dirty-${table}`, \n    {\n      datasetId: currentDatasetId,\n      tableId: `dirty-${table}`,\n      tableConstraints:{\n        primaryKey: {\n          columns: [...tableArgs.clusterings],\n      },\n      },\n      ...tableArgs,\n    },\n    {\n      deleteBeforeReplace: true,\n    }\n  );\n}\nreturn latestTable;\n}",
        "parameters": [
          {
            "name": "{\n    latestConfig,\n    viewPublicConfig,\n    changesetConfig,\n    rootConfig,\n    currentConfig,\n    table,\n    tableArgs,\n    schema,\n    labels,\n    dependencies = []\n  }",
            "text": "{\n    latestConfig,\n    viewPublicConfig,\n    changesetConfig,\n    rootConfig,\n    currentConfig,\n    table,\n    tableArgs,\n    schema,\n    labels,\n    dependencies = []\n  }: BuildTablesArgs",
            "type": "BuildTablesArgs"
          }
        ]
      },
      {
        "type": "function",
        "name": " sleep",
        "text": "\n\nexport function sleep(ms: number) {\n  return new Promise<void>((resolve) => setTimeout(resolve, ms));\n}",
        "parameters": [
          {
            "name": "ms",
            "text": "ms: number",
            "type": "number"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/dataland/cdcWorkflow.yaml",
    "exports": []
  },
  {
    "file": "@tw/pulumi/dataland/dead-letter.ts",
    "exports": [
      {
        "type": "function",
        "name": " mkDeadLetter",
        "text": "\n\nexport function mkDeadLetter(datasetId: pulumi.Input<string>) {\n  const deadLetterTopic = new gcp.pubsub.Topic('dead-letter-topic', {\n    name: deadLetterTopicName,\n  });\n  const graveTopic = new gcp.pubsub.Topic('grave-topic', {\n    name: getUniqueNameInProject('dataland-grave-topic'),\n  });\n\n  const table = new gcp.bigquery.Table('dead-letter-table', {\n    datasetId: datasetId,\n    tableId: isCanonicalStack() ? 'dead-letter' : getUniqueNameInProject('dead-letter'),\n    schema: JSON.stringify(pbPushToBQ),\n    timePartitioning: {\n      type: 'DAY',\n      field: 'ingest_time',\n    },\n    requirePartitionFilter: true,\n    clusterings: ['ingest_time'],\n  });\n\n  new gcp.pubsub.Subscription('dead-letter-subscription', {\n    topic: deadLetterTopic.name,\n    bigqueryConfig: {\n      table: pulumi.interpolate`${new pulumi.Config('gcp').require('project')}:${datasetId}.${\n        table.tableId\n      }`,\n      dropUnknownFields: true,\n      writeMetadata: true,\n    },\n    deadLetterPolicy: {\n      deadLetterTopic: graveTopic.id,\n      maxDeliveryAttempts: 5,\n    },\n  });\n}",
        "parameters": [
          {
            "name": "datasetId",
            "text": "datasetId: pulumi.Input<string>",
            "type": "pulumi.Input<string>"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/dataland/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/dataland/names.ts",
    "exports": [
      {
        "name": " publicDatasetId",
        "text": "\n\nexport const publicDatasetId = getUniqueDatasetName('dataland_public');",
        "type": "variable"
      },
      {
        "name": " rawDatasetId",
        "text": "\nexport const rawDatasetId = getUniqueDatasetName('dataland_raw');",
        "type": "variable"
      },
      {
        "name": " rootDatasetId",
        "text": "\nexport const rootDatasetId = getUniqueDatasetName('dataland_root');",
        "type": "variable"
      },
      {
        "name": " latestDatasetId",
        "text": "\nexport const latestDatasetId = getUniqueDatasetName('dataland_latest');",
        "type": "variable"
      },
      {
        "name": " compactedDatasetId",
        "text": "\nexport const compactedDatasetId = getUniqueDatasetName('dataland_compacted');",
        "type": "variable"
      },
      {
        "name": " functionsDatasetId",
        "text": "\nexport const functionsDatasetId = getUniqueDatasetName('dataland_functions');",
        "type": "variable"
      },
      {
        "name": " changesetDatasetId",
        "text": "\nexport const changesetDatasetId = getUniqueDatasetName('dataland_changeset');",
        "type": "variable"
      },
      {
        "name": " recentDatasetId",
        "text": "\nexport const recentDatasetId = getUniqueDatasetName('dataland_recent');",
        "type": "variable"
      },
      {
        "name": " errorsDatasetId",
        "text": "\nexport const errorsDatasetId = getUniqueDatasetName('dataland_errors');",
        "type": "variable"
      },
      {
        "name": " dataQualityDatasetId",
        "text": "\nexport const dataQualityDatasetId = getUniqueDatasetName('dataland_data_quality');",
        "type": "variable"
      },
      {
        "name": " scdpHelpersDatasetId",
        "text": "\nexport const scdpHelpersDatasetId = getUniqueDatasetName('dataland_scdp_helpers');",
        "type": "variable"
      },
      {
        "name": " archiveDatasetId",
        "text": "\nexport const archiveDatasetId = getUniqueDatasetName('dataland_archive');",
        "type": "variable"
      },
      {
        "name": " currentDatasetId",
        "text": "\nexport const currentDatasetId = getUniqueDatasetName('dataland_current');",
        "type": "variable"
      },
      {
        "type": "function",
        "name": " getDataformRepositoryNameForProject",
        "text": "\n// for dataform repositories, we do not always use the same stack and project\n// so we need to pass those in as params\nexport function getDataformRepositoryNameForProject(projectId: string) {\n  return `dataland${\n    ['shofifi', 'triple-whale-staging'].includes(projectId) ? '' : `-${projectId}`\n  }`;\n}",
        "parameters": [
          {
            "name": "projectId",
            "text": "projectId: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " getDataformRepositoryIdForProject",
        "text": "\nexport function getDataformRepositoryIdForProject(stack: string, projectId: string) {\n  return getDataformRepoId(projectId, getDataformRepositoryNameForProject(stack));\n}",
        "parameters": [
          {
            "name": "stack",
            "text": "stack: string",
            "type": "string"
          },
          {
            "name": "projectId",
            "text": "projectId: string",
            "type": "string"
          }
        ]
      },
      {
        "name": " deadLetterTopicName",
        "text": "\n\nexport const deadLetterTopicName = getUniqueNameInProject('dataland-dead-letter-topic') as string;",
        "type": "variable"
      },
      {
        "name": " deadLetterTopicId",
        "text": "\nexport const deadLetterTopicId = getPubsubTopicId(deadLetterTopicName);",
        "type": "variable"
      },
      {
        "name": " chronosIngestServiceId",
        "text": "\n\nexport const chronosIngestServiceId = getCloudRunServiceId(\n  getUniqueNameInProject('chronos-ingest') as string\n);",
        "type": "variable"
      },
      {
        "name": " chronosIngestService",
        "text": "\n\nexport const chronosIngestService: ServiceEntryDeployment = {\n  name: 'chronos-ingest',\n  endpoints: {\n    authenticated: {\n      audience: 'chronos-ingest',\n      type: 'authenticated',\n      url: createAuthProxyUrl('chronos-ingest') as any,\n    },\n  },\n};",
        "type": "ServiceEntryDeployment"
      },
      {
        "name": " workflowServiceAccountId",
        "text": "\n\nexport const workflowServiceAccountId = 'dataland-workflow';",
        "type": "variable"
      },
      {
        "name": " workflowServiceAccountEmail",
        "text": "\nexport const workflowServiceAccountEmail = `${getUniqueNameInProject(\n  workflowServiceAccountId,\n  '-',\n  true\n)}@${projectId}.iam.gserviceaccount.com`;",
        "type": "variable"
      },
      {
        "name": " schedulerServiceAccountId",
        "text": "\n\nexport const schedulerServiceAccountId = 'dataland-scheduler';",
        "type": "variable"
      },
      {
        "name": " schedulerServiceAccountEmail",
        "text": "\nexport const schedulerServiceAccountEmail = `${getUniqueNameInProject(\n  schedulerServiceAccountId\n)}@${projectId}.iam.gserviceaccount.com`;",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/pulumi/dataland/serviceAccount.ts",
    "exports": [
      {
        "type": "function",
        "name": " createChronosServiceAccount",
        "text": "\n\nexport function createChronosServiceAccount() {\n  const { projectId } = getConfigs();\n  const { serviceAccount } = createServiceAccount({\n    addDefault: false,\n    roles: [`projects/${projectId}/roles/chronosServiceAccount`],\n  });\n\n  return { serviceAccount };\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/pulumi/dataland/subscription-notification.ts",
    "exports": [
      {
        "name": " BucketSubscriptionAndNotificationConfig",
        "text": "\n\nexport class BucketSubscriptionAndNotificationConfig {\n  constructor(bucketName: string, objectNamePrefix: string) {\n    this.bucketName = bucketName;\n    this.objectNamePrefix = objectNamePrefix;\n  }\n  bucketName: string;\n  objectNamePrefix: string;\n}",
        "type": "class"
      },
      {
        "name": " SubscriptionExistingTopicConfig",
        "text": "\n\nexport class SubscriptionExistingTopicConfig {\n  constructor(topicName: string, labels: { providerId: string; msgType: string }) {\n    this.topicName = topicName;\n    this.labels = labels;\n  }\n  topicName: string;\n  labels: { providerId: string; msgType: string };\n}",
        "type": "class"
      },
      {
        "type": "function",
        "name": " createTopicSubscriptionNotification",
        "text": "\n\nexport function createTopicSubscriptionNotification(\n  bucketName: string,\n  objectNamePrefix: string,\n  endpoint: string,\n  service: serviceTarget,\n  deadLetterTopicId: pulumi.Input<string>\n) {\n  const re = /\\//g;\n  const name = getUniqueNameInProject(\n    `dataland-${bucketName}-${objectNamePrefix.replace(re, '__')}-object-on-finalize`\n  ) as string;\n  const topic = new gcp.pubsub.Topic(name);\n\n  createStorageNotification(bucketName, topic, objectNamePrefix);\n\n  // This auto labeling is guesswork and mostly it is wrong. TODO: accept explicit labels from args\n  //  const [providerId, msgType] = objectNamePrefix.split('/');\n  //  const labels = {\n  //    'provider-id': providerId,\n  //    'msg-type': msgType,\n  //  };\n\n  let pubsubConfig = {\n    topic: topic.id,\n    pushConfig: createPushConfig(endpoint, service),\n    deadLetterPolicy: {\n      deadLetterTopic: deadLetterTopicId,\n      maxDeliveryAttempts: 10,\n    },\n    retryPolicy: {\n      minimumBackoff: '5s',\n      maximumBackoff: '90s',\n    },\n    ackDeadlineSeconds: 90,\n    //    labels,\n  };\n  new gcp.pubsub.Subscription(name, pubsubConfig);\n}",
        "parameters": [
          {
            "name": "bucketName",
            "text": "bucketName: string",
            "type": "string"
          },
          {
            "name": "objectNamePrefix",
            "text": "objectNamePrefix: string",
            "type": "string"
          },
          {
            "name": "endpoint",
            "text": "endpoint: string",
            "type": "string"
          },
          {
            "name": "service",
            "text": "service: serviceTarget",
            "type": "serviceTarget"
          },
          {
            "name": "deadLetterTopicId",
            "text": "deadLetterTopicId: pulumi.Input<string>",
            "type": "pulumi.Input<string>"
          }
        ]
      },
      {
        "type": "function",
        "name": " createSubscriptionForIngest",
        "text": "\n\nexport function createSubscriptionForIngest(\n  topicName: string,\n  labels: { providerId: string; msgType: string },\n  endpoint: string,\n  filter: string = null\n) {\n  const { stack, projectId } = getConfigs();\n\n  createSubscriptionToExistingTopic(\n    topicName,\n    projectId,\n    labels,\n    endpoint,\n    chronosIngestService,\n    deadLetterTopicId,\n    filter\n  );\n}",
        "parameters": [
          {
            "name": "topicName",
            "text": "topicName: string",
            "type": "string"
          },
          {
            "name": "labels",
            "text": "labels: { providerId: string; msgType: string }",
            "type": "{ providerId: string; msgType: string }"
          },
          {
            "name": "endpoint",
            "text": "endpoint: string",
            "type": "string"
          },
          {
            "name": "filter",
            "text": "filter: string = null",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " createSubscriptionToExistingTopic",
        "text": "\n\nexport function createSubscriptionToExistingTopic(\n  topicName: string,\n  projectId: string,\n  labels: { providerId: string; msgType: string },\n  endpoint: string,\n  service: serviceTarget,\n  deadLetterTopicId: pulumi.Input<string>,\n  filter: string = null\n) {\n  const topic = gcp.pubsub.Topic.get(topicName, `projects/${projectId}/topics/${topicName}`);\n\n  let pubsubConfig = {\n    topic: topic.id,\n    pushConfig: createPushConfig(endpoint, service),\n    deadLetterPolicy: {\n      deadLetterTopic: deadLetterTopicId,\n      maxDeliveryAttempts: 10,\n    },\n    ackDeadlineSeconds: 30,\n    retryPolicy: {\n      minimumBackoff: '5s',\n      maximumBackoff: '90s',\n    },\n    labels: {\n      'provider-id': labels.providerId,\n      'msg-type': labels.msgType,\n    },\n    filter: filter,\n  };\n  new gcp.pubsub.Subscription(`dataland-${topicName}`, pubsubConfig);\n}",
        "parameters": [
          {
            "name": "topicName",
            "text": "topicName: string",
            "type": "string"
          },
          {
            "name": "projectId",
            "text": "projectId: string",
            "type": "string"
          },
          {
            "name": "labels",
            "text": "labels: { providerId: string; msgType: string }",
            "type": "{ providerId: string; msgType: string }"
          },
          {
            "name": "endpoint",
            "text": "endpoint: string",
            "type": "string"
          },
          {
            "name": "service",
            "text": "service: serviceTarget",
            "type": "serviceTarget"
          },
          {
            "name": "deadLetterTopicId",
            "text": "deadLetterTopicId: pulumi.Input<string>",
            "type": "pulumi.Input<string>"
          },
          {
            "name": "filter",
            "text": "filter: string = null",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/dataland/temporal/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/dataland/temporal/schedule.ts",
    "exports": [
      {
        "type": "function",
        "name": " createChronosSchedule",
        "text": "\n\nexport function createChronosSchedule(\n  args: {\n    scheduleId?: string;\n    spec?: ScheduleSpec;\n    labels?: string[];\n    inputBQTable?: string;\n    bqProjectResource?: string;\n  } = {}\n) {\n  const { stack, serviceId, projectId } = getConfigs();\n  const {\n    scheduleId = 'schedule',\n    spec = {\n      intervals: [{ every: '1 hour' }],\n    },\n    labels = ['primary'],\n    inputBQTable = serviceId,\n    bqProjectResource = projectId,\n  } = args;\n\n  createTemporalSchedule('schedule', {\n    projectId,\n    serviceId,\n    namespace: `${serviceId}-chronos`,\n    scheduleId,\n    spec,\n    action: {\n      type: 'startWorkflow',\n      workflowType: 'cdcWorkflow',\n      taskQueue: 'queue',\n      args: [\n        {\n          stack,\n          pipeline: serviceId,\n          isDerived: false,\n          dependencies: [],\n          labels,\n          inputBQDataset: rawDatasetId,\n          inputBQTable,\n          rootBQDataset: rootDatasetId,\n          publicBQDataset: latestDatasetId,\n          changesetDatasetId: changesetDatasetId,\n          outputBQTable: serviceId,\n          dataformBranch: stack === 'shofifi' ? 'master' : 'develop',\n          dataformRepository: getDataformRepositoryIdForProject(\n            bqProjectResource,\n            bqProjectResource\n          ),\n          bqProjectResource,\n        },\n      ],\n    },\n  });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n    scheduleId?: string;\n    spec?: ScheduleSpec;\n    labels?: string[];\n    inputBQTable?: string;\n    bqProjectResource?: string;\n  } = {}",
            "type": "{\n    scheduleId?: string;\n    spec?: ScheduleSpec;\n    labels?: string[];\n    inputBQTable?: string;\n    bqProjectResource?: string;\n  }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/dataland/temporal/worker.ts",
    "exports": [
      {
        "type": "function",
        "name": " deployChronosTemporalWorker",
        "text": "\n\nexport function deployChronosTemporalWorker(args?: {\n  k8sResources?: K8sResources;\n  workerImageTag?: string;\n}) {\n  const { k8sResources, workerImageTag } = args;\n  const { projectId, serviceId } = getConfigs();\n\n  const { serviceAccount } = createChronosServiceAccount();\n\n  createTemporalNamespace('namespace', { namespace: `${serviceId}-chronos`, projectId, serviceId });\n\n  deployTemporalWorker({\n    serviceAccount,\n    createK8sDeploymentArgs: {\n      podArgs: {\n        image: getServiceImage({ serviceId: 'chronos-temporal', imageTag: workerImageTag }),\n        ...k8sResources,\n      },\n      secretVersion: {\n        name: pulumi.interpolate`projects/${projectId}/secrets/${getUniqueNameInProject(\n          'chronos-temporal'\n        )}-env/versions/latest`,\n      } as gcp.secretmanager.SecretVersion,\n    },\n  });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args?: {\n  k8sResources?: K8sResources;\n  workerImageTag?: string;\n}",
            "type": "{\n  k8sResources?: K8sResources;\n  workerImageTag?: string;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/dataland/utils.ts",
    "exports": [
      {
        "name": " Projects",
        "text": "\nexport const Projects = {\n  DataLand: 'triplewhale-dataland',\n  DataLandOps: 'triplewhale-dataland-ops',\n};",
        "type": "variable"
      },
      {
        "name": " getDlcpTagByStack",
        "text": "\n\nexport const getDlcpTagByStack = (stackName: string): string => {\n  switch (stackName) {\n    case 'shofifi':\n      return '.prod';\n    case 'pre-prod':\n      return '.pre-prod';\n    case 'triple-whale-staging':\n      return '.staging';\n    default:\n      return '';\n  }\n};",
        "type": "variable"
      },
      {
        "name": " SchedulePolicies",
        "text": "\n\nexport const SchedulePolicies = {\n  Sparse: '55       * * * *',\n  Large: '0,30     * * * *',\n  Medium: '5,25,45  * * * *',\n  Regular: '*/15     * * * *',\n  Dense: '*/10      * * * *',\n  Dense2: '0,8,15,23,30,38,45,53 * * * *',\n  Rapid: '*/5       * * * *',\n  Intense: '*/3     * * * *',\n};",
        "type": "variable"
      },
      {
        "type": "function",
        "name": " isCanonicalStack",
        "text": "\n\nexport function isCanonicalStack(): boolean {\n  return ['shofifi', 'triple-whale-staging', 'pre-prod'].includes(pulumi.getStack());\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " setDefaultLabelsForAllResources",
        "text": "\n\nexport function setDefaultLabelsForAllResources() {\n  pulumi.runtime.registerStackTransformation((args: any) => {\n    if ('labels' in args.props) {\n      args.props['labels'] = {\n        ...args.props['labels'],\n        ...getDefaultLabels(),\n      };\n    }\n\n    return { props: args.props, opts: args.opts };\n  });\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " createUniqueServiceAccountName",
        "text": "\n\n// this is only necessary when the name of the service account needs to hash the serviceId to be unique\n// for example, the service account for the pipeline workflows. they need the workflow name to be unique from one another\n// but service account names can only be 30 chars. so we hash and slice\nexport function createUniqueServiceAccountName(type: string, serviceId: string) {\n  return `${getUniqueNameInProject(`dataland-${type}`)}-${crypto\n    .createHash('sha1')\n    .update(serviceId)\n    .digest('hex')}`.slice(0, MAX_SERVICE_ACCOUNT_LENGTH);\n}",
        "parameters": [
          {
            "name": "type",
            "text": "type: string",
            "type": "string"
          },
          {
            "name": "serviceId",
            "text": "serviceId: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " asBqSchema",
        "text": "\n\nexport function asBqSchema(schema: Array<Object>, configureAsView?: boolean) {\n  const keysToInclude = ['name', 'type', 'mode', 'description', 'fields'];\n  const filteredSchema = schema.map((dict) =>\n    Object.fromEntries(Object.entries(dict).filter(([entry]) => keysToInclude.includes(entry)))\n  );\n  return filteredSchema.map((entry) => {\n    if (configureAsView && entry.mode === 'REQUIRED') {\n      delete entry.mode;\n    }\n    if (entry.fields) {\n      entry.fields = asBqSchema(entry.fields, configureAsView);\n    }\n    return entry;\n  });\n}",
        "parameters": [
          {
            "name": "schema",
            "text": "schema: Array<Object>",
            "type": "Array<Object>"
          },
          {
            "name": "configureAsView",
            "text": "configureAsView?: boolean",
            "type": "boolean"
          }
        ]
      },
      {
        "type": "function",
        "name": " buildTableArgs",
        "text": "\n\nexport function buildTableArgs(args: {\n  schema: Array<Object>;\n  clusterings?: string[];\n  labels?: {};\n  partitioning?: {};\n  rangePartitioning?: {};\n}) {\n  const tableArgs: Record<string, any> = {\n    schema: JSON.stringify(asBqSchema(args.schema)),\n    clusterings: args.clusterings,\n    labels: { ...args.labels },\n  };\n  if (args.partitioning) tableArgs['timePartitioning'] = args.partitioning;\n  else if (args.rangePartitioning) tableArgs['rangePartitioning'] = args.rangePartitioning;\n\n  return tableArgs;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  schema: Array<Object>;\n  clusterings?: string[];\n  labels?: {};\n  partitioning?: {};\n  rangePartitioning?: {};\n}",
            "type": "{\n  schema: Array<Object>;\n  clusterings?: string[];\n  labels?: {};\n  partitioning?: {};\n  rangePartitioning?: {};\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " createDataformReposOnProject",
        "text": "\n\nexport function createDataformReposOnProject(dfProject: string) {\n  const { location, stack } = getConfigs();\n\n  new gcp.dataform.Repository(`dataformRepository`, {\n    region: location,\n    name: getDataformRepositoryNameForProject(stack),\n    gitRemoteSettings: {\n      url: 'https://github.com/Triple-Whale/dataland-dataform.git',\n      defaultBranch: 'develop',\n      authenticationTokenSecretVersion: pulumi.interpolate`projects/${\n        getConfigs().projectNumber\n      }/secrets/github-access-token/versions/latest`,\n    },\n    npmrcEnvironmentVariablesSecretVersion: getSecretId('npm-token'),\n    project: dfProject,\n  });\n}",
        "parameters": [
          {
            "name": "dfProject",
            "text": "dfProject: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " overridePartitioning",
        "text": "\n\nexport function overridePartitioning(tableArgs) {\n  const partitionType = tableArgs['timePartitioning']\n    ? 'timePartitioning'\n    : tableArgs['rangePartitioning']\n    ? 'rangePartitioning'\n    : null;\n  const partitioning = tableArgs[partitionType]\n    ? Object.assign({}, tableArgs[partitionType])\n    : null;\n\n  const requirePartitionFilter =\n    tableArgs?.requirePartitionFilter || partitioning?.requirePartitionFilter || null;\n\n  if (partitioning?.hasOwnProperty('requirePartitionFilter')) {\n    delete partitioning.requirePartitionFilter;\n    tableArgs[partitionType] = partitioning;\n  }\n  return { overwritenTableArgs: tableArgs, requirePartitionFilter };\n}",
        "parameters": [
          {
            "name": "tableArgs",
            "text": "tableArgs",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " createRoot",
        "text": "\n\nexport function createRoot(table, outputDataModel, labels = []) {\n  let tableArgs = buildTableArgs({\n    schema: outputDataModel.schema,\n    clusterings: outputDataModel.clusterings,\n    labels,\n    partitioning: outputDataModel.partitioning,\n    rangePartitioning: outputDataModel.rangePartitioning,\n  });\n  const { overwritenTableArgs, requirePartitionFilter } = overridePartitioning(tableArgs);\n  tableArgs = overwritenTableArgs;\n\n  return new gcp.bigquery.Table(`${table}-output-root`, {\n    datasetId: rootDatasetId,\n    tableId: table,\n    ...tableArgs,\n    requirePartitionFilter,\n  });\n}",
        "parameters": [
          {
            "name": "table",
            "text": "table",
            "type": "any"
          },
          {
            "name": "outputDataModel",
            "text": "outputDataModel",
            "type": "any"
          },
          {
            "name": "labels",
            "text": "labels = []",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/docker/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/docker/provider.ts",
    "exports": [
      {
        "type": "function",
        "name": " getDockerProvider",
        "text": "\n\nexport function getDockerProvider() {\n  if (!provider) {\n    provider = new docker.Provider('provider', {\n      host: 'unix:///var/run/docker.sock',\n      registryAuth: [\n        {\n          address: 'us-central1-docker.pkg.dev',\n          authDisabled: false,\n          // configFile: '~/.docker/config.json',\n        },\n      ],\n    });\n  }\n  return provider;\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/pulumi/ec/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/ec/provider.ts",
    "exports": [
      {
        "type": "function",
        "name": " getECProvider",
        "text": "\n\nexport function getECProvider() {\n  if (!ecProvider) {\n    ecProvider = new ec.Provider('ec', {\n      apikey: getSecretValue('ec-api-key'),\n    });\n  }\n  return ecProvider;\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/pulumi/eventarc/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/eventarc/trigger.ts",
    "exports": [
      {
        "type": "function",
        "name": " createTriggerFromTopicToWorkflow",
        "text": "\n\n// the service account must have roles/workflows.invoker\nexport function createTriggerFromTopicToWorkflow(args: {\n  workflowName: pulumi.Input<string>;\n  topicName: pulumi.Input<string>;\n  serviceAccountEmail: pulumi.Input<string>;\n  name?: string;\n}) {\n  const { workflowName, topicName, serviceAccountEmail, name = 'trigger' } = args;\n  const { location } = getConfigs();\n  const trigger = new gcp.eventarc.Trigger(name, {\n    location,\n    matchingCriterias: [\n      {\n        attribute: 'type',\n        value: 'google.cloud.pubsub.topic.v1.messagePublished',\n      },\n    ],\n    destination: {\n      workflow: getWorkflowId(workflowName),\n    },\n    serviceAccount: serviceAccountEmail,\n    transport: {\n      pubsub: {\n        topic: getPubsubTopicId(topicName),\n      },\n    },\n  });\n\n  return { trigger };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  workflowName: pulumi.Input<string>;\n  topicName: pulumi.Input<string>;\n  serviceAccountEmail: pulumi.Input<string>;\n  name?: string;\n}",
            "type": "{\n  workflowName: pulumi.Input<string>;\n  topicName: pulumi.Input<string>;\n  serviceAccountEmail: pulumi.Input<string>;\n  name?: string;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/flink/deployment.ts",
    "exports": [
      {
        "type": "function",
        "name": " createFlinkDeployment",
        "text": "\n\nexport function createFlinkDeployment(args: { name: string; provider: K8sProvider }) {\n  const { name, provider } = args;\n\n  const deployment = new kubernetes.apiextensions.CustomResource(\n    `${name}-${provider.uuid}`,\n    {\n      apiVersion: 'flink.apache.org/v1beta1',\n      kind: 'FlinkDeployment',\n      metadata: {\n        name,\n      },\n      spec: {\n        image: getDevopsImage('flink'),\n        flinkVersion: 'v1_17',\n        flinkConfiguration: {\n          'taskmanager.numberOfTaskSlots': '2',\n        },\n        serviceAccount: 'flink',\n        jobManager: {\n          resource: {\n            memory: '2048m',\n            cpu: 1,\n          },\n        },\n        taskManager: {\n          resource: {\n            memory: '2048m',\n            cpu: 1,\n          },\n        },\n      },\n    },\n    { provider }\n  );\n  // give the flink service account permissions to read all objects in the cluster\n  new kubernetes.rbac.v1.ClusterRoleBinding(\n    `${name}-${provider.uuid}`,\n    {\n      metadata: {\n        name: 'flink-cluster-role-binding',\n      },\n      roleRef: {\n        apiGroup: 'rbac.authorization.k8s.io',\n        kind: 'ClusterRole',\n        name: 'cluster-admin',\n      },\n      subjects: [\n        {\n          kind: 'ServiceAccount',\n          name: 'flink',\n          namespace: 'flink-operator',\n        },\n      ],\n    },\n    { provider }\n  );\n  const { k8sService } = createK8sService({\n    name,\n    selector: { app: name, component: 'jobmanager' },\n    type: 'LoadBalancer',\n    ingressMode: 'internal',\n    provider,\n    ports: [\n      {\n        name: 'ui',\n        port: 8081,\n        targetPort: 8081,\n      },\n      {\n        name: 'sql-gateway',\n        port: 8083,\n        targetPort: 8083,\n      },\n    ],\n  });\n\n  return { deployment };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { name: string; provider: K8sProvider }",
            "type": "{ name: string; provider: K8sProvider }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/flink/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/gce/disk.ts",
    "exports": [
      {
        "type": "function",
        "name": " createDiskFromImage",
        "text": "\n\nexport function createDiskFromImage(args: {\n  name: string;\n  image: gcp.compute.Image;\n  zone?: string;\n  size?: number;\n  type?: string;\n}) {\n  const { name, image, zone = 'us-central1-a', size = 100, type = 'pd-ssd' } = args;\n  const disk = new gcp.compute.Disk(`${name}-${zone}`, {\n    physicalBlockSizeBytes: 4096,\n    type,\n    zone,\n    image: image.selfLink,\n    size,\n  });\n  return disk;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  image: gcp.compute.Image;\n  zone?: string;\n  size?: number;\n  type?: string;\n}",
            "type": "{\n  name: string;\n  image: gcp.compute.Image;\n  zone?: string;\n  size?: number;\n  type?: string;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/gce/image.ts",
    "exports": [
      {
        "type": "function",
        "name": " createImageFromGcs",
        "text": "\n\nexport function createImageFromGcs(args: { name: string; object: string }): gcp.compute.Image {\n  const { name, object } = args;\n  const { projectId } = getConfigs();\n\n  const gen = getLiveObjectGeneration(projectId, object);\n\n  const image = new gcp.compute.Image(\n    `${name}-${projectId}`,\n    {\n      rawDisk: {\n        source: pulumi.interpolate`https://storage.googleapis.com/ai-assets-${projectId}/images/${object}.tar.gz`,\n      },\n      storageLocations: ['us-central1'],\n      labels: {\n        generation: getLiveObjectGeneration(projectId, object),\n      },\n    },\n    {\n      replaceOnChanges: ['labels.generation'],\n    }\n  );\n\n  return image;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { name: string; object: string }",
            "type": "{ name: string; object: string }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/gce/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/grafana/dataSource.ts",
    "exports": [
      {
        "type": "function",
        "name": " createGrafanaDataSource",
        "text": "\n\nexport function createGrafanaDataSource(args: {\n  name: string;\n  url: string;\n  type: 'prometheus';\n  jsonData: any;\n}) {\n  const { name, url, type, jsonData } = args;\n  const dataSource = new grafana.DataSource(\n    name,\n    {\n      name: `${name}-${type}`,\n      type,\n      jsonDataEncoded: JSON.stringify({\n        ...jsonData,\n      }),\n      isDefault: false,\n      accessMode: 'proxy',\n      orgId: '1',\n      url,\n    },\n    { provider: getGrafanaProvider() }\n  );\n  return dataSource;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  url: string;\n  type: 'prometheus';\n  jsonData: any;\n}",
            "type": "{\n  name: string;\n  url: string;\n  type: 'prometheus';\n  jsonData: any;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/grafana/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/grafana/provider.ts",
    "exports": [
      {
        "type": "function",
        "name": " getGrafanaProvider",
        "text": "\n\nexport function getGrafanaProvider(name: string = 'sonic-cluster') {\n  if (!grafanaProviders[name]) {\n    grafanaProviders[name] = new grafana.Provider(name, {\n      url: `http://${isStaging ? 'stg.' : ''}${name}.grafana.internal.triplestack.io`,\n      auth: 'admin:admin',\n    });\n  }\n  return grafanaProviders[name];\n}",
        "parameters": [
          {
            "name": "name",
            "text": "name: string = 'sonic-cluster'",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/iam/bqAccess.ts",
    "exports": [
      {
        "type": "function",
        "name": " bqAccess",
        "text": "\n\nexport function bqAccess(serviceAccount: GCPServiceAccount, projects: string[]) {\n  for (const project of projects) {\n    addRolesToServiceAccount(serviceAccount, project, [\n      'roles/bigquery.jobUser',\n      'roles/bigquery.dataViewer',\n    ]);\n  }\n}",
        "parameters": [
          {
            "name": "serviceAccount",
            "text": "serviceAccount: GCPServiceAccount",
            "type": "GCPServiceAccount"
          },
          {
            "name": "projects",
            "text": "projects: string[]",
            "type": "string[]"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/iam/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/iam/roles.ts",
    "exports": [
      {
        "type": "function",
        "name": " addRolesToServiceAccount",
        "text": "\n\nexport function addRolesToServiceAccount(\n  serviceAccount: GCPServiceAccount,\n  projectId,\n  roles: string[],\n  suffix?: string\n) {\n  addRolesToServiceAccountEmail(\n    serviceAccount.email,\n    projectId,\n    roles,\n    suffix,\n    serviceAccount.uuid\n  );\n}",
        "parameters": [
          {
            "name": "serviceAccount",
            "text": "serviceAccount: GCPServiceAccount",
            "type": "GCPServiceAccount"
          },
          {
            "name": "projectId",
            "text": "projectId",
            "type": "any"
          },
          {
            "name": "roles",
            "text": "roles: string[]",
            "type": "string[]"
          },
          {
            "name": "suffix",
            "text": "suffix?: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " addRolesToServiceAccountEmail",
        "text": "\n\nexport function addRolesToServiceAccountEmail(\n  serviceAccountEmail: pulumi.Input<string>,\n  projectId,\n  roles: string[],\n  suffix?: string,\n  uuid?: string\n) {\n  for (const role of roles) {\n    const roleAbbreviation = role\n      .replace('/', '-')\n      .replace('.', '-')\n      .toLowerCase()\n      .split('-')\n      .map((word) => word[0] + word.slice(-1))\n      .join('');\n\n    const name = roleToName(role);\n    const projectUUID = createUUID(projectId);\n    new gcp.projects.IAMMember(\n      `${name}-${projectId}${suffix || uuid}`,\n      {\n        project: projectId,\n        member: pulumi.interpolate`serviceAccount:${serviceAccountEmail}`,\n        role: role,\n      },\n      {\n        aliases: [\n          {\n            name: `${roleAbbreviation}-${projectUUID}${suffix || uuid}`,\n          },\n        ],\n      }\n    );\n  }\n}",
        "parameters": [
          {
            "name": "serviceAccountEmail",
            "text": "serviceAccountEmail: pulumi.Input<string>",
            "type": "pulumi.Input<string>"
          },
          {
            "name": "projectId",
            "text": "projectId",
            "type": "any"
          },
          {
            "name": "roles",
            "text": "roles: string[]",
            "type": "string[]"
          },
          {
            "name": "suffix",
            "text": "suffix?: string",
            "type": "string"
          },
          {
            "name": "uuid",
            "text": "uuid?: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " addRolesToServiceAccountOrg",
        "text": "\n\nexport function addRolesToServiceAccountOrg(args: {\n  serviceAccount: GCPServiceAccount;\n  orgId?: string;\n  roles: string[];\n  suffix?: string;\n}) {\n  const { serviceAccount, orgId = '193415757381', roles, suffix } = args;\n  addRolesToServiceAccountEmailOrg({\n    serviceAccountEmail: serviceAccount.email,\n    orgId,\n    roles,\n    suffix,\n    uuid: serviceAccount.uuid,\n  });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  serviceAccount: GCPServiceAccount;\n  orgId?: string;\n  roles: string[];\n  suffix?: string;\n}",
            "type": "{\n  serviceAccount: GCPServiceAccount;\n  orgId?: string;\n  roles: string[];\n  suffix?: string;\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " addRolesToServiceAccountEmailOrg",
        "text": "\n\nexport function addRolesToServiceAccountEmailOrg(args: {\n  serviceAccountEmail: pulumi.Input<string>;\n  orgId?: string;\n  roles: string[];\n  suffix?: string;\n  uuid?: string;\n}) {\n  const { serviceAccountEmail, orgId = '193415757381', roles, suffix, uuid } = args;\n  for (const role of roles) {\n    const name = roleToName(role);\n    new gcp.organizations.IAMMember(`${name}-${orgId}${suffix || uuid}`, {\n      orgId: orgId,\n      member: pulumi.interpolate`serviceAccount:${serviceAccountEmail}`,\n      role: role,\n    });\n  }\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  serviceAccountEmail: pulumi.Input<string>;\n  orgId?: string;\n  roles: string[];\n  suffix?: string;\n  uuid?: string;\n}",
            "type": "{\n  serviceAccountEmail: pulumi.Input<string>;\n  orgId?: string;\n  roles: string[];\n  suffix?: string;\n  uuid?: string;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/iam/sa.ts",
    "exports": [
      {
        "name": " GCPServiceAccount",
        "text": "\n\nexport type GCPServiceAccount = gcp.serviceaccount.Account & {\n  account_id: string;\n  uuid: string;\n};",
        "type": "gcp.serviceaccount.Account & {\n  account_id: string;\n  uuid: string;\n}"
      },
      {
        "type": "function",
        "name": " createIamServiceAccount",
        "text": "\n\nexport function createIamServiceAccount(args: { accountId: string; name?: string }) {\n  const { name } = args;\n  const fullAccountId = (getUniqueNameInProject(args.accountId, '-', true) as string).substring(\n    0,\n    30\n  );\n  // valid account regex: \"^[a-z](?:[-a-z0-9]{4,28}[a-z0-9])$\"\n  const accountId = fullAccountId.replace(/[^a-z0-9]$/, '');\n\n  const serviceAccount = new gcp.serviceaccount.Account(name || args.accountId, {\n    accountId,\n    displayName: name,\n  }) as GCPServiceAccount;\n\n  serviceAccount.account_id = accountId;\n  serviceAccount.uuid = createUUID(accountId);\n  return serviceAccount;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { accountId: string; name?: string }",
            "type": "{ accountId: string; name?: string }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/iam/utils.ts",
    "exports": [
      {
        "type": "function",
        "name": " getDefaultComputeServiceAccount",
        "text": "\n\nexport function getDefaultComputeServiceAccount() {\n  return gcp.compute.getDefaultServiceAccount({}).then((sa) => sa.email);\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/pulumi/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/k8s/annotations.ts",
    "exports": [
      {
        "name": " HOST",
        "text": "export const HOST = 'triplewhale.com/host';",
        "type": "variable"
      },
      {
        "name": " DOMAIN",
        "text": "\nexport const DOMAIN = 'triplewhale.com/domain';",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/apps/airbyte.ts",
    "exports": [
      {
        "type": "function",
        "name": " deployAirbyte",
        "text": "\n\nexport function deployAirbyte(args: { provider: K8sProvider; name: string }) {\n  const { provider, name } = args;\n  const airbyteHelm = createHelmRelease({\n    name: `airbyte-${name}-${provider.uuid}`,\n    releaseArgs: {\n      chart: 'airbyte',\n      name,\n      namespace: provider.namespace,\n      createNamespace: true,\n      valueYamlFiles: [new pulumi.asset.FileAsset(`${dirname}/helm/charts/airbyte/values.yaml`)],\n      repositoryOpts: {\n        repo: 'https://airbytehq.github.io/helm-charts',\n      },\n    },\n    provider,\n  });\n\n  createK8sIngress({\n    name: `airbyte-${name}`,\n    twDomain: new TWDomain('triplestack.io', `${name}.airbyte`, 'iap', projectIdAsSubDomain),\n    selector: {\n      'app.kubernetes.io/instance': name,\n      'app.kubernetes.io/name': 'webapp',\n    },\n    ingressMode: 'iap',\n    provider,\n    dependsOn: [airbyteHelm],\n  });\n\n  createK8sService({\n    name: `airbyte-${name}`,\n    twDomain: new TWDomain('triplestack.io', `${name}.airbyte`, 'internal'),\n    selector: {\n      'app.kubernetes.io/instance': name,\n      'app.kubernetes.io/name': 'airbyte-api-server',\n    },\n    ingressMode: 'internal',\n    type: 'LoadBalancer',\n    provider,\n    ports: [{ targetPort: 8006, port: 80 }],\n    dependsOn: [airbyteHelm],\n  });\n\n  deployToK8s({\n    name: `airbyte-temporal-ui-${name}`,\n    serviceAccount: null,\n    createK8sDeploymentArgs: {\n      podArgs: { image: 'temporalio/ui:2.17.0' },\n      envs: {\n        TEMPORAL_CSRF_COOKIE_INSECURE: 'true',\n        TEMPORAL_ADDRESS: `${name}-temporal:7233`,\n      },\n      maxReplicas: 1,\n    },\n    providers: [provider],\n    domain: new TWDomain('triplestack.io', `${name}.temporal-ui.airbyte`, 'internal'),\n  });\n\n  createK8sService({\n    name: `airbyte-web-${name}`,\n    twDomain: new TWDomain('triplestack.io', `${name}.web.airbyte`, 'internal'),\n    selector: {\n      'app.kubernetes.io/instance': name,\n      'app.kubernetes.io/name': 'webapp',\n    },\n    ingressMode: 'internal',\n    type: 'LoadBalancer',\n    provider,\n    ports: [{ targetPort: 8080, port: 80 }],\n    dependsOn: [airbyteHelm],\n  });\n\n  return { resources: [airbyteHelm] };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { provider: K8sProvider; name: string }",
            "type": "{ provider: K8sProvider; name: string }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/apps/datadog.ts",
    "exports": [
      {
        "type": "function",
        "name": " deployDatadog",
        "text": "\n\nexport function deployDatadog(args: { provider: K8sProvider; jmx?: boolean }) {\n  const { provider, jmx } = args;\n  const values = {\n    datadog: { site: 'us5.datadoghq.com.', apiKey: getSecretValue('datadog-api-key') },\n  };\n  if (jmx) {\n    values['agents'] = { image: { tagSuffix: 'jmx' } };\n  }\n  const datadogHelm = createHelmRelease({\n    name: `datadog-${provider.cluster_uuid}`,\n    releaseArgs: {\n      chart: 'datadog',\n      name: 'datadog-agent',\n      namespace: 'datadog',\n      createNamespace: true,\n      valueYamlFiles: [new pulumi.asset.FileAsset(`${dirname}/helm/charts/datadog/values.yaml`)],\n      values,\n      repositoryOpts: {\n        repo: 'https://helm.datadoghq.com',\n      },\n    },\n    provider,\n  });\n  return { resources: [datadogHelm] };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { provider: K8sProvider; jmx?: boolean }",
            "type": "{ provider: K8sProvider; jmx?: boolean }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/apps/elastic.ts",
    "exports": [
      {
        "type": "function",
        "name": " createElasticCluster",
        "text": "\n\nexport function createElasticCluster(args: { name: string; provider: K8sProvider }) {\n  const { name, provider } = args;\n\n  const password = createPassword({ name: `${name}-es`, special: false }).result;\n\n  const userpassSecret = new kubernetes.core.v1.Secret(\n    k8sUniqueName(name, provider),\n    {\n      metadata: {\n        name: name,\n      },\n      type: 'kubernetes.io/basic-auth',\n      stringData: {\n        username: 'admin',\n        password,\n        // https://www.elastic.co/guide/en/elasticsearch/reference/current/built-in-roles.html\n        roles: 'superuser,kibana_admin,ingest_admin,monitor,viewer',\n      },\n    },\n    { provider }\n  );\n\n  const esCluster = new kubernetes.apiextensions.CustomResource(\n    k8sUniqueName(name, provider),\n    {\n      apiVersion: 'elasticsearch.k8s.elastic.co/v1',\n      kind: 'Elasticsearch',\n      metadata: {\n        name,\n      },\n      spec: {\n        version: '8.13.0',\n        auth: {\n          fileRealm: [\n            {\n              secretName: userpassSecret.metadata.name,\n            },\n          ],\n        },\n        nodeSets: [\n          {\n            name: 'default',\n            config: {\n              'node.roles': ['master', 'data'],\n              'node.attr.attr_name': 'attr_value',\n              'node.store.allow_mmap': false,\n            },\n            volumeClaimTemplates: [\n              {\n                metadata: {\n                  name: 'elasticsearch-data',\n                },\n                spec: {\n                  accessModes: ['ReadWriteOnce'],\n                  resources: {\n                    requests: {\n                      storage: '1000Gi',\n                    },\n                  },\n                  storageClassName: 'standard',\n                },\n              },\n            ],\n            podTemplate: {\n              metadata: {\n                labels: {\n                  foo: 'bar',\n                },\n              },\n              spec: {\n                containers: [\n                  {\n                    name: 'elasticsearch',\n                    resources: {\n                      requests: {\n                        memory: '64Gi',\n                        cpu: '8',\n                      },\n                      limits: {\n                        memory: '64Gi',\n                        cpu: '16',\n                      },\n                    },\n                  },\n                ],\n              },\n            },\n            count: 3,\n          },\n        ],\n      },\n    },\n    { provider }\n  );\n  return { password, esCluster };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { name: string; provider: K8sProvider }",
            "type": "{ name: string; provider: K8sProvider }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/apps/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/k8s/apps/jaeger.ts",
    "exports": [
      {
        "type": "function",
        "name": " createJaegerCluster",
        "text": "\n\nexport function createJaegerCluster(\n  args: { name: string; provider: K8sProvider; esPassword: any } & K8sResources\n) {\n  const { name, esPassword } = args;\n  const provider = dependOnK8sClusterOperators(args.provider, ['jaeger']);\n  new kubernetes.apiextensions.CustomResource(\n    k8sUniqueName(name, provider),\n    {\n      apiVersion: 'jaegertracing.io/v1',\n      kind: 'Jaeger',\n      metadata: {\n        name: `${name}-jaeger`,\n      },\n      // https://www.jaegertracing.io/docs/1.57/operator/\n      spec: {\n        strategy: 'production',\n        collector: {\n          maxReplicas: 5,\n          resources: {\n            requests: {\n              cpu: '100m',\n              memory: '128Mi',\n            },\n            limits: {\n              cpu: '500m',\n              memory: '800Mi',\n            },\n          },\n        },\n        storage: {\n          type: 'elasticsearch',\n          options: {\n            es: {\n              'server-urls': `https://${name}-es-internal-http:9200`,\n              tls: {\n                enabled: true,\n                key: '/es/certificates/tls.key',\n                cert: '/es/certificates/tls.crt',\n                'skip-host-verify': true,\n              },\n              username: 'admin',\n              password: esPassword,\n            },\n          },\n        },\n        volumeMounts: [\n          {\n            name: 'certificates',\n            mountPath: '/es/certificates/',\n            readOnly: true,\n          },\n        ],\n        volumes: [\n          {\n            name: 'certificates',\n            secret: {\n              secretName: `${name}-es-http-certs-internal`,\n            },\n          },\n        ],\n        ingress: {\n          enabled: false,\n        },\n      },\n    },\n    { provider }\n  );\n  createK8sIngress({\n    name: name,\n    twDomain: new TWDomain('triplestack.io', `${name}.jaeger`, 'iap', projectIdAsSubDomain),\n    selector: {\n      'app.kubernetes.io/name': 'saber-jaeger-query',\n    },\n    ingressMode: 'iap',\n    provider,\n    port: 80,\n    healthCheckPath: '/',\n    targetPort: 16686,\n  });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { name: string; provider: K8sProvider; esPassword: any } & K8sResources",
            "type": "{ name: string; provider: K8sProvider; esPassword: any } & K8sResources"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/apps/kafkaExporter.ts",
    "exports": [
      {
        "type": "function",
        "name": " createKafkaExporter",
        "text": "\n\nexport function createKafkaExporter(args: {\n  provider: K8sProvider;\n  name: string;\n  servers: string[];\n}) {\n  const { name, servers } = args;\n  const provider = getK8sProvider({ provider: args.provider, namespace: 'monitoring' });\n  const app = `${name}-kafka-exporter`;\n  deployToK8s({\n    name: app,\n    providers: [provider],\n    serviceAccount: null,\n    createK8sDeploymentArgs: {\n      podArgs: {\n        image: 'danielqsj/kafka-exporter',\n        args: servers.map((server) => `--kafka.server=${server}`),\n        CPURequest: '500m',\n        memoryRequest: '500Mi',\n        allowSpot: false,\n      },\n      maxReplicas: 1,\n    },\n    useTcpProbe: true,\n\n    ports: [{ containerPort: 9308, name: 'metrics' }],\n    ingresses: null,\n  });\n\n  createPrometheusMonitor({\n    name: app,\n    provider,\n    labels: {\n      'app.kubernetes.io/name': app,\n    },\n    kind: 'Pod',\n    endpoints: [{ portName: 'metrics', path: '/metrics', scrapeTimeout: '25s', interval: '30s' }],\n    release: 'devops',\n    namespaced: false,\n  });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  provider: K8sProvider;\n  name: string;\n  servers: string[];\n}",
            "type": "{\n  provider: K8sProvider;\n  name: string;\n  servers: string[];\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/apps/matedataProxy.ts",
    "exports": [
      {
        "type": "function",
        "name": " deployMetadataProxy",
        "text": "\n\nexport function deployMetadataProxy(args: { provider: K8sProvider }) {\n  const { provider } = args;\n  const defaultProvider = getK8sProvider({\n    provider: provider,\n    namespace: 'default',\n  });\n\n  const daemonSet = new kubernetes.apps.v1.DaemonSet(\n    k8sUniqueName('metadata-proxy', provider),\n    {\n      metadata: {\n        name: 'metadata-proxy',\n        namespace: 'default',\n      },\n      spec: {\n        selector: {\n          matchLabels: {\n            'app.kubernetes.io/part-of': 'metadata-proxy',\n          },\n        },\n        template: createPodTemplate({\n          hostNetwork: true,\n          image: getServiceImage({ serviceId: 'metadata-proxy' }),\n          appName: 'metadata-proxy',\n          ports: [{ containerPort: 6382, hostPort: 6382 }],\n          allowSpot: true,\n          CPURequest: '20m',\n          memoryRequest: '50Mi',\n        }),\n      },\n    },\n    { provider: defaultProvider }\n  );\n  return { resources: [daemonSet] };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { provider: K8sProvider }",
            "type": "{ provider: K8sProvider }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/autoscaling.ts",
    "exports": [
      {
        "name": " CreateHorizontalPodAutoscalerArgs",
        "text": "\n\nexport type CreateHorizontalPodAutoscalerArgs = {\n  name: string;\n  kind?: string;\n  minReplicas?: number;\n  maxReplicas?: number;\n  apiVersion?: string;\n  provider?: K8sProvider;\n  averageCPUUtilization?: number;\n  averageMemoryUtilization?: number;\n  istioEnabled?: boolean;\n  scaleDownPolicies?: kubernetes.types.input.autoscaling.v2.HPAScalingPolicy[];\n  scaleUpPolicies?: kubernetes.types.input.autoscaling.v2.HPAScalingPolicy[];\n};",
        "type": "{\n  name: string;\n  kind?: string;\n  minReplicas?: number;\n  maxReplicas?: number;\n  apiVersion?: string;\n  provider?: K8sProvider;\n  averageCPUUtilization?: number;\n  averageMemoryUtilization?: number;\n  istioEnabled?: boolean;\n  scaleDownPolicies?: kubernetes.types.input.autoscaling.v2.HPAScalingPolicy[];\n  scaleUpPolicies?: kubernetes.types.input.autoscaling.v2.HPAScalingPolicy[];\n}"
      },
      {
        "type": "function",
        "name": " createHorizontalPodAutoScaler",
        "text": "\n\nexport function createHorizontalPodAutoScaler(args: CreateHorizontalPodAutoscalerArgs) {\n  const {\n    name,\n    minReplicas = 1,\n    maxReplicas,\n    kind = 'Deployment',\n    apiVersion = 'apps/v1',\n    provider = getK8sProvider(),\n    averageCPUUtilization = 65,\n    averageMemoryUtilization,\n    scaleDownPolicies,\n    scaleUpPolicies = [\n      {\n        type: 'Pods',\n        value: 1000,\n        periodSeconds: 1,\n      },\n      {\n        type: 'Percent',\n        value: 1000,\n        periodSeconds: 1,\n      },\n    ],\n  } = args;\n  return new kubernetes.autoscaling.v2.HorizontalPodAutoscaler(\n    k8sUniqueName(name, provider),\n    {\n      metadata: {\n        name,\n      },\n      spec: {\n        maxReplicas,\n        minReplicas,\n        scaleTargetRef: {\n          apiVersion,\n          kind,\n          name: name,\n        },\n        behavior: {\n          scaleUp: {\n            policies: scaleUpPolicies,\n          },\n          ...(scaleDownPolicies?.length > 0\n            ? {\n                scaleDown: {\n                  policies: scaleDownPolicies,\n                },\n              }\n            : null),\n        },\n        metrics: [\n          ...(averageMemoryUtilization\n            ? [\n                {\n                  type: 'Resource',\n                  resource: {\n                    name: 'memory',\n                    target: {\n                      type: 'Utilization',\n                      averageUtilization: averageMemoryUtilization,\n                    },\n                  },\n                },\n              ]\n            : []),\n          ...(averageCPUUtilization\n            ? [\n                {\n                  type: 'Resource',\n                  resource: {\n                    name: 'cpu',\n                    target: {\n                      type: 'Utilization',\n                      averageUtilization: averageCPUUtilization,\n                    },\n                  },\n                },\n              ]\n            : []),\n        ],\n      },\n    },\n    { provider: provider }\n  );\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: CreateHorizontalPodAutoscalerArgs",
            "type": "CreateHorizontalPodAutoscalerArgs"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/cert.ts",
    "exports": [
      {
        "type": "function",
        "name": " createK8sManagedCertificate",
        "text": "\n\nexport function createK8sManagedCertificate(args: {\n  name: string;\n  domains: string[];\n  provider?: kubernetes.Provider;\n}) {\n  const { name, domains, provider } = args;\n  const k8sManagedCertificate = new kubernetes.apiextensions.CustomResource(\n    name,\n    {\n      apiVersion: 'networking.gke.io/v1',\n      kind: 'ManagedCertificate',\n      metadata: {\n        name,\n      },\n      spec: {\n        domains,\n      },\n    },\n    { provider: provider || getK8sProvider() }\n  );\n  return k8sManagedCertificate;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  domains: string[];\n  provider?: kubernetes.Provider;\n}",
            "type": "{\n  name: string;\n  domains: string[];\n  provider?: kubernetes.Provider;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/cluster/cluster.ts",
    "exports": [
      {
        "name": " K8sCluster",
        "text": "\n\nexport type K8sCluster = gcp.container.Cluster & {\n  name_str: string;\n  cluster_urn: string;\n  cluster_uuid: string;\n};",
        "type": "gcp.container.Cluster & {\n  name_str: string;\n  cluster_urn: string;\n  cluster_uuid: string;\n}"
      },
      {
        "type": "function",
        "name": " createK8sCluster",
        "text": "\n\nexport function createK8sCluster(args: {\n  name: ClusterName;\n  masterIpv4CidrBlock: string;\n  stackType?: 'IPV4_IPV6' | 'IPV4' | 'IPV6';\n  location?: string;\n  autoscalingProfile?: 'BALANCED' | 'OPTIMIZE_UTILIZATION';\n  masterOpen?: boolean;\n  nodeLocations?: string[];\n  createBackup?: boolean;\n  nap?: boolean;\n  resourceLimits?: gcp.types.input.container.ClusterClusterAutoscalingResourceLimit[];\n  network?: string;\n}) {\n  const {\n    name,\n    stackType = 'IPV4_IPV6',\n    masterIpv4CidrBlock,\n    location = getConfigs().location,\n    autoscalingProfile,\n    masterOpen = true,\n    nodeLocations,\n    nap = true,\n    createBackup = false,\n    network = 'app',\n  } = args;\n  const { projectId } = getConfigs();\n  const cluster_urn = `gke_${projectId}_${location}_${name}`;\n  const provider = getK8sProvider({ cluster: name as any, location });\n  const autoProvisioningDefaults: gcp.types.input.container.ClusterClusterAutoscalingAutoProvisioningDefaults =\n    nap\n      ? {\n          upgradeSettings: {\n            maxSurge: 10,\n          },\n          oauthScopes: defaultOauthScopes,\n          shieldedInstanceConfig: {\n            enableIntegrityMonitoring: true,\n            enableSecureBoot: false,\n          },\n        }\n      : undefined;\n\n  if (nap && !args.resourceLimits) {\n    args.resourceLimits = [\n      {\n        resourceType: 'cpu',\n        minimum: 1,\n        maximum: 3000,\n      },\n      {\n        resourceType: 'memory',\n        minimum: 1,\n        maximum: 12000,\n      },\n    ];\n  }\n  const cluster = new gcp.container.Cluster(\n    `${name}-${location}`,\n    {\n      location,\n      initialNodeCount: 1,\n      workloadIdentityConfig: {\n        workloadPool: `${projectId}.svc.id.goog`,\n      },\n      name,\n      resourceLabels: createLabels(),\n      subnetwork: getSubnetworkId(`${network}-dual`, location),\n      network: getNetworkId(network),\n      datapathProvider: 'ADVANCED_DATAPATH',\n      enableL4IlbSubsetting: true,\n      privateClusterConfig: {\n        enablePrivateEndpoint: false,\n        enablePrivateNodes: true,\n        masterGlobalAccessConfig: {\n          enabled: true,\n        },\n        masterIpv4CidrBlock,\n      },\n      nodeLocations,\n      nodePoolDefaults: {\n        nodeConfigDefaults: {\n          gcfsConfig: {\n            enabled: true,\n          },\n        },\n      },\n      masterAuthorizedNetworksConfig: {\n        ...(masterOpen\n          ? {\n              cidrBlocks: [\n                {\n                  cidrBlock: '0.0.0.0/0',\n                  displayName: 'all',\n                },\n              ],\n            }\n          : null),\n      },\n      clusterAutoscaling: {\n        autoProvisioningDefaults,\n        enabled: nap,\n        autoscalingProfile:\n          autoscalingProfile || (isProduction ? 'BALANCED' : 'OPTIMIZE_UTILIZATION'),\n        resourceLimits: args.resourceLimits,\n      },\n      costManagementConfig: { enabled: true },\n      removeDefaultNodePool: true,\n      ipAllocationPolicy: {\n        stackType,\n      },\n      project: projectId,\n      monitoringConfig: {\n        enableComponents: ['SYSTEM_COMPONENTS'],\n        managedPrometheus: {\n          enabled: true,\n        },\n      },\n      addonsConfig: {\n        dnsCacheConfig: {\n          enabled: true,\n        },\n        gkeBackupAgentConfig: {\n          enabled: true,\n        },\n      },\n    },\n    { aliases: [{ name }], protect: true }\n  ) as K8sCluster;\n  cluster.name_str = name;\n  cluster.cluster_urn = cluster_urn;\n  cluster.cluster_uuid = createUUID(cluster_urn);\n\n  clusters[name] = cluster;\n  new kubernetes.scheduling.v1.PriorityClass(\n    `system-${cluster.cluster_uuid}`,\n    {\n      metadata: {\n        name: 'system',\n      },\n      value: 1000000,\n      globalDefault: false,\n    },\n    { provider, dependsOn: cluster }\n  );\n\n  if (createBackup) {\n    new gcp.gkebackup.BackupPlan(`${name}-${location}`, {\n      cluster: cluster.id,\n      location: location,\n      backupSchedule: {\n        cronSchedule: '55 23 * * *', // 23:55\n      },\n      retentionPolicy: {\n        backupRetainDays: 7,\n      },\n      labels: createLabels(),\n      backupConfig: {\n        includeVolumeData: false,\n        includeSecrets: true,\n        allNamespaces: true,\n      },\n    });\n  }\n\n  return { cluster, provider };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: ClusterName;\n  masterIpv4CidrBlock: string;\n  stackType?: 'IPV4_IPV6' | 'IPV4' | 'IPV6';\n  location?: string;\n  autoscalingProfile?: 'BALANCED' | 'OPTIMIZE_UTILIZATION';\n  masterOpen?: boolean;\n  nodeLocations?: string[];\n  createBackup?: boolean;\n  nap?: boolean;\n  resourceLimits?: gcp.types.input.container.ClusterClusterAutoscalingResourceLimit[];\n  network?: string;\n}",
            "type": "{\n  name: ClusterName;\n  masterIpv4CidrBlock: string;\n  stackType?: 'IPV4_IPV6' | 'IPV4' | 'IPV6';\n  location?: string;\n  autoscalingProfile?: 'BALANCED' | 'OPTIMIZE_UTILIZATION';\n  masterOpen?: boolean;\n  nodeLocations?: string[];\n  createBackup?: boolean;\n  nap?: boolean;\n  resourceLimits?: gcp.types.input.container.ClusterClusterAutoscalingResourceLimit[];\n  network?: string;\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " dependOnCluster",
        "text": "\n\nexport function dependOnCluster(provider: K8sProvider, cluster: ClusterName) {\n  return provider.dependOn(clusters[cluster]);\n}",
        "parameters": [
          {
            "name": "provider",
            "text": "provider: K8sProvider",
            "type": "K8sProvider"
          },
          {
            "name": "cluster",
            "text": "cluster: ClusterName",
            "type": "ClusterName"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/cluster/clusterLocation.ts",
    "exports": [
      {
        "type": "function",
        "name": " createClusterRegion",
        "text": "\n\nexport function createClusterRegion(args: {\n  region: string;\n  network: string;\n  subnetIpCidrRange: string;\n}) {\n  const { region, network, subnetIpCidrRange } = args;\n  const chip = region === 'europe-west1' ? 'eu' : '';\n  const subnetwork = new gcp.compute.Subnetwork(\n    `sub-dual-${region}`,\n    {\n      name: `${network}-dual`,\n      role: 'ACTIVE',\n      ipCidrRange: subnetIpCidrRange,\n      network,\n      stackType: 'IPV4_IPV6',\n      ipv6AccessType: 'EXTERNAL',\n      region,\n    },\n    { aliases: [{ name: `sub-dual${chip}` }] }\n  );\n\n  const router = new gcp.compute.Router(\n    `router-${region}`,\n    {\n      name: 'k8s-router',\n      region,\n      network,\n    },\n    { aliases: [{ name: `router${chip}` }] }\n  );\n\n  new gcp.compute.RouterNat(\n    `router-nat-${region}`,\n    {\n      name: 'k8s-nat',\n      router: router.name,\n      region: router.region,\n      natIpAllocateOption: 'AUTO_ONLY',\n      sourceSubnetworkIpRangesToNat: 'ALL_SUBNETWORKS_ALL_IP_RANGES',\n      minPortsPerVm: 16384,\n      maxPortsPerVm: 65536,\n      enableEndpointIndependentMapping: false,\n      enableDynamicPortAllocation: true,\n      type: 'PUBLIC',\n      logConfig: {\n        enable: true,\n        filter: 'ERRORS_ONLY',\n      },\n    },\n    { aliases: [{ name: `nat${chip}` }], ignoreChanges: ['type'] }\n  );\n  return { subnetwork, router };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  region: string;\n  network: string;\n  subnetIpCidrRange: string;\n}",
            "type": "{\n  region: string;\n  network: string;\n  subnetIpCidrRange: string;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/cluster/cuda.ts",
    "exports": [
      {
        "type": "function",
        "name": " cuda",
        "text": "\n\nexport function cuda(provider: K8sProvider) {\n  const daemon = new kubernetes.apps.v1.DaemonSet(\n    `cuda-${provider.cluster_uuid}`,\n    {\n      apiVersion: 'apps/v1',\n      kind: 'DaemonSet',\n      metadata: {\n        name: 'nvidia-driver-installer',\n        namespace: 'kube-system',\n        labels: {\n          'k8s-app': 'nvidia-driver-installer',\n        },\n      },\n      spec: {\n        selector: {\n          matchLabels: {\n            'k8s-app': 'nvidia-driver-installer',\n          },\n        },\n        updateStrategy: {\n          type: 'RollingUpdate',\n        },\n        template: {\n          metadata: {\n            labels: {\n              name: 'nvidia-driver-installer',\n              'k8s-app': 'nvidia-driver-installer',\n            },\n          },\n          spec: {\n            priorityClassName: 'system-node-critical',\n            affinity: {\n              nodeAffinity: {\n                requiredDuringSchedulingIgnoredDuringExecution: {\n                  nodeSelectorTerms: [\n                    {\n                      matchExpressions: [\n                        {\n                          key: 'cloud.google.com/gke-accelerator',\n                          operator: 'Exists',\n                        },\n                        {\n                          key: 'cloud.google.com/gke-gpu-driver-version',\n                          operator: 'DoesNotExist',\n                        },\n                      ],\n                    },\n                  ],\n                },\n              },\n            },\n            tolerations: [\n              {\n                operator: 'Exists',\n              },\n            ],\n            hostNetwork: true,\n            hostPID: true,\n            volumes: [\n              {\n                name: 'dev',\n                hostPath: {\n                  path: '/dev',\n                },\n              },\n              {\n                name: 'vulkan-icd-mount',\n                hostPath: {\n                  path: '/home/kubernetes/bin/nvidia/vulkan/icd.d',\n                },\n              },\n              {\n                name: 'nvidia-install-dir-host',\n                hostPath: {\n                  path: '/home/kubernetes/bin/nvidia',\n                },\n              },\n              {\n                name: 'root-mount',\n                hostPath: {\n                  path: '/',\n                },\n              },\n              {\n                name: 'cos-tools',\n                hostPath: {\n                  path: '/var/lib/cos-tools',\n                },\n              },\n              {\n                name: 'nvidia-config',\n                hostPath: {\n                  path: '/etc/nvidia',\n                },\n              },\n            ],\n            initContainers: [\n              {\n                image: 'cos-nvidia-installer:fixed',\n                imagePullPolicy: 'Never',\n                name: 'nvidia-driver-installer',\n                resources: {\n                  requests: {\n                    cpu: '150m',\n                  },\n                },\n                securityContext: {\n                  privileged: true,\n                },\n                env: [\n                  {\n                    name: 'NVIDIA_INSTALL_DIR_HOST',\n                    value: '/home/kubernetes/bin/nvidia',\n                  },\n                  {\n                    name: 'NVIDIA_INSTALL_DIR_CONTAINER',\n                    value: '/usr/local/nvidia',\n                  },\n                  {\n                    name: 'VULKAN_ICD_DIR_HOST',\n                    value: '/home/kubernetes/bin/nvidia/vulkan/icd.d',\n                  },\n                  {\n                    name: 'VULKAN_ICD_DIR_CONTAINER',\n                    value: '/etc/vulkan/icd.d',\n                  },\n                  {\n                    name: 'ROOT_MOUNT_DIR',\n                    value: '/root',\n                  },\n                  {\n                    name: 'COS_TOOLS_DIR_HOST',\n                    value: '/var/lib/cos-tools',\n                  },\n                  {\n                    name: 'COS_TOOLS_DIR_CONTAINER',\n                    value: '/build/cos-tools',\n                  },\n                ],\n                volumeMounts: [\n                  {\n                    name: 'nvidia-install-dir-host',\n                    mountPath: '/usr/local/nvidia',\n                  },\n                  {\n                    name: 'vulkan-icd-mount',\n                    mountPath: '/etc/vulkan/icd.d',\n                  },\n                  {\n                    name: 'dev',\n                    mountPath: '/dev',\n                  },\n                  {\n                    name: 'root-mount',\n                    mountPath: '/root',\n                  },\n                  {\n                    name: 'cos-tools',\n                    mountPath: '/build/cos-tools',\n                  },\n                ],\n                command: [\n                  'bash',\n                  '-c',\n                  'echo \"Checking for existing GPU driver modules\"\\nif lsmod | grep nvidia; then\\n  echo \"GPU driver is already installed, the installed version may or may not be the driver version being tried to install, skipping installation\"\\n  exit 0\\nelse\\n  echo \"No GPU driver module detected, installting now\"\\n  /cos-gpu-installer install --version=latest\\n  chmod 755 /root/home/kubernetes/bin/nvidia\\nfi\\n',\n                ],\n              },\n              {\n                image:\n                  'gcr.io/gke-release/nvidia-partition-gpu@sha256:e226275da6c45816959fe43cde907ee9a85c6a2aa8a429418a4cadef8ecdb86a',\n                name: 'partition-gpus',\n                env: [\n                  {\n                    name: 'LD_LIBRARY_PATH',\n                    value: '/usr/local/nvidia/lib64',\n                  },\n                ],\n                resources: {\n                  requests: {\n                    cpu: '150m',\n                  },\n                },\n                securityContext: {\n                  privileged: true,\n                },\n                volumeMounts: [\n                  {\n                    name: 'nvidia-install-dir-host',\n                    mountPath: '/usr/local/nvidia',\n                  },\n                  {\n                    name: 'dev',\n                    mountPath: '/dev',\n                  },\n                  {\n                    name: 'nvidia-config',\n                    mountPath: '/etc/nvidia',\n                  },\n                ],\n              },\n            ],\n            containers: [\n              {\n                image: 'gcr.io/google-containers/pause:2.0',\n                name: 'pause',\n              },\n            ],\n          },\n        },\n      },\n    },\n    { provider }\n  );\n  return daemon;\n}",
        "parameters": [
          {
            "name": "provider",
            "text": "provider: K8sProvider",
            "type": "K8sProvider"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/cluster/firewall.ts",
    "exports": [
      {
        "type": "function",
        "name": " openFirewallPortsOnCluster",
        "text": "\n\nexport function openFirewallPortsOnCluster(args: { cluster: K8sCluster }) {\n  const { cluster } = args;\n  createClusterFirewallRule({\n    name: `cluster-ports-${cluster.cluster_uuid}`,\n    cluster,\n    sourceRanges: [\n      // lb health check https://cloud.google.com/load-balancing/docs/health-check-concepts#ip-ranges\n      '35.191.0.0/16',\n      '130.211.0.0/22',\n      // iap https://cloud.google.com/iap/docs/using-tcp-forwarding\n      '35.235.240.0/20',\n    ],\n  });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { cluster: K8sCluster }",
            "type": "{ cluster: K8sCluster }"
          }
        ]
      },
      {
        "type": "function",
        "name": " createClusterFirewallRule",
        "text": "\n\nexport function createClusterFirewallRule(args: {\n  cluster: K8sCluster;\n  ports?: string[];\n  name: string;\n  sourceRanges: pulumi.Input<string>[];\n}) {\n  const { cluster, ports = [], name, sourceRanges } = args;\n  const clusterId = cluster.ipAllocationPolicy.clusterSecondaryRangeName.apply((v) =>\n    v.split('-').pop()\n  );\n  const opts: gcp.compute.FirewallArgs = {\n    allows: [\n      {\n        ports: ports,\n        protocol: ports.length ? 'tcp' : 'all',\n      },\n    ],\n    sourceRanges,\n    targetTags: [pulumi.interpolate`gke-${cluster.name}-${clusterId}-node`],\n    direction: 'INGRESS',\n    network: 'app',\n    priority: 1000,\n  };\n  new gcp.compute.Firewall(name, opts);\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  cluster: K8sCluster;\n  ports?: string[];\n  name: string;\n  sourceRanges: pulumi.Input<string>[];\n}",
            "type": "{\n  cluster: K8sCluster;\n  ports?: string[];\n  name: string;\n  sourceRanges: pulumi.Input<string>[];\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/cluster/gpuNodes.ts",
    "exports": [
      {
        "type": "function",
        "name": " createGpuNodes",
        "text": "\n\nexport function createGpuNodes(args: { provider: K8sProvider }) {\n  const { provider } = args;\n  const gpus: {\n    machineType: string;\n    gpuType: string;\n    locations?: string[];\n  }[] = [\n    {\n      machineType: 'a2-highgpu-1g',\n      gpuType: 'nvidia-tesla-a100',\n      locations: allNodeLocations,\n    },\n    {\n      machineType: 'n1-standard-4',\n      gpuType: 'nvidia-tesla-v100',\n      locations: allNodeLocations,\n    },\n    {\n      machineType: 'g2-standard-4',\n      gpuType: 'nvidia-l4',\n      locations: allNodeLocations.filter((l) => l !== 'us-central1-f'),\n    },\n  ];\n\n  gpus.forEach((gpu) => {\n    const opts = {\n      provider,\n      machineType: gpu.machineType,\n      nodeLocations: gpu.locations,\n      guestAccelerators: [\n        {\n          type: gpu.gpuType,\n          count: 1,\n        },\n      ],\n      spot: true,\n    };\n    createNodePool(opts);\n    createNodePool({ ...opts, spot: false });\n  });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { provider: K8sProvider }",
            "type": "{ provider: K8sProvider }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/cluster/helm/charts/airbyte/values.yaml",
    "exports": []
  },
  {
    "file": "@tw/pulumi/k8s/cluster/helm/charts/dagster/values.yaml",
    "exports": []
  },
  {
    "file": "@tw/pulumi/k8s/cluster/helm/charts/datadog/values.yaml",
    "exports": []
  },
  {
    "file": "@tw/pulumi/k8s/cluster/helm/charts/grafana/values.yaml",
    "exports": []
  },
  {
    "file": "@tw/pulumi/k8s/cluster/helm/charts/kafkaExporter/values.yaml",
    "exports": []
  },
  {
    "file": "@tw/pulumi/k8s/cluster/helm/charts/opentelemetry/values.yaml",
    "exports": []
  },
  {
    "file": "@tw/pulumi/k8s/cluster/helm/charts/prometheus/values.yaml",
    "exports": []
  },
  {
    "file": "@tw/pulumi/k8s/cluster/helm/charts/signoz/values.yaml",
    "exports": []
  },
  {
    "file": "@tw/pulumi/k8s/cluster/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/k8s/cluster/nodePool.ts",
    "exports": [
      {
        "name": " NodePool",
        "text": "\n\nexport type NodePool = gcp.container.NodePool & {\n  taints?: gcp.types.input.container.NodePoolNodeConfigTaint[];\n  poolTarget?: pulumi.Input<string>;\n};",
        "type": "gcp.container.NodePool & {\n  taints?: gcp.types.input.container.NodePoolNodeConfigTaint[];\n  poolTarget?: pulumi.Input<string>;\n}"
      },
      {
        "name": " allNodeLocations",
        "text": "\n\nexport const allNodeLocations = [\n  'us-central1-a',\n  'us-central1-b',\n  'us-central1-c',\n  'us-central1-f',\n];",
        "type": "variable"
      },
      {
        "name": " Ratios",
        "text": "\n\nexport type Ratios = '1-1' | '1-2' | '1-4' | '1-8';",
        "type": "'1-1' | '1-2' | '1-4' | '1-8'"
      },
      {
        "name": " ratios",
        "text": "\n\nexport const ratios: Ratios[] = ['1-1', '1-2', '1-4', '1-8'];",
        "type": "Ratios[]"
      },
      {
        "name": " nodePoolRatios",
        "text": "\n\nexport const nodePoolRatios: Record<string, Ratios> = {\n  'e2-custom-16-32768': '1-2',\n  'e2-custom-8-32768': '1-4',\n};",
        "type": "Record<string, Ratios>"
      },
      {
        "name": " defaultOauthScopes",
        "text": "\n\n// https://cloud.google.com/compute/docs/access/service-accounts#default_scopes\nexport const defaultOauthScopes = [\n  'https://www.googleapis.com/auth/devstorage.read_only',\n  'https://www.googleapis.com/auth/logging.write',\n  'https://www.googleapis.com/auth/monitoring',\n  'https://www.googleapis.com/auth/service.management.readonly',\n  'https://www.googleapis.com/auth/servicecontrol',\n  'https://www.googleapis.com/auth/trace.append',\n];",
        "type": "variable"
      },
      {
        "type": "function",
        "name": " createNodePool",
        "text": "\n\nexport function createNodePool(args: {\n  provider: K8sProvider;\n  machineType: string;\n  name?: string;\n  minNodeCount?: number;\n  maxNodeCount?: number;\n  locationPolicy?: 'ANY' | 'BALANCED';\n  spot?: boolean;\n  isPrivate?: boolean;\n  poolTargetValue?: string;\n  nodeLocations?: string[];\n  labels?: Record<string, string>;\n  features?: {\n    noDD?: boolean;\n    otel?: boolean;\n  };\n  ratio?: Ratios;\n  projectId?: string;\n  guestAccelerators?: gcp.types.input.container.NodePoolNodeConfigGuestAccelerator[];\n  retainOnDelete?: boolean;\n}): { nodePool: NodePool; taints: gcp.types.input.container.NodePoolNodeConfigTaint[] } {\n  const {\n    provider,\n    machineType,\n    minNodeCount = 0,\n    maxNodeCount = 20,\n    locationPolicy = 'ANY',\n    spot = isStaging,\n    poolTargetValue,\n    isPrivate,\n    features = {},\n    nodeLocations,\n    guestAccelerators,\n    retainOnDelete,\n    projectId = getConfigs().projectId,\n  } = args;\n  const { isAService, serviceId } = getConfigs();\n  let name = `${args.name || machineType}-${provider.uuid}`;\n  const { machineFamily, ratio } = getMachineTypeInfo(machineType);\n  let useName = '';\n  if (isAService) {\n    useName = `${serviceId}-${name}`;\n  } else if (spot) {\n    name = `${name}-spot`;\n  }\n\n  const machineRatio = args.ratio || ratio || nodePoolRatios[machineType];\n\n  if (!machineRatio) {\n    throw new Error(`No machine ratio found for ${machineType}`);\n  }\n\n  const { noDD, otel } = features;\n\n  const poolTarget =\n    poolTargetValue || new random.RandomString(name, { length: 8, special: false }).id;\n\n  const labels = {\n    'machine-type': machineType,\n    'machine-family': machineFamily,\n    'machine-ratio': machineRatio,\n    'triplewhale.com/pool-target': poolTarget,\n    projectId,\n    ...args.labels,\n  };\n\n  if (noDD) {\n    labels['triplewhale.com/no-dd'] = 'true';\n  }\n\n  if (otel) {\n    labels['triplewhale.com/otel'] = 'true';\n  }\n\n  const taints: gcp.types.input.container.NodePoolNodeConfigTaint[] = [];\n  if (isPrivate) {\n    taints.push({\n      key: 'triplewhale.com/private-pool',\n      value: poolTarget,\n      effect: 'NO_SCHEDULE',\n    });\n    labels['triplewhale.com/private-pool'] = poolTarget;\n  }\n  if (spot) {\n    taints.push({\n      key: 'cloud.google.com/gke-spot',\n      value: 'true',\n      effect: 'NO_SCHEDULE',\n    });\n  }\n  if (machineFamily !== 'e2' && !isPrivate && !guestAccelerators?.length) {\n    taints.push({\n      key: 'cloud.google.com/machine-family',\n      value: machineFamily,\n      effect: 'NO_SCHEDULE',\n    });\n  }\n\n  const nodePool: NodePool = new gcp.container.NodePool(\n    name,\n    {\n      ...(useName ? { name: useName } : null),\n      location: provider.location,\n      nodeLocations,\n      cluster: provider.cluster_name,\n      project: projectId,\n      nodeConfig: {\n        labels,\n        resourceLabels: {\n          ...createLabels(),\n        },\n        taints,\n        machineType: machineType,\n        oauthScopes: defaultOauthScopes,\n        guestAccelerators,\n        workloadMetadataConfig: {\n          mode: 'GKE_METADATA',\n        },\n        spot,\n      },\n      upgradeSettings: {\n        maxSurge: 10,\n      },\n      initialNodeCount: minNodeCount,\n      autoscaling: {\n        locationPolicy: locationPolicy,\n        totalMaxNodeCount: maxNodeCount || minNodeCount * 2,\n        totalMinNodeCount: minNodeCount,\n      },\n    },\n    {\n      ignoreChanges: ['initialNodeCount'],\n      retainOnDelete,\n      deleteBeforeReplace: Boolean(useName),\n    }\n  );\n  nodePool.taints = taints;\n  nodePool.poolTarget = poolTarget;\n\n  return { nodePool, taints };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  provider: K8sProvider;\n  machineType: string;\n  name?: string;\n  minNodeCount?: number;\n  maxNodeCount?: number;\n  locationPolicy?: 'ANY' | 'BALANCED';\n  spot?: boolean;\n  isPrivate?: boolean;\n  poolTargetValue?: string;\n  nodeLocations?: string[];\n  labels?: Record<string, string>;\n  features?: {\n    noDD?: boolean;\n    otel?: boolean;\n  };\n  ratio?: Ratios;\n  projectId?: string;\n  guestAccelerators?: gcp.types.input.container.NodePoolNodeConfigGuestAccelerator[];\n  retainOnDelete?: boolean;\n}",
            "type": "{\n  provider: K8sProvider;\n  machineType: string;\n  name?: string;\n  minNodeCount?: number;\n  maxNodeCount?: number;\n  locationPolicy?: 'ANY' | 'BALANCED';\n  spot?: boolean;\n  isPrivate?: boolean;\n  poolTargetValue?: string;\n  nodeLocations?: string[];\n  labels?: Record<string, string>;\n  features?: {\n    noDD?: boolean;\n    otel?: boolean;\n  };\n  ratio?: Ratios;\n  projectId?: string;\n  guestAccelerators?: gcp.types.input.container.NodePoolNodeConfigGuestAccelerator[];\n  retainOnDelete?: boolean;\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " getSelectorsForNodePool",
        "text": "\n\nexport function getSelectorsForNodePool(nodePool: NodePool) {\n  const nodeSelector = {\n    'triplewhale.com/pool-target': nodePool.poolTarget,\n  };\n  const tolerations = [];\n  nodePool.taints.forEach((taint) => {\n    tolerations.push({\n      key: taint.key,\n      operator: 'Equal',\n      value: taint.value,\n      effect: 'NoSchedule',\n    });\n  });\n  return { tolerations, nodeSelector };\n}",
        "parameters": [
          {
            "name": "nodePool",
            "text": "nodePool: NodePool",
            "type": "NodePool"
          }
        ]
      },
      {
        "type": "function",
        "name": " getSelectorsForPrivatePoolParty",
        "text": "\n\nexport function getSelectorsForPrivatePoolParty(args: { bouncer?: void; friendlyName: string }) {\n  const id = new random.RandomString(args.friendlyName, { length: 8, special: false }).id;\n  const nodeSelector = {\n    'triplewhale.com/private-pool': id,\n  };\n  const tolerations = [\n    {\n      key: 'triplewhale.com/private-pool',\n      operator: 'Equal',\n      effect: 'NoSchedule',\n      value: id,\n    },\n  ];\n  return { tolerations, nodeSelector };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { bouncer?: void; friendlyName: string }",
            "type": "{ bouncer?: void; friendlyName: string }"
          }
        ]
      },
      {
        "type": "function",
        "name": " getMachineTypeInfo",
        "text": "\n\nexport function getMachineTypeInfo(machineType: string): {\n  machineFamily: string;\n  machineClass: string;\n  memory: string;\n  cpu: string;\n  ratio: Ratios;\n} {\n  let ratio: Ratios | undefined;\n  let [machineFamily, machineClass, cpu, memory] = machineType.split('-');\n  if (machineClass !== 'custom') {\n    if (machineClass === 'highcpu') {\n      ratio = '1-1';\n      memory = cpu;\n    } else if (machineClass === 'standard') {\n      ratio = '1-4';\n      memory = String(Number(memory) * 4);\n    } else if (machineClass === 'highmem') {\n      ratio = '1-8';\n      memory = String(Number(memory) * 8);\n    } else {\n      ratio = '1-1';\n    }\n  }\n  return { machineFamily, machineClass, memory, cpu, ratio };\n}",
        "parameters": [
          {
            "name": "machineType",
            "text": "machineType: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/cluster/operators.ts",
    "exports": [
      {
        "type": "function",
        "name": " knativeServing",
        "text": "\n\nexport function knativeServing(args: BaseArgs): OperatorsResult {\n  const { provider } = args;\n  const servingProvider = getK8sProvider({\n    provider: provider,\n    namespace: 'knative-serving',\n  });\n\n  const { serviceAccount } = createServiceAccount({\n    name: `knative-${provider.uuid}`,\n    addDefault: false,\n    roles: ['roles/artifactregistry.reader'],\n  });\n\n  createK8sServiceAccount({\n    name: 'controller',\n    serviceAccount,\n    provider: servingProvider,\n  });\n\n  const servingCore = new kubernetes.yaml.ConfigFile(\n    `serving-core-${provider.cluster_uuid}`,\n    {\n      file: `${dirname}/yamls/serving-core.yaml`,\n      resourcePrefix: provider.cluster_uuid,\n      transformations: [\n        (o, opts) => {\n          const name =\n            'core-' + (o.metadata.namespace ? o.metadata.namespace + '/' : '') + o.metadata.name;\n          opts.aliases = [{ name: name }];\n        },\n      ],\n    },\n    { provider, dependsOn: provider.dependsOn }\n  );\n\n  const servingHpa = new kubernetes.yaml.ConfigFile(\n    `serving-hpa-${provider.cluster_uuid}`,\n    {\n      file: `${dirname}/yamls/serving-hpa.yaml`,\n      resourcePrefix: provider.cluster_uuid,\n      transformations: [\n        (o, opts) => {\n          const name =\n            'hpa-' + (o.metadata.namespace ? o.metadata.namespace + '/' : '') + o.metadata.name;\n          opts.aliases = [{ name: name }];\n        },\n      ],\n    },\n    { provider, dependsOn: provider.dependsOn }\n  );\n\n  createPrometheusMonitor({\n    release: 'devops',\n    name: 'controller',\n    provider: servingProvider,\n    endpoints: [{ portName: 'metrics' }],\n    labels: { app: 'controller' },\n  });\n\n  createPrometheusMonitor({\n    release: 'devops',\n    name: 'autoscaler',\n    provider: servingProvider,\n    endpoints: [{ portName: 'metrics' }],\n    labels: { app: 'autoscaler' },\n  });\n\n  createPrometheusMonitor({\n    release: 'devops',\n    name: 'activator',\n    provider: servingProvider,\n    endpoints: [{ portName: 'metrics' }],\n    labels: { app: 'activator' },\n  });\n\n  createPrometheusMonitor({\n    release: 'devops',\n    name: 'webhook',\n    provider: servingProvider,\n    endpoints: [{ portName: 'metrics' }],\n    labels: { app: 'webhook' },\n  });\n  return { resources: [servingCore, servingHpa] };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: BaseArgs",
            "type": "BaseArgs"
          }
        ]
      },
      {
        "type": "function",
        "name": " kourier",
        "text": "\n\nexport function kourier(args: BaseArgs & { minReplicas?: number }): OperatorsResult {\n  const { provider, minReplicas = 1 } = args;\n  const kourier = new kubernetes.yaml.ConfigFile(\n    `kourier-${provider.cluster_uuid}`,\n    {\n      file: `${dirname}/yamls/kourier.yaml`,\n      resourcePrefix: provider.cluster_uuid,\n      transformations: [\n        (o, opts) => {\n          const name =\n            'kourier-' + (o.metadata.namespace ? o.metadata.namespace + '/' : '') + o.metadata.name;\n          opts.aliases = [{ name: name }];\n        },\n      ],\n    },\n    { provider, aliases: [{ name: 'kourier-kourier' }], dependsOn: provider.dependsOn }\n  );\n\n  const kourierProvider = getK8sProvider({\n    provider: provider,\n    namespace: 'kourier-system',\n  });\n\n  // createPrometheusMonitor({\n  //   name: 'net-kourier-controller',\n  //   provider: kourierProvider,\n  //   port: 'metrics',\n  //   path: '/stats/prometheus',\n  //   labels: { app: 'net-kourier-controller' },\n  // });\n  // createPrometheusMonitor({\n  //   name: '3scale-kourier-gateway',\n  //   provider: kourierProvider,\n  //   port: 'metrics',\n  //   path: '/stats/prometheus',\n  //   labels: { app: '3scale-kourier-gateway' },\n  // });\n\n  createHorizontalPodAutoScaler({\n    name: '3scale-kourier-gateway',\n    kind: 'Deployment',\n    maxReplicas: 1000,\n    minReplicas: minReplicas,\n    provider: kourierProvider,\n    averageCPUUtilization: 65,\n    scaleDownPolicies: [\n      {\n        type: 'Percent',\n        periodSeconds: 60,\n        value: 5,\n      },\n    ],\n  });\n\n  createK8sServiceBackendConfig({\n    name: 'kourier-lb-internal',\n    provider: kourierProvider,\n    spec: { connectionDraining: { drainingTimeoutSec: 600 } },\n  });\n\n  if (provider.cluster_name === 'knative-cluster') {\n    createK8sService({\n      name: `kourier-internal-pass-through`,\n      selector: { app: '3scale-kourier-gateway' },\n      type: 'LoadBalancer',\n      ingressMode: 'internal',\n      provider: kourierProvider,\n      twDomain: new TWDomain('whale3.io', 'kourier', 'internal'),\n    });\n  }\n  createK8sService({\n    name: `kourier-internal-l4`,\n    selector: { app: '3scale-kourier-gateway' },\n    type: 'LoadBalancer',\n    ingressMode: 'internal',\n    provider: kourierProvider,\n    twDomain: new TWDomain(\n      'whale3.io',\n      `kourier-${provider.cluster_name}-${provider.location}`,\n      'internal'\n    ),\n  });\n  return { resources: [kourier] };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: BaseArgs & { minReplicas?: number }",
            "type": "BaseArgs & { minReplicas?: number }"
          }
        ]
      },
      {
        "type": "function",
        "name": " cudaDriver",
        "text": "\n\nexport function cudaDriver(args: BaseArgs): OperatorsResult {\n  const res = cuda(args.provider);\n  return { resources: [res] };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: BaseArgs",
            "type": "BaseArgs"
          }
        ]
      },
      {
        "type": "function",
        "name": " contour",
        "text": "\n\nexport function contour(args: BaseArgs): OperatorsResult {\n  const { provider } = args;\n\n  const contour = new kubernetes.yaml.ConfigFile(\n    `contour-${provider.cluster_uuid}`,\n    {\n      file: `${dirname}/yamls/contour.yaml`,\n      resourcePrefix: provider.cluster_uuid,\n    },\n    { provider, dependsOn: provider.dependsOn }\n  );\n\n  const newContour = new kubernetes.yaml.ConfigFile(\n    `net-contour-${provider.cluster_uuid}`,\n    {\n      file: `${dirname}/yamls/net-contour.yaml`,\n      resourcePrefix: provider.cluster_uuid,\n    },\n    { provider, dependsOn: provider.dependsOn }\n  );\n  return { resources: [contour, newContour] };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: BaseArgs",
            "type": "BaseArgs"
          }
        ]
      },
      {
        "type": "function",
        "name": " installK8sClusterOperator",
        "text": "\n\nexport function installK8sClusterOperator<C extends keyof typeof k8sClusterOperators>(\n  name: C,\n  args: Parameters<(typeof k8sClusterOperators)[C]>[0] | undefined\n) {\n  if (!clusterOperators[args.provider.cluster_name]) {\n    clusterOperators[args.provider.cluster_name] = {};\n  }\n  const res = k8sClusterOperators[name](args as any);\n  if (res?.resources) clusterOperators[args.provider.cluster_name][name] = res.resources;\n  return res;\n}",
        "parameters": [
          {
            "name": "name",
            "text": "name: C",
            "type": "C"
          },
          {
            "name": "args",
            "text": "args: Parameters<(typeof k8sClusterOperators)[C]>[0] | undefined",
            "type": "Parameters<(typeof k8sClusterOperators)[C]>[0] | undefined"
          }
        ]
      },
      {
        "type": "function",
        "name": " dependOnK8sClusterOperators",
        "text": "\n\nexport function dependOnK8sClusterOperators(\n  provider: K8sProvider,\n  operators: (keyof typeof k8sClusterOperators)[]\n): K8sProvider {\n  const dependsOn: pulumi.Resource[] = [];\n  for (const operator of operators) {\n    const operatorResources = clusterOperators[provider.cluster_name]?.[operator];\n    if (operatorResources) {\n      dependsOn.push(...operatorResources);\n    }\n  }\n  return provider.dependOn(dependsOn);\n}",
        "parameters": [
          {
            "name": "provider",
            "text": "provider: K8sProvider",
            "type": "K8sProvider"
          },
          {
            "name": "operators",
            "text": "operators: (keyof typeof k8sClusterOperators)[]",
            "type": "(keyof typeof k8sClusterOperators)[]"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/cluster/storage.ts",
    "exports": [
      {
        "type": "function",
        "name": " createK8sStorageClasses",
        "text": "\n\nexport function createK8sStorageClasses(args: { provider: K8sProvider }) {\n  new kubernetes.storage.v1.StorageClass(\n    `pd-extreme-${args.provider.uuid}`,\n    {\n      metadata: {\n        name: 'pd-extreme',\n      },\n      provisioner: 'pd.csi.storage.gke.io',\n      reclaimPolicy: 'Delete',\n      volumeBindingMode: 'WaitForFirstConsumer',\n      parameters: {\n        type: 'pd-extreme',\n      },\n      allowVolumeExpansion: true,\n    },\n    {\n      provider: args.provider,\n    }\n  );\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { provider: K8sProvider }",
            "type": "{ provider: K8sProvider }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/cluster/utils.ts",
    "exports": [
      {
        "type": "function",
        "name": " getClusterRoot",
        "text": "export function getClusterRoot() {\n  const dirname = __dirname.replace('/pulumi/module/', '/pulumi/src/');\n  return dirname;\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/cluster/yamls/autoneg.yaml",
    "exports": []
  },
  {
    "file": "@tw/pulumi/k8s/cluster/yamls/cert-manager.yaml",
    "exports": []
  },
  {
    "file": "@tw/pulumi/k8s/cluster/yamls/clickhouse-operator.yaml",
    "exports": []
  },
  {
    "file": "@tw/pulumi/k8s/cluster/yamls/contour.yaml",
    "exports": []
  },
  {
    "file": "@tw/pulumi/k8s/cluster/yamls/eck/crds.yaml",
    "exports": []
  },
  {
    "file": "@tw/pulumi/k8s/cluster/yamls/eck/operator.yaml",
    "exports": []
  },
  {
    "file": "@tw/pulumi/k8s/cluster/yamls/jaeger-operator.yaml",
    "exports": []
  },
  {
    "file": "@tw/pulumi/k8s/cluster/yamls/kafka.yaml",
    "exports": []
  },
  {
    "file": "@tw/pulumi/k8s/cluster/yamls/kourier.yaml",
    "exports": []
  },
  {
    "file": "@tw/pulumi/k8s/cluster/yamls/net-contour.yaml",
    "exports": []
  },
  {
    "file": "@tw/pulumi/k8s/cluster/yamls/provider-gcp-plugin.yaml",
    "exports": []
  },
  {
    "file": "@tw/pulumi/k8s/cluster/yamls/rabbitmq.yaml",
    "exports": []
  },
  {
    "file": "@tw/pulumi/k8s/cluster/yamls/serving-core.yaml",
    "exports": []
  },
  {
    "file": "@tw/pulumi/k8s/cluster/yamls/serving-hpa.yaml",
    "exports": []
  },
  {
    "file": "@tw/pulumi/k8s/createLoadBalancer.ts",
    "exports": [
      {
        "name": " LoadBalancingScheme",
        "text": "\n\nexport type LoadBalancingScheme = 'EXTERNAL' | 'INTERNAL' | 'EXTERNAL_MANAGED' | 'INTERNAL_MANAGED';",
        "type": "'EXTERNAL' | 'INTERNAL' | 'EXTERNAL_MANAGED' | 'INTERNAL_MANAGED'"
      },
      {
        "type": "function",
        "name": " createBackendServiceForK8s",
        "text": "\n\nexport function createBackendServiceForK8s(args: {\n  name: string;\n  loadBalancingScheme?: LoadBalancingScheme;\n  mode?: IngressMode;\n  timeoutSec?: number;\n  logSampleRate?: number;\n  useTcpProbe?: boolean;\n  sessionAffinity?: AffinityType;\n  securityPolicy?: gcp.compute.SecurityPolicy;\n}) {\n  const {\n    name,\n    mode,\n    loadBalancingScheme,\n    timeoutSec = 3600,\n    logSampleRate = 0.3,\n    useTcpProbe = true,\n    sessionAffinity,\n    securityPolicy,\n  } = args;\n  const { location } = getConfigs();\n  const { isApplication, isInternal } = getLBDefaults({\n    loadBalancingScheme,\n    mode,\n    type: 'application',\n  });\n\n  const healthCheck = new gcp.compute.HealthCheck(name, {\n    ...(useTcpProbe\n      ? {\n          tcpHealthCheck: {\n            portSpecification: 'USE_SERVING_PORT',\n          },\n        }\n      : {\n          httpHealthCheck: {\n            portSpecification: 'USE_SERVING_PORT',\n            requestPath: '/ping',\n          },\n        }),\n    healthyThreshold: 1,\n    checkIntervalSec: 1,\n    logConfig: {\n      enable: true,\n    },\n    timeoutSec: 1,\n  });\n  let iap;\n\n  if (mode === 'iap') {\n    const { clientId, clientSecret } = getIapInfo();\n    iap = { oauth2ClientId: clientId, oauth2ClientSecret: clientSecret };\n  }\n\n  const backendArgs: RegionBackendServiceArgs & BackendServiceArgs = {\n    securityPolicy: securityPolicy?.selfLink,\n    healthChecks: healthCheck.selfLink,\n    loadBalancingScheme,\n    timeoutSec,\n    connectionDrainingTimeoutSec: 600,\n    localityLbPolicy: 'ROUND_ROBIN',\n    sessionAffinity,\n    logConfig: {\n      enable: logSampleRate ? true : false,\n      sampleRate: logSampleRate,\n    },\n  };\n\n  if (isInternal) {\n    backendArgs.region = location;\n  }\n  if (!isApplication) {\n    backendArgs.protocol = 'TCP';\n    backendArgs.localityLbPolicy = null;\n  }\n  if (mode === 'iap') {\n    backendArgs.portName = 'http';\n    backendArgs.protocol = 'HTTP';\n    backendArgs.localityLbPolicy = undefined;\n    backendArgs.iap = iap;\n  }\n\n  const backendService = new (\n    isInternal ? gcp.compute.RegionBackendService : gcp.compute.BackendService\n  )(name, backendArgs, { ignoreChanges: ['backends'] });\n\n  const autoNegConfigEntry = createAutoNegConfigEntry({ backendService, isInternal });\n\n  return { backendService, autoNegConfigEntry };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  loadBalancingScheme?: LoadBalancingScheme;\n  mode?: IngressMode;\n  timeoutSec?: number;\n  logSampleRate?: number;\n  useTcpProbe?: boolean;\n  sessionAffinity?: AffinityType;\n  securityPolicy?: gcp.compute.SecurityPolicy;\n}",
            "type": "{\n  name: string;\n  loadBalancingScheme?: LoadBalancingScheme;\n  mode?: IngressMode;\n  timeoutSec?: number;\n  logSampleRate?: number;\n  useTcpProbe?: boolean;\n  sessionAffinity?: AffinityType;\n  securityPolicy?: gcp.compute.SecurityPolicy;\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " createUrlMapForK8s",
        "text": "\n\nexport function createUrlMapForK8s(args: {\n  name: string;\n  mode?: IngressMode;\n  ipv6?: boolean;\n  twDomain: TWDomain;\n  loadBalancingScheme?: LoadBalancingScheme;\n  backendService: RegionBackendService | BackendService;\n  whiteList?: string[];\n  port?: number;\n  pathRules?: gcp.types.input.compute.RegionUrlMapPathMatcherPathRule[];\n  dependsOn?: DependsOn;\n}) {\n  const {\n    name,\n    mode,\n    ipv6,\n    twDomain,\n    loadBalancingScheme,\n    backendService,\n    pathRules = [],\n    whiteList = ['/*'],\n  } = args;\n  const { location } = getConfigs();\n  const { isApplication, isInternal, port } = getLBDefaults({\n    loadBalancingScheme,\n    mode,\n    type: 'application',\n    port: args.port,\n  });\n  const urlMap = isApplication\n    ? new (isInternal ? gcp.compute.RegionUrlMap : gcp.compute.URLMap)(name, {\n        defaultService: backendService.id,\n        hostRules: [{ hosts: ['*'], pathMatcher: 'white-list' }],\n        pathMatchers: [\n          {\n            name: 'white-list',\n            defaultUrlRedirect: {\n              redirectResponseCode: 'FOUND',\n              stripQuery: false,\n              pathRedirect: '/404.html',\n            },\n            pathRules: [\n              ...pathRules,\n              { paths: [...whiteList, '/404.html', '/ping'], service: backendService.id },\n            ],\n          },\n        ],\n        region: location,\n      })\n    : null;\n\n  const sslCertificate = !isInternal\n    ? new gcp.compute.ManagedSslCertificate(`${name}-managed-ssl`, {\n        managed: { domains: [twDomain.fqdn] },\n      })\n    : null;\n\n  const targetHttpProxy = isApplication\n    ? new (isInternal ? gcp.compute.RegionTargetHttpProxy : gcp.compute.TargetHttpsProxy)(\n        `${name}-https-proxy`,\n        {\n          urlMap: urlMap.id,\n          sslCertificates: [sslCertificate?.id],\n          sslPolicy: 'ssl-1-2',\n          region: location,\n        }\n      )\n    : null;\n\n  const httpForwarderIPV4 = new (\n    isInternal ? gcp.compute.ForwardingRule : gcp.compute.GlobalForwardingRule\n  )(\n    `${name}-forward-http-ipv4`,\n    {\n      portRange: String(port),\n      target: targetHttpProxy?.id,\n      loadBalancingScheme,\n      ...(isInternal\n        ? {\n            network: 'app',\n            region: location,\n            subnetwork: 'app-dual',\n            allowGlobalAccess: true,\n          }\n        : {\n            ipVersion: 'IPV4',\n          }),\n      ...(!isApplication\n        ? {\n            backendService: backendService.id,\n            ipProtocol: 'TCP',\n            ports: [String(port)],\n            portRange: null,\n          }\n        : null),\n    },\n    { replaceOnChanges: ['allowGlobalAccess'] }\n  );\n\n  const httpForwarderIPV6 = ipv6\n    ? new gcp.compute.GlobalForwardingRule(\n        `${name}-forward-http-ipv6`,\n        {\n          portRange: '443',\n          target: targetHttpProxy.id,\n          ipVersion: 'IPV6',\n          loadBalancingScheme,\n        },\n        { aliases: [{ name: `${name}-forward-http-ipv6`.replace(`-${mode}`, '') }] }\n      )\n    : null;\n\n  const dnsRecord = addDnsRecord({\n    name: twDomain.fullSubDomain,\n    domainName: twDomain.domain,\n    type: 'A',\n    value: httpForwarderIPV4.ipAddress,\n    proxied: mode === 'iap' && false,\n  });\n\n  if (ipv6) {\n    addDnsRecord({\n      name: twDomain.fullSubDomain,\n      domainName: twDomain.domain,\n      type: 'AAAA',\n      value: httpForwarderIPV6.ipAddress,\n      proxied: false,\n    });\n  }\n\n  if (mode === 'open') {\n    setOutput('openBackendService', backendService.id);\n  }\n  return { httpForwarderIPV4, httpForwarderIPV6, dnsRecord };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  mode?: IngressMode;\n  ipv6?: boolean;\n  twDomain: TWDomain;\n  loadBalancingScheme?: LoadBalancingScheme;\n  backendService: RegionBackendService | BackendService;\n  whiteList?: string[];\n  port?: number;\n  pathRules?: gcp.types.input.compute.RegionUrlMapPathMatcherPathRule[];\n  dependsOn?: DependsOn;\n}",
            "type": "{\n  name: string;\n  mode?: IngressMode;\n  ipv6?: boolean;\n  twDomain: TWDomain;\n  loadBalancingScheme?: LoadBalancingScheme;\n  backendService: RegionBackendService | BackendService;\n  whiteList?: string[];\n  port?: number;\n  pathRules?: gcp.types.input.compute.RegionUrlMapPathMatcherPathRule[];\n  dependsOn?: DependsOn;\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " createAutoNegConfigEntry",
        "text": "\n\nexport function createAutoNegConfigEntry(args: {\n  backendService: RegionBackendService | BackendService;\n  isInternal: boolean;\n}) {\n  const { backendService, isInternal } = args;\n  const { location } = getConfigs();\n  const autoNegConfigEntry: AutoNegConfigEntry = {\n    name: backendService.name,\n    max_rate_per_endpoint: 100,\n  };\n\n  if (isInternal) {\n    autoNegConfigEntry.region = location;\n  }\n  return autoNegConfigEntry;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  backendService: RegionBackendService | BackendService;\n  isInternal: boolean;\n}",
            "type": "{\n  backendService: RegionBackendService | BackendService;\n  isInternal: boolean;\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " createLoadBalancerForK8s",
        "text": "\n\nexport function createLoadBalancerForK8s(args: {\n  name: string;\n  mode?: IngressMode;\n  ipv6?: boolean;\n  twDomain: TWDomain;\n  loadBalancingScheme?: LoadBalancingScheme;\n  // note: standalone negs do not support pass through lbs: https://cloud.google.com/kubernetes-engine/docs/how-to/standalone-neg\n  // so this should not be used for now\n  type?: LoadBalancerType;\n  timeoutSec?: number;\n  logSampleRate?: number;\n  whiteList?: string[];\n  useTcpProbe?: boolean;\n  port?: number;\n  securityPolicy?: gcp.compute.SecurityPolicy;\n}) {\n  const {\n    name,\n    mode,\n    ipv6,\n    twDomain,\n    type = 'application',\n    timeoutSec = 3600,\n    logSampleRate = 0.3,\n    whiteList = ['/*'],\n    useTcpProbe = true,\n    securityPolicy,\n  } = args;\n\n  const { loadBalancingScheme } = getLBDefaults({\n    loadBalancingScheme: args.loadBalancingScheme,\n    mode,\n    type,\n  });\n  const fullName = `${name}-${mode}`;\n\n  const { backendService, autoNegConfigEntry } = createBackendServiceForK8s({\n    name: fullName,\n    loadBalancingScheme,\n    timeoutSec,\n    mode,\n    logSampleRate,\n    useTcpProbe,\n    securityPolicy,\n  });\n\n  const { httpForwarderIPV4, httpForwarderIPV6, dnsRecord } = createUrlMapForK8s({\n    name: fullName,\n    mode,\n    ipv6,\n    twDomain,\n    loadBalancingScheme,\n    backendService,\n    whiteList,\n  });\n\n  return { httpForwarderIPV4, httpForwarderIPV6, backendService, dnsRecord, autoNegConfigEntry };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  mode?: IngressMode;\n  ipv6?: boolean;\n  twDomain: TWDomain;\n  loadBalancingScheme?: LoadBalancingScheme;\n  // note: standalone negs do not support pass through lbs: https://cloud.google.com/kubernetes-engine/docs/how-to/standalone-neg\n  // so this should not be used for now\n  type?: LoadBalancerType;\n  timeoutSec?: number;\n  logSampleRate?: number;\n  whiteList?: string[];\n  useTcpProbe?: boolean;\n  port?: number;\n  securityPolicy?: gcp.compute.SecurityPolicy;\n}",
            "type": "{\n  name: string;\n  mode?: IngressMode;\n  ipv6?: boolean;\n  twDomain: TWDomain;\n  loadBalancingScheme?: LoadBalancingScheme;\n  // note: standalone negs do not support pass through lbs: https://cloud.google.com/kubernetes-engine/docs/how-to/standalone-neg\n  // so this should not be used for now\n  type?: LoadBalancerType;\n  timeoutSec?: number;\n  logSampleRate?: number;\n  whiteList?: string[];\n  useTcpProbe?: boolean;\n  port?: number;\n  securityPolicy?: gcp.compute.SecurityPolicy;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/deployment.ts",
    "exports": [
      {
        "name": " CreateK8sDeploymentArgs",
        "text": "\n\nexport type CreateK8sDeploymentArgs = {\n  name: string;\n  podArgs: Omit<PodTemplateArgs, 'envs'>;\n  labels?: Record<string, string>;\n  annotations?: Record<string, pulumi.Input<string>>;\n  envs?: Record<string, any>;\n  minReplicas?: number;\n  maxReplicas?: number;\n  secretVersion?: gcp.secretmanager.SecretVersion;\n  rollingUpdate?: kubernetes.types.input.apps.v1.RollingUpdateDeployment;\n  averageCPUUtilization?: number;\n  averageMemoryUtilization?: number;\n  scaleUpPolicies?: kubernetes.types.input.autoscaling.v2.HPAScalingPolicy[];\n  scaleDownPolicies?: kubernetes.types.input.autoscaling.v2.HPAScalingPolicy[];\n  provider?: K8sProvider;\n  requestsPerSecond?: number;\n  tolerateSpotVM?: boolean;\n  datadogConfig?: TracerOptions | 'false';\n  kedaTriggers?: KedaTrigger[];\n  useKeda?: boolean;\n};",
        "type": "{\n  name: string;\n  podArgs: Omit<PodTemplateArgs, 'envs'>;\n  labels?: Record<string, string>;\n  annotations?: Record<string, pulumi.Input<string>>;\n  envs?: Record<string, any>;\n  minReplicas?: number;\n  maxReplicas?: number;\n  secretVersion?: gcp.secretmanager.SecretVersion;\n  rollingUpdate?: kubernetes.types.input.apps.v1.RollingUpdateDeployment;\n  averageCPUUtilization?: number;\n  averageMemoryUtilization?: number;\n  scaleUpPolicies?: kubernetes.types.input.autoscaling.v2.HPAScalingPolicy[];\n  scaleDownPolicies?: kubernetes.types.input.autoscaling.v2.HPAScalingPolicy[];\n  provider?: K8sProvider;\n  requestsPerSecond?: number;\n  tolerateSpotVM?: boolean;\n  datadogConfig?: TracerOptions | 'false';\n  kedaTriggers?: KedaTrigger[];\n  useKeda?: boolean;\n}"
      },
      {
        "type": "function",
        "name": " createK8sDeployment",
        "text": "\n\n// memory\n// https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/\nexport function createK8sDeployment(args: CreateK8sDeploymentArgs) {\n  const {\n    name,\n    podArgs,\n    envs,\n    minReplicas = 1,\n    maxReplicas = 80,\n    secretVersion,\n    rollingUpdate = {},\n    provider = getK8sProvider(),\n    datadogConfig,\n    kedaTriggers = [],\n    labels,\n  } = args || {};\n  let annotations = args.annotations || {};\n  const deploymentEnvs = getK8sDeploymentEnvs({\n    envs,\n    provider,\n    datadogConfig,\n    secretVersion,\n    deploymentName: name,\n  });\n\n  deploymentEnvs.push(...[{ name: 'PORT', value: '8080' }]);\n  deploymentEnvs.push({\n    name: 'gracefulTerminationTimeout',\n    value: String((podArgs.terminationGracePeriodSeconds || 0) * 1000),\n  });\n  const podTemplate = createPodTemplate(\n    deepMerge(\n      {\n        envs: deploymentEnvs,\n        scalesOnMemory: Boolean(args.averageMemoryUtilization),\n      },\n      podArgs\n    )\n  );\n  // @ts-ignore\n  podTemplate.metadata.labels = {\n    'triplewhale.com/deployment': name,\n    'app.kubernetes.io/name': name,\n    // @ts-ignore\n    ...podTemplate.metadata.labels,\n  };\n\n  if (!objectBool(annotations)) annotations = undefined;\n\n  const k8sDeployment = new kubernetes.apps.v1.Deployment(\n    k8sUniqueName(name, provider),\n    {\n      metadata: {\n        labels: {\n          ...createLabels(),\n          ...labels,\n        },\n        annotations,\n        name: name,\n      },\n      spec: {\n        strategy: {\n          rollingUpdate: {\n            maxSurge: rollingUpdate.maxSurge || '100%',\n            maxUnavailable: rollingUpdate.maxUnavailable || '0%',\n          },\n          type: 'RollingUpdate',\n        },\n        selector: {\n          matchLabels: {\n            'triplewhale.com/deployment': name,\n          },\n        },\n        template: podTemplate,\n      },\n    },\n    { provider }\n  );\n\n  if (maxReplicas > minReplicas) {\n    if (kedaTriggers.length || args.useKeda) {\n      createKedaScaler({\n        averageCPUUtilization: args.averageCPUUtilization,\n        name,\n        provider: provider.dependOn(k8sDeployment),\n        triggers: kedaTriggers,\n        maxReplicas,\n        minReplicas,\n      });\n    } else {\n      createHorizontalPodAutoScaler({\n        name,\n        kind: 'Deployment',\n        maxReplicas,\n        minReplicas,\n        provider: provider.dependOn(k8sDeployment),\n        averageCPUUtilization: args.averageCPUUtilization,\n        averageMemoryUtilization: args.averageMemoryUtilization,\n        scaleUpPolicies: args.scaleUpPolicies,\n        scaleDownPolicies: args.scaleDownPolicies,\n      });\n    }\n  }\n\n  return { k8sDeployment };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: CreateK8sDeploymentArgs",
            "type": "CreateK8sDeploymentArgs"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/discovery.ts",
    "exports": [
      {
        "type": "function",
        "name": " k8sDiscovery",
        "text": "\n\nexport function k8sDiscovery(args: {\n  name: string;\n  deployment: ServiceEntryDeployment;\n  ingressMode?: IngressMode;\n  ingressType?: IngressType;\n  provider: K8sProvider;\n  domain: TWDomain;\n  loadBalancerConfig?: LoadBalancerConfig;\n  useTcpProbe?: boolean;\n  selector?: Record<string, string>;\n}): {\n  k8sIngress?: kubernetes.networking.v1.Ingress;\n  k8sService?: kubernetes.core.v1.Service;\n  autoNegConfigEntry?: AutoNegConfigEntry;\n} {\n  const {\n    name,\n    deployment,\n    ingressMode,\n    provider,\n    domain,\n    loadBalancerConfig = {},\n    useTcpProbe,\n    selector = { 'triplewhale.com/deployment': name },\n  } = args;\n\n  let subDomain = args.domain.subDomain;\n\n  const { serviceId } = getConfigs();\n  if (!ingressMode) return {};\n  let domainGroup;\n\n  if (ingressMode === 'internal') {\n    domainGroup = 'srv';\n  } else if (ingressMode === 'cluster-local') {\n    domainGroup = 'cluster-local';\n    subDomain += `.${provider.location}.${provider.cluster_name}.${provider.namespace}`;\n  } else if (ingressMode === 'iap') {\n    domainGroup = 'iap';\n  } else {\n    domainGroup = 'api';\n  }\n\n  const twDomain = createTWDomain({ twDomain: domain, domainGroup });\n  let ingressType = args.ingressType;\n  if (!ingressType) {\n    ingressType = ingressMode === 'internal' ? 'service' : 'load-balancer';\n  }\n\n  if (ingressType === 'load-balancer') {\n    const fullName = `${name.startsWith(serviceId) ? '' : serviceId + '-'}${name}`;\n    const loadBalancerRes = createLoadBalancerForK8s({\n      name: fullName,\n      mode: ingressMode,\n      loadBalancingScheme: loadBalancerConfig.loadBalancingScheme,\n      twDomain,\n      logSampleRate: loadBalancerConfig.logSampleRate,\n      whiteList: loadBalancerConfig.whiteList,\n      ipv6: loadBalancerConfig.ipv6,\n      securityPolicy: loadBalancerConfig.securityPolicy,\n      useTcpProbe,\n    });\n\n    deployment.endpoints[ingressMode] = {\n      type: ingressMode,\n      url: dnsUrl(loadBalancerRes.dnsRecord, ingressMode !== 'internal') as any,\n    };\n\n    return { autoNegConfigEntry: loadBalancerRes.autoNegConfigEntry };\n  }\n\n  const fullName = `${name}-${ingressMode}`;\n\n  if (ingressType === 'service') {\n    const type = ingressMode === 'cluster-local' ? 'ClusterIP' : 'LoadBalancer';\n    const { k8sService } = createK8sService({\n      name: fullName,\n      type,\n      ingressMode,\n      annotations: {\n        [HOST]: twDomain.fqdn,\n      },\n      selector,\n      provider,\n    });\n    deployment.endpoints[ingressMode] = {\n      type: ingressMode,\n      url: getBaseUrl(k8sService) as any,\n    };\n\n    addDnsRecord({\n      name: twDomain.fullSubDomain,\n      domainName: twDomain.domain,\n      type: 'A',\n      value:\n        type === 'LoadBalancer'\n          ? k8sService.status.loadBalancer.ingress[0].ip\n          : k8sService.spec.clusterIP,\n    });\n    return { k8sService };\n  }\n\n  if (ingressType === 'ingress') {\n    let { k8sIngress } = createK8sIngress({\n      provider,\n      name: fullName,\n      twDomain,\n      ingressMode,\n      selector,\n    });\n    deployment.endpoints[ingressMode] = {\n      type: ingressMode,\n      url: getBaseUrl(k8sIngress) as any,\n    };\n    return { k8sIngress };\n  }\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  deployment: ServiceEntryDeployment;\n  ingressMode?: IngressMode;\n  ingressType?: IngressType;\n  provider: K8sProvider;\n  domain: TWDomain;\n  loadBalancerConfig?: LoadBalancerConfig;\n  useTcpProbe?: boolean;\n  selector?: Record<string, string>;\n}",
            "type": "{\n  name: string;\n  deployment: ServiceEntryDeployment;\n  ingressMode?: IngressMode;\n  ingressType?: IngressType;\n  provider: K8sProvider;\n  domain: TWDomain;\n  loadBalancerConfig?: LoadBalancerConfig;\n  useTcpProbe?: boolean;\n  selector?: Record<string, string>;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/gke/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/k8s/gke/networking.ts",
    "exports": [
      {
        "name": " AffinityType",
        "text": "\n\nexport type AffinityType = 'CLIENT_IP' | 'GENERATED_COOKIE';",
        "type": "'CLIENT_IP' | 'GENERATED_COOKIE'"
      },
      {
        "name": " BackendConfigArgs",
        "text": "\n\nexport type BackendConfigArgs = {\n  cdn?: {\n    bypassCacheOnRequestHeaders?: {\n      headerName: string;\n    }[];\n    cacheMode?: string;\n    cachePolicy?: {\n      includeHost?: boolean;\n      includeProtocol?: boolean;\n      includeQueryString?: boolean;\n      queryStringBlacklist?: string[];\n      queryStringWhitelist?: string[];\n    };\n    clientTtl?: number;\n    defaultTtl?: number;\n    enabled: boolean;\n    maxTtl?: number;\n    negativeCaching?: boolean;\n    negativeCachingPolicy?: {\n      code: number;\n      ttl: number;\n    }[];\n    requestCoalescing?: boolean;\n    serveWhileStale?: number;\n    signedUrlCacheMaxAgeSec?: number;\n    signedUrlKeys?: {\n      keyName: string;\n      keyValue: string;\n      secretName: string;\n    }[];\n  };\n  connectionDraining?: {\n    drainingTimeoutSec?: number;\n  };\n  customRequestHeaders?: {\n    headers?: string[];\n  };\n  customResponseHeaders?: {\n    headers?: string[];\n  };\n  healthCheck?: {\n    checkIntervalSec?: number;\n    healthyThreshold?: number;\n    port?: pulumi.Input<string | number>;\n    requestPath?: string;\n    timeoutSec?: number;\n    type?: string;\n    unhealthyThreshold?: number;\n  };\n  iap?: {\n    enabled: boolean;\n    oauthclientCredentials: {\n      clientID?: string;\n      clientSecret?: string;\n      secretName: string;\n    };\n  };\n  logging?: {\n    enable?: boolean;\n    sampleRate?: number;\n  };\n  securityPolicy?: {\n    name: string;\n  };\n  sessionAffinity?: {\n    affinityCookieTtlSec?: number;\n    affinityType?: AffinityType;\n  };\n  timeoutSec?: number;\n};",
        "type": "{\n  cdn?: {\n    bypassCacheOnRequestHeaders?: {\n      headerName: string;\n    }[];\n    cacheMode?: string;\n    cachePolicy?: {\n      includeHost?: boolean;\n      includeProtocol?: boolean;\n      includeQueryString?: boolean;\n      queryStringBlacklist?: string[];\n      queryStringWhitelist?: string[];\n    };\n    clientTtl?: number;\n    defaultTtl?: number;\n    enabled: boolean;\n    maxTtl?: number;\n    negativeCaching?: boolean;\n    negativeCachingPolicy?: {\n      code: number;\n      ttl: number;\n    }[];\n    requestCoalescing?: boolean;\n    serveWhileStale?: number;\n    signedUrlCacheMaxAgeSec?: number;\n    signedUrlKeys?: {\n      keyName: string;\n      keyValue: string;\n      secretName: string;\n    }[];\n  };\n  connectionDraining?: {\n    drainingTimeoutSec?: number;\n  };\n  customRequestHeaders?: {\n    headers?: string[];\n  };\n  customResponseHeaders?: {\n    headers?: string[];\n  };\n  healthCheck?: {\n    checkIntervalSec?: number;\n    healthyThreshold?: number;\n    port?: pulumi.Input<string | number>;\n    requestPath?: string;\n    timeoutSec?: number;\n    type?: string;\n    unhealthyThreshold?: number;\n  };\n  iap?: {\n    enabled: boolean;\n    oauthclientCredentials: {\n      clientID?: string;\n      clientSecret?: string;\n      secretName: string;\n    };\n  };\n  logging?: {\n    enable?: boolean;\n    sampleRate?: number;\n  };\n  securityPolicy?: {\n    name: string;\n  };\n  sessionAffinity?: {\n    affinityCookieTtlSec?: number;\n    affinityType?: AffinityType;\n  };\n  timeoutSec?: number;\n}"
      },
      {
        "type": "function",
        "name": " createK8sServiceBackendConfig",
        "text": "\n\nexport function createK8sServiceBackendConfig(args: {\n  name: string;\n  spec: BackendConfigArgs;\n  provider: K8sProvider;\n}) {\n  const { name, spec, provider } = args;\n  const backendConfig = new kubernetes.apiextensions.CustomResource(\n    k8sUniqueName(name, provider),\n    {\n      apiVersion: 'cloud.google.com/v1',\n      kind: 'BackendConfig',\n      metadata: {\n        name,\n      },\n      spec,\n    },\n    { provider, aliases: [{ name }] }\n  );\n  return backendConfig;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  spec: BackendConfigArgs;\n  provider: K8sProvider;\n}",
            "type": "{\n  name: string;\n  spec: BackendConfigArgs;\n  provider: K8sProvider;\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " createK8sIngressFrontendConfig",
        "text": "\n\nexport function createK8sIngressFrontendConfig(args: {\n  name: string;\n  spec: any;\n  provider: kubernetes.Provider;\n}) {\n  const { name, spec, provider } = args;\n  const frontendConfig = new kubernetes.apiextensions.CustomResource(\n    name,\n    {\n      apiVersion: 'networking.gke.io/v1beta1',\n      kind: 'FrontendConfig',\n      metadata: {\n        name,\n      },\n      spec,\n    },\n    { provider: provider }\n  );\n  return frontendConfig;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  spec: any;\n  provider: kubernetes.Provider;\n}",
            "type": "{\n  name: string;\n  spec: any;\n  provider: kubernetes.Provider;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/helm.ts",
    "exports": [
      {
        "type": "function",
        "name": " createHelmRelease",
        "text": "\n\nexport function createHelmRelease(args: {\n  name: string;\n  provider: K8sProvider;\n  releaseArgs: kubernetes.helm.v3.ReleaseArgs;\n}) {\n  const { name, provider, releaseArgs } = args;\n  if (!releaseArgs.name) {\n    releaseArgs.name = name;\n  }\n  if (releaseArgs.createNamespace) {\n    _k8sNamespaces[`${provider.namespace}-${provider.cluster_uuid}`] = true;\n  }\n  return new kubernetes.helm.v3.Release(name, releaseArgs, {\n    provider,\n    ignoreChanges: ['checksum', 'version'],\n    dependsOn: provider.dependsOn,\n    deleteBeforeReplace: true,\n  });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  provider: K8sProvider;\n  releaseArgs: kubernetes.helm.v3.ReleaseArgs;\n}",
            "type": "{\n  name: string;\n  provider: K8sProvider;\n  releaseArgs: kubernetes.helm.v3.ReleaseArgs;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/helper.ts",
    "exports": [
      {
        "name": " DeployToK8sArgs",
        "text": "\n\nexport type DeployToK8sArgs = {\n  name?: string;\n  serviceAccount?: GCPServiceAccount;\n  createK8sDeploymentArgs?: Partial<CreateK8sDeploymentArgs>;\n  secretVersion?: gcp.secretmanager.SecretVersion;\n  providers?: K8sProvider[];\n  domain?: TWDomain;\n  ingresses?: IngressesConfig[];\n  useTcpProbe?: boolean;\n  ports?: kubernetes.types.input.core.v1.ContainerPort[];\n};",
        "type": "{\n  name?: string;\n  serviceAccount?: GCPServiceAccount;\n  createK8sDeploymentArgs?: Partial<CreateK8sDeploymentArgs>;\n  secretVersion?: gcp.secretmanager.SecretVersion;\n  providers?: K8sProvider[];\n  domain?: TWDomain;\n  ingresses?: IngressesConfig[];\n  useTcpProbe?: boolean;\n  ports?: kubernetes.types.input.core.v1.ContainerPort[];\n}"
      },
      {
        "type": "function",
        "name": " deployToK8s",
        "text": "\n\nexport function deployToK8s(args: DeployToK8sArgs): {\n  k8sDeployment?: kubernetes.apps.v1.Deployment;\n  deployment: ServiceEntryDeployment;\n  ingressesResult: ReturnType<typeof k8sDiscovery>[];\n} {\n  const { serviceId } = getConfigs();\n  const {\n    createK8sDeploymentArgs,\n    ingresses = [{ ingressMode: 'internal', ingressType: 'service' }],\n    name = serviceId,\n    serviceAccount,\n    secretVersion,\n    providers = [getK8sProvider()],\n    useTcpProbe = false,\n    ports = [{ containerPort: 8080 }],\n  } = args;\n  monitoringState.k8s.enabled = true;\n  if (ports?.length) {\n    monitoringState.apmHttp.enabled = true;\n  }\n\n  const deployment: ServiceEntryDeployment = {\n    name: name,\n    endpoints: {},\n  };\n\n  let k8sDeployment = null;\n  const isMain = name == serviceId;\n  const sub = isMain ? serviceId : `${name}.${serviceId}`;\n  const domain = args.domain || new TWDomain(defaultDomain, sub, 'srv');\n\n  for (const provider of providers) {\n    createK8sNamespace({ provider });\n\n    const args: CreateK8sDeploymentArgs = {\n      name,\n      provider,\n      ...createK8sDeploymentArgs,\n      podArgs: deepMerge(\n        {\n          terminationGracePeriodSeconds: 60,\n          useTcpProbe,\n          ports,\n        },\n        createK8sDeploymentArgs?.podArgs\n      ),\n    };\n\n    if (serviceAccount !== null) {\n      const k8sServiceAccount = createK8sServiceAccount({\n        serviceAccount,\n        provider,\n      }).k8sServiceAccount;\n      if (k8sServiceAccount) {\n        args.podArgs.k8sServiceAccountName = k8sServiceAccount.metadata.name;\n      }\n    }\n\n    if (secretVersion) {\n      const k8sSecret = createK8sSecret({ gcpSecretVersion: secretVersion, provider }).k8sSecret;\n      args.podArgs.k8sSecret = k8sSecret;\n    }\n\n    k8sDeployment = createK8sDeployment(args).k8sDeployment;\n\n    if (isProduction && !createK8sDeploymentArgs?.podArgs?.allowSpot) {\n      createPdb({\n        name,\n        provider,\n        labels: {\n          'triplewhale.com/deployment': name,\n        },\n        minAvailable: '90%',\n      });\n    }\n  }\n\n  const autoNegConfigEntries: AutoNegConfigEntry[] = [];\n  const ingressesResult: ReturnType<typeof k8sDiscovery>[] = [];\n  if (!(ports && !ports.length)) {\n    for (const ingress of ingresses || []) {\n      const { ingressMode, ingressType, loadBalancerConfig } = ingress;\n      const res = k8sDiscovery({\n        name,\n        deployment,\n        ingressMode,\n        ingressType,\n        provider: providers[0],\n        domain,\n        loadBalancerConfig,\n        useTcpProbe,\n      });\n      ingressesResult.push(res);\n      const { autoNegConfigEntry } = res;\n      if (autoNegConfigEntry) {\n        autoNegConfigEntries.push(autoNegConfigEntry);\n      }\n    }\n\n    if (autoNegConfigEntries.length) {\n      for (const provider of providers) {\n        createK8sService({\n          name,\n          autoNeg: {\n            backend_services: { '80': autoNegConfigEntries },\n          },\n          provider,\n        });\n      }\n    }\n\n    if (!deployment.endpoints['authenticated']) {\n      deployment.endpoints['authenticated'] = {\n        type: 'authenticated',\n        audience: serviceId,\n        url: createAuthProxyUrl(domain.subDomain || serviceId) as any,\n      };\n    }\n\n    // deployment.endpoints['cluster-local'] = {\n    //   type: 'cluster-local',\n    //   url: 'http://' + createClusterLocalDnsName(name),\n    //   cluster: provider.cluster_urn,\n    // };\n    addServiceEntryDeployment({ deployment, type: 'k8s' });\n  }\n\n  return { k8sDeployment, deployment, ingressesResult };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: DeployToK8sArgs",
            "type": "DeployToK8sArgs"
          }
        ]
      },
      {
        "type": "function",
        "name": " deployToKnative",
        "text": "\n\nexport function deployToKnative(args: DeployToKnativeArgs) {\n  const { serviceId } = getConfigs();\n  const { ingressMode, name = serviceId, createKnativeServingArgs = {}, serviceAccount } = args;\n  const provider = getKnativeProvider();\n  monitoringState.k8s.enabled = true;\n  monitoringState.apmHttp.enabled = true;\n  createK8sNamespace({ provider: provider });\n\n  const k8sServiceAccount = createK8sServiceAccount({\n    serviceAccount,\n    provider,\n  }).k8sServiceAccount;\n\n  const deployment: ServiceEntryDeployment = {\n    name: name,\n    endpoints: {},\n  };\n\n  const isMain = name == serviceId;\n  const sub = isMain ? serviceId : `${name}.${serviceId}`;\n  const domain = args.domain || new TWDomain(defaultDomain, sub, 'srv');\n  const { knativeServing } = createKnativeServing(\n    {\n      name,\n      ...createKnativeServingArgs,\n      podArgs: {\n        k8sServiceAccountName: k8sServiceAccount.metadata.name,\n        ...createKnativeServingArgs.podArgs,\n      },\n    },\n    domain\n  );\n\n  if (isProduction) {\n    createPdb({\n      name,\n      provider,\n      labels: {\n        'triplewhale.com/deployment': name,\n      },\n      minAvailable: '90%',\n    });\n  }\n\n  const { dnsRecord: internalDnsRecord } = createKnativeDomainMapping({\n    mode: 'internal',\n    twDomain: domain,\n    provider,\n  });\n  deployment.endpoints['internal'] = {\n    type: 'internal',\n    url: dnsUrl(internalDnsRecord) as any,\n    cluster: provider.cluster_urn,\n  };\n\n  if (ingressMode === 'open') {\n    const twDomain = createTWDomain({ twDomain: domain, domainGroup: 'api' });\n    const { dnsRecord } = createKnativeDomainMapping({\n      mode: ingressMode,\n      twDomain,\n      provider,\n    });\n    deployment.endpoints['open'] = { type: 'open', url: dnsUrl(dnsRecord) as any };\n  }\n  deployment.endpoints['authenticated'] = {\n    type: 'authenticated',\n    audience: serviceId,\n    url: createAuthProxyUrl(domain.subDomain) as any,\n  };\n  // deployment.endpoints['cluster-local'] = {\n  //   type: 'cluster-local',\n  //   url: 'http://' + createClusterLocalDnsName(name),\n  //   cluster: provider.cluster_urn,\n  // };\n  addServiceEntryDeployment({ deployment, type: 'k8s' });\n  return { deployment, knativeServing };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: DeployToKnativeArgs",
            "type": "DeployToKnativeArgs"
          }
        ]
      },
      {
        "type": "function",
        "name": " createUfDeployment",
        "text": "\n\nexport function createUfDeployment(args: DeployToKnativeArgs) {\n  deployToKnative({\n    name: 'uf',\n    serviceAccount: args.serviceAccount,\n    createKnativeServingArgs: {\n      timeoutSeconds: 300,\n      maxReplicas: 100,\n      minReplicas: 1,\n      podArgs: {\n        memoryRequest: '1Gi',\n        CPURequest: '500m',\n        nodeSelector: {\n          'cloud.google.com/machine-family': 'c2',\n        },\n      },\n      target: 6,\n      ...args.createKnativeServingArgs,\n    },\n  });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: DeployToKnativeArgs",
            "type": "DeployToKnativeArgs"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/iap.ts",
    "exports": [
      {
        "type": "function",
        "name": " createIapConfig",
        "text": "\n\nexport function createIapConfig(args?: { provider?: K8sProvider }) {\n  const { provider = getK8sProvider() } = args || {};\n  const key = `iap-${provider.uuid}`;\n  if (iapConfigs[key]) return iapConfigs[key];\n  const { clientId, clientSecret } = getIapInfo();\n  const iapConfig = new kubernetes.core.v1.Secret(\n    key,\n    {\n      metadata: {\n        name: 'iap-config',\n      },\n      stringData: {\n        client_id: clientId,\n        client_secret: clientSecret,\n      },\n    },\n    { provider }\n  );\n  iapConfigs[key] = iapConfig;\n  return iapConfig;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args?: { provider?: K8sProvider }",
            "type": "{ provider?: K8sProvider }"
          }
        ]
      },
      {
        "type": "function",
        "name": " getIapInfo",
        "text": "\n\nexport function getIapInfo() {\n  return {\n    clientId: iapClientId,\n    clientSecret: getSecretValue('iap-client-secret'),\n  };\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/k8s/ingress.ts",
    "exports": [
      {
        "type": "function",
        "name": " createK8sIngress",
        "text": "\n\nexport function createK8sIngress(args: {\n  provider: K8sProvider;\n  name: string;\n  twDomain: TWDomain;\n  ingressMode?: IngressMode;\n  selector?: Record<string, string>;\n  port?: number;\n  targetPort?: number;\n  healthCheckPath?: string;\n  sessionAffinity?: AffinityType;\n  dependsOn?: DependsOn;\n  rules?: kubernetes.types.input.networking.v1.IngressRule[];\n}) {\n  const {\n    provider,\n    name,\n    ingressMode = 'internal',\n    twDomain,\n    selector = { 'triplewhale.com/deployment': name },\n    port = 80,\n    targetPort = 8080,\n    healthCheckPath = '/ping',\n    sessionAffinity,\n    dependsOn,\n    rules,\n  } = args;\n  const labels = {};\n\n  let ingressName = name;\n  if (ingressMode !== 'internal') {\n    ingressName += '-' + ingressMode;\n  }\n\n  const backendConfigArgs: BackendConfigArgs = {\n    healthCheck: {\n      checkIntervalSec: 1,\n      timeoutSec: 1,\n      healthyThreshold: 1,\n      unhealthyThreshold: 1,\n      type: 'HTTP',\n      requestPath: healthCheckPath,\n      port: targetPort,\n    },\n    timeoutSec: 3600,\n  };\n\n  if (sessionAffinity) {\n    backendConfigArgs.sessionAffinity = {\n      affinityCookieTtlSec: 86400,\n      affinityType: sessionAffinity,\n    };\n  }\n\n  if (ingressMode === 'iap') {\n    backendConfigArgs.iap = {\n      enabled: true,\n      oauthclientCredentials: {\n        secretName: 'iap-config',\n      },\n    };\n  }\n\n  const backendConfig = createK8sServiceBackendConfig({\n    name: `${ingressName}-backend-config`,\n    spec: backendConfigArgs,\n    provider,\n  });\n\n  const { k8sService } = createK8sService({\n    ingressMode,\n    name: ingressName,\n    provider: provider,\n    selector,\n    ports: [\n      {\n        name: 'http-web',\n        port,\n        targetPort,\n      },\n    ],\n    dependsOn,\n    backendConfig,\n  });\n\n  const host = twDomain.fqdn;\n\n  const annotations = {\n    [HOST]: host,\n  };\n\n  if (['open', 'iap'].includes(ingressMode)) {\n    const frontendConfig = createK8sIngressFrontendConfig({\n      name: `${ingressName}-ingress-frontend-config`,\n      spec: {\n        redirectToHttps: {\n          enabled: ingressMode === 'open',\n        },\n      },\n      provider,\n    });\n\n    const ssl = createK8sManagedCertificate({\n      name: `${ingressName}-managed-ssl-ingress`,\n      domains: [host],\n      provider,\n    });\n    annotations['networking.gke.io/managed-certificates'] = ssl.metadata.name;\n    annotations['networking.gke.io/v1beta1.FrontendConfig'] = frontendConfig.metadata.name;\n  } else {\n    annotations['kubernetes.io/ingress.class'] = 'gce-internal';\n  }\n\n  if (twDomain) {\n    annotations[DOMAIN] = twDomain.fqdn;\n    labels[DOMAIN] = getLabelSafeDomain(twDomain);\n  }\n\n  const k8sIngress = new kubernetes.networking.v1.Ingress(\n    ingressName,\n    {\n      apiVersion: 'networking.k8s.io/v1',\n      metadata: {\n        annotations,\n        labels: objectBool(labels) ? labels : undefined,\n        name: ingressName,\n      },\n      spec: {\n        defaultBackend: {\n          service: {\n            name: k8sService.metadata.name,\n            port: { number: k8sService.spec.ports[0].port },\n          },\n        },\n        rules,\n      },\n    },\n    { provider: provider, dependsOn }\n  );\n\n  addDnsRecord({\n    name: twDomain.fullSubDomain,\n    domainName: twDomain.domain,\n    type: 'A',\n    value: k8sIngress.status.loadBalancer.ingress[0].ip,\n    proxied: ingressMode === 'iap' && false,\n  });\n\n  return { k8sIngress, k8sService };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  provider: K8sProvider;\n  name: string;\n  twDomain: TWDomain;\n  ingressMode?: IngressMode;\n  selector?: Record<string, string>;\n  port?: number;\n  targetPort?: number;\n  healthCheckPath?: string;\n  sessionAffinity?: AffinityType;\n  dependsOn?: DependsOn;\n  rules?: kubernetes.types.input.networking.v1.IngressRule[];\n}",
            "type": "{\n  provider: K8sProvider;\n  name: string;\n  twDomain: TWDomain;\n  ingressMode?: IngressMode;\n  selector?: Record<string, string>;\n  port?: number;\n  targetPort?: number;\n  healthCheckPath?: string;\n  sessionAffinity?: AffinityType;\n  dependsOn?: DependsOn;\n  rules?: kubernetes.types.input.networking.v1.IngressRule[];\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " getIngressUrl",
        "text": "\n\nexport function getIngressUrl(\n  k8sIngress: kubernetes.networking.v1.Ingress | kubernetes.core.v1.Service\n) {\n  const secure = k8sIngress.metadata.annotations['networking.gke.io/managed-certificates'].apply(\n    (v) => Boolean(v)\n  );\n  return secure.apply(\n    (s) => pulumi.interpolate`http${s ? 's' : ''}://${k8sIngress.metadata.annotations[HOST]}`\n  );\n}",
        "parameters": [
          {
            "name": "k8sIngress",
            "text": "k8sIngress: kubernetes.networking.v1.Ingress | kubernetes.core.v1.Service",
            "type": "kubernetes.networking.v1.Ingress | kubernetes.core.v1.Service"
          }
        ]
      },
      {
        "type": "function",
        "name": " createAllowAllNetworkPolicy",
        "text": "\n\nexport function createAllowAllNetworkPolicy(provider: K8sProvider) {\n  return new kubernetes.networking.v1.NetworkPolicy(\n    k8sUniqueName('allow-all-ingress', provider),\n    {\n      apiVersion: 'networking.k8s.io/v1',\n      metadata: {\n        name: 'allow-all-ingress',\n      },\n      spec: {\n        podSelector: {},\n        policyTypes: ['Ingress'],\n        ingress: [{}],\n      },\n    },\n    { provider }\n  );\n}",
        "parameters": [
          {
            "name": "provider",
            "text": "provider: K8sProvider",
            "type": "K8sProvider"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/job.ts",
    "exports": [
      {
        "name": " K8sJobArgs",
        "text": "\n\n// https://kubernetes.io/docs/concepts/workloads/controllers/job/\n\nexport type K8sJobArgs = {\n  name: string;\n  serviceAccount: GCPServiceAccount;\n  provider?: K8sProvider;\n  podArgs?: PodTemplateArgs;\n  secretVersion?: gcp.secretmanager.SecretVersion;\n  parallelism?: number;\n};",
        "type": "{\n  name: string;\n  serviceAccount: GCPServiceAccount;\n  provider?: K8sProvider;\n  podArgs?: PodTemplateArgs;\n  secretVersion?: gcp.secretmanager.SecretVersion;\n  parallelism?: number;\n}"
      },
      {
        "type": "function",
        "name": " createK8sJobConfig",
        "text": "\n\nexport function createK8sJobConfig(args: K8sJobArgs) {\n  const { name, serviceAccount, provider = getKnativeProvider(), podArgs, parallelism = 1 } = args;\n  if (name.length > MAX_JOB_NAME_LENGTH) {\n    throw new Error(`Job name ${name} is too long. Max length is ${MAX_JOB_NAME_LENGTH}`);\n  }\n  const { projectId, serviceId } = getConfigs();\n  const deploymentEnvs = getK8sDeploymentEnvs({\n    provider,\n    deploymentName: name,\n  });\n\n  const k8sServiceAccount = createK8sServiceAccount({\n    serviceAccount,\n    provider,\n  }).k8sServiceAccount;\n\n  const base: PodTemplateArgs = {\n    envs: deploymentEnvs,\n    allowSpot: false,\n    ports: [],\n    k8sServiceAccountName: k8sServiceAccount.metadata.name,\n    extraVolumes: [{ emptyDir: {}, name: 'tw-state', path: '/tw/state' }],\n  };\n\n  const podTemplate = createPodTemplate(deepMerge(base, podArgs));\n\n  const labels = {\n    'app.kubernetes.io/name': name,\n    'triplewhale.com/deployment': name,\n    'triplewhale.com/job': 'true',\n    'triplewhale.com/namespace': provider.namespace,\n    // @ts-ignore\n    ...podTemplate.metadata?.labels,\n  };\n\n  const job: kubernetes.batch.v1.JobArgs = {\n    metadata: { name, namespace: provider.namespace },\n    spec: {\n      parallelism,\n      ttlSecondsAfterFinished: 604800, // one week\n      template: {\n        metadata: {\n          labels,\n        },\n        spec: {\n          ...podTemplate.spec,\n          restartPolicy: 'Never',\n        },\n      },\n    },\n  };\n\n  // jobs cannot use maxAvailable, or minAvailable with a percentage. this policy prevents any interruptions\n  const INFINITY = 10000;\n  createPdb({ name, provider, labels, minAvailable: INFINITY });\n\n  const config = {\n    job,\n    context: provider.cluster_urn,\n  };\n\n  new gcp.storage.BucketObject(\n    `${name}-k8s-job`,\n    {\n      bucket: `devops-${projectId}`,\n      content: toJSONOutput(config),\n      name: `k8s-jobs/${serviceId}/${getUniqueNameInProject(name)}.json`,\n    },\n    {\n      retainOnDelete: true,\n    }\n  );\n  return config;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: K8sJobArgs",
            "type": "K8sJobArgs"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/keda.ts",
    "exports": [
      {
        "name": " KedaTrigger",
        "text": "\n\nexport type KedaTrigger = {\n  type: 'cpu' | 'prometheus';\n  metricType?: 'Utilization';\n  metadata: {\n    serverAddress?: string;\n    query?: string;\n    threshold?: string;\n    value?: string;\n    queryParameters?: string;\n    activationThreshold?: string;\n    ignoreNullValues?: string;\n  };\n};",
        "type": "{\n  type: 'cpu' | 'prometheus';\n  metricType?: 'Utilization';\n  metadata: {\n    serverAddress?: string;\n    query?: string;\n    threshold?: string;\n    value?: string;\n    queryParameters?: string;\n    activationThreshold?: string;\n    ignoreNullValues?: string;\n  };\n}"
      },
      {
        "type": "function",
        "name": " createKedaPrometheusTrigger",
        "text": "\n\nexport function createKedaPrometheusTrigger(args: {\n  release?: PrometheusReleaseName;\n  query: string;\n  threshold: string;\n}): KedaTrigger {\n  const { release = 'workloads', query, threshold } = args;\n  return {\n    type: 'prometheus',\n    metadata: {\n      serverAddress: `http://${release}-prometheus.monitoring.svc.cluster.local:9090`,\n      query,\n      threshold,\n      queryParameters: '',\n      activationThreshold: '1',\n      ignoreNullValues: 'true',\n    },\n  };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  release?: PrometheusReleaseName;\n  query: string;\n  threshold: string;\n}",
            "type": "{\n  release?: PrometheusReleaseName;\n  query: string;\n  threshold: string;\n}"
          }
        ]
      },
      {
        "name": " CreateKedaScalerArgs",
        "text": "\n\nexport type CreateKedaScalerArgs = {\n  name: string;\n  minReplicas?: number;\n  maxReplicas?: number;\n  provider: K8sProvider;\n  averageCPUUtilization?: number;\n  triggers?: KedaTrigger[];\n  scaleToZero?: boolean;\n};",
        "type": "{\n  name: string;\n  minReplicas?: number;\n  maxReplicas?: number;\n  provider: K8sProvider;\n  averageCPUUtilization?: number;\n  triggers?: KedaTrigger[];\n  scaleToZero?: boolean;\n}"
      },
      {
        "type": "function",
        "name": " createKedaScaler",
        "text": "\n\nexport function createKedaScaler(args: CreateKedaScalerArgs) {\n  const {\n    name,\n    maxReplicas,\n    minReplicas,\n    averageCPUUtilization,\n    provider,\n    triggers = [],\n    scaleToZero = false,\n  } = args;\n\n  const keda = new kubernetes.apiextensions.CustomResource(\n    // https://keda.sh/docs/2.14/concepts/scaling-deployments/#scaledobject-spec\n    k8sUniqueName(name, provider),\n    {\n      apiVersion: 'keda.sh/v1alpha1',\n      kind: 'ScaledObject',\n      metadata: {\n        name,\n        annotations: {\n          'scaledobject.keda.sh/transfer-hpa-ownership': 'true',\n        },\n      },\n      spec: {\n        scaleTargetRef: {\n          name,\n        },\n        pollingInterval: 1,\n        cooldownPeriod: 10,\n        idleReplicaCount: scaleToZero ? 0 : undefined,\n        minReplicaCount: minReplicas,\n        maxReplicaCount: maxReplicas,\n        triggers: [\n          {\n            type: 'cpu',\n            metricType: 'Utilization',\n            metadata: {\n              value: String(averageCPUUtilization),\n            },\n          },\n          ...triggers,\n        ],\n        advanced: {\n          horizontalPodAutoscalerConfig: {\n            name,\n            behavior: {\n              scaleUp: {\n                policies: [\n                  {\n                    type: 'Pods',\n                    value: 1000,\n                    periodSeconds: 1,\n                  },\n                  {\n                    type: 'Percent',\n                    value: 1000,\n                    periodSeconds: 1,\n                  },\n                ],\n              },\n            },\n          },\n        },\n      },\n    },\n    { provider: provider, deleteBeforeReplace: true }\n  );\n  return keda;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: CreateKedaScalerArgs",
            "type": "CreateKedaScalerArgs"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/namespace.ts",
    "exports": [
      {
        "name": " _k8sNamespaces",
        "text": "\n\nexport const _k8sNamespaces = {};",
        "type": "variable"
      },
      {
        "type": "function",
        "name": " createK8sNamespace",
        "text": "\n\nexport function createK8sNamespace(args: {\n  provider: K8sProvider;\n  name?: string;\n  labels?: Record<string, string>;\n}): kubernetes.core.v1.Namespace {\n  const { labels } = args;\n\n  const aliases = [];\n\n  let name = args.name;\n  let provider = args.provider;\n  if (!name) {\n    name = getNamespace(provider);\n  } else if (provider) {\n    aliases.push({ name: `${name}-${provider.cluster_uuid}` });\n    aliases.push({ name: `namespace-${provider.uuid}` });\n    provider = getK8sProvider({ provider, namespace: name });\n  }\n  const clusterKey = `${name}-${provider.cluster_uuid}`;\n\n  if (_k8sNamespaces[clusterKey]) return _k8sNamespaces[clusterKey];\n  const namespace = new kubernetes.core.v1.Namespace(\n    clusterKey,\n    {\n      metadata: {\n        name: name,\n        labels: {\n          ...labels,\n        },\n      },\n    },\n    {\n      provider: provider,\n      aliases,\n    }\n  );\n  _k8sNamespaces[clusterKey] = namespace;\n  return namespace;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  provider: K8sProvider;\n  name?: string;\n  labels?: Record<string, string>;\n}",
            "type": "{\n  provider: K8sProvider;\n  name?: string;\n  labels?: Record<string, string>;\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " getNamespace",
        "text": "\n\nexport function getNamespace(provider?: K8sProvider) {\n  const { serviceId, isAService } = getConfigs();\n  if (provider?.namespace) return provider.namespace;\n  return !isAService ? 'default' : `${getUniqueNameInProject(serviceId)}-ns`;\n}",
        "parameters": [
          {
            "name": "provider",
            "text": "provider?: K8sProvider",
            "type": "K8sProvider"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/observability.ts",
    "exports": [
      {
        "type": "function",
        "name": " createObservabilityStack",
        "text": "\n\nexport function createObservabilityStack(args: {\n  name: string;\n  provider: K8sProvider;\n  otel?: boolean;\n  devopsPrometheus?: boolean;\n}) {\n  const { name, otel = true, devopsPrometheus = true } = args;\n\n  createK8sNamespace({ name: 'monitoring', provider: args.provider });\n  createK8sNamespace({ name: 'observability', provider: args.provider });\n\n  const monitoringProvider = getK8sProvider({ provider: args.provider, namespace: 'monitoring' });\n\n  if (devopsPrometheus) {\n    createPrometheusDeployment({\n      name: 'devops',\n      provider: monitoringProvider,\n    });\n  }\n\n  if (otel) {\n    const observabilityProvider = getK8sProvider({\n      provider: args.provider,\n      namespace: 'observability',\n    });\n\n    createPrometheusDeployment({\n      name: 'workloads',\n      provider: monitoringProvider,\n    });\n\n    createOtelCollector({\n      name: `${name}-otel`,\n      provider: observabilityProvider,\n      mode: 'daemonset',\n      createLb: true,\n      debug: false,\n    });\n  }\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  provider: K8sProvider;\n  otel?: boolean;\n  devopsPrometheus?: boolean;\n}",
            "type": "{\n  name: string;\n  provider: K8sProvider;\n  otel?: boolean;\n  devopsPrometheus?: boolean;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/pdbs.ts",
    "exports": [
      {
        "type": "function",
        "name": " createPdb",
        "text": "\n\nexport function createPdb(args: {\n  name: string;\n  provider: K8sProvider;\n  labels: Record<string, string>;\n  minAvailable?: number | string;\n  maxUnavailable?: number | string;\n}) {\n  const { name, provider, labels, minAvailable, maxUnavailable } = args;\n  new kubernetes.policy.v1.PodDisruptionBudget(\n    k8sUniqueName(name, provider),\n    {\n      metadata: { name },\n      spec: { maxUnavailable, minAvailable, selector: { matchLabels: labels } },\n    },\n    { provider }\n  );\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  provider: K8sProvider;\n  labels: Record<string, string>;\n  minAvailable?: number | string;\n  maxUnavailable?: number | string;\n}",
            "type": "{\n  name: string;\n  provider: K8sProvider;\n  labels: Record<string, string>;\n  minAvailable?: number | string;\n  maxUnavailable?: number | string;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/pod.ts",
    "exports": [
      {
        "name": " K8sNodeSelector",
        "text": "\n\nexport type K8sNodeSelector = {\n  'node.kubernetes.io/instance-type'?: string;\n  'cloud.google.com/machine-family'?: 'e2' | 'c2' | 'c3';\n  'cloud.google.com/gke-accelerator'?: 'nvidia-tesla-a100' | 'nvidia-l4' | 'nvidia-tesla-v100';\n  'iam.gke.io/gke-metadata-server-enabled'?: string;\n  'addon.gke.io/node-local-dns-ds-ready'?: string;\n  'topology.kubernetes.io/zone'?: pulumi.Input<string>;\n  'triplewhale.com/private-pool'?: pulumi.Input<string>;\n};",
        "type": "{\n  'node.kubernetes.io/instance-type'?: string;\n  'cloud.google.com/machine-family'?: 'e2' | 'c2' | 'c3';\n  'cloud.google.com/gke-accelerator'?: 'nvidia-tesla-a100' | 'nvidia-l4' | 'nvidia-tesla-v100';\n  'iam.gke.io/gke-metadata-server-enabled'?: string;\n  'addon.gke.io/node-local-dns-ds-ready'?: string;\n  'topology.kubernetes.io/zone'?: pulumi.Input<string>;\n  'triplewhale.com/private-pool'?: pulumi.Input<string>;\n}"
      },
      {
        "name": " PodTemplateArgs",
        "text": "\n\nexport type PodTemplateArgs = {\n  image?: pulumi.Input<string>;\n  appName?: string;\n  terminationGracePeriodSeconds?: number;\n  livenessProbe?: boolean;\n  readinessProbe?: boolean;\n  livenessProbeFailureThreshold?: number;\n  livenessProbePeriodSeconds?: number;\n  envs?: kubernetes.types.input.core.v1.EnvVar[];\n  k8sServiceAccountName?: pulumi.Input<string>;\n  k8sSecret?: kubernetes.apiextensions.CustomResource;\n  podInfo?: boolean;\n  nodeSelector?: K8sNodeSelector;\n  initialDelaySeconds?: number;\n  nodePool?: NodePool;\n  tolerations?: pulumi.Input<kubernetes.types.input.core.v1.Toleration>[];\n  useTcpProbe?: boolean;\n  persistentVolumeClaims?: {\n    claim: kubernetes.core.v1.PersistentVolumeClaim;\n    mountPath: string;\n  }[];\n  extraVolumes?: (kubernetes.types.input.core.v1.Volume & { path: string })[];\n  otel?: boolean;\n  allowSpot?: boolean;\n  readinessGates?: kubernetes.types.input.core.v1.PodReadinessGate[];\n  labels?: Record<string, string>;\n  annotations?: Record<string, pulumi.Input<string>>;\n  command?: string[];\n  args?: pulumi.Input<string>[];\n  ports?: kubernetes.types.input.core.v1.ContainerPort[];\n  scalesOnMemory?: boolean;\n  hostNetwork?: boolean;\n} & K8sResources;",
        "type": "{\n  image?: pulumi.Input<string>;\n  appName?: string;\n  terminationGracePeriodSeconds?: number;\n  livenessProbe?: boolean;\n  readinessProbe?: boolean;\n  livenessProbeFailureThreshold?: number;\n  livenessProbePeriodSeconds?: number;\n  envs?: kubernetes.types.input.core.v1.EnvVar[];\n  k8sServiceAccountName?: pulumi.Input<string>;\n  k8sSecret?: kubernetes.apiextensions.CustomResource;\n  podInfo?: boolean;\n  nodeSelector?: K8sNodeSelector;\n  initialDelaySeconds?: number;\n  nodePool?: NodePool;\n  tolerations?: pulumi.Input<kubernetes.types.input.core.v1.Toleration>[];\n  useTcpProbe?: boolean;\n  persistentVolumeClaims?: {\n    claim: kubernetes.core.v1.PersistentVolumeClaim;\n    mountPath: string;\n  }[];\n  extraVolumes?: (kubernetes.types.input.core.v1.Volume & { path: string })[];\n  otel?: boolean;\n  allowSpot?: boolean;\n  readinessGates?: kubernetes.types.input.core.v1.PodReadinessGate[];\n  labels?: Record<string, string>;\n  annotations?: Record<string, pulumi.Input<string>>;\n  command?: string[];\n  args?: pulumi.Input<string>[];\n  ports?: kubernetes.types.input.core.v1.ContainerPort[];\n  scalesOnMemory?: boolean;\n  hostNetwork?: boolean;\n} & K8sResources"
      },
      {
        "type": "function",
        "name": " createPodTemplate",
        "text": "\n\nexport function createPodTemplate(args: PodTemplateArgs) {\n  const {\n    image = getServiceImage(),\n    envs = [],\n    appName = getConfigs().serviceId,\n    terminationGracePeriodSeconds,\n    // total 3 minutes\n    livenessProbeFailureThreshold = 10,\n    livenessProbePeriodSeconds = 18,\n    k8sServiceAccountName,\n    k8sSecret,\n    podInfo,\n    initialDelaySeconds = 5,\n    nodePool,\n    allowSpot,\n    otel,\n    tolerations = [],\n    useTcpProbe = true,\n    persistentVolumeClaims = [],\n    extraVolumes = [],\n    readinessGates,\n    labels = {},\n    annotations = {},\n    ports = [{ containerPort: 8080 }],\n    scalesOnMemory,\n    hostNetwork,\n  } = args;\n\n  // if theres no ports then assume no probes\n  let { livenessProbe, readinessProbe } = args;\n  if (livenessProbe === undefined) {\n    if (ports.length) {\n      livenessProbe = true;\n    }\n  }\n  if (readinessProbe === undefined) {\n    if (ports.length) {\n      readinessProbe = true;\n    }\n  }\n\n  const probe: kubernetes.types.input.core.v1.Probe = !ports.length\n    ? null\n    : useTcpProbe\n    ? {\n        tcpSocket: {\n          port: ports[0].containerPort,\n        },\n      }\n    : {\n        httpGet: {\n          path: '/ping',\n          port: ports[0].containerPort,\n        },\n      };\n\n  const { memoryLimit, memoryRequest, CPURequest, CPULimit, GPURequest } = resourceCalc({\n    CPULimit: args.CPULimit,\n    CPURequest: args.CPURequest,\n    memoryLimit: args.memoryLimit,\n    memoryRequest: args.memoryRequest,\n    GPURequest: args.GPURequest,\n  });\n\n  const useSpot = allowSpot || ((isStaging || nodePool?.nodeConfig?.spot) && allowSpot !== false);\n  let nodeSelector: K8sNodeSelector = {\n    'iam.gke.io/gke-metadata-server-enabled': 'true',\n    'addon.gke.io/node-local-dns-ds-ready': 'true',\n  };\n\n  if (nodePool) {\n    const { nodeSelector: nodePoolSelectors, tolerations: nodePoolTolerations } =\n      getSelectorsForNodePool(nodePool);\n    nodeSelector = { ...nodeSelector, ...nodePoolSelectors };\n    tolerations.push(...nodePoolTolerations);\n  } else if (args.nodeSelector) {\n    nodeSelector = { ...nodeSelector, ...args.nodeSelector };\n  }\n\n  if (\n    !nodeSelector['node.kubernetes.io/instance-type'] &&\n    !nodeSelector['cloud.google.com/gke-nodepool'] &&\n    !nodeSelector['cloud.google.com/machine-family'] &&\n    !GPURequest\n  ) {\n    nodeSelector['cloud.google.com/machine-family'] = 'e2';\n    // nodeSelector['node.kubernetes.io/instance-type'] = getRatioMachineType(\n    //   memoryRequest,\n    //   CPURequest\n    // );\n  }\n\n  if (persistentVolumeClaims?.length) {\n    for (const claim of persistentVolumeClaims) {\n      nodeSelector['topology.kubernetes.io/zone'] = claim.claim.metadata.labels.apply(\n        (labels) => labels['triplewhale.com/disk-zone']\n      );\n    }\n  }\n\n  if (otel) {\n    nodeSelector['triplewhale.com/otel'] = 'true';\n    addEnvIfNotExists(envs, {\n      name: 'TW_OTEL_NODE',\n      value: '1',\n    });\n  }\n\n  for (const [key, value] of Object.entries(nodeSelector)) {\n    // for gke nap, all custom labels should be added to tolerations\n    if (key.startsWith('triplewhale.com/')) {\n      tolerations.push({\n        key,\n        operator: 'Equal',\n        value,\n        effect: 'NoSchedule',\n      });\n    }\n  }\n\n  if (useSpot) {\n    tolerations.push({\n      key: 'triplewhale.com/spot-pool',\n      operator: 'Equal',\n      value: 'true',\n      effect: 'NoSchedule',\n    });\n    tolerations.push({\n      key: 'cloud.google.com/gke-spot',\n      operator: 'Equal',\n      value: 'true',\n      effect: 'NoSchedule',\n    });\n    nodeSelector['cloud.google.com/gke-spot'] = 'true';\n    envs.push({\n      name: 'IS_SPOT',\n      value: 'true',\n    });\n  }\n\n  if (\n    nodeSelector['cloud.google.com/machine-family'] &&\n    nodeSelector['cloud.google.com/machine-family'] !== 'e2'\n  ) {\n    tolerations.push({\n      key: 'cloud.google.com/machine-family',\n      operator: 'Equal',\n      value: nodeSelector['cloud.google.com/machine-family'],\n      effect: 'NoSchedule',\n    });\n  }\n\n  // not limit as usage should hover around request not limit, limit will be for spike in live objects\n  // in nodejs\n  // for temporal worker it wants to set it itself\n  addEnvIfNotExists(envs, {\n    name: 'TW_MEM_REQUEST',\n    value: String(k8sMemoryToNumberMi(scalesOnMemory ? memoryRequest : memoryLimit)),\n  });\n\n  envs.push({ name: 'DOCKER_IMAGE', value: image });\n\n  if (k8sSecret) {\n    annotations['triplewhale.com/trigger-secret'] = k8sSecret.metadata.generation.apply(String);\n  }\n\n  const volumes: kubernetes.types.input.core.v1.Volume[] = [];\n  if (podInfo) {\n    volumes.push({\n      name: 'podinfo',\n      downwardAPI: {\n        items: [\n          {\n            path: 'labels',\n            fieldRef: {\n              fieldPath: 'metadata.labels',\n            },\n          },\n          {\n            path: 'annotations',\n            fieldRef: {\n              fieldPath: 'metadata.annotations',\n            },\n          },\n        ],\n      },\n    });\n  }\n  if (k8sSecret) {\n    volumes.push({\n      name: 'secret',\n      csi: {\n        driver: 'secrets-store.csi.k8s.io',\n        readOnly: true,\n        volumeAttributes: { secretProviderClass: k8sSecret.metadata.name },\n      },\n    });\n  }\n\n  if (persistentVolumeClaims.length) {\n    volumes.push(\n      ...persistentVolumeClaims.map((d) => {\n        return {\n          name: d.claim.metadata.name,\n          persistentVolumeClaim: {\n            claimName: d.claim.metadata.name,\n            readOnly: d.claim.spec.accessModes.apply((v) => v.includes('ReadOnlyMany')),\n          },\n        };\n      })\n    );\n  }\n\n  if (extraVolumes.length) {\n    volumes.push(...extraVolumes);\n  }\n\n  const volumeMounts: kubernetes.types.input.core.v1.VolumeMount[] = [];\n  if (podInfo) {\n    volumeMounts.push({\n      name: 'podinfo',\n      mountPath: '/tw/podinfo',\n    });\n  }\n\n  if (k8sSecret) {\n    volumeMounts.push({ mountPath: '/etc/secrets', name: 'secret' });\n  }\n\n  if (persistentVolumeClaims.length) {\n    volumeMounts.push(\n      ...persistentVolumeClaims.map((d) => {\n        return {\n          name: d.claim.metadata.name,\n          mountPath: d.mountPath,\n          readOnly: d.claim.spec.accessModes.apply((v) => v.includes('ReadOnlyMany')),\n        };\n      })\n    );\n  }\n\n  if (extraVolumes.length) {\n    volumeMounts.push(\n      ...extraVolumes.map((d) => {\n        return {\n          name: d.name,\n          mountPath: d.path,\n        };\n      })\n    );\n  }\n\n  const podTemplate: kubernetes.types.input.core.v1.PodTemplateSpec = {\n    metadata: {\n      labels: {\n        'app.kubernetes.io/part-of': appName,\n        ...labels,\n      },\n      annotations: objectBool(annotations) ? annotations : undefined,\n    },\n    spec: {\n      hostNetwork,\n      nodeSelector,\n      tolerations: tolerations.length ? tolerations : undefined,\n      terminationGracePeriodSeconds,\n      serviceAccountName: k8sServiceAccountName,\n      readinessGates,\n      containers: [\n        {\n          image,\n          imagePullPolicy: 'Always',\n          ...(readinessProbe && probe\n            ? {\n                readinessProbe: {\n                  ...probe,\n                  failureThreshold: 1,\n                  initialDelaySeconds: initialDelaySeconds,\n                  periodSeconds: 2,\n                },\n              }\n            : null),\n          ...(livenessProbe && probe\n            ? {\n                livenessProbe: {\n                  ...probe,\n                  failureThreshold: livenessProbeFailureThreshold,\n                  initialDelaySeconds: initialDelaySeconds || 60,\n                  periodSeconds: livenessProbePeriodSeconds,\n                },\n              }\n            : null),\n          name: 'default',\n          ports: ports.length ? ports : undefined,\n          command: args.command,\n          args: args.args,\n          env: sortEnvs(envs),\n          volumeMounts: volumeMounts.length ? volumeMounts : undefined,\n          lifecycle: {\n            preStop: {\n              exec: { command: ['touch', '/tmp/tw-sigterm'] },\n            },\n          },\n          resources: {\n            requests: {\n              cpu: String(CPURequest),\n              memory: memoryRequest,\n              ...(GPURequest ? { 'nvidia.com/gpu': GPURequest } : null),\n            },\n            limits: {\n              memory: memoryLimit,\n              ...(CPULimit ? { cpu: String(CPULimit) } : null),\n              ...(GPURequest ? { 'nvidia.com/gpu': GPURequest } : null), // must be the some as req\n            },\n          },\n        },\n      ],\n      volumes: volumes.length ? volumes : undefined,\n    },\n  };\n  return podTemplate;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: PodTemplateArgs",
            "type": "PodTemplateArgs"
          }
        ]
      },
      {
        "type": "function",
        "name": " resourceCalc",
        "text": "\n\nexport function resourceCalc(args: K8sResources) {\n  const { memoryLimit, memoryRequest = '512Mi', CPULimit, CPURequest = '500m', GPURequest } = args;\n  const result = {\n    memoryRequest: k8sMemoryMiToStringGi(k8sMemoryToNumberMi(memoryRequest)),\n    memoryLimit: k8sMemoryMiToStringGi(\n      k8sMemoryToNumberMi(memoryLimit ?? k8sMemoryToNumberMi(memoryRequest) * 4 + 'Mi')\n    ),\n    CPURequest: k8sCpuMToString(CPURequest),\n    CPULimit:\n      CPULimit !== null\n        ? k8sCpuMToString(\n            (k8sCpuToNumber(CPULimit ?? k8sCpuToNumber(CPURequest) * 2) * 1000 + 'm') as K8sCPU\n          )\n        : null,\n    GPURequest,\n  };\n  return result;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: K8sResources",
            "type": "K8sResources"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/provider.ts",
    "exports": [
      {
        "name": " k8sClusters",
        "text": "\n\nexport const k8sClusters: Record<string, { location: string; name: string }> = {};",
        "type": "Record<string, { location: string; name: string }>"
      },
      {
        "name": " ClusterName",
        "text": "\n\nexport type ClusterName =\n  | 'backend-cluster'\n  | 'knative-cluster'\n  | 'temporal-cluster'\n  | 'sonic-cluster'\n  | 'rceaas-cluster'\n  | 'pipelines-cluster';",
        "type": "| 'backend-cluster'\n  | 'knative-cluster'\n  | 'temporal-cluster'\n  | 'sonic-cluster'\n  | 'rceaas-cluster'\n  | 'pipelines-cluster'"
      },
      {
        "name": " K8sProvider",
        "text": "\n\nexport type K8sProvider = kubernetes.Provider & {\n  namespace: string;\n  location: string;\n  uuid: string;\n  cluster_uuid: string;\n  cluster_name: ClusterName;\n  cluster_urn: string;\n  dependsOn: pulumi.Resource[];\n  dependOn: (resource: pulumi.Resource | pulumi.Resource[]) => K8sProvider;\n};",
        "type": "kubernetes.Provider & {\n  namespace: string;\n  location: string;\n  uuid: string;\n  cluster_uuid: string;\n  cluster_name: ClusterName;\n  cluster_urn: string;\n  dependsOn: pulumi.Resource[];\n  dependOn: (resource: pulumi.Resource | pulumi.Resource[]) => K8sProvider;\n}"
      },
      {
        "type": "function",
        "name": " getK8sProvider",
        "text": "\n\nexport function getK8sProvider(\n  args: {\n    namespace?: string;\n    cluster?: ClusterName;\n    location?: string;\n    resource?: any;\n    provider?: K8sProvider;\n    projectId?: string;\n    dependsOn?: pulumi.Resource[];\n  } = {}\n): K8sProvider {\n  const {\n    cluster = 'backend-cluster',\n    resource,\n    location = getConfigs().location,\n    projectId = getConfigs().projectId,\n  } = args;\n  if (resource) {\n    return resource.getProvider('kubernetes::') as K8sProvider;\n  }\n  const dependsOn = [...(args.dependsOn || [])];\n  if (args.provider) {\n    dependsOn.push(...(args.provider.dependsOn || []));\n    const { namespace, cluster, location, provider } = args;\n    return getK8sProvider({\n      namespace: namespace || provider.namespace,\n      cluster: cluster || provider.cluster_name,\n      location: location || provider.location,\n      dependsOn,\n    });\n  }\n\n  const namespace = args.namespace || getNamespace();\n  const name = `${namespace}-${cluster}-${location}`;\n  if (providers[name]) {\n    if (dependsOn.length) {\n      const providerClone = cloneProvider(providers[name]);\n      providerClone.dependsOn = dependsOn;\n      return providerClone;\n    }\n    return providers[name];\n  }\n  const cluster_urn = `gke_${projectId}_${location}_${cluster}`;\n  const provider = new kubernetes.Provider(\n    name,\n    {\n      cluster: cluster_urn,\n      context: cluster_urn,\n      namespace,\n      kubeClientSettings: { qps: 1000, burst: 3000 },\n      enableServerSideApply: false,\n    },\n    {\n      dependsOn,\n      // will be different in cloud build from local\n      // ignoring is a prob, TODO: figure out how to handle this\n      //ignoreChanges: ['kubeconfig']\n    }\n  ) as K8sProvider;\n  // includes namespace\n  provider.uuid = createUUID(name);\n  // does not include namespace\n  provider.cluster_uuid = createUUID(cluster_urn);\n  provider.cluster_name = cluster;\n  provider.cluster_urn = cluster_urn;\n  provider.location = location;\n  provider.namespace = namespace;\n  provider.dependsOn = dependsOn;\n  provider.dependOn = (resource: pulumi.Resource | pulumi.Resource[]) => {\n    if (!resource) return provider;\n    if (!Array.isArray(resource)) resource = [resource];\n    if (!resource.length) return provider;\n    const providerClone = cloneProvider(provider);\n    providerClone.dependsOn = resource;\n    return providerClone;\n  };\n  providers[name] = provider;\n  if (!k8sClusters[cluster_urn]) {\n    k8sClusters[cluster_urn] = {\n      location,\n      name: cluster,\n    };\n  }\n  return dependOnCluster(provider, provider.cluster_name);\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n    namespace?: string;\n    cluster?: ClusterName;\n    location?: string;\n    resource?: any;\n    provider?: K8sProvider;\n    projectId?: string;\n    dependsOn?: pulumi.Resource[];\n  } = {}",
            "type": "{\n    namespace?: string;\n    cluster?: ClusterName;\n    location?: string;\n    resource?: any;\n    provider?: K8sProvider;\n    projectId?: string;\n    dependsOn?: pulumi.Resource[];\n  }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/renderToYaml.ts",
    "exports": [
      {
        "type": "function",
        "name": " renderToYaml",
        "text": "\n\nexport function renderToYaml(args: pulumi.ResourceTransformationArgs) {\n  if (!process.env.IS_CLOUD_BUILD) return;\n  const { props, opts, name } = args;\n  const provider = opts?.provider as K8sProvider;\n  // its a get\n  if (!props.kind) return;\n  if (!props.metadata) props.metadata = {};\n  const filename = `${props.apiVersion}-${props.kind}-${props.metadata.name || name}.yaml`\n    .replace('/', '-')\n    .toLowerCase();\n  const dir = './.yaml';\n  if (!fs.existsSync(dir)) {\n    fs.mkdirSync(dir);\n  }\n  if (!props.metadata?.namespace) {\n    props.metadata.namespace = provider.namespace;\n  }\n  toYamlOutput(props).apply((o) => {\n    fs.writeFileSync(`${dir}/${filename}`, o);\n  });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: pulumi.ResourceTransformationArgs",
            "type": "pulumi.ResourceTransformationArgs"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/sa.ts",
    "exports": [
      {
        "type": "function",
        "name": " createK8sServiceAccount",
        "text": "\n\nexport function createK8sServiceAccount(args?: {\n  provider?: K8sProvider;\n  serviceAccount?: GCPServiceAccount;\n  name?: string;\n}): { k8sServiceAccount: kubernetes.core.v1.ServiceAccount } {\n  const { serviceId } = getConfigs();\n  const {\n    provider = getK8sProvider(),\n    serviceAccount = k8sGetGCPServiceAccount(),\n    name = serviceId,\n  } = args || {};\n  if (!serviceAccount) return;\n  const key = `${name}-${provider.uuid}`;\n  let k8sServiceAccount;\n  if (!serviceAccounts[key]) {\n    k8sServiceAccount = new kubernetes.core.v1.ServiceAccount(\n      key,\n      {\n        apiVersion: 'v1',\n        kind: 'ServiceAccount',\n        metadata: {\n          name: name,\n          annotations: {\n            'iam.gke.io/gcp-service-account': serviceAccount.email,\n          },\n        },\n      },\n      { provider: provider }\n    );\n\n    addWorkloadIdentityUserToSa({\n      serviceAccount,\n      provider,\n      name,\n    });\n    serviceAccounts[key] = k8sServiceAccount;\n  } else {\n    k8sServiceAccount = serviceAccounts[key];\n  }\n  return { k8sServiceAccount };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args?: {\n  provider?: K8sProvider;\n  serviceAccount?: GCPServiceAccount;\n  name?: string;\n}",
            "type": "{\n  provider?: K8sProvider;\n  serviceAccount?: GCPServiceAccount;\n  name?: string;\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " addWorkloadIdentityUserToSa",
        "text": "\n\nexport function addWorkloadIdentityUserToSa(args: {\n  serviceAccount: GCPServiceAccount;\n  provider: K8sProvider;\n  name: string;\n}) {\n  const { serviceAccount, name, provider } = args;\n  const { projectId } = getConfigs();\n  // if we have two clusters then if we removed one - the binding will be removed from the other too\n  if (boundSas[serviceAccount.uuid]) {\n    return;\n  }\n  boundSas[serviceAccount.uuid] = true;\n  // serviceAccount:${projectId}.svc.id.goog[${namespace}/${k8sServiceAccount.metadata.name}]\n  new gcp.serviceaccount.IAMBinding(\n    `${name}-bind-wiu-${serviceAccount.uuid}`,\n    {\n      serviceAccountId: serviceAccount.id,\n      role: 'roles/iam.workloadIdentityUser',\n      members: [\n        pulumi.interpolate`serviceAccount:${projectId}.svc.id.goog[${provider.namespace}/${name}]`,\n      ],\n    },\n    {\n      deleteBeforeReplace: true,\n      retainOnDelete: true,\n    }\n  );\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  serviceAccount: GCPServiceAccount;\n  provider: K8sProvider;\n  name: string;\n}",
            "type": "{\n  serviceAccount: GCPServiceAccount;\n  provider: K8sProvider;\n  name: string;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/secrets.ts",
    "exports": [
      {
        "type": "function",
        "name": " createK8sSecret",
        "text": "\n\nexport function createK8sSecret(args: {\n  gcpSecretVersion: gcp.secretmanager.SecretVersion;\n  provider: K8sProvider;\n}): { k8sSecret: kubernetes.apiextensions.CustomResource } {\n  const { serviceId } = getConfigs();\n  const { gcpSecretVersion, provider } = args;\n  const key = `secret-${provider.uuid}`;\n  if (!secrets[key]) {\n    const k8sSecret = new kubernetes.apiextensions.CustomResource(\n      key,\n      {\n        apiVersion: 'secrets-store.csi.x-k8s.io/v1alpha1',\n        kind: 'SecretProviderClass',\n        metadata: {\n          name: `${serviceId}-secrets`,\n        },\n        spec: {\n          provider: 'gcp',\n          parameters: {\n            secrets: toYamlOutput(\n              pulumi.output([{ resourceName: gcpSecretVersion.id, fileName: 'store' }])\n            ),\n          },\n        },\n      },\n      { provider: provider }\n    );\n    secrets[key] = k8sSecret;\n  }\n  return { k8sSecret: secrets[key] };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  gcpSecretVersion: gcp.secretmanager.SecretVersion;\n  provider: K8sProvider;\n}",
            "type": "{\n  gcpSecretVersion: gcp.secretmanager.SecretVersion;\n  provider: K8sProvider;\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " getK8sSecretValue",
        "text": "\n\nexport function getK8sSecretValue(args: {\n  secretName: string;\n  provider: K8sProvider;\n  dependsOn: DependsOn;\n}) {\n  const { secretName, provider, dependsOn } = args;\n  const secretData = getK8sSecret({ secretName, provider, dependsOn }).data;\n  return secretData;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  secretName: string;\n  provider: K8sProvider;\n  dependsOn: DependsOn;\n}",
            "type": "{\n  secretName: string;\n  provider: K8sProvider;\n  dependsOn: DependsOn;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/service.ts",
    "exports": [
      {
        "name": " AutoNegConfigEntry",
        "text": "\n\nexport type AutoNegConfigEntry = {\n  name: pulumi.Output<string>;\n  region?: string;\n  max_rate_per_endpoint?: number;\n  max_connections_per_endpoint?: number;\n};",
        "type": "{\n  name: pulumi.Output<string>;\n  region?: string;\n  max_rate_per_endpoint?: number;\n  max_connections_per_endpoint?: number;\n}"
      },
      {
        "name": " AutoNegConfig",
        "text": "\n\nexport type AutoNegConfig = {\n  backend_services: Record<string, AutoNegConfigEntry[]>;\n};",
        "type": "{\n  backend_services: Record<string, AutoNegConfigEntry[]>;\n}"
      },
      {
        "type": "function",
        "name": " createK8sService",
        "text": "\n\nexport function createK8sService(args?: {\n  provider: K8sProvider;\n  name: string;\n  ingressMode?: IngressMode;\n  autoNeg?: AutoNegConfig;\n  selector?: Record<string, string>;\n  type?: 'ClusterIP' | 'NodePort' | 'LoadBalancer';\n  annotations?: Record<string, pulumi.Output<string> | string>;\n  twDomain?: TWDomain;\n  ports?: kubernetes.types.input.core.v1.ServicePort[];\n  dependsOn?: DependsOn;\n  backendConfig?: kubernetes.apiextensions.CustomResource;\n}): {\n  k8sService: kubernetes.core.v1.Service;\n} {\n  const {\n    provider,\n    name,\n    ingressMode,\n    autoNeg,\n    selector,\n    type = 'ClusterIP',\n    ports = [{ name: 'http-web', port: 80, targetPort: 8080 }],\n    annotations = {},\n    twDomain,\n    dependsOn,\n    backendConfig,\n  } = args || {};\n\n  const labels = {};\n\n  if (ingressMode === 'iap') {\n    createIapConfig({ provider });\n  }\n\n  // remove internal backends if region does not match\n  if (autoNeg) {\n    autoNeg.backend_services = Object.fromEntries(\n      Object.entries(autoNeg.backend_services).map(([key, value]) => [\n        key,\n        value.filter((v) => !v.region || v.region === provider.location),\n      ])\n    );\n  }\n\n  if (autoNeg) {\n    (annotations['cloud.google.com/neg'] = toJSONOutput({\n      exposed_ports: { [String(ports[0].port)]: {} },\n    })),\n      (annotations['controller.autoneg.dev/neg'] = toJSONOutput(autoNeg));\n  }\n  if (backendConfig) {\n    annotations['cloud.google.com/backend-config'] = toJSONOutput({\n      default: backendConfig.metadata.name,\n    });\n  }\n  if (type === 'LoadBalancer' && ingressMode === 'internal') {\n    annotations['networking.gke.io/load-balancer-type'] = 'Internal';\n    annotations['networking.gke.io/internal-load-balancer-allow-global-access'] = 'true';\n  }\n  if (!autoNeg && type !== 'LoadBalancer') {\n    annotations['cloud.google.com/neg'] = '{\"ingress\": true}';\n  }\n\n  if (twDomain) {\n    annotations[DOMAIN] = twDomain.fqdn;\n    labels[DOMAIN] = getLabelSafeDomain(twDomain);\n  }\n\n  const k8sService = new kubernetes.core.v1.Service(\n    k8sUniqueName(name, provider),\n    {\n      metadata: {\n        name: name,\n        labels: objectBool(labels) ? labels : undefined,\n        annotations,\n      },\n      spec: {\n        ports,\n        type,\n        selector: selector || {\n          'triplewhale.com/deployment': name,\n        },\n      },\n    },\n    { provider, dependsOn }\n  );\n\n  if (twDomain) {\n    if (ingressMode === 'cluster-local') {\n      throw new Error('Cluster-local ingress mode is not supported with TWDomain');\n    }\n    addDnsRecord({\n      name: twDomain.fullSubDomain,\n      domainName: twDomain.domain,\n      type: 'A',\n      value: k8sService.status.loadBalancer.ingress[0].ip,\n    });\n  }\n\n  return { k8sService };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args?: {\n  provider: K8sProvider;\n  name: string;\n  ingressMode?: IngressMode;\n  autoNeg?: AutoNegConfig;\n  selector?: Record<string, string>;\n  type?: 'ClusterIP' | 'NodePort' | 'LoadBalancer';\n  annotations?: Record<string, pulumi.Output<string> | string>;\n  twDomain?: TWDomain;\n  ports?: kubernetes.types.input.core.v1.ServicePort[];\n  dependsOn?: DependsOn;\n  backendConfig?: kubernetes.apiextensions.CustomResource;\n}",
            "type": "{\n  provider: K8sProvider;\n  name: string;\n  ingressMode?: IngressMode;\n  autoNeg?: AutoNegConfig;\n  selector?: Record<string, string>;\n  type?: 'ClusterIP' | 'NodePort' | 'LoadBalancer';\n  annotations?: Record<string, pulumi.Output<string> | string>;\n  twDomain?: TWDomain;\n  ports?: kubernetes.types.input.core.v1.ServicePort[];\n  dependsOn?: DependsOn;\n  backendConfig?: kubernetes.apiextensions.CustomResource;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/types.ts",
    "exports": [
      {
        "name": " K8sMemory",
        "text": "\n\nexport type K8sMemory = `${number}Mi` | `${number}Gi`;",
        "type": "`${number}Mi` | `${number}Gi`"
      },
      {
        "name": " K8sCPU",
        "text": "\n\nexport type K8sCPU = `${number}m` | number;",
        "type": "`${number}m` | number"
      },
      {
        "name": " K8sResources",
        "text": "\n\nexport interface K8sResources {\n  memoryLimit?: K8sMemory;\n  memoryRequest?: K8sMemory;\n  CPULimit?: K8sCPU;\n  CPURequest?: K8sCPU;\n  GPURequest?: string;\n}",
        "type": "interface"
      },
      {
        "name": " LoadBalancerConfig",
        "text": "\n\nexport type LoadBalancerConfig = {\n  ipv6?: boolean;\n  loadBalancingScheme?: LoadBalancingScheme;\n  logSampleRate?: number;\n  whiteList?: string[];\n  securityPolicy?: gcp.compute.SecurityPolicy;\n};",
        "type": "{\n  ipv6?: boolean;\n  loadBalancingScheme?: LoadBalancingScheme;\n  logSampleRate?: number;\n  whiteList?: string[];\n  securityPolicy?: gcp.compute.SecurityPolicy;\n}"
      },
      {
        "name": " IngressesConfig",
        "text": "\n\nexport type IngressesConfig = {\n  ingressMode?: IngressMode;\n  ingressType?: IngressType;\n  loadBalancerConfig?: LoadBalancerConfig;\n};",
        "type": "{\n  ingressMode?: IngressMode;\n  ingressType?: IngressType;\n  loadBalancerConfig?: LoadBalancerConfig;\n}"
      },
      {
        "name": " IngressMode",
        "text": "\n\nexport type IngressMode = 'open' | 'iap' | 'internal' | 'cluster-local';",
        "type": "'open' | 'iap' | 'internal' | 'cluster-local'"
      },
      {
        "name": " IngressType",
        "text": "\n\nexport type IngressType = 'ingress' | 'load-balancer' | 'service';",
        "type": "'ingress' | 'load-balancer' | 'service'"
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/utils.ts",
    "exports": [
      {
        "type": "function",
        "name": " getK8sDeploymentEnvs",
        "text": "\n\nexport function getK8sDeploymentEnvs(args: {\n  provider: K8sProvider;\n  deploymentName: string;\n  envs?: Record<string, any>;\n  datadogConfig?: TracerOptions | 'false';\n  secretVersion?: gcp.secretmanager.SecretVersion;\n}) {\n  const { envs = [], provider, datadogConfig, secretVersion, deploymentName } = args;\n  const { serviceConfig, isSensory, serviceId } = getConfigs();\n  const deploymentEnvs: kubernetes.types.input.core.v1.EnvVar[] = [\n    { name: 'IS_K8S', value: 'true' },\n    { name: 'DD_AGENT_HOST', valueFrom: { fieldRef: { fieldPath: 'status.hostIP' } } },\n    { name: 'K8S_NAME', valueFrom: { fieldRef: { fieldPath: 'metadata.name' } } },\n    { name: 'K8S_NAMESPACE', valueFrom: { fieldRef: { fieldPath: 'metadata.namespace' } } },\n    { name: 'K8S_HOST_IP', valueFrom: { fieldRef: { fieldPath: 'status.hostIP' } } },\n    { name: 'K8S_POD_IP', valueFrom: { fieldRef: { fieldPath: 'status.podIP' } } },\n    { name: 'K8S_NODE_NAME', valueFrom: { fieldRef: { fieldPath: 'spec.nodeName' } } },\n    { name: 'FORCE_REV', value: process.env.F },\n    // TW\n    { name: 'SERVICE_ID', value: serviceId },\n    { name: 'TW_CLUSTER', value: provider.cluster_urn },\n    { name: 'TW_DEPLOYMENT', value: deploymentName },\n    ...getDDEnvs(),\n    ...getServiceDefaultEnvs(),\n    ...convertEnvs(serviceConfig?.env),\n    ...convertEnvs(envs),\n    ...convertEnvs(serviceEnvs),\n  ];\n\n  if (datadogConfig) {\n    deploymentEnvs.push({ name: 'TW_DD_CONFIG', value: JSON.stringify(datadogConfig) });\n  }\n  if (secretVersion) {\n    deploymentEnvs.push({ name: 'TW_SECRET_NAME', value: secretVersion.name });\n  }\n  if (isSensory) {\n    deploymentEnvs.push({ name: 'IS_SENSORY', value: 'true' });\n  }\n  return deploymentEnvs;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  provider: K8sProvider;\n  deploymentName: string;\n  envs?: Record<string, any>;\n  datadogConfig?: TracerOptions | 'false';\n  secretVersion?: gcp.secretmanager.SecretVersion;\n}",
            "type": "{\n  provider: K8sProvider;\n  deploymentName: string;\n  envs?: Record<string, any>;\n  datadogConfig?: TracerOptions | 'false';\n  secretVersion?: gcp.secretmanager.SecretVersion;\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " k8sCpuMToString",
        "text": "\n\nexport function k8sCpuMToString(CPU: K8sCPU): K8sCPU {\n  if (typeof CPU === 'number') {\n    return CPU;\n  }\n  const CPUNum = Number(CPU.replace('m', ''));\n  if (CPUNum % 1000 === 0) {\n    return CPUNum / 1000;\n  }\n  return CPU;\n}",
        "parameters": [
          {
            "name": "CPU",
            "text": "CPU: K8sCPU",
            "type": "K8sCPU"
          }
        ]
      },
      {
        "type": "function",
        "name": " k8sCpuToNumber",
        "text": "\n\nexport function k8sCpuToNumber(CPU: K8sCPU): number {\n  // if is number, return\n  if (typeof CPU === 'number') {\n    return CPU;\n  }\n  if (CPU?.endsWith('m')) {\n    return Number(CPU.replace('m', '')) / 1000;\n  }\n  return Number(CPU);\n}",
        "parameters": [
          {
            "name": "CPU",
            "text": "CPU: K8sCPU",
            "type": "K8sCPU"
          }
        ]
      },
      {
        "type": "function",
        "name": " k8sMemoryToNumberGi",
        "text": "\n\nexport function k8sMemoryToNumberGi(memory: string): number {\n  if (memory?.endsWith('Mi')) {\n    return Number(memory.replace('Mi', '')) / 1024;\n  }\n  return Number(memory.replace('Gi', ''));\n}",
        "parameters": [
          {
            "name": "memory",
            "text": "memory: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " k8sMemoryToNumberMi",
        "text": "\n\nexport function k8sMemoryToNumberMi(memory: string): number {\n  if (memory?.endsWith('Gi')) {\n    return Number(memory.replace('Gi', '')) * 1024;\n  }\n  return Number(memory.replace('Mi', ''));\n}",
        "parameters": [
          {
            "name": "memory",
            "text": "memory: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " k8sMemoryMiToStringGi",
        "text": "\n\nexport function k8sMemoryMiToStringGi(memoryMi: number): string {\n  memoryMi = Math.floor(memoryMi);\n  if (memoryMi % 1024 === 0) {\n    return memoryMi / 1024 + 'Gi';\n  }\n  return memoryMi + 'Mi';\n}",
        "parameters": [
          {
            "name": "memoryMi",
            "text": "memoryMi: number",
            "type": "number"
          }
        ]
      },
      {
        "type": "function",
        "name": " createClusterLocalDnsName",
        "text": "\n\n// create cluster-local dns name\nexport function createClusterLocalDnsName(name: string, namespace?: string): string {\n  return `${name}.${namespace || getNamespace()}.svc.cluster.local`;\n}",
        "parameters": [
          {
            "name": "name",
            "text": "name: string",
            "type": "string"
          },
          {
            "name": "namespace",
            "text": "namespace?: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " k8sUniqueName",
        "text": "\n\nexport function k8sUniqueName(name: string, provider: K8sProvider): string {\n  return `${name}-${provider.uuid}`;\n}",
        "parameters": [
          {
            "name": "name",
            "text": "name: string",
            "type": "string"
          },
          {
            "name": "provider",
            "text": "provider: K8sProvider",
            "type": "K8sProvider"
          }
        ]
      },
      {
        "type": "function",
        "name": " createConfigMap",
        "text": "\n\nexport function createConfigMap(args: {\n  name: string;\n  provider: K8sProvider;\n  data: {\n    key: string;\n    data: pulumi.Input<any>;\n    type: 'json' | 'yaml';\n  }[];\n}) {\n  const { name, provider, data } = args;\n  const configMap = new kubernetes.core.v1.ConfigMap(\n    k8sUniqueName(name, provider),\n    {\n      metadata: {\n        name,\n      },\n      data: data.reduce((acc, { key, data: value, type }) => {\n        acc[key] = type === 'json' ? toJSONOutput(value) : toYamlOutput(value);\n        return acc;\n      }, {}),\n    },\n    { provider }\n  );\n  return configMap;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  provider: K8sProvider;\n  data: {\n    key: string;\n    data: pulumi.Input<any>;\n    type: 'json' | 'yaml';\n  }[];\n}",
            "type": "{\n  name: string;\n  provider: K8sProvider;\n  data: {\n    key: string;\n    data: pulumi.Input<any>;\n    type: 'json' | 'yaml';\n  }[];\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/k8s/volumes.ts",
    "exports": [
      {
        "type": "function",
        "name": " createReadOnlyManyVolumeFromDisk",
        "text": "\n\n// NOTE, if we set k8s names, pulumi - on replace will always try to delete first and then create,\n// which will always fail, because theres a pod still mounting the volume. this is why i let pulumi auto generate the names\n\nexport function createReadOnlyManyVolumeFromDisk(args: {\n  name: string;\n  disk: gcp.compute.Disk;\n  provider: K8sProvider;\n}) {\n  const { name, disk, provider } = args;\n  const size = pulumi.interpolate`${disk.size}G`;\n  const persistentVolume = new kubernetes.core.v1.PersistentVolume(\n    name,\n    {\n      apiVersion: 'v1',\n      kind: 'PersistentVolume',\n      spec: {\n        storageClassName: name,\n        capacity: {\n          storage: size,\n        },\n        accessModes: ['ReadOnlyMany'],\n        csi: {\n          driver: 'pd.csi.storage.gke.io',\n          volumeHandle: disk.id,\n          readOnly: true,\n        },\n      },\n    },\n    { provider }\n  );\n  const persistentVolumeClaim = new kubernetes.core.v1.PersistentVolumeClaim(\n    name,\n    {\n      apiVersion: 'v1',\n      kind: 'PersistentVolumeClaim',\n      metadata: {\n        labels: {\n          'triplewhale.com/disk-zone': disk.zone,\n        },\n      },\n      spec: {\n        storageClassName: persistentVolume.spec.storageClassName,\n        volumeName: persistentVolume.metadata.name,\n        accessModes: ['ReadOnlyMany'],\n        resources: {\n          requests: {\n            storage: size,\n          },\n        },\n      },\n    },\n    { provider }\n  );\n  return { persistentVolume, persistentVolumeClaim };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  disk: gcp.compute.Disk;\n  provider: K8sProvider;\n}",
            "type": "{\n  name: string;\n  disk: gcp.compute.Disk;\n  provider: K8sProvider;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/kafka/cluster.ts",
    "exports": [
      {
        "type": "function",
        "name": " createKafkaCluster",
        "text": "\n\nexport function createKafkaCluster(args: {\n  name: string;\n  provider: K8sProvider;\n  replicasNumber: number;\n  CPURequest: K8sCPU;\n  memoryRequest: K8sMemory;\n  storageSize?: string;\n  config?: Record<string, any>;\n}) {\n  const { name, replicasNumber = 3, storageSize = '1000Gb', config } = args;\n\n  const { CPULimit, CPURequest, memoryRequest, memoryLimit } = resourceCalc({\n    CPURequest: args.CPURequest,\n    memoryRequest: args.memoryRequest,\n  });\n  let provider = args.provider;\n  const domain = new TWDomain('triplestack.io', `${name}-bootstrap.kafka`, 'internal');\n  const brokers: {\n    domain: TWDomain;\n    replica: number;\n  }[] = [];\n  for (const replica of enumerateNumber(replicasNumber)) {\n    const brokerDomain = new TWDomain(\n      'triplestack.io',\n      `${name}-broker-${replica}.kafka`,\n      'internal'\n    );\n    brokers.push({\n      domain: brokerDomain,\n      replica,\n    });\n  }\n\n  // https://strimzi.io/docs/operators/latest/configuring\n  const deployment = new kubernetes.apiextensions.CustomResource(\n    name,\n    {\n      apiVersion: 'kafka.strimzi.io/v1beta2',\n      kind: 'Kafka',\n      metadata: {\n        name,\n      },\n      spec: {\n        kafka: {\n          replicas: replicasNumber,\n          resources: {\n            requests: {\n              cpu: CPURequest,\n              memory: memoryRequest,\n            },\n            limits: {\n              cpu: CPULimit,\n              memory: memoryLimit,\n            },\n          },\n          listeners: [\n            {\n              name: 'plain',\n              port: 9092,\n              type: 'internal',\n              tls: false,\n              configuration: {\n                brokers: brokers.map(({ domain, replica }) => ({\n                  advertisedHost: domain.fqdn,\n                  broker: replica,\n                })),\n              },\n              networkPolicyPeers: [],\n            },\n            {\n              name: 'tls',\n              port: 9093,\n              type: 'internal',\n              tls: true,\n              networkPolicyPeers: [],\n            },\n          ],\n          // https://docs.aws.amazon.com/msk/latest/developerguide/msk-configuration-properties.html\n          config: {\n            'offsets.topic.replication.factor': 1,\n            'transaction.state.log.replication.factor': 1,\n            'transaction.state.log.min.isr': 1,\n            'default.replication.factor': 1,\n            'min.insync.replicas': 1,\n            'inter.broker.protocol.version': '3.7',\n            'num.recovery.threads.per.data.dir': 10,\n            ...config,\n          },\n          storage: {\n            type: 'jbod',\n            volumes: [\n              {\n                id: 0,\n                type: 'persistent-claim',\n                size: storageSize,\n                deleteClaim: false,\n              },\n            ],\n          },\n          jmxOptions: {},\n          template: {\n            pod: {\n              terminationGracePeriodSeconds: 180,\n            },\n          },\n        },\n        zookeeper: {\n          replicas: 3,\n          resources: {\n            requests: {\n              cpu: '200m',\n              memory: '2Gi',\n            },\n            limits: {\n              cpu: '800m',\n              memory: '4Gi',\n            },\n          },\n          jmxOptions: {},\n          storage: {\n            type: 'persistent-claim',\n            size: '100Gi',\n            deleteClaim: false,\n          },\n        },\n      },\n    },\n    { provider }\n  );\n\n  provider = provider.dependOn(deployment);\n\n  const ports = [\n    {\n      name: 'plain',\n      port: 9092,\n      targetPort: 9092,\n    },\n    {\n      name: 'tls',\n      port: 9093,\n      targetPort: 9093,\n    },\n  ];\n\n  const selector = {\n    'strimzi.io/cluster': name,\n    'strimzi.io/component-type': 'kafka',\n    'strimzi.io/kind': 'Kafka',\n  };\n\n  createK8sService({\n    name: `${name}-bootstrap`,\n    twDomain: domain,\n    selector,\n    type: 'LoadBalancer',\n    ingressMode: 'internal',\n    provider,\n    ports,\n  });\n\n  for (const { domain, replica } of brokers) {\n    createK8sService({\n      name: `${name}-broker-${replica}`,\n      twDomain: domain,\n      selector: {\n        ...selector,\n        'strimzi.io/pod-name': `${name}-kafka-${replica}`,\n      },\n      type: 'LoadBalancer',\n      ingressMode: 'internal',\n      provider,\n      ports,\n    });\n  }\n\n  const consoleDomain = new TWDomain(\n    'triplestack.io',\n    `${name}.console`,\n    'internal',\n    projectIdAsSubDomain\n  );\n\n  const configYaml = {\n    connect: {\n      enabled: true,\n      clusters: [\n        {\n          name: 'sonic',\n          url: 'http://sonic-connect-api.kafka-connect.svc.cluster.local:8083',\n          tls: {\n            enabled: false,\n          },\n        },\n      ],\n    },\n  };\n\n  const configMap = createConfigMap({\n    name: `${name}-console-config`,\n    provider,\n    data: [\n      {\n        key: 'redpanda-console-config.yaml',\n        data: configYaml,\n        type: 'yaml',\n      },\n    ],\n  });\n\n  deployToK8s({\n    name: `${name}-console`,\n    serviceAccount: null,\n    createK8sDeploymentArgs: {\n      envs: {\n        KAFKA_BROKERS: `${domain.fqdn}:9092`,\n        CONFIG_FILEPATH: '/etc/redpanda/redpanda-console-config.yaml',\n      },\n      podArgs: {\n        image: 'docker.redpanda.com/redpandadata/console:v2.6.0',\n        allowSpot: false,\n        extraVolumes: [\n          {\n            configMap: {\n              name: configMap.metadata.name,\n            },\n            path: '/etc/redpanda',\n            name: 'redpanda-console-config',\n          },\n        ],\n      },\n      maxReplicas: 1,\n    },\n    domain: consoleDomain,\n    ingresses: [\n      { ingressType: 'service', ingressMode: 'internal' },\n      { ingressType: 'ingress', ingressMode: 'iap' },\n    ],\n    providers: [provider],\n  });\n\n  createKafkaExporter({\n    provider,\n    name,\n    servers: brokers.map(({ domain }) => domain.fqdn + ':9092'),\n  });\n\n  const clusterInfo: ClusterInfo = {\n    name,\n    consoleDomain: consoleDomain.fqdn,\n    bootstrapDomain: domain.fqdn,\n    brokerDomains: brokers.map(({ domain }) => domain.fqdn),\n  };\n\n  storeHostedServiceInfo({\n    name,\n    type: 'kafka',\n    data: clusterInfo,\n  });\n  return { deployment, clusterInfo };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  provider: K8sProvider;\n  replicasNumber: number;\n  CPURequest: K8sCPU;\n  memoryRequest: K8sMemory;\n  storageSize?: string;\n  config?: Record<string, any>;\n}",
            "type": "{\n  name: string;\n  provider: K8sProvider;\n  replicasNumber: number;\n  CPURequest: K8sCPU;\n  memoryRequest: K8sMemory;\n  storageSize?: string;\n  config?: Record<string, any>;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/kafka/connect.ts",
    "exports": [
      {
        "type": "function",
        "name": " createKafkaConnectCluster",
        "text": "\n\nexport function createKafkaConnectCluster(args: {\n  name: string;\n  provider: K8sProvider;\n  bootstrapServer: pulumi.Input<string>;\n  clickhouseConnectorVersion?: string;\n}) {\n  const { name, provider, bootstrapServer, clickhouseConnectorVersion = '1.1.18' } = args;\n\n  const { serviceAccount } = createServiceAccount({\n    name: `kafka-build-${name}`,\n    roles: ['roles/artifactregistry.repoAdmin'],\n    addDefault: false,\n  });\n\n  addWorkloadIdentityUserToSa({\n    serviceAccount,\n    name: `${name}-connect-build`,\n    provider,\n  });\n\n  const configMap = createConfigMap({\n    name: 'my-connect-config',\n    provider,\n    data: [\n      {\n        key: 'config.yaml',\n        data: {\n          rules: [\n            {\n              pattern: '.*',\n            },\n          ],\n        },\n        type: 'yaml',\n      },\n    ],\n  });\n\n  const cluster = new kubernetes.apiextensions.CustomResource(\n    name,\n    {\n      apiVersion: 'kafka.strimzi.io/v1beta2',\n      kind: 'KafkaConnect',\n      metadata: {\n        name,\n        annotations: {\n          'strimzi.io/use-connector-resources': 'true',\n        },\n      },\n      spec: {\n        bootstrapServers: bootstrapServer,\n        logging: {\n          type: 'inline',\n          loggers: {\n            // 'rootLogger.level': 'TRACE',\n            // 'connect.root.logger.level': 'TRACE',\n          },\n        },\n        replicas: 6,\n        resources: {\n          requests: {\n            cpu: 8,\n            memory: '34Gi',\n          },\n        },\n        metricsConfig: {\n          type: 'jmxPrometheusExporter',\n          valueFrom: {\n            configMapKeyRef: {\n              name: configMap.metadata.name,\n              key: 'config.yaml',\n            },\n          },\n        },\n\n        build: {\n          output: {\n            type: 'docker',\n            image: getDevopsImage(`kafka-connect-${name}`, clickhouseConnectorVersion),\n          },\n          plugins: [\n            {\n              name: 'clickhouse',\n              artifacts: [\n                {\n                  type: 'zip',\n                  url: `https://storage.googleapis.com/file-hosting-bucket-shofifi/devops/clickhouse-kafka-connect-v${clickhouseConnectorVersion}.zip`,\n                },\n              ],\n            },\n          ],\n        },\n        template: {\n          connectContainer: {\n            env: [\n              {\n                name: 'INCLUDE_SOURCE_IN_LOCATION',\n                value: 'true',\n              },\n            ],\n          },\n          buildServiceAccount: {\n            metadata: {\n              annotations: {\n                'iam.gke.io/gcp-service-account': serviceAccount.email,\n              },\n            },\n          },\n        },\n      },\n    },\n    { provider }\n  );\n\n  const selector = {\n    'strimzi.io/cluster': name,\n    'strimzi.io/kind': 'KafkaConnect',\n    'strimzi.io/name': `${name}-connect`,\n  };\n\n  createPrometheusMonitor({\n    name: `kafka-connect-${name}`,\n    provider,\n    labels: selector,\n    release: 'devops',\n    endpoints: [\n      {\n        portName: 'tcp-prometheus',\n        interval: '30s',\n      },\n    ],\n  });\n\n  createAllowAllNetworkPolicy(provider);\n\n  return cluster;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  provider: K8sProvider;\n  bootstrapServer: pulumi.Input<string>;\n  clickhouseConnectorVersion?: string;\n}",
            "type": "{\n  name: string;\n  provider: K8sProvider;\n  bootstrapServer: pulumi.Input<string>;\n  clickhouseConnectorVersion?: string;\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " createKafkaConnector",
        "text": "\n\nexport function createKafkaConnector(args: {\n  name: string;\n  clusterName: string;\n  provider: K8sProvider;\n  topics: string[];\n  config: Record<string, pulumi.Input<string | number>>;\n  tasksMax?: number;\n  className?: string;\n}) {\n  const {\n    name,\n    clusterName,\n    provider,\n    topics,\n    config,\n    tasksMax = 4,\n    className = 'com.clickhouse.kafka.connect.ClickHouseSinkConnector',\n  } = args;\n\n  // https://strimzi.io/docs/operators/latest/full/overview#configuration-points-connect_str:~:text=Example%20KafkaConnector%20source%20connector%20configuration\n  const connector = new kubernetes.apiextensions.CustomResource(\n    name,\n    {\n      apiVersion: 'kafka.strimzi.io/v1beta2',\n      kind: 'KafkaConnector',\n      metadata: {\n        name,\n        labels: {\n          'strimzi.io/cluster': clusterName,\n        },\n      },\n      spec: {\n        class: className,\n        tasksMax,\n        config: {\n          topics: topics.join(','),\n          'errors.tolerance': 'all',\n          'errors.deadletterqueue.topic.name': `${name}-errors`,\n          'errors.deadletterqueue.topic.replication.factor': 1,\n          'errors.deadletterqueue.context.headers.enable': 'true',\n          'consumer.override.max.poll.records': '10000',\n          'fetch.max.wait.ms': `${tasksMax * 1000}`,\n          ...config,\n        },\n      },\n    },\n    { provider }\n  );\n  return connector;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  clusterName: string;\n  provider: K8sProvider;\n  topics: string[];\n  config: Record<string, pulumi.Input<string | number>>;\n  tasksMax?: number;\n  className?: string;\n}",
            "type": "{\n  name: string;\n  clusterName: string;\n  provider: K8sProvider;\n  topics: string[];\n  config: Record<string, pulumi.Input<string | number>>;\n  tasksMax?: number;\n  className?: string;\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " createKafkaConnectorClickhouse",
        "text": "\n\nexport function createKafkaConnectorClickhouse(args: {\n  name: string;\n  provider: K8sProvider;\n  topics: string[];\n  clusterName?: string;\n  tasksMax?: number;\n  defaultTable?: pulumi.Input<string>;\n  realtimeTable?: pulumi.Input<string>;\n  dateField?: pulumi.Input<string>;\n  splitDays?: number;\n}) {\n  const {\n    name,\n    provider,\n    clusterName = 'sonic',\n    tasksMax,\n    topics,\n    defaultTable,\n    realtimeTable,\n    dateField,\n    splitDays,\n  } = args;\n\n  const clickhouseProvider = getClickhouseProvider();\n  return createKafkaConnector({\n    name,\n    clusterName,\n    provider,\n    topics,\n    tasksMax,\n    config: {\n      database: 'sonic_system',\n      hostname: clickhouseProvider.host,\n      username: clickhouseProvider.username,\n      password: clickhouseProvider.password,\n      port: '8123',\n      defaultTable,\n      realtimeTable,\n      dateField,\n      splitDays,\n      'errors.retry.timeout': '60',\n      exactlyOnce: 'false',\n      ssl: 'false',\n      'value.converter': 'org.apache.kafka.connect.json.JsonConverter',\n      'value.converter.schemas.enable': 'false',\n      'key.converter': 'org.apache.kafka.connect.storage.StringConverter',\n      'errors.log.enable': 'true',\n      'trace.log.enable': 'false',\n    },\n  });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  provider: K8sProvider;\n  topics: string[];\n  clusterName?: string;\n  tasksMax?: number;\n  defaultTable?: pulumi.Input<string>;\n  realtimeTable?: pulumi.Input<string>;\n  dateField?: pulumi.Input<string>;\n  splitDays?: number;\n}",
            "type": "{\n  name: string;\n  provider: K8sProvider;\n  topics: string[];\n  clusterName?: string;\n  tasksMax?: number;\n  defaultTable?: pulumi.Input<string>;\n  realtimeTable?: pulumi.Input<string>;\n  dateField?: pulumi.Input<string>;\n  splitDays?: number;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/kafka/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/kafka/provider.ts",
    "exports": [
      {
        "type": "function",
        "name": " getKafkaProvider",
        "text": "\n\nexport function getKafkaProvider(name: string = 'sonic-cluster') {\n  if (!kafkaProviders[name]) {\n    const secret = getSecretValue(`${name}-kafka`).apply(JSON.parse);\n    const domain = secret.apply((s) => s.bootstrapDomain + ':9092');\n    kafkaProviders[name] = new kafka.Provider(name, {\n      bootstrapServers: [domain],\n      tlsEnabled: false,\n    });\n  }\n  return kafkaProviders[name];\n}",
        "parameters": [
          {
            "name": "name",
            "text": "name: string = 'sonic-cluster'",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/kafka/topic.ts",
    "exports": [
      {
        "type": "function",
        "name": " createKafkaTopic",
        "text": "\n\nexport function createKafkaTopic(args: {\n  name: string;\n  provider?: kafka.Provider;\n  partitions?: number;\n  replicationFactor?: number;\n}) {\n  const { name, provider = getKafkaProvider(), partitions = 20, replicationFactor = 1 } = args;\n  const topic = new kafka.Topic(\n    name,\n    {\n      name,\n      partitions,\n      replicationFactor,\n      config: {\n        'retention.ms': '604800000',\n        'max.message.bytes': 15 * 1024 * 1024,\n      },\n    },\n    { provider, deleteBeforeReplace: true }\n  );\n  return { topic };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  provider?: kafka.Provider;\n  partitions?: number;\n  replicationFactor?: number;\n}",
            "type": "{\n  name: string;\n  provider?: kafka.Provider;\n  partitions?: number;\n  replicationFactor?: number;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/knative/domain.ts",
    "exports": [
      {
        "type": "function",
        "name": " createKnativeDomainMapping",
        "text": "\n\nexport function createKnativeDomainMapping(args: {\n  twDomain: TWDomain;\n  mode: IngressMode;\n  provider: K8sProvider;\n}) {\n  const { twDomain, provider } = args;\n\n  const dnsRecord = addDnsRecord({\n    name: twDomain.fullSubDomain,\n    domainName: twDomain.domain,\n    type: 'A',\n    value: pulumi\n      .output(\n        promisify(dns.lookup)(\n          `${isStaging ? 'stg.' : ''}kourier-${provider.cluster_name}-${\n            provider.location\n          }.internal.whale3.io`\n        )\n      )\n      .apply((a) => a.address),\n    proxied: false,\n    ttl: 300,\n  });\n  return { dnsRecord };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  twDomain: TWDomain;\n  mode: IngressMode;\n  provider: K8sProvider;\n}",
            "type": "{\n  twDomain: TWDomain;\n  mode: IngressMode;\n  provider: K8sProvider;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/knative/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/knative/provider.ts",
    "exports": [
      {
        "type": "function",
        "name": " getKnativeProvider",
        "text": "\n\nexport function getKnativeProvider(args?: { namespace: string }) {\n  const { namespace } = args || {};\n  return getK8sProvider({ namespace, cluster: 'knative-cluster' });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args?: { namespace: string }",
            "type": "{ namespace: string }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/knative/serving.ts",
    "exports": [
      {
        "name": " CreateKnativeServingArgs",
        "text": "\n\nexport type CreateKnativeServingArgs = {\n  name: string;\n  podArgs: Omit<PodTemplateArgs, 'envs'>;\n  envs?: Record<string, any>;\n  minReplicas?: number;\n  maxReplicas?: number;\n  targetBurstCapacity?: number;\n  targetUtilizationPercentage?: number;\n  timeoutSeconds?: number;\n  windowSeconds?: number;\n  secretVersion?: gcp.secretmanager.SecretVersion;\n  concurrencyLimit?: number;\n  provider?: K8sProvider;\n  datadogConfig?: TracerOptions | 'false';\n  subDomain?: string;\n  metricType?: 'rps' | 'concurrency' | 'cpu' | 'memory';\n  target?: number;\n  rolloutDuration?: number;\n  labels?: Record<string, string>;\n  annotations?: Record<string, string>;\n};",
        "type": "{\n  name: string;\n  podArgs: Omit<PodTemplateArgs, 'envs'>;\n  envs?: Record<string, any>;\n  minReplicas?: number;\n  maxReplicas?: number;\n  targetBurstCapacity?: number;\n  targetUtilizationPercentage?: number;\n  timeoutSeconds?: number;\n  windowSeconds?: number;\n  secretVersion?: gcp.secretmanager.SecretVersion;\n  concurrencyLimit?: number;\n  provider?: K8sProvider;\n  datadogConfig?: TracerOptions | 'false';\n  subDomain?: string;\n  metricType?: 'rps' | 'concurrency' | 'cpu' | 'memory';\n  target?: number;\n  rolloutDuration?: number;\n  labels?: Record<string, string>;\n  annotations?: Record<string, string>;\n}"
      },
      {
        "type": "function",
        "name": " createKnativeServing",
        "text": "\n\nexport function createKnativeServing(args: CreateKnativeServingArgs, twDomain: TWDomain) {\n  const {\n    name,\n    envs = {},\n    podArgs,\n    minReplicas = 0,\n    maxReplicas = 50,\n    secretVersion,\n    provider = getKnativeProvider(),\n    datadogConfig,\n    targetBurstCapacity = 200,\n    targetUtilizationPercentage = 70,\n    timeoutSeconds = 600,\n    concurrencyLimit,\n    windowSeconds,\n    metricType = 'concurrency',\n    target = 80,\n    rolloutDuration = 300,\n    labels,\n  } = args || {};\n\n  const serviceConfig = loadServiceConfig();\n  const { config } = getConfigs();\n\n  let concurrency;\n\n  if (concurrencyLimit) {\n    concurrency = concurrencyLimit;\n  } else if (metricType === 'concurrency') {\n    concurrency = target;\n  }\n\n  const { workers } = pythonWorkers({\n    cpu: podArgs?.CPULimit || podArgs?.CPURequest || '500m',\n    concurrency,\n    serviceConfig,\n    workers: envs.WEB_CONCURRENCY,\n  });\n\n  envs.WEB_CONCURRENCY = workers;\n\n  const deploymentEnvs = getK8sDeploymentEnvs({\n    envs,\n    provider,\n    datadogConfig,\n    secretVersion,\n    deploymentName: name,\n  });\n\n  deploymentEnvs.push({ name: 'TW_NO_TIMEOUT', value: 'true' });\n  deploymentEnvs.push({\n    name: 'gracefulTerminationTimeout',\n    value: String((timeoutSeconds || 0) * 1000),\n  });\n\n  const podTemplate = createPodTemplate({\n    ...podArgs,\n    envs: deploymentEnvs,\n  });\n\n  // @ts-ignore\n  delete podTemplate.spec.containers[0].lifecycle;\n\n  const annotations = {\n    'autoscaling.knative.dev/min-scale': String(\n      isProduction || config.get('forceMin') ? minReplicas : 0\n    ),\n    'autoscaling.knative.dev/max-scale': String(maxReplicas),\n    // https://knative.dev/docs/serving/autoscaling/concurrency/#target-utilization\n    'autoscaling.knative.dev/target-utilization-percentage': String(targetUtilizationPercentage),\n    ...args.annotations,\n  };\n\n  if (concurrencyLimit === undefined || args.target || args.metricType) {\n    annotations['autoscaling.knative.dev/metric'] = metricType;\n    annotations['autoscaling.knative.dev/target'] = String(target);\n  }\n\n  if (['cpu', 'memory'].includes(metricType)) {\n    annotations['autoscaling.knative.dev/class'] = 'hpa.autoscaling.knative.dev';\n  }\n\n  const serviceAnnotations = {\n    'triplewhale.com/sub': twDomain.getSubDomain(),\n    'triplewhale.com/sub-domain': twDomain.getSubDomain(),\n  };\n\n  if (targetBurstCapacity !== undefined) {\n    annotations['autoscaling.knative.dev/target-burst-capacity'] = String(targetBurstCapacity);\n  }\n\n  if (windowSeconds) {\n    annotations['autoscaling.knative.dev/window'] = `${windowSeconds}s`;\n  }\n\n  if (rolloutDuration && !podArgs.persistentVolumeClaims?.length) {\n    serviceAnnotations['serving.knative.dev/rollout-duration'] = process.env.F\n      ? '0s'\n      : `${rolloutDuration}s`;\n  }\n\n  const knativeServing = new kubernetes.apiextensions.CustomResource(\n    name,\n    {\n      apiVersion: 'serving.knative.dev/v1',\n      kind: 'Service',\n      metadata: {\n        name,\n        // knative deletes annotations it doesn't know about from the service\n        annotations: serviceAnnotations,\n        labels: {\n          'triplewhale.com/private': 'cluster-local',\n          'triplewhale.com/visibility': 'cluster-local',\n          ...labels,\n        },\n      },\n      spec: {\n        template: {\n          metadata: {\n            annotations,\n            labels: {\n              ...createLabels(),\n              'triplewhale.com/deployment': name,\n              'app.kubernetes.io/name': name,\n              // @ts-ignore\n              ...podTemplate.metadata.labels,\n            },\n          },\n          spec: {\n            ...podTemplate.spec,\n            ...(concurrencyLimit ? { containerConcurrency: concurrencyLimit } : null),\n            timeoutSeconds,\n            responseStartTimeoutSeconds: timeoutSeconds,\n            idleTimeoutSeconds: timeoutSeconds,\n          },\n        },\n        traffic: [\n          {\n            percent: 100,\n            latestRevision: true,\n          },\n        ],\n      },\n    },\n    { provider }\n  );\n  return { knativeServing };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: CreateKnativeServingArgs",
            "type": "CreateKnativeServingArgs"
          },
          {
            "name": "twDomain",
            "text": "twDomain: TWDomain",
            "type": "TWDomain"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/mongodb/cluster.ts",
    "exports": [
      {
        "type": "function",
        "name": " createMongoCluster",
        "text": "\n\nexport function createMongoCluster(args: {\n  name: string;\n  providerInstanceSizeName: string;\n  providerAutoScalingComputeMaxInstanceSize?: string;\n  providerAutoScalingComputeMinInstanceSize?: string;\n  advancedConfiguration?: mongodbatlas.types.input.ClusterAdvancedConfiguration;\n  clusterType?: string;\n  numShards?: number;\n  cloudBackup?: boolean;\n}) {\n  const {\n    name,\n    providerInstanceSizeName,\n    cloudBackup = isProduction ? true : false,\n    advancedConfiguration,\n    numShards,\n    clusterType = 'REPLICASET',\n  } = args;\n  const globalInfraRef = getStackReference('infra');\n\n  const providerAutoScalingComputeMaxInstanceSize =\n    args.providerAutoScalingComputeMaxInstanceSize || providerInstanceSizeName;\n  const providerAutoScalingComputeMinInstanceSize =\n    args.providerAutoScalingComputeMinInstanceSize || providerInstanceSizeName;\n\n  const mongoCluster = new mongodbatlas.Cluster(\n    name,\n    {\n      // https://www.mongodb.com/docs/atlas/reference/api/clusters-create-one/\n      name,\n      projectId: globalInfraRef.getOutput('mongoDBProjectId'),\n      providerInstanceSizeName,\n      providerName: 'GCP',\n      providerRegionName: 'CENTRAL_US',\n      cloudBackup,\n      clusterType,\n      numShards,\n      mongoDbMajorVersion: '6.0',\n      autoScalingDiskGbEnabled: true,\n      autoScalingComputeEnabled: true,\n      autoScalingComputeScaleDownEnabled: true,\n      providerAutoScalingComputeMaxInstanceSize,\n      providerAutoScalingComputeMinInstanceSize,\n      advancedConfiguration,\n    },\n    { protect: true, provider: getMongoAtlasProvider(), aliases: [{ name: 'mongo-cluster' }] }\n  );\n\n  if (cloudBackup) {\n    new mongodbatlas.CloudBackupSchedule(\n      name,\n      {\n        clusterName: mongoCluster.name,\n        projectId: mongoCluster.projectId,\n        policyItemDaily: {\n          frequencyInterval: 1,\n          retentionUnit: 'days',\n          retentionValue: 7,\n        },\n      },\n      { provider: getMongoAtlasProvider() }\n    );\n  }\n\n  return { mongoCluster };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  providerInstanceSizeName: string;\n  providerAutoScalingComputeMaxInstanceSize?: string;\n  providerAutoScalingComputeMinInstanceSize?: string;\n  advancedConfiguration?: mongodbatlas.types.input.ClusterAdvancedConfiguration;\n  clusterType?: string;\n  numShards?: number;\n  cloudBackup?: boolean;\n}",
            "type": "{\n  name: string;\n  providerInstanceSizeName: string;\n  providerAutoScalingComputeMaxInstanceSize?: string;\n  providerAutoScalingComputeMinInstanceSize?: string;\n  advancedConfiguration?: mongodbatlas.types.input.ClusterAdvancedConfiguration;\n  clusterType?: string;\n  numShards?: number;\n  cloudBackup?: boolean;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/mongodb/createSearchIndex.ts",
    "exports": [
      {
        "type": "function",
        "name": " createMongoSearchIndex",
        "text": "\n\nexport function createMongoSearchIndex(args: {\n  name: string;\n  collectionName: string;\n  database?: string;\n  clusterName?: pulumi.Input<string>;\n}) {\n  const { serviceId } = getConfigs();\n\n  const { name, clusterName = 'shared-cluster', collectionName, database = serviceId } = args;\n  const globalInfraRef = getStackReference('infra');\n  const searchIndex = new mongodbatlas.SearchIndex(\n    `${name}-search-index`,\n    {\n      analyzer: 'lucene.standard',\n      name: name,\n      clusterName: clusterName,\n      collectionName: collectionName,\n      database: database,\n      mappingsDynamic: true,\n      projectId: globalInfraRef.getOutput('mongoDBProjectId'),\n      searchAnalyzer: 'lucene.standard',\n    },\n    { provider: getMongoAtlasProvider() }\n  );\n  return searchIndex;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  collectionName: string;\n  database?: string;\n  clusterName?: pulumi.Input<string>;\n}",
            "type": "{\n  name: string;\n  collectionName: string;\n  database?: string;\n  clusterName?: pulumi.Input<string>;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/mongodb/createUser.ts",
    "exports": [
      {
        "type": "function",
        "name": " createMongoDbUser",
        "text": "\n\nexport function createMongoDbUser() {\n  const { serviceId, projectId } = getConfigs();\n  const globalInfraRef = getStackReference(`infra`, projectId);\n  const userPassword = createPassword({ name: 'mongo-db-user-password', special: false });\n\n  const mongoDbUser = new mongodbatlas.DatabaseUser(\n    'mongo-db-user',\n    {\n      projectId: globalInfraRef.getOutput('mongoDBProjectId'),\n      roles: [{ roleName: 'readWriteAnyDatabase', databaseName: 'admin' }],\n      username: `${serviceId}-user`,\n      authDatabaseName: 'admin',\n      password: userPassword.result,\n    },\n    {\n      provider: getMongoAtlasProvider(),\n    }\n  );\n  return mongoDbUser;\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/pulumi/mongodb/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/mongodb/provider.ts",
    "exports": [
      {
        "type": "function",
        "name": " getMongoAtlasProvider",
        "text": "\n\nexport function getMongoAtlasProvider() {\n  if (!mongoAtlasProvider) {\n    mongoAtlasProvider = new mongodbatlas.Provider('mongodbatlas', {\n      privateKey: getSecretValue('mongodb-atlas-private-key'),\n      publicKey: getSecretValue('mongodb-atlas-public-key'),\n    });\n  }\n  return mongoAtlasProvider;\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/pulumi/mongodb/tiers.ts",
    "exports": [
      {
        "name": " AtlasTier",
        "text": "export type AtlasTier =\n  | 'M10'\n  | 'M20'\n  | 'M30'\n  | 'M40'\n  | 'M50'\n  | 'M60'\n  | 'M80'\n  | 'M140'\n  | 'M200'\n  | 'M250'\n  | 'M300'\n  | 'M400'\n  | 'M600';",
        "type": "| 'M10'\n  | 'M20'\n  | 'M30'\n  | 'M40'\n  | 'M50'\n  | 'M60'\n  | 'M80'\n  | 'M140'\n  | 'M200'\n  | 'M250'\n  | 'M300'\n  | 'M400'\n  | 'M600'"
      },
      {
        "name": " atlasTiers",
        "text": "\n\nexport const atlasTiers: AtlasTier[] = [\n  'M10',\n  'M20',\n  'M30',\n  'M40',\n  'M50',\n  'M60',\n  'M80',\n  'M140',\n  'M200',\n  'M250',\n  'M300',\n  'M400',\n  'M600',\n];",
        "type": "AtlasTier[]"
      },
      {
        "type": "function",
        "name": " getRelativeTier",
        "text": "\n\nexport function getRelativeTier(tier: AtlasTier, jump) {\n  const ind = atlasTiers.indexOf(tier);\n  return atlasTiers[ind + jump];\n}",
        "parameters": [
          {
            "name": "tier",
            "text": "tier: AtlasTier",
            "type": "AtlasTier"
          },
          {
            "name": "jump",
            "text": "jump",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/mongodb/utils.ts",
    "exports": [
      {
        "type": "function",
        "name": " getMongoDbConnectionString",
        "text": "\n\nexport function getMongoDbConnectionString(\n  mongoDbUser,\n  additionalOptions: {\n    cluster?: mongodbatlas.Cluster;\n    defaultDb?: string;\n    privateLink?: boolean;\n    clusterName?: string;\n  } = {}\n) {\n  const { serviceId, projectId } = getConfigs();\n  const { defaultDb = serviceId, privateLink = true, cluster } = additionalOptions;\n  let clusterName = additionalOptions.clusterName || cluster?.name || 'shared-cluster';\n  monitoringState.mongo.enabled = true;\n  monitoringState.mongo.resourceNames.push(clusterName);\n  let mongoSrvAddressId;\n  if (cluster) {\n    mongoSrvAddressId = cluster?.srvAddress?.apply((i) => i?.split('.')?.[1]);\n  } else {\n    const globalInfraRef = getStackReference(`infra`, projectId);\n    mongoSrvAddressId = globalInfraRef.getOutput('mongoSrvAddressId');\n  }\n  const auth = pulumi.interpolate`${mongoDbUser.username}:${mongoDbUser.password}`;\n  clusterName = privateLink ? pulumi.interpolate`${clusterName}-pl-0` : clusterName;\n  const result = pulumi.interpolate`mongodb+srv://${auth}@${clusterName}.${mongoSrvAddressId}.mongodb.net/${defaultDb}`;\n  return result;\n}",
        "parameters": [
          {
            "name": "mongoDbUser",
            "text": "mongoDbUser",
            "type": "any"
          },
          {
            "name": "additionalOptions",
            "text": "additionalOptions: {\n    cluster?: mongodbatlas.Cluster;\n    defaultDb?: string;\n    privateLink?: boolean;\n    clusterName?: string;\n  } = {}",
            "type": "{\n    cluster?: mongodbatlas.Cluster;\n    defaultDb?: string;\n    privateLink?: boolean;\n    clusterName?: string;\n  }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/monitoring/alerts.ts",
    "exports": [
      {
        "name": " BaseAlertArgs",
        "text": "\n\nexport type BaseAlertArgs = {\n  name: string;\n  sendEverySeconds?: number;\n  autoCloseSeconds?: number;\n  slack?: boolean;\n  slackChannel?: string;\n};",
        "type": "{\n  name: string;\n  sendEverySeconds?: number;\n  autoCloseSeconds?: number;\n  slack?: boolean;\n  slackChannel?: string;\n}"
      },
      {
        "type": "function",
        "name": " createLogBasedAlertWithThreshold",
        "text": "\n\nexport function createLogBasedAlertWithThreshold(\n  args: BaseAlertArgs & {\n    conditions: string[];\n    addNamespaceCondition?: boolean;\n    alertPolicy: {\n      duration?: string;\n      operator: 'GREATER_THAN' | 'LESS_THAN' | 'EQUAL';\n      threshold: number;\n    };\n    notificationChannels?: string[];\n    displayName: string;\n    alignmentPeriod?: string;\n  }\n) {\n  const { serviceId, projectId } = getConfigs();\n  const {\n    conditions,\n    alertPolicy,\n    notificationChannels = [],\n    name,\n    autoCloseSeconds = 604800,\n    slack = true,\n    slackChannel = defaultSlackChannelName,\n    displayName,\n    addNamespaceCondition = true,\n  } = args;\n  const { duration = '0s', operator, threshold } = alertPolicy;\n\n  addNamespaceCondition\n    ? conditions.push(`resource.labels.namespace_name=\"${serviceId}-ns\"`)\n    : null;\n  const filter = conditions.join(' ');\n\n  const logsBasedMetric = new gcp.logging.Metric(`${name}-metric`, {\n    name: `${name}-metric`,\n    filter: filter,\n    description: 'Metric based log',\n  });\n\n  const policy = new gcp.monitoring.AlertPolicy(name, {\n    displayName: displayName,\n    combiner: 'OR',\n    conditions: [\n      {\n        displayName: `${serviceId}-log-based-alert-policy-condition`,\n        conditionThreshold: {\n          filter: pulumi.interpolate`\n          metric.type=\"logging.googleapis.com/user/${logsBasedMetric.name}\" AND resource.type=\"cloud_run_revision\"`,\n          aggregations: [\n            {\n              alignmentPeriod: '600s',\n              crossSeriesReducer: 'REDUCE_SUM',\n              perSeriesAligner: 'ALIGN_DELTA',\n            },\n          ],\n          comparison: operatorsMap[operator],\n          thresholdValue: threshold,\n          trigger: {\n            count: 1,\n          },\n          duration,\n        },\n      },\n    ],\n    documentation: tagMaintainersSlack() || undefined,\n    notificationChannels: [\n      pubsubNotificationChannel,\n      ...(slack ? [slackNotificationChannels[projectId][slackChannel]] : []),\n      ...notificationChannels,\n    ],\n    alertStrategy: {\n      autoClose: `${autoCloseSeconds}s`,\n    },\n  });\n  return policy;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: BaseAlertArgs & {\n    conditions: string[];\n    addNamespaceCondition?: boolean;\n    alertPolicy: {\n      duration?: string;\n      operator: 'GREATER_THAN' | 'LESS_THAN' | 'EQUAL';\n      threshold: number;\n    };\n    notificationChannels?: string[];\n    displayName: string;\n    alignmentPeriod?: string;\n  }",
            "type": "BaseAlertArgs & {\n    conditions: string[];\n    addNamespaceCondition?: boolean;\n    alertPolicy: {\n      duration?: string;\n      operator: 'GREATER_THAN' | 'LESS_THAN' | 'EQUAL';\n      threshold: number;\n    };\n    notificationChannels?: string[];\n    displayName: string;\n    alignmentPeriod?: string;\n  }"
          }
        ]
      },
      {
        "type": "function",
        "name": " createLogBasedAlert",
        "text": "\n\nexport function createLogBasedAlert(\n  args: BaseAlertArgs & { logSearch: string; displayName: string }\n) {\n  const { name, sendEverySeconds, autoCloseSeconds = 604800, logSearch, slack, displayName } = args;\n  const conditions = [\n    {\n      displayName: 'Log match condition',\n      conditionMatchedLog: {\n        filter: logSearch,\n      },\n    },\n  ];\n  const alert = createAlert({\n    name,\n    sendEverySeconds,\n    autoCloseSeconds,\n    slack,\n    conditions,\n    isMetricBased: false,\n    displayName,\n  });\n  return alert;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: BaseAlertArgs & { logSearch: string; displayName: string }",
            "type": "BaseAlertArgs & { logSearch: string; displayName: string }"
          }
        ]
      },
      {
        "type": "function",
        "name": " createAlert",
        "text": "\n\nexport function createAlert(\n  args: BaseAlertArgs & {\n    conditions: gcp.types.input.monitoring.AlertPolicyCondition[];\n    combiner?: pulumi.Input<string>;\n    enabled?: boolean;\n    notificationChannels?: string[];\n    isMetricBased?: boolean;\n    displayName: string;\n  }\n) {\n  const { projectId, serviceId } = getConfigs();\n  const {\n    name,\n    sendEverySeconds = 3600,\n    autoCloseSeconds = 604800,\n    slack,\n    slackChannel = defaultSlackChannelName,\n    conditions,\n    combiner = 'OR',\n    enabled = true,\n    notificationChannels = [],\n    isMetricBased = true,\n    displayName,\n  } = args;\n\n  const alert = new gcp.monitoring.AlertPolicy(name, {\n    alertStrategy: {\n      ...(!isMetricBased\n        ? {\n            notificationRateLimit: {\n              period: `${sendEverySeconds}s`,\n            },\n          }\n        : {}),\n      autoClose: `${autoCloseSeconds}s`,\n    },\n    conditions,\n    combiner,\n    displayName,\n    documentation: slack ? tagMaintainersSlack() : null,\n    enabled,\n    notificationChannels: [\n      pubsubNotificationChannel,\n      ...(slack ? [slackNotificationChannels[projectId][slackChannel]] : []),\n      ...notificationChannels,\n    ],\n  });\n  return alert;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: BaseAlertArgs & {\n    conditions: gcp.types.input.monitoring.AlertPolicyCondition[];\n    combiner?: pulumi.Input<string>;\n    enabled?: boolean;\n    notificationChannels?: string[];\n    isMetricBased?: boolean;\n    displayName: string;\n  }",
            "type": "BaseAlertArgs & {\n    conditions: gcp.types.input.monitoring.AlertPolicyCondition[];\n    combiner?: pulumi.Input<string>;\n    enabled?: boolean;\n    notificationChannels?: string[];\n    isMetricBased?: boolean;\n    displayName: string;\n  }"
          }
        ]
      },
      {
        "type": "function",
        "name": " getAlertEmails",
        "text": "\n\nexport function getAlertEmails() {\n  if (!alertEmails?.length) {\n    const serviceConfig = loadServiceConfig();\n    const contacts = (serviceConfig.maintainers || []).concat(serviceConfig.contacts || []);\n    contacts.push(getAuthor());\n    alertEmails = [...new Set(contacts.filter(Boolean))];\n  }\n  return alertEmails;\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " getAuthor",
        "text": "\n\nexport function getAuthor() {\n  if (process.env.AUTHOR) return process.env.AUTHOR;\n  if (!process.env.IS_CLOUD_BUILD) {\n    try {\n      return getGcloudUserEmail();\n    } catch {}\n  }\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/pulumi/monitoring/dashboards.ts",
    "exports": [
      {
        "name": " defaultDashboardTiles",
        "text": "\n\nexport const defaultDashboardTiles: { resourceType?: string; metricType: string; name: string }[] =\n  [\n    {\n      resourceType: 'pubsub_subscription',\n      metricType: 'pubsub.googleapis.com/subscription/num_unacked_messages_by_region',\n      name: 'Pubsub unacked',\n    },\n    {\n      resourceType: 'pubsub_subscription',\n      metricType: 'pubsub.googleapis.com/subscription/oldest_unacked_message_age',\n      name: 'Pubsub oldest message',\n    },\n  ];",
        "type": "{ resourceType?: string; metricType: string; name: string }[]"
      },
      {
        "type": "function",
        "name": " createDefaultDashboard",
        "text": "\n\nexport function createDefaultDashboard() {\n  const { serviceId } = getConfigs();\n\n  const dashboardJson = {\n    category: 'CUSTOM',\n    displayName: `${serviceId} default dashboard`,\n    mosaicLayout: {\n      columns: 4,\n      tiles: defaultDashboardTiles.map(({ resourceType, metricType, name }) => {\n        return getTileForMetric({\n          serviceId,\n          resourceType,\n          metricType,\n          title: name,\n          pos,\n          step: 2,\n          columns: 4,\n        });\n      }),\n    },\n  };\n  new gcp.monitoring.Dashboard('service-default-dashboard', {\n    dashboardJson: pulumi.output(dashboardJson).apply((j) => JSON.stringify(j)),\n  });\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/pulumi/monitoring/defaultDashboards.ts",
    "exports": [
      {
        "type": "function",
        "name": " createDefaultServiceDashboards",
        "text": "\n\nexport function createDefaultServiceDashboards(args?: {}) {\n  const { serviceId } = getConfigs();\n\n  const metrics = [\n    ...defaultMetrics.cloud_run_revision(serviceId),\n    ...defaultMetrics.pubsub_subscription(serviceId),\n  ];\n\n  const dashboardJson = {\n    displayName: `${serviceId} default dashboard`,\n    labels: { services: 'services' },\n    mosaicLayout: {\n      columns: 4,\n      tiles: metrics.map(({ resourceType, metricType, name, filter, aggregation }) => {\n        return getTileForMetric({\n          resourceType,\n          metricType,\n          title: name,\n          pos,\n          step: 2,\n          columns: 4,\n          filter,\n          aggregation,\n        });\n      }),\n    },\n  };\n\n  new gcp.monitoring.Dashboard('service-default-dashboard', {\n    dashboardJson: toJSONOutput(dashboardJson),\n  });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args?: {}",
            "type": "{}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/monitoring/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/monitoring/metrics.ts",
    "exports": [
      {
        "name": " defaultMetrics",
        "text": "\n\nexport const defaultMetrics: Record<\n  string,\n  (args: any) => {\n    metricType: string;\n    resourceType: string;\n    name: string;\n    filter: string;\n    aggregation?: any;\n  }[]\n> = {\n  cloud_run_revision: (serviceId) => {\n    return [\n      {\n        metricType: 'run.googleapis.com/request_count',\n        resourceType: 'cloud_run_revision',\n        name: 'Cloud Run - Request Count',\n        filter: cloudRunFilter(serviceId),\n        aggregation: cloudRunAggregation(),\n      },\n      {\n        metricType: 'run.googleapis.com/request_latencies',\n        resourceType: 'cloud_run_revision',\n        name: 'Cloud Run - Request Latency',\n        filter: cloudRunFilter(serviceId),\n        aggregation: cloudRunAggregation(),\n      },\n      {\n        metricType: 'run.googleapis.com/container/cpu/utilizations',\n        resourceType: 'cloud_run_revision',\n        name: 'Cloud Run - Container CPU Utilization',\n        filter: cloudRunFilter(serviceId),\n        aggregation: cloudRunAggregation(),\n      },\n      {\n        metricType: 'run.googleapis.com/container/memory/utilizations',\n        resourceType: 'cloud_run_revision',\n        name: 'Cloud Run - Container Memory Utilization',\n        filter: cloudRunFilter(serviceId),\n        aggregation: cloudRunAggregation(),\n      },\n      {\n        metricType: 'run.googleapis.com/container/instance_count',\n        resourceType: 'cloud_run_revision',\n        name: 'Cloud Run - Instance Count',\n        filter: cloudRunFilter(serviceId),\n        aggregation: {\n          alignmentPeriod: '60s',\n          crossSeriesReducer: 'REDUCE_MEAN',\n          perSeriesAligner: 'ALIGN_SUM',\n        },\n      },\n    ];\n  },\n\n  pubsub_subscription: (serviceId) => {\n    return [\n      {\n        resourceType: 'pubsub_subscription',\n        metricType: 'pubsub.googleapis.com/subscription/num_unacked_messages_by_region',\n        name: 'Pubsub Subscription - unacked messages',\n        filter: labelFilter(serviceId),\n      },\n      {\n        resourceType: 'pubsub_subscription',\n        metricType: 'pubsub.googleapis.com/subscription/oldest_unacked_message_age',\n        name: 'Pubsub Subscription - oldest message age',\n        filter: labelFilter(serviceId),\n      },\n    ];\n  },\n};",
        "type": "Record<\n  string,\n  (args: any) => {\n    metricType: string;\n    resourceType: string;\n    name: string;\n    filter: string;\n    aggregation?: any;\n  }[]\n>"
      }
    ]
  },
  {
    "file": "@tw/pulumi/monitoring/notificationChannel.ts",
    "exports": [
      {
        "name": " slackNotificationChannels",
        "text": "\n\nexport const slackNotificationChannels = {\n  shofifi: {\n    '#cloud-alerts': `projects/shofifi/notificationChannels/2880990531074248576`,\n  },\n  'triple-whale-staging': {\n    '#cloud-alerts-stg': `projects/triple-whale-staging/notificationChannels/11720180862810124581`,\n  },\n};",
        "type": "variable"
      },
      {
        "name": " pubsubNotificationChannel",
        "text": "\n\nexport const pubsubNotificationChannel =\n  pubsubNotificationChannels[projectId]?.['cloud-notifications'];",
        "type": "variable"
      },
      {
        "name": " defaultSlackChannelName",
        "text": "\n\nexport const defaultSlackChannelName = `#cloud-alerts${isStaging ? '-stg' : ''}`;",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/pulumi/monitoring/redisAlerts.ts",
    "exports": [
      {
        "type": "function",
        "name": " createRedisAlert",
        "text": "\n\nexport function createRedisAlert(args: { instanceName: string }) {\n  const { serviceId, projectId, location } = getConfigs();\n  const conditions = [\n    {\n      displayName: `Cloud Memorystore Redis Instance - Memory Usage Ratio ${serviceId}`,\n      conditionThreshold: {\n        filter: `resource.type = \"redis_instance\" AND resource.labels.instance_id = \"projects/${projectId}/locations/${location}/instances/${args.instanceName}\" AND metric.type = \"redis.googleapis.com/stats/memory/usage_ratio\"`,\n        aggregations: [\n          {\n            alignmentPeriod: '300s',\n            crossSeriesReducer: 'REDUCE_NONE',\n            perSeriesAligner: 'ALIGN_MEAN',\n          },\n        ],\n        comparison: 'COMPARISON_GT',\n        duration: '0s',\n        trigger: {\n          count: 1,\n        },\n        thresholdValue: 0.75,\n      },\n    },\n  ];\n  const alert = createAlert({\n    name: `redis-${args.instanceName}`,\n    slack: true,\n    conditions,\n    displayName: `Redis ${args.instanceName} memory`,\n  });\n  return alert;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { instanceName: string }",
            "type": "{ instanceName: string }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/monitoring/state.ts",
    "exports": [
      {
        "name": " monitoringState",
        "text": "\n\nexport let monitoringState: {\n  pubsub: ComponentConfig;\n  pubsubPull: ComponentConfig;\n  pubsubPush: ComponentConfig;\n  sql: ComponentConfig;\n  saber: ComponentConfig;\n  redis: ComponentConfig;\n  k8s: ComponentConfig;\n  apmHttp: ComponentConfig;\n  cloudRun: ComponentConfig;\n  bigtable: ComponentConfig;\n  cloudTasks: ComponentConfig;\n  storage: ComponentConfig;\n  mongo: ComponentConfig;\n  temporal: ComponentConfig;\n  workflows: ComponentConfig;\n} = {\n  pubsub: {\n    enabled: false,\n  },\n  pubsubPull: {\n    enabled: false,\n  },\n  pubsubPush: {\n    enabled: false,\n  },\n  sql: {\n    enabled: false,\n  },\n  saber: {\n    enabled: false,\n  },\n  redis: {\n    enabled: false,\n    resourceNames: [],\n  },\n  apmHttp: {\n    enabled: false,\n  },\n  k8s: {\n    enabled: false,\n  },\n  cloudRun: {\n    enabled: false,\n  },\n  bigtable: {\n    enabled: false,\n  },\n  storage: {\n    enabled: false,\n  },\n  cloudTasks: {\n    enabled: false,\n    resourceNames: [],\n  },\n  mongo: {\n    enabled: false,\n    resourceNames: [],\n  },\n  temporal: {\n    enabled: false,\n  },\n  workflows: {\n    enabled: false,\n  },\n};",
        "type": "{\n  pubsub: ComponentConfig;\n  pubsubPull: ComponentConfig;\n  pubsubPush: ComponentConfig;\n  sql: ComponentConfig;\n  saber: ComponentConfig;\n  redis: ComponentConfig;\n  k8s: ComponentConfig;\n  apmHttp: ComponentConfig;\n  cloudRun: ComponentConfig;\n  bigtable: ComponentConfig;\n  cloudTasks: ComponentConfig;\n  storage: ComponentConfig;\n  mongo: ComponentConfig;\n  temporal: ComponentConfig;\n  workflows: ComponentConfig;\n}"
      }
    ]
  },
  {
    "file": "@tw/pulumi/monitoring/utils.ts",
    "exports": [
      {
        "type": "function",
        "name": " getTileForMetric",
        "text": "export function getTileForMetric(args: {\n  serviceId?: string;\n  resourceType: string | undefined;\n  metricType: string;\n  title: string;\n  pos: { xPos: number; yPos: number };\n  step: number;\n  columns: number;\n  filter?: string;\n  aggregation?: any;\n}) {\n  const { serviceId, resourceType, metricType, title, pos, step, columns, filter, aggregation } =\n    args;\n  let metricFilter = `metric.type=\"${metricType}\"`;\n  if (resourceType) {\n    metricFilter += ` resource.type=\"${resourceType}\"`;\n  }\n  if (serviceId) {\n    metricFilter += ` metadata.user_labels.\"service-id\"=\"${serviceId}\"`;\n  }\n  if (filter) {\n    metricFilter += ` ${filter}`;\n  }\n  const result = {\n    height: step,\n    widget: {\n      title,\n      xyChart: {\n        chartOptions: {\n          mode: 'COLOR',\n        },\n        dataSets: [\n          {\n            minAlignmentPeriod: '60s',\n            plotType: 'LINE',\n            targetAxis: 'Y1',\n            timeSeriesQuery: {\n              timeSeriesFilter: {\n                aggregation: aggregation\n                  ? aggregation\n                  : {\n                      alignmentPeriod: '60s',\n                      perSeriesAligner: 'ALIGN_MEAN',\n                    },\n                filter: metricFilter,\n              },\n            },\n          },\n        ],\n        timeshiftDuration: '0s',\n        yAxis: {\n          label: 'y1Axis',\n          scale: 'LINEAR',\n        },\n      },\n    },\n    width: step,\n    xPos: pos.xPos,\n    yPos: pos.yPos,\n  };\n  if (pos.xPos < columns - step) pos.xPos += step;\n  else {\n    pos.xPos = 0;\n    pos.yPos += step;\n  }\n  if (result.xPos === 0) {\n    delete result.xPos;\n  }\n  if (result.yPos === 0) {\n    delete result.yPos;\n  }\n  return result;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  serviceId?: string;\n  resourceType: string | undefined;\n  metricType: string;\n  title: string;\n  pos: { xPos: number; yPos: number };\n  step: number;\n  columns: number;\n  filter?: string;\n  aggregation?: any;\n}",
            "type": "{\n  serviceId?: string;\n  resourceType: string | undefined;\n  metricType: string;\n  title: string;\n  pos: { xPos: number; yPos: number };\n  step: number;\n  columns: number;\n  filter?: string;\n  aggregation?: any;\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " cloudRunFilter",
        "text": "\n\nexport function cloudRunFilter(serviceId) {\n  return `resource.label.\"service_name\"=\"${serviceId}\"`;\n}",
        "parameters": [
          {
            "name": "serviceId",
            "text": "serviceId",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " labelFilter",
        "text": "\n\nexport function labelFilter(serviceId) {\n  return `metadata.user_labels.\"service-id\"=\"${serviceId}\"`;\n}",
        "parameters": [
          {
            "name": "serviceId",
            "text": "serviceId",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " cloudRunAggregation",
        "text": "\n\nexport function cloudRunAggregation() {\n  return {\n    alignmentPeriod: '60s',\n    crossSeriesReducer: 'REDUCE_MEAN',\n    perSeriesAligner: 'ALIGN_DELTA',\n  };\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " createDataSet",
        "text": "\n\nexport function createDataSet(args: {}) {}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {}",
            "type": "{}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/networking/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/networking/loadBalancer.ts",
    "exports": [
      {
        "type": "function",
        "name": " createLoadBalancer",
        "text": "\nexport function createLoadBalancer(args?: {\n  name: string;\n  domains: string[];\n  cloudRuns?: CloudRunConf[];\n  buckets?: BucketConf[];\n  defaultService: string;\n  headerAction?: gcp.types.input.compute.URLMapPathMatcherHeaderAction;\n  ipv6?: boolean;\n  classic?: boolean;\n}) {\n  const { location, serviceId } = getConfigs();\n  const {\n    domains,\n    name,\n    cloudRuns = [],\n    buckets = [],\n    defaultService,\n    ipv6,\n    classic = true,\n    headerAction,\n  } = args || {};\n\n  const loadBalancingScheme = classic ? 'EXTERNAL' : 'EXTERNAL_MANAGED';\n  const pathRules: gcp.types.input.compute.URLMapPathMatcherPathRule[] = [];\n  const backends = {};\n\n  const sslCertificate = new gcp.compute.ManagedSslCertificate(`managed-ssl-${name}`, {\n    managed: { domains: domains },\n  });\n\n  for (const cloudRun of cloudRuns) {\n    const endpointGroup = new gcp.compute.RegionNetworkEndpointGroup(\n      `${cloudRun.name}-endpoint-group`,\n      {\n        name: `${cloudRun.name}-${name}`,\n        networkEndpointType: 'SERVERLESS',\n        region: location,\n        cloudRun: { service: cloudRun.name },\n      }\n    );\n\n    const backendService = new gcp.compute.BackendService(`${cloudRun.name}-backend-service`, {\n      name: `${cloudRun.name}-${name}`,\n      backends: [{ group: endpointGroup.id }],\n      loadBalancingScheme,\n    });\n    backends[cloudRun.name] = backendService;\n    pathRules.push({\n      paths: cloudRun.paths,\n      service: backendService.id,\n      routeAction: cloudRun.routeAction,\n    });\n  }\n\n  for (const bucket of buckets) {\n    const backendBucket = new gcp.compute.BackendBucket(`${bucket.name}-backend-service`, {\n      name: `${serviceId}-${bucket.name}-bucket`,\n      bucketName: bucket.name,\n      enableCdn: bucket.enableCdn,\n      cdnPolicy: bucket.cdnPolicy,\n      compressionMode: bucket.compressionMode,\n    });\n    backends[bucket.name] = backendBucket;\n    pathRules.push({\n      paths: bucket.paths,\n      service: backendBucket.id,\n      routeAction: bucket.routeAction,\n    });\n  }\n\n  const urlMap = new gcp.compute.URLMap(`${name}-url-map`, {\n    name: `${name}-load-balancer`,\n    defaultService: backends[defaultService].id,\n    hostRules: [\n      {\n        hosts: domains,\n        pathMatcher: 'paths',\n      },\n    ],\n    pathMatchers: [\n      {\n        name: 'paths',\n        defaultService: backends[defaultService].id,\n        pathRules,\n        headerAction,\n      },\n    ],\n  });\n\n  const targetHttpsProxy = new gcp.compute.TargetHttpsProxy(`${name}-https-proxy`, {\n    urlMap: urlMap.id,\n    sslCertificates: [sslCertificate.id],\n    sslPolicy: 'ssl-1-2',\n  });\n\n  const httpForwarderIPV4 = new gcp.compute.GlobalForwardingRule(`${name}-forward-http-ipv4`, {\n    portRange: '443',\n    target: targetHttpsProxy.id,\n    ipVersion: 'IPV4',\n    loadBalancingScheme,\n  });\n\n  const httpForwarderIPV6 = ipv6\n    ? new gcp.compute.GlobalForwardingRule(`${name}-forward-http-ipv6`, {\n        portRange: '443',\n        target: targetHttpsProxy.id,\n        ipVersion: 'IPV6',\n        loadBalancingScheme,\n      })\n    : null;\n\n  return { httpForwarderIPV4, httpForwarderIPV6 };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args?: {\n  name: string;\n  domains: string[];\n  cloudRuns?: CloudRunConf[];\n  buckets?: BucketConf[];\n  defaultService: string;\n  headerAction?: gcp.types.input.compute.URLMapPathMatcherHeaderAction;\n  ipv6?: boolean;\n  classic?: boolean;\n}",
            "type": "{\n  name: string;\n  domains: string[];\n  cloudRuns?: CloudRunConf[];\n  buckets?: BucketConf[];\n  defaultService: string;\n  headerAction?: gcp.types.input.compute.URLMapPathMatcherHeaderAction;\n  ipv6?: boolean;\n  classic?: boolean;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/otel/collector.ts",
    "exports": [
      {
        "type": "function",
        "name": " createOtelCollector",
        "text": "\n\n// https://opentelemetry.io/docs/kubernetes/collector/components/\n\nexport function createOtelCollector(args: {\n  name: string;\n  provider: K8sProvider;\n  mode: 'daemonset' | 'deployment';\n  createLb?: boolean;\n  debug?: boolean;\n}) {\n  const { name, provider, mode, createLb, debug } = args;\n  const nodeSelector = {};\n  const tolerations = [];\n\n  if (mode === 'daemonset') {\n    nodeSelector['triplewhale.com/otel'] = 'true';\n\n    tolerations.push(\n      {\n        effect: 'NoExecute',\n        operator: 'Exists',\n      },\n      {\n        effect: 'NoSchedule',\n        operator: 'Exists',\n      }\n    );\n  }\n\n  const opts = {\n    // https://github.com/open-telemetry/opentelemetry-operator/blob/main/docs/api.md\n    apiVersion: 'opentelemetry.io/v1alpha1',\n    kind: 'OpenTelemetryCollector',\n    metadata: {\n      name,\n    },\n    spec: {\n      image: 'otel/opentelemetry-collector',\n      // https://opentelemetry.io/docs/collector/configuration/\n      config: toYamlOutput({\n        receivers: {\n          otlp: {\n            protocols: {\n              grpc: {\n                endpoint: '0.0.0.0:4317',\n              },\n              http: {\n                endpoint: '0.0.0.0:4318',\n              },\n            },\n          },\n        },\n        exporters: {\n          debug: {\n            verbosity: 'detailed',\n          },\n          prometheus: {\n            endpoint: '0.0.0.0:9090',\n            namespace: provider.namespace,\n          },\n          'otlp/jaeger': {\n            endpoint: 'saber-jaeger-collector.observability.svc.cluster.local:4317',\n            tls: {\n              insecure: true,\n            },\n          },\n          'otlp/signoz': {\n            endpoint: 'signoz-otel-collector.signoz.svc.cluster.local:4317',\n            tls: {\n              insecure: true,\n            },\n          },\n        },\n        service: {\n          ...(debug\n            ? {\n                telemetry: {\n                  logs: {\n                    level: 'debug',\n                  },\n                },\n              }\n            : {}),\n          pipelines: {\n            metrics: {\n              receivers: ['otlp'],\n              exporters: ['prometheus', 'otlp/signoz', ...(debug ? ['debug'] : [])],\n            },\n            traces: {\n              receivers: ['otlp'],\n              exporters: ['otlp/jaeger', 'otlp/signoz', ...(debug ? ['debug'] : [])],\n            },\n          },\n        },\n      }),\n      ports: [\n        {\n          name: 'prometheus',\n          port: 9090,\n          protocol: 'TCP',\n        },\n      ],\n      mode,\n      nodeSelector,\n      tolerations,\n      hostNetwork: mode === 'daemonset',\n      resources: {\n        requests: {\n          cpu: '100m',\n          memory: '128Mi',\n        },\n        limits: {\n          cpu: '500m',\n          memory: '1Gi',\n        },\n      },\n    },\n  };\n\n  const collector = new kubernetes.apiextensions.CustomResource(\n    k8sUniqueName(name, provider),\n    opts,\n    { provider }\n  );\n\n  const labels = {\n    'app.kubernetes.io/component': 'opentelemetry-collector',\n    'app.kubernetes.io/instance': `${provider.namespace}.${name}`,\n    'app.kubernetes.io/managed-by': 'opentelemetry-operator',\n    'app.kubernetes.io/name': `${name}-collector`,\n    'app.kubernetes.io/part-of': 'opentelemetry',\n  };\n\n  createPrometheusMonitor({\n    name: 'otel-collector',\n    endpoints: [\n      {\n        portName: 'prometheus',\n      },\n      {\n        portName: 'metrics',\n      },\n    ],\n    release: 'workloads',\n    kind: 'Pod',\n    labels,\n    provider,\n  });\n\n  if (createLb) {\n    createK8sService({\n      name: `${name}-collector-lb`,\n      twDomain: new TWDomain(\n        'triplestack.io',\n        `${name}.${provider.cluster_name}.${provider.location}.otel`,\n        'internal'\n      ),\n      selector: labels,\n      type: 'LoadBalancer',\n      ingressMode: 'internal',\n      provider,\n      ports: [\n        {\n          name: 'prometheus',\n          port: 9090,\n          targetPort: 9090,\n        },\n        {\n          name: 'otlp-http',\n          port: 4318,\n          targetPort: 4318,\n        },\n        {\n          name: 'otlp-grpc',\n          port: 4317,\n          targetPort: 4317,\n        },\n      ],\n      dependsOn: [collector, ...provider.dependsOn],\n    });\n  }\n\n  return collector;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  provider: K8sProvider;\n  mode: 'daemonset' | 'deployment';\n  createLb?: boolean;\n  debug?: boolean;\n}",
            "type": "{\n  name: string;\n  provider: K8sProvider;\n  mode: 'daemonset' | 'deployment';\n  createLb?: boolean;\n  debug?: boolean;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/otel/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/postgresql/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/postgresql/provider.ts",
    "exports": [
      {
        "type": "function",
        "name": " getPostgresqlProvider",
        "text": "\n\nexport function getPostgresqlProvider(args: {\n  instance: SqlDatabaseInstance;\n  user: gcp.sql.User;\n  database?: pulumi.Input<string>;\n}) {\n  const { database } = args;\n  const name = args.instance.instance_name;\n  if (providers[name]) {\n    return providers[name];\n  }\n  const provider = new postgresql.Provider(name, {\n    host: args.instance.ipAddresses[0].ipAddress,\n    username: args.user.name,\n    password: args.user.password,\n    database,\n  });\n  providers[name] = provider;\n  return provider;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  instance: SqlDatabaseInstance;\n  user: gcp.sql.User;\n  database?: pulumi.Input<string>;\n}",
            "type": "{\n  instance: SqlDatabaseInstance;\n  user: gcp.sql.User;\n  database?: pulumi.Input<string>;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/prometheus/deployment.ts",
    "exports": [
      {
        "type": "function",
        "name": " createPrometheusDeployment",
        "text": "\n\nexport function createPrometheusDeployment(args: { name: string; provider: K8sProvider }) {\n  const { name, provider } = args;\n\n  const sa = new kubernetes.core.v1.ServiceAccount(\n    k8sUniqueName(name, provider),\n    {\n      metadata: {\n        name: `${name}-prometheus`,\n      },\n    },\n    { provider }\n  );\n\n  new kubernetes.rbac.v1.ClusterRoleBinding(\n    k8sUniqueName(name, provider),\n    {\n      metadata: {\n        name: `${name}-prometheus`,\n      },\n      roleRef: {\n        apiGroup: 'rbac.authorization.k8s.io',\n        kind: 'ClusterRole',\n        name: 'prometheus',\n      },\n      subjects: [\n        {\n          kind: 'ServiceAccount',\n          name: sa.metadata.name,\n          namespace: provider.namespace,\n        },\n      ],\n    },\n    { provider }\n  );\n\n  const labelSelector = {\n    matchLabels: {\n      release: name,\n    },\n  };\n\n  const namespaceSelector = {};\n\n  const prometheus = new kubernetes.apiextensions.CustomResource(\n    k8sUniqueName(name, provider),\n    // https://prometheus-operator.dev/docs/operator/api/#monitoring.coreos.com/v1.Prometheus\n    {\n      apiVersion: 'monitoring.coreos.com/v1',\n      metadata: {\n        name,\n      },\n      kind: 'Prometheus',\n      spec: {\n        enableAdminAPI: false,\n        evaluationInterval: '30s',\n        externalUrl: `http://prometheus-operated.${provider.namespace}:9090`,\n        hostNetwork: false,\n        image: 'quay.io/prometheus/prometheus:v2.50.1',\n        listenLocal: false,\n        logFormat: 'logfmt',\n        logLevel: 'info',\n        paused: false,\n        podMonitorNamespaceSelector: namespaceSelector,\n        podMonitorSelector: labelSelector,\n        probeNamespaceSelector: namespaceSelector,\n        probeSelector: labelSelector,\n        ruleNamespaceSelector: namespaceSelector,\n        ruleSelector: labelSelector,\n        scrapeConfigNamespaceSelector: namespaceSelector,\n        scrapeConfigSelector: labelSelector,\n        serviceMonitorNamespaceSelector: namespaceSelector,\n        serviceMonitorSelector: labelSelector,\n        portName: 'http-web',\n        replicas: 1,\n        retention: '10d',\n        routePrefix: '/',\n        scrapeInterval: '30s',\n        storage: {\n          volumeClaimTemplate: {\n            spec: {\n              accessModes: ['ReadWriteOnce'],\n              resources: {\n                requests: {\n                  storage: '100Gi',\n                },\n              },\n            },\n          },\n        },\n        securityContext: {\n          fsGroup: 2000,\n          runAsGroup: 2000,\n          runAsNonRoot: true,\n          runAsUser: 1000,\n          seccompProfile: {\n            type: 'RuntimeDefault',\n          },\n        },\n        serviceAccountName: sa.metadata.name,\n        shards: 1,\n        tsdb: {\n          outOfOrderTimeWindow: '30s',\n        },\n        version: 'v2.50.1',\n        walCompression: true,\n      },\n    },\n    { provider }\n  );\n\n  const twDomain = new TWDomain(\n    'triplestack.io',\n    `${name}.${provider.cluster_name}.${provider.location}.prometheus`,\n    'internal'\n  );\n\n  createK8sService({\n    name: `${name}-prometheus`,\n    provider,\n    ingressMode: 'internal',\n    type: 'LoadBalancer',\n    selector: {\n      'app.kubernetes.io/name': 'prometheus',\n      'app.kubernetes.io/instance': name,\n    },\n    ports: [{ port: 9090, targetPort: 9090, name: 'web' }],\n    twDomain,\n    dependsOn: [prometheus, ...provider.dependsOn],\n  });\n\n  createGrafanaDataSource({\n    name: `${name}-${provider.cluster_name}-${provider.location}`,\n    url: `http://${twDomain.fqdn}:9090`,\n    type: 'prometheus',\n    jsonData: {\n      httpMethod: 'POST',\n    },\n  });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { name: string; provider: K8sProvider }",
            "type": "{ name: string; provider: K8sProvider }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/prometheus/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/prometheus/monitor.ts",
    "exports": [
      {
        "name": " PrometheusReleaseName",
        "text": "\n\nexport type PrometheusReleaseName = 'devops' | 'workloads' | 'kube-prometheus-stack';",
        "type": "'devops' | 'workloads' | 'kube-prometheus-stack'"
      },
      {
        "type": "function",
        "name": " createPrometheusMonitor",
        "text": "\n\nexport function createPrometheusMonitor(args: {\n  name: string;\n  release: PrometheusReleaseName;\n  provider: K8sProvider;\n  endpoints: {\n    interval?: string;\n    portName: string;\n    path?: string;\n    scrapeTimeout?: string;\n  }[];\n  kind?: 'Pod' | 'Service';\n  labels: Record<string, string>;\n  namespaced?: boolean;\n}) {\n  const {\n    name,\n    endpoints,\n    provider = getK8sProvider(),\n    labels,\n    kind = 'Pod',\n    release,\n    namespaced = true,\n  } = args;\n\n  const uniqueName = k8sUniqueName(name, provider);\n  let opts: kubernetes.apiextensions.CustomResourceArgs = {\n    metadata: {\n      name: uniqueName,\n    },\n    spec: {\n      selector: {\n        matchLabels: labels,\n      },\n    },\n  } as any;\n\n  endpoints.forEach((endpoint: any) => {\n    endpoint.interval = endpoint.interval || '30s';\n    endpoint.path = endpoint.path || '/metrics';\n    endpoint.port = endpoint.portName;\n    delete endpoint.portName;\n  });\n\n  const namespaceSelector: any = {};\n\n  if (namespaced) {\n    namespaceSelector.matchNames = [provider.namespace];\n  } else {\n    namespaceSelector.any = true;\n  }\n\n  // https://prometheus-operator.dev/docs/operator/api/#monitoring.coreos.com/v1.PodMonitor\n  opts = deepMerge(opts, {\n    apiVersion: 'monitoring.coreos.com/v1',\n    kind: `${kind}Monitor`,\n    metadata: {\n      labels: {\n        release,\n      },\n    },\n    spec: {\n      namespaceSelector,\n    },\n  });\n  if (kind === 'Pod') {\n    opts.spec.podMetricsEndpoints = endpoints;\n  } else if (kind === 'Service') {\n    opts.spec.endpoints = endpoints;\n  }\n\n  new kubernetes.apiextensions.CustomResource(uniqueName, opts, {\n    provider,\n    aliases: [{ name }],\n  });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  release: PrometheusReleaseName;\n  provider: K8sProvider;\n  endpoints: {\n    interval?: string;\n    portName: string;\n    path?: string;\n    scrapeTimeout?: string;\n  }[];\n  kind?: 'Pod' | 'Service';\n  labels: Record<string, string>;\n  namespaced?: boolean;\n}",
            "type": "{\n  name: string;\n  release: PrometheusReleaseName;\n  provider: K8sProvider;\n  endpoints: {\n    interval?: string;\n    portName: string;\n    path?: string;\n    scrapeTimeout?: string;\n  }[];\n  kind?: 'Pod' | 'Service';\n  labels: Record<string, string>;\n  namespaced?: boolean;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/pubsub/alerts.ts",
    "exports": [
      {
        "type": "function",
        "name": " createDefaultPubsubAlerts",
        "text": "\n\nexport function createDefaultPubsubAlerts(excludePubsubSubs: gcp.pubsub.Subscription[]) {\n  const { serviceId } = getConfigs();\n  let filter: any = `resource.type = \"pubsub_subscription\" AND metric.type = \"pubsub.googleapis.com/subscription/oldest_unacked_message_age\" AND metadata.user_labels.service-id = \"${serviceId}\"`;\n  if (excludePubsubSubs.length) {\n    filter = pulumi.interpolate`${filter} AND ${pulumi\n      .all(excludePubsubSubs.map((v) => v.name))\n      .apply((subIds) => subIds.map((v) => `resource.labels.subscription_id != \"${v}\"`))}`;\n  }\n  createAlert({\n    name: 'default-pubsub-alert',\n    displayName: `Pubsub ${serviceId} oldest unacked`,\n    slack: true,\n    conditions: [\n      {\n        displayName: 'Cloud Pub/Sub Subscription - Oldest unacked message age',\n        conditionThreshold: {\n          aggregations: [\n            {\n              alignmentPeriod: '300s',\n              perSeriesAligner: 'ALIGN_MEAN',\n            },\n          ],\n          comparison: 'COMPARISON_GT',\n          duration: '0s',\n          filter,\n          thresholdValue: 3600,\n          trigger: {\n            count: 1,\n          },\n        },\n      },\n    ],\n  });\n}",
        "parameters": [
          {
            "name": "excludePubsubSubs",
            "text": "excludePubsubSubs: gcp.pubsub.Subscription[]",
            "type": "gcp.pubsub.Subscription[]"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/pubsub/createPushConfig.ts",
    "exports": [
      {
        "type": "function",
        "name": " createPushConfig",
        "text": "\n\nexport function createPushConfig(endpoint: string, service: serviceTarget) {\n  monitoringState.pubsubPush.enabled = true;\n  const query = new URL(endpoint, 'http://localhost');\n\n  if (!query.searchParams.get('isPubsub')) {\n    query.searchParams.set('isPubsub', 'true');\n    endpoint = query.pathname.replace('/', '') + query.search;\n  }\n\n  return {\n    pushEndpoint: getFullUrl(service, endpoint),\n    oidcToken: {\n      audience: getAudience(service),\n      serviceAccountEmail: getServiceAccountForService(),\n    },\n  };\n}",
        "parameters": [
          {
            "name": "endpoint",
            "text": "endpoint: string",
            "type": "string"
          },
          {
            "name": "service",
            "text": "service: serviceTarget",
            "type": "serviceTarget"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/pubsub/deadLetter.ts",
    "exports": [
      {
        "type": "function",
        "name": " createDeadLetterPolicy",
        "text": "\n\nexport function createDeadLetterPolicy(args?: {\n  maxDeliveryAttempts?: number;\n  deadLetterTopic?: pulumi.Input<string>;\n}): gcp.types.input.pubsub.SubscriptionDeadLetterPolicy {\n  const { maxDeliveryAttempts = 5, deadLetterTopic = 'message-graveyard' } = args || {};\n  return {\n    maxDeliveryAttempts,\n    deadLetterTopic: getPubsubTopicId(deadLetterTopic),\n  };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args?: {\n  maxDeliveryAttempts?: number;\n  deadLetterTopic?: pulumi.Input<string>;\n}",
            "type": "{\n  maxDeliveryAttempts?: number;\n  deadLetterTopic?: pulumi.Input<string>;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/pubsub/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/pubsub/localPullSub.ts",
    "exports": [
      {
        "type": "function",
        "name": " localPullSub",
        "text": "\n\nexport function localPullSub(args: {\n  serviceId?: string;\n  topicName?: pulumi.Output<string> | string;\n  subscriptionName?: string;\n  projectIds?: string[];\n}) {\n  const { projectId } = getConfigs();\n  const { serviceId, subscriptionName } = args;\n  const projectIds = args.projectIds || ['triple-whale-staging'];\n  const topicName = args.topicName || 'local-webhooks-topic';\n  if (projectIds?.length > 0 && !projectIds.includes(projectId)) return;\n\n  const subOptions: gcp.pubsub.SubscriptionArgs = {\n    name: subscriptionName,\n    topic: topicName,\n    messageRetentionDuration: '600s',\n  };\n  if (serviceId) {\n    subOptions.filter = `attributes.serviceId=\"${serviceId}\"`;\n  }\n\n  return new gcp.pubsub.Subscription(`${subscriptionName}-sub`, subOptions);\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  serviceId?: string;\n  topicName?: pulumi.Output<string> | string;\n  subscriptionName?: string;\n  projectIds?: string[];\n}",
            "type": "{\n  serviceId?: string;\n  topicName?: pulumi.Output<string> | string;\n  subscriptionName?: string;\n  projectIds?: string[];\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/pubsub/subscription.ts",
    "exports": [
      {
        "type": "function",
        "name": " createSubscription",
        "text": "\n\nexport function createSubscription(args: {\n  name: string;\n  topicName: pulumi.Input<string>;\n  endpoint?: string;\n  service?: serviceTarget;\n  addDeadLetterPolicy?: boolean;\n  filter?: pulumi.Input<string>;\n  retryPolicy?: pulumi.Input<gcp.types.input.pubsub.SubscriptionRetryPolicy>;\n  overrides?: Partial<SubscriptionArgs>;\n}) {\n  const {\n    name,\n    topicName,\n    endpoint,\n    service,\n    addDeadLetterPolicy,\n    filter,\n    retryPolicy = {\n      minimumBackoff: '5s',\n      maximumBackoff: '90s',\n    },\n    overrides,\n  } = args;\n  const { projectId } = getConfigs();\n  if (!(service && endpoint)) {\n    monitoringState.pubsubPull.enabled = true;\n  }\n  const opts: gcp.pubsub.SubscriptionArgs = {\n    name,\n    topic: topicName,\n    ...(service && endpoint\n      ? {\n          pushConfig: createPushConfig(endpoint, service),\n        }\n      : {}),\n    ackDeadlineSeconds: 30,\n    retryPolicy,\n    enableMessageOrdering: true,\n    retainAckedMessages: true,\n    messageRetentionDuration: '172800s', // 2 days\n    filter,\n    deadLetterPolicy: addDeadLetterPolicy ? createDeadLetterPolicy() : undefined,\n    ...overrides,\n  };\n  return new gcp.pubsub.Subscription(name, opts, {\n    aliases: [{ name: `${name}-${projectId}` }],\n    deleteBeforeReplace: Boolean(opts.name),\n  });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  topicName: pulumi.Input<string>;\n  endpoint?: string;\n  service?: serviceTarget;\n  addDeadLetterPolicy?: boolean;\n  filter?: pulumi.Input<string>;\n  retryPolicy?: pulumi.Input<gcp.types.input.pubsub.SubscriptionRetryPolicy>;\n  overrides?: Partial<SubscriptionArgs>;\n}",
            "type": "{\n  name: string;\n  topicName: pulumi.Input<string>;\n  endpoint?: string;\n  service?: serviceTarget;\n  addDeadLetterPolicy?: boolean;\n  filter?: pulumi.Input<string>;\n  retryPolicy?: pulumi.Input<gcp.types.input.pubsub.SubscriptionRetryPolicy>;\n  overrides?: Partial<SubscriptionArgs>;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/pubsub/topic.ts",
    "exports": [
      {
        "type": "function",
        "name": " createTopic",
        "text": "\n\nexport function createTopic(name: string, args?: TopicArgs, opts?: CustomResourceOptions) {\n  const { projectId } = getConfigs();\n  return new Topic(\n    name,\n    { name, ...args },\n    opts || { aliases: [{ name: `${name}-${projectId}` }] }\n  );\n}",
        "parameters": [
          {
            "name": "name",
            "text": "name: string",
            "type": "string"
          },
          {
            "name": "args",
            "text": "args?: TopicArgs",
            "type": "TopicArgs"
          },
          {
            "name": "opts",
            "text": "opts?: CustomResourceOptions",
            "type": "CustomResourceOptions"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/pulumi-utils/append.ts",
    "exports": [
      {
        "type": "function",
        "name": " appendToOutput",
        "text": "\n\nexport function appendToOutput(o: pulumi.Output<string>, a: pulumi.Output<string> | string) {\n  return o.apply((v) => {\n    return pulumi.interpolate`${v}${v && !v.endsWith(' ') ? ' ' : ''}${a}`;\n  });\n}",
        "parameters": [
          {
            "name": "o",
            "text": "o: pulumi.Output<string>",
            "type": "pulumi.Output<string>"
          },
          {
            "name": "a",
            "text": "a: pulumi.Output<string> | string",
            "type": "pulumi.Output<string> | string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/pulumi-utils/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/pulumi-utils/stack.ts",
    "exports": [
      {
        "name": " TwPulumiStack",
        "text": "\n\nexport class TwPulumiStack extends pulumi.dynamic.Resource {\n  public readonly buildNumber!: pulumi.Output<string>;\n  public readonly gitSha!: pulumi.Output<string>;\n  constructor(\n    name: string,\n    args: TwPulumiStackResourceInputs,\n    opts?: pulumi.CustomResourceOptions\n  ) {\n    super(new TwPulumiStackProvider(), name, { ...args }, opts);\n  }\n}",
        "type": " pulumi.dynamic.Resource"
      }
    ]
  },
  {
    "file": "@tw/pulumi/pulumi-utils/toJSON.ts",
    "exports": [
      {
        "type": "function",
        "name": " toJSONOutput",
        "text": "\n\nexport function toJSONOutput(value: Record<string, pulumi.Input<any>>, pretty = false) {\n  return pulumi.output(value).apply((o) => JSON.stringify(o, undefined, pretty ? 2 : undefined));\n}",
        "parameters": [
          {
            "name": "value",
            "text": "value: Record<string, pulumi.Input<any>>",
            "type": "Record<string, pulumi.Input<any>>"
          },
          {
            "name": "pretty",
            "text": "pretty = false",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " toYamlOutput",
        "text": "\n\nexport function toYamlOutput(value: Record<string, pulumi.Input<any>>) {\n  return pulumi.output(value).apply((o) => yaml.stringify(o));\n}",
        "parameters": [
          {
            "name": "value",
            "text": "value: Record<string, pulumi.Input<any>>",
            "type": "Record<string, pulumi.Input<any>>"
          }
        ]
      },
      {
        "type": "function",
        "name": " toBase64Output",
        "text": "\n\nexport function toBase64Output(value: pulumi.Output<string>) {\n  return value.apply((v) => Buffer.from(v).toString('base64'));\n}",
        "parameters": [
          {
            "name": "value",
            "text": "value: pulumi.Output<string>",
            "type": "pulumi.Output<string>"
          }
        ]
      },
      {
        "type": "function",
        "name": " fromBase64",
        "text": "\n\nexport function fromBase64(value: pulumi.Input<string>) {\n  return pulumi.output(value).apply((v) => Buffer.from(v, 'base64').toString('ascii'));\n}",
        "parameters": [
          {
            "name": "value",
            "text": "value: pulumi.Input<string>",
            "type": "pulumi.Input<string>"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/pulumi-utils/types.ts",
    "exports": [
      {
        "name": " DependsOn",
        "text": "\n\nexport type DependsOn = pulumi.Input<pulumi.Resource>[];",
        "type": "pulumi.Input<pulumi.Resource>[]"
      }
    ]
  },
  {
    "file": "@tw/pulumi/rabbitmq/cluster.ts",
    "exports": [
      {
        "type": "function",
        "name": " createRabbitMQCluster",
        "text": "\n\nexport function createRabbitMQCluster(\n  args: { name: string; provider: K8sProvider } & K8sResources\n) {\n  const {\n    name,\n    provider,\n    CPURequest = 4,\n    memoryRequest = '6Gi',\n    CPULimit = 8,\n    memoryLimit = '32Gi',\n  } = args;\n\n  const username = 'admin';\n  const password = createPassword({ name: `${name}-rabbitmq`, special: false }).result;\n\n  const deployment = new kubernetes.apiextensions.CustomResource(\n    k8sUniqueName(name, provider),\n    {\n      apiVersion: 'rabbitmq.com/v1beta1',\n      kind: 'RabbitmqCluster',\n      metadata: {\n        name: name,\n      },\n      spec: {\n        rabbitmq: {\n          additionalConfig: pulumi.interpolate`\n          default_user=${username}\n          default_pass=${password}\n          `,\n        },\n        replicas: 3,\n        persistence: {\n          storage: '500Gi',\n        },\n        resources: {\n          requests: {\n            cpu: String(CPURequest),\n            memory: memoryRequest,\n          },\n          limits: {\n            cpu: String(CPULimit),\n            memory: memoryLimit,\n          },\n        },\n      },\n    },\n    { provider }\n  );\n\n  const domain = new TWDomain('triplestack.io', `${name}.rabbitmq`, 'internal');\n\n  const iapDomain = new TWDomain('triplestack.io', `${name}.rabbitmq`, 'iap', projectIdAsSubDomain);\n\n  storeHostedServiceInfo({\n    name,\n    type: 'rabbitmq',\n    data: { username, password, domain: domain.fqdn, iapDomain: iapDomain.fqdn },\n  });\n\n  createK8sService({\n    name: `${name}-lb`,\n    twDomain: domain,\n    selector: {\n      'app.kubernetes.io/name': name,\n    },\n    type: 'LoadBalancer',\n    ingressMode: 'internal',\n    provider,\n    ports: [\n      {\n        name: 'amqp',\n        port: 5672,\n        targetPort: 5672,\n      },\n      {\n        name: 'http',\n        port: 15672,\n        targetPort: 15672,\n      },\n    ],\n  });\n\n  createK8sIngress({\n    name: name,\n    twDomain: iapDomain,\n    selector: {\n      'app.kubernetes.io/name': name,\n    },\n    ingressMode: 'iap',\n    provider,\n    port: 80,\n    healthCheckPath: '/',\n    targetPort: 15672,\n  });\n  return { deployment, domain, iapDomain };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { name: string; provider: K8sProvider } & K8sResources",
            "type": "{ name: string; provider: K8sProvider } & K8sResources"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/rabbitmq/exchange.ts",
    "exports": [
      {
        "type": "function",
        "name": " createRabbitMQExchange",
        "text": "\n\nexport function createRabbitMQExchange(args: {\n  name: string;\n  type?: ExchangeType;\n  provider?: rabbitmq.Provider;\n}) {\n  const { name, provider = getRabbitMQProvider(), type = 'topic' } = args;\n  const exchange = new rabbitmq.Exchange(\n    name,\n    {\n      name,\n      settings: {\n        durable: true,\n        autoDelete: false,\n        type,\n      },\n    },\n    { provider }\n  );\n  return exchange;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  type?: ExchangeType;\n  provider?: rabbitmq.Provider;\n}",
            "type": "{\n  name: string;\n  type?: ExchangeType;\n  provider?: rabbitmq.Provider;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/rabbitmq/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/rabbitmq/provider.ts",
    "exports": [
      {
        "type": "function",
        "name": " getRabbitMQProvider",
        "text": "\n\nexport function getRabbitMQProvider(name: string = 'sonic-cluster') {\n  if (!rabbitMQProviders[name]) {\n    const secret = getSecretValue(`${name}-rabbitmq`).apply(JSON.parse);\n    rabbitMQProviders[name] = new rabbitmq.Provider(name, {\n      endpoint: secret.apply((s) => 'http://' + s.domain + ':15672'),\n      password: pulumi.secret(secret.apply((s) => s.password)),\n      username: secret.apply((s) => s.username),\n    });\n  }\n  return rabbitMQProviders[name];\n}",
        "parameters": [
          {
            "name": "name",
            "text": "name: string = 'sonic-cluster'",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/rabbitmq/queue.ts",
    "exports": [
      {
        "type": "function",
        "name": " createRabbitMQQueue",
        "text": "\n\nexport function createRabbitMQQueue(args: {\n  name: string;\n  provider?: rabbitmq.Provider;\n  queueType?: 'quorum' | 'stream';\n}) {\n  const { name, provider = getRabbitMQProvider(), queueType = 'stream' } = args;\n  const queue = new rabbitmq.Queue(\n    name,\n    {\n      name,\n      settings: {\n        durable: true,\n        autoDelete: false,\n        arguments: {\n          'x-queue-type': queueType,\n        },\n      },\n    },\n    { provider }\n  );\n  return queue;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  provider?: rabbitmq.Provider;\n  queueType?: 'quorum' | 'stream';\n}",
            "type": "{\n  name: string;\n  provider?: rabbitmq.Provider;\n  queueType?: 'quorum' | 'stream';\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/secrets/createSecret.ts",
    "exports": [
      {
        "type": "function",
        "name": " createSecret",
        "text": "\n\nexport function createSecret(\n  secretValue: pulumi.Input<Record<string, pulumi.Input<string | number | any[]>>>,\n  name?: string\n) {\n  const { serviceId } = getConfigs();\n  name = (getUniqueNameInProject(name) || `${getUniqueNameInProject(serviceId)}-env`) as string;\n  const secret = new gcp.secretmanager.Secret(\n    name,\n    {\n      secretId: name,\n      replication: {\n        auto: {},\n      },\n    },\n    {\n      aliases: [{ name: 'secret' }],\n    }\n  );\n\n  const secretVersion = new gcp.secretmanager.SecretVersion(\n    name,\n    {\n      secret: secret.id,\n      secretData: toJSONOutput(secretValue),\n    },\n    { retainOnDelete: true, aliases: [{ name: 'secret-version' }] }\n  );\n\n  return { secret, secretVersion };\n}",
        "parameters": [
          {
            "name": "secretValue",
            "text": "secretValue: pulumi.Input<Record<string, pulumi.Input<string | number | any[]>>>",
            "type": "pulumi.Input<Record<string, pulumi.Input<string | number | any[]>>>"
          },
          {
            "name": "name",
            "text": "name?: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/secrets/getSecretValue.ts",
    "exports": [
      {
        "type": "function",
        "name": " getSecretValue",
        "text": "\n\nexport function getSecretValue(secret: pulumi.Output<string> | string) {\n  return gcp.secretmanager.getSecretVersionOutput({ secret }).secretData;\n}",
        "parameters": [
          {
            "name": "secret",
            "text": "secret: pulumi.Output<string> | string",
            "type": "pulumi.Output<string> | string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/secrets/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/security/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/security/passwords.ts",
    "exports": [
      {
        "type": "function",
        "name": " createPassword",
        "text": "\n\nexport function createPassword(args: {\n  name: string;\n  special?: boolean;\n  overrideSpecial?: string;\n}) {\n  const { name, special = true, overrideSpecial = `!#%&*()-_=+[]{}<>:?` } = args;\n  const { config } = getConfigs();\n  const password = new RandomPassword(name, {\n    length: 16,\n    special,\n    overrideSpecial,\n    keepers: { rotate: config.get('rotatePassword') || 'false' },\n  });\n  return password;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  special?: boolean;\n  overrideSpecial?: string;\n}",
            "type": "{\n  name: string;\n  special?: boolean;\n  overrideSpecial?: string;\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " urlEscapePassword",
        "text": "\n\nexport function urlEscapePassword(password: RandomPassword) {\n  return password.result.apply((result) => qs.escape(result));\n}",
        "parameters": [
          {
            "name": "password",
            "text": "password: RandomPassword",
            "type": "RandomPassword"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/service/createServiceAccount.ts",
    "exports": [
      {
        "type": "function",
        "name": " createServiceAccount",
        "text": "\n\nexport function createServiceAccount(args?: {\n  name?: string;\n  roles?: string[];\n  addDefault?: boolean;\n  suffix?: string;\n}) {\n  const { projectId, serviceId, isAService } = getConfigs();\n  const { roles = [], name = serviceId, addDefault = true, suffix = '' } = args || {};\n  const accountId = `${isAService ? 'srv-' : ''}${name}`;\n\n  serviceAccount = createIamServiceAccount({ name, accountId });\n  const defaultRoles = [`projects/${projectId}/roles/defaultServiceAccount`];\n\n  const rolesToApply = [...roles, ...(addDefault ? defaultRoles : [])];\n\n  if (rolesToApply.length) {\n    addRolesToServiceAccount(serviceAccount, projectId, rolesToApply, suffix);\n  }\n  if (addDefault) {\n    new gcp.serviceaccount.IAMBinding(`${name}-bind-act-as`, {\n      serviceAccountId: serviceAccount.id,\n      role: 'roles/iam.serviceAccountUser',\n      members: [pulumi.interpolate`serviceAccount:${serviceAccount.email}`],\n    });\n  }\n  return { serviceAccount };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args?: {\n  name?: string;\n  roles?: string[];\n  addDefault?: boolean;\n  suffix?: string;\n}",
            "type": "{\n  name?: string;\n  roles?: string[];\n  addDefault?: boolean;\n  suffix?: string;\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " k8sGetGCPServiceAccount",
        "text": "\n\nexport function k8sGetGCPServiceAccount() {\n  return serviceAccount;\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/pulumi/service/index.ts",
    "exports": [
      {
        "type": "specifier",
        "name": " createServiceEnvs",
        "text": " createServiceEnvs"
      },
      {
        "type": "specifier",
        "name": " getServiceDefaultEnvs",
        "text": " getServiceDefaultEnvs"
      }
    ]
  },
  {
    "file": "@tw/pulumi/service/loadPackageJson.ts",
    "exports": [
      {
        "type": "function",
        "name": " loadPackageJson",
        "text": "\n\nexport function loadPackageJson() {\n  try {\n    const packageJson = JSON.parse(fs.readFileSync(resolve('../package.json')).toString());\n    return packageJson;\n  } catch {\n    return { name: '', version: '' };\n  }\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/pulumi/service/loadServiceConfig.ts",
    "exports": [
      {
        "type": "function",
        "name": " loadServiceConfig",
        "text": "\n\nexport function loadServiceConfig(): ServiceConfig {\n  if (serviceConfig) return serviceConfig;\n  try {\n    serviceConfig = JSON.parse(fs.readFileSync(resolve(serviceConfigFile)).toString());\n  } catch {\n    // local prob\n    serviceConfig = { color: 'none', contacts: [], maintainers: [] };\n  }\n  return serviceConfig;\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " updateServiceConfig",
        "text": "\n\nexport function updateServiceConfig(serviceConfig: ServiceConfig) {\n  pulumi.output(serviceConfig).apply((o) => {\n    fs.writeFileSync(resolve(serviceConfigFile), JSON.stringify(o, null, 2) + '\\n');\n  });\n}",
        "parameters": [
          {
            "name": "serviceConfig",
            "text": "serviceConfig: ServiceConfig",
            "type": "ServiceConfig"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/service/serviceEntry.ts",
    "exports": [
      {
        "type": "function",
        "name": " updateServiceEntry",
        "text": "\n\nexport function updateServiceEntry(args: { serviceConfig: ServiceConfig; isK8s; cloudBuild }) {\n  const { serviceConfig, isK8s, cloudBuild } = args;\n  const k8s = isK8s ?? objectBool(cloudBuild.k8s);\n  const { projectId, serviceId, isMultiPerProject } = getConfigs();\n  const serviceEntry: ServiceConfig = {\n    ...serviceConfig,\n    serviceId,\n    gitRepo: pulumi.output(getGitRepoName()) as any,\n    k8s,\n    version: 2.0,\n  };\n\n  updateServiceConfig({\n    ...serviceEntry,\n    ...(isProduction ? { deployments: getDeployments(k8s ? 'k8s' : 'cloud-run') } : null),\n  });\n\n  serviceEntry.deployments = getDeployments(k8s ? 'k8s' : 'cloud-run');\n  new gcp.storage.BucketObject(\n    `service-config`,\n    {\n      bucket: `devops-${projectId}`,\n      content: toJSONOutput(serviceEntry),\n      name: `service-config/${getUniqueNameInProject(serviceId, '_')}.json`,\n    },\n    {\n      retainOnDelete: true,\n    }\n  );\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { serviceConfig: ServiceConfig; isK8s; cloudBuild }",
            "type": "{ serviceConfig: ServiceConfig; isK8s; cloudBuild }"
          }
        ]
      },
      {
        "type": "function",
        "name": " addServiceEntryDeployment",
        "text": "\n\nexport function addServiceEntryDeployment(args: {\n  deployment: ServiceEntryDeployment;\n  type: DeploymentType;\n}) {\n  const { deployment, type } = args;\n  if (!deployments[type]) deployments[type] = {};\n  deployments[type][deployment.name] = deployment;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  deployment: ServiceEntryDeployment;\n  type: DeploymentType;\n}",
            "type": "{\n  deployment: ServiceEntryDeployment;\n  type: DeploymentType;\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " getDeployments",
        "text": "\n\nexport function getDeployments(type: DeploymentType): Record<string, ServiceEntryDeployment> {\n  return {\n    ...Object.keys(deployments).reduce((acc, key) => {\n      return {\n        ...acc,\n        ...deployments[key],\n      };\n    }, {}),\n    ...deployments[type],\n  };\n}",
        "parameters": [
          {
            "name": "type",
            "text": "type: DeploymentType",
            "type": "DeploymentType"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/service/serviceEnvs.ts",
    "exports": [
      {
        "name": " serviceEnvs",
        "text": "\n\nexport let serviceEnvs: Record<string, pulumi.Input<string>> = null;",
        "type": "Record<string, pulumi.Input<string>>"
      },
      {
        "type": "function",
        "name": " createServiceEnvs",
        "text": "\n\nexport function createServiceEnvs(envs: Record<string, pulumi.Input<string>>): ServiceEnvs {\n  serviceEnvs = envs;\n  return new ServiceEnvs('service-envs', { name: 'service-envs', envs });\n}",
        "parameters": [
          {
            "name": "envs",
            "text": "envs: Record<string, pulumi.Input<string>>",
            "type": "Record<string, pulumi.Input<string>>"
          }
        ]
      },
      {
        "type": "function",
        "name": " getServiceDefaultEnvs",
        "text": "\n\nexport function getServiceDefaultEnvs(): {\n  name: string;\n  value: any;\n}[] {\n  const envs = [\n    { name: 'STACK_NAME', value: getConfigs().stack },\n    { name: 'PULUMI_STACK_NAME', value: getConfigs().stack },\n    { name: 'PULUMI_PROJECT_NAME', value: getConfigs().serviceId },\n    {\n      name: 'TW_VERSION',\n      value: getBuildVersion(),\n    },\n  ];\n  if (process.env.LOG_LEVEL) {\n    envs.push({ name: 'LOG_LEVEL', value: process.env.LOG_LEVEL });\n  }\n  return envs;\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/pulumi/service/serviceInfraConfig.ts",
    "exports": [
      {
        "name": " deployedToK8s",
        "text": "\nexport let deployedToK8s = false;",
        "type": "variable"
      },
      {
        "type": "function",
        "name": " serviceInfraConfig",
        "text": "\n\nexport function serviceInfraConfig(\n  args: {\n    apiGateway?: { service: serviceTarget; removePrefix?: boolean };\n    cloudBuild?: Partial<CreateBuildTriggerArgs>;\n    isK8s?: boolean;\n    alerts?: { excludePubsubSubs: gcp.pubsub.Subscription[] };\n  } = {}\n) {\n  const { apiGateway, cloudBuild = {}, isK8s, alerts } = args;\n  const { isMultiPerProject } = getConfigs();\n  if (!fs.existsSync(serviceConfigFile)) return;\n  const serviceConfig = loadServiceConfig();\n\n  if (!cloudBuild?.k8s?.clusters && objectBool(k8sClusters)) {\n    if (!cloudBuild?.k8s) cloudBuild.k8s = {};\n    cloudBuild.k8s.clusters = Object.values(k8sClusters).map(({ name, location }) => {\n      return { name, location: location };\n    });\n  }\n\n  if (objectBool(k8sClusters)) {\n    deployedToK8s = true;\n  }\n\n  if (cloudBuild.k8s?.clusters && !cloudBuild.workerPool) {\n    cloudBuild.workerPool = 'app-pool';\n    if (cloudBuild.machineType) {\n      cloudBuild.workerPool = `${cloudBuild.workerPool}-${cloudBuild.machineType\n        .toLowerCase()\n        .replaceAll('_', '-')}`;\n    }\n  }\n\n  // api config\n  if (apiGateway?.service && fs.existsSync(openApiFile)) {\n    uploadAPIConfig(openApiFile, apiGateway.service, {\n      removePrefix: apiGateway?.removePrefix,\n    });\n  }\n\n  // cloud build\n  createBuildTrigger({ runtime: serviceConfig.runtime || 'node', ...cloudBuild });\n\n  // dashboard\n  createDefaultServiceDashboards();\n\n  // upload serviceEntry\n  updateServiceEntry({ serviceConfig, isK8s, cloudBuild });\n\n  if (isProduction) {\n    const datadogDashboard = createDefaultDatadogDashboard();\n\n    createDefaultDatadogMonitors({\n      datadogDashboard,\n      excludePubsubSubs: alerts?.excludePubsubSubs,\n    });\n\n    createDatadogService({ serviceConfig, datadogDashboard });\n  }\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n    apiGateway?: { service: serviceTarget; removePrefix?: boolean };\n    cloudBuild?: Partial<CreateBuildTriggerArgs>;\n    isK8s?: boolean;\n    alerts?: { excludePubsubSubs: gcp.pubsub.Subscription[] };\n  } = {}",
            "type": "{\n    apiGateway?: { service: serviceTarget; removePrefix?: boolean };\n    cloudBuild?: Partial<CreateBuildTriggerArgs>;\n    isK8s?: boolean;\n    alerts?: { excludePubsubSubs: gcp.pubsub.Subscription[] };\n  }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/slack/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/slack/provider.ts",
    "exports": [
      {
        "type": "function",
        "name": " getSlackProvider",
        "text": "\n\nexport function getSlackProvider() {\n  if (!slackProvider) {\n    slackProvider = new slack.Provider('slack', {\n      token: getSecretValue('slack-pulumi-token'),\n    });\n  }\n  return slackProvider;\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/pulumi/slack/user.ts",
    "exports": [
      {
        "type": "function",
        "name": " getSlackUserByEmail",
        "text": "\n\nexport function getSlackUserByEmail(email): pulumi.Output<slack.GetUserResult> {\n  const user = slack\n    .getUser(\n      {\n        email,\n      },\n      { provider: getSlackProvider() }\n    )\n    .catch(() => null as slack.GetUserResult);\n  return pulumi.output(user);\n}",
        "parameters": [
          {
            "name": "email",
            "text": "email",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/sonic/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/sonic/k8s.ts",
    "exports": [
      {
        "name": " SaberArgs",
        "text": "\n\nexport type SaberArgs = {\n  saberPipelines?: string[];\n  main?: string;\n  concurrencyLimit?: number;\n  concurrencyTarget?: number;\n};",
        "type": "{\n  saberPipelines?: string[];\n  main?: string;\n  concurrencyLimit?: number;\n  concurrencyTarget?: number;\n}"
      },
      {
        "type": "function",
        "name": " createSaberK8sPodArgs",
        "text": "\n\nexport function createSaberK8sPodArgs(args: SaberArgs) {\n  monitoringState.saber.enabled = true;\n  const cmdArgs = args.saberPipelines?.map((v) => `--pipeline=${v}`) || [];\n  if (args.main) {\n    cmdArgs.push(`--main=${args.main}`);\n  }\n  const podArgs: PodTemplateArgs = {\n    allowSpot: true,\n    memoryRequest: '2Gi',\n    CPURequest: 1,\n    args: cmdArgs.length ? cmdArgs : undefined,\n    ports: [],\n    envs: convertEnvs({\n      IS_SABER: '1',\n      TW_ENTRY: 'node_modules/@tw/saber/module/saber.js',\n      SABER_MAX_PARALLEL: args.concurrencyLimit ? String(args.concurrencyLimit) : undefined,\n      LOG_THROTTLE: JSON.stringify({\n        maxPerSecond: 50,\n        maxBytesPerSecond: 1024 * 50, // 50KB\n      }),\n      // 10 minutes\n      TW_OUTBOUND_REQUEST_TIMEOUT_MS: '600000',\n    }),\n    otel: true,\n  };\n  return podArgs;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: SaberArgs",
            "type": "SaberArgs"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/sonic/k8sDeployment.ts",
    "exports": [
      {
        "type": "function",
        "name": " deploySaber",
        "text": "\n\nexport function deploySaber(args: DeployToK8sArgs & SaberArgs) {\n  args.concurrencyLimit = args.concurrencyLimit || 5000;\n  args.name = args.name || 'saber';\n  const provider = getK8sProvider({ cluster: 'pipelines-cluster' });\n  const { serviceId } = getConfigs();\n  args.concurrencyTarget = args.concurrencyTarget ?? Number((args.concurrencyLimit / 5).toFixed(2));\n  const kedaTriggers = args.createK8sDeploymentArgs?.kedaTriggers || [];\n  if (args.concurrencyTarget) {\n    kedaTriggers.push(\n      createKedaPrometheusTrigger({\n        threshold: String(args.concurrencyTarget),\n        query: `sum by(service) (observability_saber_budget_usage_size{service=\"${serviceId}\",triplewhale_com_deployment=\"${args.name}\"})`,\n      })\n    );\n  }\n  const base: Partial<DeployToK8sArgs> = {\n    ingresses: null,\n    ports: [],\n    providers: [provider],\n    createK8sDeploymentArgs: {\n      maxReplicas: 80,\n      averageCPUUtilization: 65,\n      scaleDownPolicies: [{ periodSeconds: 1, type: 'Percent', value: 1000 }],\n      kedaTriggers,\n      useKeda: true,\n      podArgs: createSaberK8sPodArgs(args),\n      datadogConfig: {\n        profiling: true,\n        sampleRate: 0.1,\n      },\n    },\n  };\n\n  const opts = deepMerge(base, args);\n  return deployToK8s(opts);\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: DeployToK8sArgs & SaberArgs",
            "type": "DeployToK8sArgs & SaberArgs"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/sonic/k8sJob.ts",
    "exports": [
      {
        "type": "function",
        "name": " createSaberK8sJobConfig",
        "text": "\n\nexport function createSaberK8sJobConfig(args: K8sJobArgs & SaberArgs) {\n  const base: Partial<K8sJobArgs> = {\n    podArgs: createSaberK8sPodArgs(args),\n    name: 'saber',\n  };\n  const opts = deepMerge(base, args) as K8sJobArgs;\n  return createK8sJobConfig({\n    ...opts,\n    provider: getK8sProvider({ cluster: 'pipelines-cluster' }),\n  });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: K8sJobArgs & SaberArgs",
            "type": "K8sJobArgs & SaberArgs"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/sql/alerts.ts",
    "exports": [
      {
        "type": "function",
        "name": " createDefaultSqlAlerts",
        "text": "\n\nexport function createDefaultSqlAlerts() {\n  if (!monitoringState.sql.enabled) return;\n  const { serviceId } = getConfigs();\n  createAlert({\n    name: 'default-sql-cpu-alert',\n    displayName: `SQL ${serviceId} - CPU Utilization`,\n    slack: true,\n    conditions: [\n      {\n        displayName: 'Cloud SQL Database - CPU utilization',\n        conditionThreshold: {\n          filter: `resource.type = \"cloudsql_database\" AND metric.type = \"cloudsql.googleapis.com/database/cpu/utilization\" AND metadata.user_labels.service-id = \"${serviceId}\"`,\n          aggregations: [\n            {\n              alignmentPeriod: '300s',\n              crossSeriesReducer: 'REDUCE_NONE',\n              perSeriesAligner: 'ALIGN_MEAN',\n            },\n          ],\n          comparison: 'COMPARISON_GT',\n          duration: '0s',\n          trigger: {\n            count: 1,\n          },\n          thresholdValue: 0.5,\n        },\n      },\n    ],\n  });\n\n  createAlert({\n    name: 'default-sql-memory-alert',\n    displayName: `SQL ${serviceId} - Memory utilization`,\n    slack: true,\n    conditions: [\n      {\n        displayName: 'Cloud SQL Database - Memory utilization',\n        conditionThreshold: {\n          filter: `resource.type = \"cloudsql_database\" AND metric.type = \"cloudsql.googleapis.com/database/memory/utilization\" AND metadata.user_labels.service-id = \"${serviceId}\"`,\n          aggregations: [\n            {\n              alignmentPeriod: '300s',\n              crossSeriesReducer: 'REDUCE_NONE',\n              perSeriesAligner: 'ALIGN_MEAN',\n            },\n          ],\n          comparison: 'COMPARISON_GT',\n          duration: '0s',\n          trigger: {\n            count: 1,\n          },\n          thresholdValue: 0.5,\n        },\n      },\n    ],\n  });\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/pulumi/sql/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/sql/postgres.ts",
    "exports": [
      {
        "name": " SqlDatabaseInstance",
        "text": "\n\nexport type SqlDatabaseInstance = gcp.sql.DatabaseInstance & {\n  instance_name: string;\n};",
        "type": "gcp.sql.DatabaseInstance & {\n  instance_name: string;\n}"
      },
      {
        "type": "function",
        "name": " createPostgresInstance",
        "text": "\n\nexport function createPostgresInstance(args: {\n  cpu?: number;\n  memoryGb: number;\n  nonProdRatio?: number;\n  name?: string;\n  enableInsights?: boolean;\n  maxConnections?: string;\n  version?: '13' | '14';\n  availabilityType?: 'ZONAL' | 'REGIONAL';\n  pointInTimeRecoveryEnabled?: boolean;\n  databaseFlags?: gcp.types.input.sql.DatabaseInstanceSettingsDatabaseFlag[];\n  backup?: boolean;\n  retainedBackups?: number;\n  databaseInstanceArgs?: Partial<gcp.sql.DatabaseInstanceArgs>;\n  monitor?: boolean;\n}) {\n  const { serviceId, location } = getConfigs();\n  const {\n    cpu,\n    memoryGb,\n    nonProdRatio = 4,\n    enableInsights,\n    maxConnections,\n    version = '14',\n    databaseFlags = [],\n    backup = isProduction,\n    retainedBackups = 7,\n    monitor = false,\n  } = args;\n  const availabilityType = isProduction ? args.availabilityType || 'ZONAL' : 'ZONAL';\n  const pointInTimeRecoveryEnabled =\n    args.pointInTimeRecoveryEnabled || availabilityType === 'REGIONAL';\n  let tier = `db-custom-${cpu}-${memoryGb * MB}`;\n  if (maxConnections) {\n    databaseFlags.push({ name: 'max_connections', value: maxConnections });\n  }\n\n  databaseFlags.push({ name: 'track_activity_query_size', value: '4096' });\n  databaseFlags.push({ name: 'pg_stat_statements.track', value: 'all' });\n  databaseFlags.push({ name: 'pg_stat_statements.max', value: '10000' });\n  databaseFlags.push({ name: 'pg_stat_statements.track_utility', value: 'off' });\n  databaseFlags.push({ name: 'track_io_timing', value: 'on' });\n\n  if (!isProduction) {\n    // cpu must be 1 or an even number less than or equal to 96.\n    let cpus = Math.round(Math.max(cpu / nonProdRatio, 1));\n    cpus = cpus % 2 === 0 || cpus === 1 ? cpus : cpus + 1;\n    tier = `db-custom-${cpus}-${Math.max(memoryGb / nonProdRatio, 3.75) * MB}`;\n  }\n  const name = getUniqueNameInProject(args.name || `${serviceId}-instance`) as string;\n  const sqlInstance = new gcp.sql.DatabaseInstance(\n    name as string,\n    {\n      databaseVersion: `POSTGRES_${version}`,\n      name,\n      settings: {\n        deletionProtectionEnabled: true,\n        userLabels: { ...createLabels() },\n        tier,\n        edition: 'ENTERPRISE',\n        backupConfiguration: backup\n          ? {\n              backupRetentionSettings: { retainedBackups, retentionUnit: 'COUNT' },\n              binaryLogEnabled: false,\n              enabled: true,\n              location: 'us',\n              pointInTimeRecoveryEnabled,\n              startTime: '21:00',\n              transactionLogRetentionDays: 7,\n            }\n          : null,\n        ipConfiguration: {\n          ipv4Enabled: false,\n          privateNetwork: getNetworkId('app'),\n        },\n        availabilityType,\n        databaseFlags,\n        insightsConfig: enableInsights\n          ? {\n              queryInsightsEnabled: true,\n              recordApplicationTags: true,\n            }\n          : null,\n      },\n      region: location,\n      deletionProtection: true,\n      ...args.databaseInstanceArgs,\n    },\n    { aliases: [{ name: 'sql-instance' }], protect: true }\n  ) as SqlDatabaseInstance;\n  sqlInstance.instance_name = name;\n  // @ts-ignore\n  // TODO: this removes to dependency on the instance for anyone using this field\n  monitoringState.sql.enabled = true;\n  if (monitor) createDatadogSqlMonitor({ instance: sqlInstance, name });\n  return sqlInstance;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  cpu?: number;\n  memoryGb: number;\n  nonProdRatio?: number;\n  name?: string;\n  enableInsights?: boolean;\n  maxConnections?: string;\n  version?: '13' | '14';\n  availabilityType?: 'ZONAL' | 'REGIONAL';\n  pointInTimeRecoveryEnabled?: boolean;\n  databaseFlags?: gcp.types.input.sql.DatabaseInstanceSettingsDatabaseFlag[];\n  backup?: boolean;\n  retainedBackups?: number;\n  databaseInstanceArgs?: Partial<gcp.sql.DatabaseInstanceArgs>;\n  monitor?: boolean;\n}",
            "type": "{\n  cpu?: number;\n  memoryGb: number;\n  nonProdRatio?: number;\n  name?: string;\n  enableInsights?: boolean;\n  maxConnections?: string;\n  version?: '13' | '14';\n  availabilityType?: 'ZONAL' | 'REGIONAL';\n  pointInTimeRecoveryEnabled?: boolean;\n  databaseFlags?: gcp.types.input.sql.DatabaseInstanceSettingsDatabaseFlag[];\n  backup?: boolean;\n  retainedBackups?: number;\n  databaseInstanceArgs?: Partial<gcp.sql.DatabaseInstanceArgs>;\n  monitor?: boolean;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/storage/buckets.ts",
    "exports": [
      {
        "type": "function",
        "name": " createStorageBucket",
        "text": "\n\nexport function createStorageBucket(name: string, opts: Partial<gcp.storage.BucketArgs> = {}) {\n  return new gcp.storage.Bucket(name, {\n    location: getConfigs().location,\n    versioning: {\n      enabled: true,\n    },\n    ...opts,\n  });\n}",
        "parameters": [
          {
            "name": "name",
            "text": "name: string",
            "type": "string"
          },
          {
            "name": "opts",
            "text": "opts: Partial<gcp.storage.BucketArgs> = {}",
            "type": "Partial<gcp.storage.BucketArgs>"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/storage/createDataLakeAndNotification.ts",
    "exports": [
      {
        "type": "function",
        "name": " createDataLakeAndNotification",
        "text": "\n\nexport function createDataLakeAndNotification(bucketName: string, location: string) {\n  const dataLake = new gcp.storage.Bucket(bucketName, {\n    location: location,\n    name: bucketName,\n  });\n\n  const onFinalizeTopic = new gcp.pubsub.Topic(`${bucketName}-object-on-finalize`, {\n    name: pulumi.interpolate`${dataLake.name}-object-on-finalize`,\n  });\n\n  createStorageNotification(bucketName, onFinalizeTopic);\n\n  return {\n    dataLake,\n    onFinalizeTopic,\n  };\n}",
        "parameters": [
          {
            "name": "bucketName",
            "text": "bucketName: string",
            "type": "string"
          },
          {
            "name": "location",
            "text": "location: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/storage/createStorageNotification.ts",
    "exports": [
      {
        "type": "function",
        "name": " createStorageNotification",
        "text": "\n\nexport function createStorageNotification(\n  bucketName: string,\n  topic: gcp.pubsub.Topic,\n  objectNamePrefix?: string\n) {\n  let gcsAccount;\n  if (!process.env.IS_LOCAL) {\n    gcsAccount = gcp.storage.getProjectServiceAccount({});\n  }\n  \n  const topicIAMBindingName = objectNamePrefix? `${bucketName}-${objectNamePrefix}-binding` : `${bucketName}-binding`;\n  const binding = new gcp.pubsub.TopicIAMBinding(topicIAMBindingName, {\n    topic: topic.id,\n    role: 'roles/pubsub.publisher',\n    members: [\n      gcsAccount\n        ? gcsAccount.then((gcsAccount) => `serviceAccount:${gcsAccount.emailAddress}`)\n        : 'u@d.io',\n    ],\n  });\n\n  const notificationOptions: gcp.storage.NotificationArgs = {\n    bucket: bucketName,\n    payloadFormat: 'JSON_API_V1',\n    topic: topic.id,\n    eventTypes: ['OBJECT_FINALIZE'],\n  };\n  if (objectNamePrefix) {\n    notificationOptions.objectNamePrefix = objectNamePrefix;\n  }\n  const notificationName = objectNamePrefix? `${bucketName}-${objectNamePrefix}-datalake-notification` : `${bucketName}-datalake-notification`;\n  new gcp.storage.Notification(notificationName, notificationOptions, {\n    dependsOn: [binding],\n  });\n}",
        "parameters": [
          {
            "name": "bucketName",
            "text": "bucketName: string",
            "type": "string"
          },
          {
            "name": "topic",
            "text": "topic: gcp.pubsub.Topic",
            "type": "gcp.pubsub.Topic"
          },
          {
            "name": "objectNamePrefix",
            "text": "objectNamePrefix?: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/storage/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/storage/uploadDir.ts",
    "exports": [
      {
        "type": "function",
        "name": " uploadDir",
        "text": "\n\nexport function uploadDir(args: { bucket: string; dir: string }) {\n  const { bucket, dir } = args;\n  const objects = [];\n  for (const file of fs.readdirSync(dir)) {\n    const object = new gcp.storage.BucketObject(`dir-${file}`, {\n      name: file,\n      bucket,\n      source: `${dir}/${file}`,\n    });\n    objects.push(object);\n  }\n  return objects;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { bucket: string; dir: string }",
            "type": "{ bucket: string; dir: string }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/temporal/index.ts",
    "exports": [
      {
        "type": "specifier",
        "name": " createTemporalNamespace",
        "text": " createTemporalNamespace"
      },
      {
        "type": "specifier",
        "name": " TemporalNamespace",
        "text": " TemporalNamespace"
      },
      {
        "type": "specifier",
        "name": " createTemporalSchedule",
        "text": " createTemporalSchedule"
      },
      {
        "type": "specifier",
        "name": " TemporalSchedule",
        "text": " TemporalSchedule"
      }
    ]
  },
  {
    "file": "@tw/pulumi/temporal/k8s.ts",
    "exports": [
      {
        "type": "function",
        "name": " deployTemporalWorker",
        "text": "\n\nexport function deployTemporalWorker(args: Omit<DeployToK8sArgs, 'providers'>) {\n  monitoringState.temporal.enabled = true;\n  const base: Partial<DeployToK8sArgs> = {\n    createK8sDeploymentArgs: {\n      podArgs: {\n        labels: {\n          'triplewhale.com/worker': 'temporal',\n        },\n        allowSpot: true,\n        memoryRequest: '1Gi',\n        otel: true,\n      },\n      averageMemoryUtilization: 80,\n      averageCPUUtilization: 75,\n      envs: {\n        IS_TEMPORAL_WORKER: 'true',\n        FETCHER_MAINTAINERS_EMAILS: getAlertEmails().toString(),\n      },\n    },\n    providers: [getK8sProvider({ cluster: 'temporal-cluster' })],\n  };\n\n  const opts = deepMerge(base, args);\n\n  return deployToK8s(opts);\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: Omit<DeployToK8sArgs, 'providers'>",
            "type": "Omit<DeployToK8sArgs, 'providers'>"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/temporal/temporalNamespace.ts",
    "exports": [
      {
        "name": " TemporalNamespace",
        "text": "\n\nexport class TemporalNamespace extends pulumi.dynamic.Resource {\n  public readonly namespace!: pulumi.Output<string>;\n  public readonly description!: pulumi.Output<string>;\n  public readonly retentionPeriod: pulumi.Output<Duration>;\n  constructor(\n    name: string,\n    args: TemporalNamespaceResourceInputs,\n    opts?: pulumi.CustomResourceOptions\n  ) {\n    super(new TemporalNamespaceProvider(), name, args, opts, 'temporal', 'namespace');\n  }\n}",
        "type": " pulumi.dynamic.Resource"
      },
      {
        "type": "function",
        "name": " createTemporalNamespace",
        "text": "\n\nexport function createTemporalNamespace(\n  name: string,\n  args: TemporalNamespaceResourceInputs,\n  opts?: pulumi.CustomResourceOptions\n) {\n  const ns = new TemporalNamespace(name, args, opts);\n  return ns;\n}",
        "parameters": [
          {
            "name": "name",
            "text": "name: string",
            "type": "string"
          },
          {
            "name": "args",
            "text": "args: TemporalNamespaceResourceInputs",
            "type": "TemporalNamespaceResourceInputs"
          },
          {
            "name": "opts",
            "text": "opts?: pulumi.CustomResourceOptions",
            "type": "pulumi.CustomResourceOptions"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/temporal/temporalSchedule.ts",
    "exports": [
      {
        "name": " TemporalSchedule",
        "text": "\n\nexport class TemporalSchedule extends pulumi.dynamic.Resource {\n  public readonly name!: pulumi.Output<string>;\n  public readonly args!: pulumi.Output<string>;\n  constructor(\n    name: string,\n    args: TemporalScheduleResourceInputs,\n    opts?: pulumi.CustomResourceOptions\n  ) {\n    super(new TemporalScheduleProvider(), name, args, opts, 'temporal', 'schedule');\n  }\n}",
        "type": " pulumi.dynamic.Resource"
      },
      {
        "type": "function",
        "name": " createTemporalSchedule",
        "text": "\n\nexport async function createTemporalSchedule(\n  name: string,\n  args: TemporalScheduleResourceInputs,\n  opts?: pulumi.CustomResourceOptions\n) {\n  const schedule = new TemporalSchedule(name, args, opts);\n  return schedule;\n}",
        "parameters": [
          {
            "name": "name",
            "text": "name: string",
            "type": "string"
          },
          {
            "name": "args",
            "text": "args: TemporalScheduleResourceInputs",
            "type": "TemporalScheduleResourceInputs"
          },
          {
            "name": "opts",
            "text": "opts?: pulumi.CustomResourceOptions",
            "type": "pulumi.CustomResourceOptions"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/temporal/utils.ts",
    "exports": [
      {
        "type": "function",
        "name": " getTemporalAddress",
        "text": "\n\nexport function getTemporalAddress(args: { projectId: string }) {\n  const { projectId } = args;\n\n  return `${projectId === 'triple-whale-staging' ? 'stg.' : ''}temporal-server.internal.whale3.io`;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { projectId: string }",
            "type": "{ projectId: string }"
          }
        ]
      },
      {
        "type": "function",
        "name": " getTemporalNamespace",
        "text": "\n\nexport function getTemporalNamespace(args: { providerId?: string; serviceId: string }) {\n  const { providerId, serviceId } = args;\n  return providerId ? `${providerId}-sensory` : `${serviceId}-ns`;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { providerId?: string; serviceId: string }",
            "type": "{ providerId?: string; serviceId: string }"
          }
        ]
      },
      {
        "type": "function",
        "name": " getTemporalClient",
        "text": "\n\nexport async function getTemporalClient(args: {\n  projectId: string;\n  serviceId: string;\n  namespace?: string;\n  providerId?: string;\n}) {\n  const { providerId, projectId, serviceId } = args;\n  const { namespace = getTemporalNamespace({ providerId, serviceId }) } = args;\n  if (clients[namespace]) {\n    return clients[namespace];\n  }\n  const connection = await Connection.connect({\n    address: getTemporalAddress({ projectId }),\n  });\n  const client = new Client({\n    connection,\n    namespace,\n  });\n  clients[namespace] = client;\n  await client.connection.ensureConnected();\n  return client;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  projectId: string;\n  serviceId: string;\n  namespace?: string;\n  providerId?: string;\n}",
            "type": "{\n  projectId: string;\n  serviceId: string;\n  namespace?: string;\n  providerId?: string;\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " getSchedule",
        "text": "\n\nexport async function getSchedule(args: {\n  projectId: string;\n  serviceId: string;\n  scheduleId: string;\n  namespace?: string;\n}) {\n  const { projectId, serviceId, scheduleId, namespace } = args;\n  const temporalClient = await getTemporalClient({ projectId, serviceId, namespace });\n  const scheduleHandler = temporalClient.schedule.getHandle(scheduleId);\n  try {\n    return await scheduleHandler.describe();\n  } catch (e) {\n    if (e instanceof ScheduleNotFoundError) {\n      return null;\n    }\n    throw e;\n  }\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  projectId: string;\n  serviceId: string;\n  scheduleId: string;\n  namespace?: string;\n}",
            "type": "{\n  projectId: string;\n  serviceId: string;\n  scheduleId: string;\n  namespace?: string;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/transformations.ts",
    "exports": [
      {
        "type": "function",
        "name": " runTransformations",
        "text": "\n\nexport function runTransformations() {\n  const enforceLabels = [\n    gcp.redis.Instance,\n    gcp.pubsub.Topic,\n    gcp.pubsub.Subscription,\n    gcp.storage.Bucket,\n    gcp.secretmanager.Secret,\n    gcp.compute.GlobalForwardingRule,\n    gcp.compute.ForwardingRule,\n    gcp.bigtable.Instance,\n    gcp.workflows.Workflow,\n    gcp.bigquery.Table,\n  ].map((r) => getType(r));\n\n  const packageJson = JSON.parse(fs.readFileSync(__dirname + '/../package.json').toString());\n  const packageLockVersion = JSON.parse(\n    fs.readFileSync(process.cwd() + '/package-lock.json').toString()\n  ).packages['node_modules/@tw/pulumi'].version;\n  if (pulumi.getOrganization() !== 'triplewhale') {\n    throw new Error('Organization must be triplewhale');\n  }\n  new TwPulumiStack('tw-pulumi-stack', {\n    name: 'tw-pulumi-stack',\n    version: packageJson.version,\n    packageLockVersion,\n    linked: !__dirname.includes('node_modules'),\n    buildId: process.env.BUILD_ID,\n    userEmail: getAuthor(),\n    repo: pulumi.output(getGitRepoName()),\n    relPath: pulumi.output(getPathRelativeToGit()),\n    locked: Boolean(process.env.LOCK),\n  });\n\n  pulumi.runtime.registerStackTransformation((args) => {\n    const originalProps = args.props;\n    const opts = {};\n    const props: any = {};\n\n    if (args.type === getType(gcp.redis.Instance)) {\n      monitoringState.redis.enabled = true;\n      monitoringState.redis.resourceNames.push(originalProps.name);\n    }\n    if (args.type === getType(gcp.bigtable.Instance)) {\n      monitoringState.bigtable.enabled = true;\n    }\n    if (args.type === getType(gcp.storage.Bucket)) {\n      monitoringState.storage.enabled = true;\n    }\n    if (args.type === getType(gcp.cloudtasks.Queue)) {\n      monitoringState.cloudTasks.enabled = true;\n      monitoringState.cloudTasks.resourceNames.push(originalProps.name);\n    }\n    if (args.type === getType(gcp.pubsub.Subscription)) {\n      monitoringState.pubsub.enabled = true;\n      if (!originalProps.expirationPolicy) {\n        props.expirationPolicy = { ttl: '' };\n      }\n    }\n    if (args.type === getType(gcp.sql.Database)) {\n      createDatadogPostgresqlSchema({\n        database: originalProps.name,\n        instanceName: originalProps.instance,\n      });\n    }\n    if (enforceLabels.includes(args.type)) {\n      props.labels = { ...createLabels(), ...originalProps.labels };\n    }\n    if (shouldOmitLabels(originalProps.labels)) {\n      delete props.labels;\n    }\n    if (args.type.startsWith('kubernetes:')) {\n      // @ts-ignore\n      if (!args.opts.provider && !args.opts.parent?.__providers) {\n        throw Error(`provider not set for ${args.type} ${args.name}.`);\n      }\n      if (!args.type.startsWith('kubernetes:helm.sh') && !args.type.startsWith('kubernetes:yaml')) {\n        renderToYaml(args);\n      }\n      // @ts-ignore\n      if (args.opts.provider && !args.opts.dependsOn?.length) {\n        // @ts-ignore\n        args.opts.dependsOn = [args.opts.provider.dependsOn, ...(args.opts.dependsOn || [])];\n      }\n    }\n    if (args.type === 'pulumi:providers:kubernetes') {\n      const context = args.props.context;\n      kubeAuth(context);\n    }\n    if (!globalState[args.type]) {\n      globalState[args.type] = [];\n    }\n    globalState[args.type].push(args);\n    return {\n      props: pulumi.mergeOptions(args.props, props),\n      opts: pulumi.mergeOptions(args.opts, opts),\n    };\n  });\n\n  function getType(resource): string {\n    return resource.__pulumiType;\n  }\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/pulumi/tw-gateway/index.ts",
    "exports": [
      {
        "name": " TwGatewayResourceInputs",
        "text": "\n\nexport interface TwGatewayResourceInputs {\n  serviceId: pulumi.Input<string>;\n  spec: pulumi.Input<any>;\n}",
        "type": "interface"
      },
      {
        "name": " TwGateway",
        "text": "\n\nexport class TwGateway extends pulumi.dynamic.Resource {\n  constructor(name: string, args: TwGatewayResourceInputs, opts?: pulumi.CustomResourceOptions) {\n    super(twGatewayProvider, name, args, opts);\n  }\n}",
        "type": " pulumi.dynamic.Resource"
      }
    ]
  },
  {
    "file": "@tw/pulumi/types.ts",
    "exports": [
      {
        "name": " CloudRun",
        "text": "\n\nexport const CloudRun = gcp.cloudrun.Service;",
        "type": "variable"
      },
      {
        "name": " K8sIngress",
        "text": "\n\nexport const K8sIngress = kubernetes.networking.v1.Ingress;",
        "type": "variable"
      },
      {
        "name": " K8sService",
        "text": "\n\nexport const K8sService = kubernetes.core.v1.Service;",
        "type": "variable"
      },
      {
        "name": " K8sDeployment",
        "text": "\n\nexport const K8sDeployment = kubernetes.apps.v1.Deployment;",
        "type": "variable"
      },
      {
        "name": " authProxyConfig",
        "text": "\n\nexport type authProxyConfig = { serviceId: string; projectId?: string };",
        "type": "{ serviceId: string; projectId?: string }"
      },
      {
        "name": " serviceTarget",
        "text": "\n\nexport type serviceTarget =\n  | gcp.cloudrun.Service\n  | kubernetes.networking.v1.Ingress\n  | kubernetes.core.v1.Service\n  | ServiceEntryDeployment;",
        "type": "| gcp.cloudrun.Service\n  | kubernetes.networking.v1.Ingress\n  | kubernetes.core.v1.Service\n  | ServiceEntryDeployment"
      }
    ]
  },
  {
    "file": "@tw/pulumi/utils/bool.ts",
    "exports": [
      {
        "type": "function",
        "name": " objectBool",
        "text": "export function objectBool(obj: any) {\n  return Boolean(Object.keys(obj || {}).length);\n}",
        "parameters": [
          {
            "name": "obj",
            "text": "obj: any",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/utils/createLabels.ts",
    "exports": [
      {
        "type": "function",
        "name": " createLabels",
        "text": "\n\nexport function createLabels(asArray: boolean = false): any {\n  let labels = {\n    'pulumi-project': getConfigs().serviceId,\n    'pulumi-stack': getConfigs().stack,\n  };\n  if (getConfigs().isAService) {\n    labels['service-id'] = getConfigs().serviceId;\n  }\n  if (asArray === true) {\n    return Object.entries(labels).map(([key, value]) => `${key}:${value}`);\n  }\n  return labels;\n}",
        "parameters": [
          {
            "name": "asArray",
            "text": "asArray: boolean = false",
            "type": "boolean"
          }
        ]
      },
      {
        "name": " OMIT_LABELS",
        "text": "\n\nexport const OMIT_LABELS = Symbol('OMIT_LABELS');",
        "type": "variable"
      },
      {
        "type": "function",
        "name": " omitLabels",
        "text": "\nexport function omitLabels() {\n  return { [OMIT_LABELS]: true };\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " shouldOmitLabels",
        "text": "\n\nexport function shouldOmitLabels(labels: any) {\n  return labels && labels[OMIT_LABELS] === true;\n}",
        "parameters": [
          {
            "name": "labels",
            "text": "labels: any",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/utils/domain.ts",
    "exports": [
      {
        "name": " Domain",
        "text": "\n\nexport type Domain = keyof typeof cloudFlareDomainMap;",
        "type": "keyof typeof cloudFlareDomainMap"
      },
      {
        "name": " TWDomain",
        "text": "\n\nexport class TWDomain {\n  public readonly fullSubDomain: string;\n  public readonly fqdn: string;\n  constructor(\n    public readonly domain: Domain,\n    public readonly subDomain: string,\n    public readonly domainGroup?: 'srv' | 'api' | 'internal' | 'iap',\n    public projectSubDomain?: (projectId: string) => string\n  ) {\n    this.projectSubDomain = projectSubDomain || getProjectSubDomain;\n    // full, including project prefix and project unique name\n    this.fullSubDomain = this.getSubDomain(true);\n    this.fqdn = getFQDN(this.fullSubDomain, domain);\n  }\n\n  getSubDomain(includeDomainGroup?: boolean): string {\n    const { projectId } = getConfigs();\n    let result = `${this.projectSubDomain(projectId)}${getUniqueNameInProject(this.subDomain)}`;\n    if (result.endsWith('.')) {\n      result = result.slice(0, -1);\n    }\n    if (includeDomainGroup && this.domainGroup) {\n      if (!result) {\n        result = this.domainGroup;\n      } else {\n        result = result + '.' + this.domainGroup;\n      }\n    }\n    return result;\n  }\n}",
        "type": "class"
      },
      {
        "type": "function",
        "name": " createTWDomain",
        "text": "\n\nexport function createTWDomain(args: {\n  domain?: Domain;\n  subDomain?: string;\n  domainGroup?: 'srv' | 'api' | 'internal' | 'iap';\n  projectSubDomain?: (projectId: string) => string;\n  twDomain?: TWDomain;\n}): TWDomain {\n  const domain = args.domain || args.twDomain?.domain || defaultDomain;\n  const subDomain = args.subDomain || args.twDomain?.subDomain;\n  const domainGroup = args.domainGroup || args.twDomain?.domainGroup;\n  const projectSubDomain = args.projectSubDomain || args.twDomain?.projectSubDomain;\n  if (!domain) {\n    throw new Error('Domain is required');\n  }\n  return new TWDomain(domain, subDomain, domainGroup, projectSubDomain);\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  domain?: Domain;\n  subDomain?: string;\n  domainGroup?: 'srv' | 'api' | 'internal' | 'iap';\n  projectSubDomain?: (projectId: string) => string;\n  twDomain?: TWDomain;\n}",
            "type": "{\n  domain?: Domain;\n  subDomain?: string;\n  domainGroup?: 'srv' | 'api' | 'internal' | 'iap';\n  projectSubDomain?: (projectId: string) => string;\n  twDomain?: TWDomain;\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " getFQDN",
        "text": "\n\nexport function getFQDN(subDomain: string, domain: string) {\n  if (!subDomain) {\n    return domain;\n  }\n  return `${subDomain}.${domain}`;\n}",
        "parameters": [
          {
            "name": "subDomain",
            "text": "subDomain: string",
            "type": "string"
          },
          {
            "name": "domain",
            "text": "domain: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " getLabelSafeDomain",
        "text": "\n\nexport function getLabelSafeDomain(twDomain: TWDomain) {\n  let labelSafeDomain = twDomain.fqdn;\n  if (labelSafeDomain.length > 63) {\n    labelSafeDomain = labelSafeDomain.slice(0, 63);\n    if (labelSafeDomain.endsWith('.')) {\n      labelSafeDomain = labelSafeDomain.slice(0, 62);\n    }\n  }\n  return labelSafeDomain;\n}",
        "parameters": [
          {
            "name": "twDomain",
            "text": "twDomain: TWDomain",
            "type": "TWDomain"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/utils/enumerateNumber.ts",
    "exports": [
      {
        "name": " enumerateNumber",
        "text": "export const enumerateNumber = (num) => Array.from({ length: num }, (_, index) => index);",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/pulumi/utils/envs.ts",
    "exports": [
      {
        "type": "function",
        "name": " sortEnvs",
        "text": "\n\nexport function sortEnvs(\n  envs: { name: pulumi.Input<string>; value?: pulumi.Input<string>; valueFrom?: any }[]\n) {\n  // sort and remove empty values, and duplicate values\n  return envs\n    .filter(\n      (env) =>\n        (env.value !== '' &&\n          env.value !== undefined &&\n          env.value !== null &&\n          env.value !== 'undefined') ||\n        env.valueFrom\n    )\n    .filter((env, index, self) => {\n      const firstIndex = self.findIndex((e) => e.name === env.name);\n      return firstIndex === index;\n    })\n    .sort((a, b) => {\n      if (a.name < b.name) {\n        return -1;\n      }\n      return 1;\n    });\n}",
        "parameters": [
          {
            "name": "envs",
            "text": "envs: { name: pulumi.Input<string>; value?: pulumi.Input<string>; valueFrom?: any }[]",
            "type": "{ name: pulumi.Input<string>; value?: pulumi.Input<string>; valueFrom?: any }[]"
          }
        ]
      },
      {
        "type": "function",
        "name": " addEnvIfNotExists",
        "text": "\n\nexport function addEnvIfNotExists(\n  envs: kubernetes.types.input.core.v1.EnvVar[],\n  env: kubernetes.types.input.core.v1.EnvVar\n) {\n  if (\n    !envs.find((e) => {\n      e.name === env.name;\n    })\n  ) {\n    envs.push(env);\n  }\n}",
        "parameters": [
          {
            "name": "envs",
            "text": "envs: kubernetes.types.input.core.v1.EnvVar[]",
            "type": "kubernetes.types.input.core.v1.EnvVar[]"
          },
          {
            "name": "env",
            "text": "env: kubernetes.types.input.core.v1.EnvVar",
            "type": "kubernetes.types.input.core.v1.EnvVar"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/utils/exportTopicToBigquery.ts",
    "exports": [
      {
        "type": "function",
        "name": " exportTopicToBigquery",
        "text": "\n\nexport function exportTopicToBigquery(args: {\n  topicName: pulumi.Input<string>;\n  name: string;\n  tableArgs?: Partial<gcp.bigquery.TableArgs>;\n  datasetId?: string;\n  useTopicSchema?: boolean;\n  customSchema?: any[];\n  protectTable?: boolean;\n  deployToStg?: boolean;\n}) {\n  const { projectId, serviceId } = getConfigs();\n  const {\n    topicName,\n    name,\n    tableArgs,\n    customSchema = [],\n    datasetId = 'etl_staging',\n    useTopicSchema = false,\n    protectTable = true,\n    deployToStg = false,\n  } = args || {};\n\n  if (isStaging && !deployToStg) return;\n\n  const schema = [...bigqueryBaseSchema, ...customSchema];\n\n  const bigQueryTable = new gcp.bigquery.Table(\n    `${name}-bq-table`,\n    {\n      datasetId,\n      tableId: name,\n      timePartitioning: {\n        type: 'HOUR',\n        field: 'publish_time',\n        expirationMs: 12960000000,\n      },\n      labels: {\n        ...createLabels(),\n      },\n      schema: JSON.stringify(schema),\n      ...tableArgs,\n    },\n    { protect: protectTable }\n  );\n\n  new gcp.pubsub.Subscription(`${name}-bq-export-sub`, {\n    topic: topicName,\n    bigqueryConfig: {\n      table: pulumi.interpolate`${projectId}:${bigQueryTable.datasetId}.${bigQueryTable.tableId}`,\n      dropUnknownFields: true,\n      useTopicSchema,\n      writeMetadata: true,\n    },\n    deadLetterPolicy: {\n      deadLetterTopic: getPubsubTopicId('message-graveyard'),\n      maxDeliveryAttempts: 10,\n    },\n  });\n\n  return { bigQueryTable };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  topicName: pulumi.Input<string>;\n  name: string;\n  tableArgs?: Partial<gcp.bigquery.TableArgs>;\n  datasetId?: string;\n  useTopicSchema?: boolean;\n  customSchema?: any[];\n  protectTable?: boolean;\n  deployToStg?: boolean;\n}",
            "type": "{\n  topicName: pulumi.Input<string>;\n  name: string;\n  tableArgs?: Partial<gcp.bigquery.TableArgs>;\n  datasetId?: string;\n  useTopicSchema?: boolean;\n  customSchema?: any[];\n  protectTable?: boolean;\n  deployToStg?: boolean;\n}"
          }
        ]
      },
      {
        "name": " bigqueryBaseSchema",
        "text": "\n\nexport const bigqueryBaseSchema = [\n  {\n    name: 'subscription_name',\n    type: 'STRING',\n    mode: 'NULLABLE',\n    description: 'metadata',\n  },\n  {\n    name: 'message_id',\n    type: 'STRING',\n    mode: 'NULLABLE',\n    description: 'metadata',\n  },\n  {\n    name: 'publish_time',\n    type: 'TIMESTAMP',\n    mode: 'NULLABLE',\n    description: 'metadata',\n  },\n  {\n    name: 'data',\n    type: 'JSON',\n    mode: 'NULLABLE',\n    description: 'metadata',\n  },\n  {\n    name: 'attributes',\n    type: 'STRING',\n    mode: 'NULLABLE',\n    description: 'metadata',\n  },\n];",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/pulumi/utils/generateEndpoint.ts",
    "exports": [
      {
        "type": "function",
        "name": " generateEndpoint",
        "text": "\n\nexport function generateEndpoint(endpoint: string, params: EndpointParams = {}): string {\n  if (objectBool(params)) {\n    endpoint += '?';\n    for (const [key, value] of Object.entries(params)) {\n      if (value !== undefined) {\n        endpoint += `${key}=${encodeURIComponent(value as string)}&`;\n      }\n    }\n    endpoint = endpoint.slice(0, -1); // remove trailing '&' character\n  }\n  return endpoint;\n}",
        "parameters": [
          {
            "name": "endpoint",
            "text": "endpoint: string",
            "type": "string"
          },
          {
            "name": "params",
            "text": "params: EndpointParams = {}",
            "type": "EndpointParams"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/utils/getAllServices.ts",
    "exports": [
      {
        "type": "function",
        "name": " getAllServices",
        "text": "\n\nexport async function getAllServices() {\n  const { projectId } = getConfigs();\n\n  const services = JSON.parse(\n    (\n      await gcp.storage.getBucketObjectContent({\n        bucket: `devops-${projectId}`,\n        name: `cloud-run-services/services.json`,\n      })\n    ).content\n  );\n  const servicesNoMods = {};\n  Object.keys(services[projectId]).map((serviceId) => {\n    if (services[projectId][serviceId]?.metadata?.labels?.['service-id'] === serviceId) {\n      servicesNoMods[serviceId] = services[projectId][serviceId];\n    }\n  });\n  return servicesNoMods;\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/pulumi/utils/getBaseUrl.ts",
    "exports": [
      {
        "type": "function",
        "name": " getBaseUrl",
        "text": "\n\nexport function getBaseUrl(service: serviceTarget): pulumi.Output<string> {\n  const { serviceId } = getConfigs();\n  if (isLocal) {\n    return pulumi.interpolate`http://localhost/${serviceId}`;\n  } else {\n    if (service instanceof CloudRun) {\n      return getCloudRunUrl(service);\n    } else if (service instanceof K8sIngress) {\n      // most likely iap, but might just be a open ingress.\n      return getIngressUrl(service);\n    } else if (service instanceof K8sService) {\n      // internal pass through lb using k8s service.\n      return getIngressUrl(service);\n    } else if (objectBool(service)) {\n      // service entry deployment\n      service = service as ServiceEntryDeployment;\n      if (service.endpoints.authenticated) {\n        return pulumi.output(service.endpoints.authenticated.url);\n      }\n      return pulumi.output(service.endpoints.open.url);\n    }\n    if (service === null) {\n      throw Error('service is set to null, this is prob a mistake.');\n    }\n  }\n}",
        "parameters": [
          {
            "name": "service",
            "text": "service: serviceTarget",
            "type": "serviceTarget"
          }
        ]
      },
      {
        "type": "function",
        "name": " getFullUrl",
        "text": "\n\nexport function getFullUrl(\n  service: serviceTarget,\n  endpoint: pulumi.Input<string>\n): pulumi.Output<string> {\n  const baseUrl = getBaseUrl(service);\n  return pulumi.interpolate`${baseUrl}/${endpoint}`;\n}",
        "parameters": [
          {
            "name": "service",
            "text": "service: serviceTarget",
            "type": "serviceTarget"
          },
          {
            "name": "endpoint",
            "text": "endpoint: pulumi.Input<string>",
            "type": "pulumi.Input<string>"
          }
        ]
      },
      {
        "type": "function",
        "name": " getTriggerUrl",
        "text": "\n\nexport function getTriggerUrl(triggerId: pulumi.Input<string>): pulumi.Output<string> {\n  const { projectId } = getConfigs();\n  return pulumi.interpolate`https://cloudbuild.googleapis.com/v1/projects/${projectId}/triggers/${triggerId}:run`;\n}",
        "parameters": [
          {
            "name": "triggerId",
            "text": "triggerId: pulumi.Input<string>",
            "type": "pulumi.Input<string>"
          }
        ]
      },
      {
        "type": "function",
        "name": " getAudience",
        "text": "\n\nexport function getAudience(service: serviceTarget) {\n  const { serviceId } = getConfigs();\n  if (isLocal) {\n    return pulumi.interpolate`http://localhost/${serviceId}`;\n  }\n  if (service instanceof gcp.cloudrun.Service) {\n    return getCloudRunUrl(service);\n  } else if (service instanceof K8sIngress) {\n    return iapClientId;\n  }\n  // auth-proxy\n  return (service as ServiceEntryDeployment).endpoints.authenticated.audience;\n}",
        "parameters": [
          {
            "name": "service",
            "text": "service: serviceTarget",
            "type": "serviceTarget"
          }
        ]
      },
      {
        "type": "function",
        "name": " createAuthProxyUrl",
        "text": "\n\nexport function createAuthProxyUrl(subDomain: string, canonicalForProject = false) {\n  const { projectId } = getConfigs();\n  const authProxySubDomain = getProjectSubDomain(projectId);\n  const serviceName = canonicalForProject ? subDomain : getUniqueNameInProject(subDomain, '_');\n  return `https://${authProxySubDomain}auth-proxy.api.whale3.io/${serviceName}`;\n}",
        "parameters": [
          {
            "name": "subDomain",
            "text": "subDomain: string",
            "type": "string"
          },
          {
            "name": "canonicalForProject",
            "text": "canonicalForProject = false",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/utils/getConfigs.ts",
    "exports": [
      {
        "name": " serviceConfigFile",
        "text": "\n\nexport const serviceConfigFile = '../tw-config.json';",
        "type": "variable"
      },
      {
        "type": "function",
        "name": " getConfigs",
        "text": "\n\nexport function getConfigs() {\n  if (cache) return cache;\n  const serviceId = pulumi.getProject();\n  const config = new pulumi.Config();\n  const stack = pulumi.getStack();\n  const projectNumber = gcp.organizations.getProjectOutput({}).number;\n  const gcpConfig = new pulumi.Config('gcp');\n  const location = config.require('gcpLocation');\n  const projectId = gcpConfig.require('project');\n  const isMultiPerProject = stack !== projectId;\n  const isAService =\n    config.get('notAService') === 'false' ||\n    (config.get('notAService') !== 'true' && fs.existsSync(serviceConfigFile));\n  const serviceConfig = loadServiceConfig();\n  const isSensory = Boolean(serviceConfig?.sensory);\n  cache = {\n    projectId,\n    serviceId,\n    location,\n    config,\n    gcpConfig,\n    stack,\n    isMultiPerProject,\n    projectNumber,\n    isAService,\n    serviceConfig,\n    isSensory,\n  };\n  return cache;\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/pulumi/utils/getResourceId.ts",
    "exports": [
      {
        "type": "function",
        "name": " getPubsubTopicId",
        "text": "\n\nexport function getPubsubTopicId(topicName: pulumi.Input<string>) {\n  const { projectId } = getConfigs();\n  return pulumi.interpolate`projects/${projectId}/topics/${topicName}`;\n}",
        "parameters": [
          {
            "name": "topicName",
            "text": "topicName: pulumi.Input<string>",
            "type": "pulumi.Input<string>"
          }
        ]
      },
      {
        "type": "function",
        "name": " getSecretId",
        "text": "\n\nexport function getSecretId(secretName: string) {\n  const { projectId } = getConfigs();\n  return `projects/${projectId}/secrets/${secretName}/versions/latest`;\n}",
        "parameters": [
          {
            "name": "secretName",
            "text": "secretName: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " getServiceAccountId",
        "text": "\n\nexport function getServiceAccountId(ServiceAccountName: string) {\n  const { projectId } = getConfigs();\n  return `projects/${projectId}/serviceAccounts/${ServiceAccountName}`;\n}",
        "parameters": [
          {
            "name": "ServiceAccountName",
            "text": "ServiceAccountName: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " getCloudRunServiceId",
        "text": "\n\nexport function getCloudRunServiceId(serviceName: string) {\n  const { projectId, location } = getConfigs();\n  return `locations/${location}/namespaces/${projectId}/services/${serviceName}`;\n}",
        "parameters": [
          {
            "name": "serviceName",
            "text": "serviceName: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " getDataformRepoId",
        "text": "\n\n// passing projectId is temporarily necessary because of the way dataform repos set up in triplewhale-dataland-ops\nexport function getDataformRepoId(projectId: string, repoName: string) {\n  const { location } = getConfigs();\n  return `projects/${projectId}/locations/${location}/repositories/${repoName}`;\n}",
        "parameters": [
          {
            "name": "projectId",
            "text": "projectId: string",
            "type": "string"
          },
          {
            "name": "repoName",
            "text": "repoName: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " getWorkflowId",
        "text": "\n\nexport function getWorkflowId(workflowName: pulumi.Input<string>) {\n  const { location, projectId } = getConfigs();\n  return pulumi.interpolate`projects/${projectId}/locations/${location}/workflows/${workflowName}`;\n}",
        "parameters": [
          {
            "name": "workflowName",
            "text": "workflowName: pulumi.Input<string>",
            "type": "pulumi.Input<string>"
          }
        ]
      },
      {
        "type": "function",
        "name": " getNetworkId",
        "text": "\n\nexport function getNetworkId(networkName: string) {\n  const { projectId } = getConfigs();\n  return `projects/${projectId}/global/networks/${networkName}`;\n}",
        "parameters": [
          {
            "name": "networkName",
            "text": "networkName: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " getSubnetworkId",
        "text": "\n\nexport function getSubnetworkId(subnetworkName: string, location: string) {\n  const { projectId } = getConfigs();\n  return `projects/${projectId}/regions/${location}/subnetworks/${subnetworkName}`;\n}",
        "parameters": [
          {
            "name": "subnetworkName",
            "text": "subnetworkName: string",
            "type": "string"
          },
          {
            "name": "location",
            "text": "location: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/utils/getServiceAccount.ts",
    "exports": [
      {
        "type": "function",
        "name": " getServiceAccountForService",
        "text": "\n\nexport function getServiceAccountForService() {\n  const serviceAccountEmail = k8sGetGCPServiceAccount()?.email;\n  if (serviceAccountEmail) return serviceAccountEmail;\n  return getDefaultComputeServiceAccount();\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/pulumi/utils/getServiceImage.ts",
    "exports": [
      {
        "type": "function",
        "name": " getServiceImage",
        "text": "\n\nexport function getServiceImage(\n  args: { serviceId?: string; imageTag?: string; projectId?: string; resolve?: boolean } = {}\n) {\n  const { serviceId: configServiceId, location } = getConfigs();\n  const {\n    serviceId = configServiceId,\n    imageTag = process.env.GITHUB_SHA || 'latest',\n    projectId = getConfigs().projectId,\n    resolve,\n  } = args;\n\n  const imageName = pulumi.interpolate`${projectId}/cloud-run/${getUniqueNameInProject(serviceId)}`;\n\n  const registryUrl = `${location}-docker.pkg.dev`;\n\n  const image = pulumi.interpolate`${registryUrl}/${imageName}:${imageTag}`;\n  if (!resolve) return image;\n\n  const registryImage = docker.getRegistryImageOutput(\n    {\n      name: image,\n    },\n    { provider: getDockerProvider() }\n  );\n  return registryImage.sha256Digest.apply(\n    (digest) => pulumi.interpolate`${registryUrl}/${imageName}@${digest}`\n  );\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { serviceId?: string; imageTag?: string; projectId?: string; resolve?: boolean } = {}",
            "type": "{ serviceId?: string; imageTag?: string; projectId?: string; resolve?: boolean }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/utils/getStackReference.ts",
    "exports": [
      {
        "type": "function",
        "name": " getStackReference",
        "text": "\n\nexport function getStackReference(\n  pulumiProject: string,\n  stackName?: string\n): pulumi.StackReference {\n  if (isLocal) {\n    return {\n      // @ts-ignore\n      getOutput: () => '',\n    };\n  }\n  // allows for calling multiple times in one stack\n  const stackId = `triplewhale/${pulumiProject}/${stackName || getConfigs().stack}`;\n  if (!stacks[stackId]) stacks[stackId] = new pulumi.StackReference(stackId);\n  return stacks[stackId];\n}",
        "parameters": [
          {
            "name": "pulumiProject",
            "text": "pulumiProject: string",
            "type": "string"
          },
          {
            "name": "stackName",
            "text": "stackName?: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/utils/getUniqueName.ts",
    "exports": [
      {
        "type": "function",
        "name": " getUniqueNameInProject",
        "text": "\n\nexport function getUniqueNameInProject(\n  name: pulumi.Input<string> | string,\n  delimiter: string = '-',\n  stackFirst: boolean = false\n) {\n  const { isMultiPerProject, stack } = getConfigs();\n  if (!name) {\n    return isMultiPerProject ? stack : '';\n  }\n  if (typeof name === 'string') {\n    return stackFirst\n      ? `${isMultiPerProject ? `${stack}${delimiter}` : ''}${name}`\n      : `${name}${isMultiPerProject ? `${delimiter}${stack}` : ''}`;\n  }\n\n  return pulumi.interpolate`${\n    stackFirst\n      ? `${isMultiPerProject ? `${stack}${delimiter}` : ''}${name}`\n      : `${name}${isMultiPerProject ? `${delimiter}${stack}` : ''}`\n  }`;\n}",
        "parameters": [
          {
            "name": "name",
            "text": "name: pulumi.Input<string> | string",
            "type": "pulumi.Input<string> | string"
          },
          {
            "name": "delimiter",
            "text": "delimiter: string = '-'",
            "type": "string"
          },
          {
            "name": "stackFirst",
            "text": "stackFirst: boolean = false",
            "type": "boolean"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/utils/git.ts",
    "exports": [
      {
        "type": "function",
        "name": " getGitFullUrl",
        "text": "\n\nexport async function getGitFullUrl() {\n  const { serviceId } = getConfigs();\n  const name = await getGitRepoName();\n  return `https://github.com/Triple-Whale/${name}/tree/master/services/${serviceId}`;\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/pulumi/utils/globalState.ts",
    "exports": [
      {
        "name": " globalState",
        "text": "\n\nexport let globalState: Record<string, pulumi.ResourceTransformationArgs[]> = {};",
        "type": "Record<string, pulumi.ResourceTransformationArgs[]>"
      }
    ]
  },
  {
    "file": "@tw/pulumi/utils/helpers.ts",
    "exports": [
      {
        "type": "function",
        "name": " convertEnvs",
        "text": "export function convertEnvs(envs) {\n  return envs\n    ? Object.keys(envs)\n        .filter((k) => k !== 'PORT')\n        .map((k) => {\n          // check if is pulumi output\n          let v = envs[k];\n          if (!(v instanceof Object && v.apply)) {\n            v = String(v);\n          }\n          return { name: k, value: v };\n        })\n    : [];\n}",
        "parameters": [
          {
            "name": "envs",
            "text": "envs",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/utils/hostedService.ts",
    "exports": [
      {
        "type": "function",
        "name": " storeHostedServiceInfo",
        "text": "\n\nexport function storeHostedServiceInfo(args: {\n  type: 'rabbitmq' | 'clickhouse' | 'kafka';\n  name: string;\n  data: any;\n}) {\n  const { type, name, data } = args;\n  const { projectId } = getConfigs();\n  createSecret(data, `${name}-${type}`);\n\n  new gcp.storage.BucketObject(`${name}-${type}`, {\n    bucket: `devops-${projectId}`,\n    content: toJSONOutput(data),\n    name: `hosted-service/${type}/${name}.json`,\n  });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  type: 'rabbitmq' | 'clickhouse' | 'kafka';\n  name: string;\n  data: any;\n}",
            "type": "{\n  type: 'rabbitmq' | 'clickhouse' | 'kafka';\n  name: string;\n  data: any;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/utils/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/utils/protect.ts",
    "exports": [
      {
        "type": "function",
        "name": " protect",
        "text": "\n\nexport function protect(name, protect) {\n  new Protect(name, {}, { protect });\n}",
        "parameters": [
          {
            "name": "name",
            "text": "name",
            "type": "any"
          },
          {
            "name": "protect",
            "text": "protect",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/utils/python.ts",
    "exports": [
      {
        "type": "function",
        "name": " pythonWorkers",
        "text": "\n\nexport function pythonWorkers(args: {\n  cpu: K8sCPU;\n  concurrency: number;\n  serviceConfig: ServiceConfig;\n  workers?: number;\n}) {\n  const { cpu, concurrency, serviceConfig } = args;\n  if (serviceConfig.runtime !== 'python') return { concurrency };\n  const cpuNum = k8sCpuToNumber(cpu);\n  let workers;\n  if (serviceConfig.env?.WEB_CONCURRENCY) {\n    workers = serviceConfig.env.WEB_CONCURRENCY;\n  } else {\n    workers = args.workers || cpuNum * 2 + 1;\n    if (concurrency > 0) {\n      workers = Math.min(workers, concurrency);\n    }\n  }\n  workers = Math.round(workers);\n  if (concurrency && concurrency / workers >= 2) {\n    console.warn(\n      `WEB_CONCURRENCY is set to ${workers} but concurrency is set to ${concurrency}. This may cause performance issues.`\n    );\n    exit(1);\n  }\n  return { workers, concurrency: concurrency ?? workers };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  cpu: K8sCPU;\n  concurrency: number;\n  serviceConfig: ServiceConfig;\n  workers?: number;\n}",
            "type": "{\n  cpu: K8sCPU;\n  concurrency: number;\n  serviceConfig: ServiceConfig;\n  workers?: number;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/utils/readFile.ts",
    "exports": [
      {
        "type": "function",
        "name": " readFile",
        "text": "\n\nexport function readFile(path: string) {\n  try {\n    return fs.readFileSync(path);\n  } catch {\n    return Buffer.from('');\n  }\n}",
        "parameters": [
          {
            "name": "path",
            "text": "path: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/utils/setOutput.ts",
    "exports": [
      {
        "name": " localExports",
        "text": "\n\nexport const localExports: Record<string, any> = {};",
        "type": "Record<string, any>"
      },
      {
        "type": "function",
        "name": " setOutput",
        "text": "\n\nexport function setOutput(key: string, value: any) {\n  if (isLocal) return;\n  localExports[key] = value;\n  require(process.env.PWD + '/index')[key] = value;\n}",
        "parameters": [
          {
            "name": "key",
            "text": "key: string",
            "type": "string"
          },
          {
            "name": "value",
            "text": "value: any",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/utils/uuid.ts",
    "exports": [
      {
        "type": "function",
        "name": " createUUID",
        "text": "\n\nexport function createUUID(name: string) {\n  return crypto.createHash('shake256', { outputLength: 4 }).update(name).digest('hex');\n}",
        "parameters": [
          {
            "name": "name",
            "text": "name: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/workflows/bigQuery.ts",
    "exports": [
      {
        "type": "function",
        "name": " bigQueryQuery",
        "text": "\n\n// the resulting rows are returned in a variable with the name specified\n// in the resultsVariable argument,\n// which are a series of JSON f,v objects for indicating fields and values\nexport function bigQueryQuery(args: { name: string; query: string; resultsKey: string }): {\n  [k: string]: Step;\n} {\n  const { name, query, resultsKey } = args;\n  const { projectId } = getConfigs();\n\n  const insertResultKey = `${name}InsertResult`;\n  const pageResultKey = `${name}PageResult`;\n  return {\n    [name]: {\n      steps: [\n        {\n          [`${name}-init`]: {\n            assign: [\n              {\n                pageToken: null,\n              },\n              {\n                [resultsKey]: [],\n              },\n            ],\n          },\n        },\n        {\n          [`${name}-submitQuery`]: {\n            try: {\n              call: 'googleapis.bigquery.v2.jobs.insert',\n              args: {\n                projectId,\n                body: {\n                  configuration: {\n                    query: {\n                      useLegacySql: false,\n                      query,\n                    },\n                  },\n                },\n              },\n              result: insertResultKey,\n            },\n            retry: {\n              predicate: '${http.default_retry_predicate}',\n            },\n          },\n        },\n        {\n          [`${name}-getPage`]: {\n            try: {\n              call: 'googleapis.bigquery.v2.jobs.getQueryResults',\n              args: {\n                projectId,\n                jobId: `\\${${insertResultKey}.jobReference.jobId}`,\n                pageToken: '${pageToken}',\n              },\n              result: pageResultKey,\n            },\n            retry: {\n              predicate: '${http.default_retry_predicate}',\n            },\n          },\n        },\n        {\n          [`${name}-processPage`]: {\n            for: {\n              value: 'row',\n              in: `\\${${pageResultKey}.rows}`,\n              steps: [\n                {\n                  processRow: {\n                    assign: [\n                      {\n                        [resultsKey]: `\\${list.concat(${resultsKey},row)}`,\n                      },\n                    ],\n                  },\n                },\n              ],\n            },\n          },\n        },\n      ],\n    },\n  };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { name: string; query: string; resultsKey: string }",
            "type": "{ name: string; query: string; resultsKey: string }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/workflows/createWorkflow.ts",
    "exports": [
      {
        "name": " CHILD_WORKFLOW_PREDICATE",
        "text": "\n\nexport const CHILD_WORKFLOW_PREDICATE = 'childWorkflowPredicate';",
        "type": "variable"
      },
      {
        "name": " DATAFORM_PREDICATE",
        "text": "\nexport const DATAFORM_PREDICATE = 'dataformInvocationPredicate';",
        "type": "variable"
      },
      {
        "type": "function",
        "name": " createWorkflow",
        "text": "\n\nexport function createWorkflow(args: {\n  name: string;\n  workflow: GoogleCloudWorkflows;\n  serviceAccountEmail: pulumi.Input<string>;\n  forceMonitor?: boolean;\n}) {\n  const { name = 'workflow', workflow, serviceAccountEmail, forceMonitor = false } = args;\n  const { projectId } = getConfigs();\n  const workflowName = getUniqueNameInProject(name);\n\n  if (isProduction || forceMonitor) {\n    createDatadogMonitor({\n      id: `workflow-errors-${workflowName}`,\n      sendOnAlert: false,\n      settings: {\n        name: `<${workflowName}> Workflow Failed Executions`,\n        query: `sum(last_1h):sum:gcp.workflows.finished_execution_count{workflow_id:${workflowName}, project_id:${projectId}, status:failed}.as_count() > 0`,\n        type: 'query alert',\n        monitorThresholds: {\n          critical: '0',\n        },\n      },\n    });\n  }\n\n  workflow[CHILD_WORKFLOW_PREDICATE] = {\n    params: ['e'],\n    steps: [\n      {\n        checkForError: {\n          switch: [\n            {\n              condition: '${\"OperationError\" in e.tags}',\n              return: true,\n            },\n            {\n              condition: true,\n              return: false,\n            },\n          ],\n        },\n      },\n    ],\n  };\n\n  workflow[DATAFORM_PREDICATE] = {\n    params: ['e'],\n    steps: [\n      {\n        checkForError: {\n          switch: [\n            {\n              // http.default_retry_predicate with 4xx added\n              condition:\n                '${(e.code >= 400 and e.code < 500) or e.code == 502 or e.code == 503 or e.code == 504 or \"ConnectionError\" in e.tags or \"ConnectionFailedError\" in e.tags or \"TimeoutError\" in e.tags}',\n              return: true,\n            },\n            {\n              condition: true,\n              return: false,\n            },\n          ],\n        },\n      },\n    ],\n  };\n\n  return new gcp.workflows.Workflow(name, {\n    name: workflowName,\n    sourceContents: toJSONOutput(workflow, true),\n    serviceAccount: serviceAccountEmail,\n  });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  workflow: GoogleCloudWorkflows;\n  serviceAccountEmail: pulumi.Input<string>;\n  forceMonitor?: boolean;\n}",
            "type": "{\n  name: string;\n  workflow: GoogleCloudWorkflows;\n  serviceAccountEmail: pulumi.Input<string>;\n  forceMonitor?: boolean;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/workflows/dataform.ts",
    "exports": [
      {
        "type": "function",
        "name": " dataformJob",
        "text": "\n\n// assigns a dict to results variable of the form:\n// {workflowInvocationName: workflowInvocationState}\n// https://cloud.google.com/dataform/reference/rest/v1beta1/projects.locations.repositories.workflowInvocations#State\nexport function dataformJob(args: {\n  name: string;\n  dataformRepository: string;\n  branch: string;\n  dataformVars: {};\n  outputDatasetName: string;\n  target: ITarget;\n  resultsKey: string;\n  serviceAccount: GCPServiceAccount;\n}): { [k: string]: Step } {\n  const {\n    name,\n    branch,\n    dataformVars,\n    dataformRepository,\n    target,\n    resultsKey,\n    outputDatasetName,\n    serviceAccount,\n  } = args;\n  const { projectId } = getConfigs();\n  const dataformRepoUrl = `https://dataform.googleapis.com/v1beta1/${getDataformRepoId(\n    projectId,\n    dataformRepository\n  )}`;\n\n  const compilationRequest: ICompilationResult = {\n    gitCommitish: branch,\n    codeCompilationConfig: {\n      defaultDatabase: projectId,\n      defaultSchema: outputDatasetName,\n      vars: dataformVars,\n    },\n  };\n\n  const compilationResultKey = `${name}CompilationResult`;\n  const invocationResultKey = `${name}InvocationResult`;\n  const invocationRequest: IWorkflowInvocation = {\n    compilationResult: `\\${${compilationResultKey}.body.name}`,\n    invocationConfig: {\n      includedTargets: [target],\n      transitiveDependenciesIncluded: true,\n      // @ts-ignore\n      serviceAccount: serviceAccount.email,\n    },\n  };\n\n  return {\n    [name]: {\n      steps: [\n        {\n          [`${name}-createCompilationResult`]: {\n            try: {\n              call: 'http.post',\n              args: {\n                url: `${dataformRepoUrl}/compilationResults`,\n                auth: {\n                  type: 'OAuth2',\n                },\n                body: compilationRequest as Args['body'],\n              },\n              result: compilationResultKey,\n            },\n            retry: {\n              predicate: `\\${${DATAFORM_PREDICATE}}`,\n              max_retries: 10,\n              backoff: {\n                initial_delay: 2,\n                max_delay: 60,\n                multiplier: 2,\n              },\n            },\n          },\n        },\n        {\n          [`${name}-invokeDataform`]: {\n            try: {\n              call: 'http.post',\n              args: {\n                url: `${dataformRepoUrl}/workflowInvocations`,\n                auth: {\n                  type: 'OAuth2',\n                },\n                body: invocationRequest as Args['body'],\n              },\n              result: invocationResultKey,\n            },\n            retry: {\n              predicate: `\\${${DATAFORM_PREDICATE}}`,\n              max_retries: 10,\n              backoff: {\n                initial_delay: 2,\n                max_delay: 60,\n                multiplier: 2,\n              },\n            },\n          },\n        },\n        {\n          [`${name}-logExecutionUrl`]: {\n            call: 'sys.log',\n            args: {\n              severity: 'INFO',\n              text: `\\${\"dataform execution URL: https://console.cloud.google.com/bigquery/dataform/locations/\" + sys.get_env(\"GOOGLE_CLOUD_LOCATION\") + text.find_all_regex(${invocationResultKey}.body.name, \"/repositories/[^/]+/\")[0].match + \"workflows\" + text.find_all_regex(${invocationResultKey}.body.name, \"/[^/]+$\")[0].match + \"?project=${projectId}\"}`,\n            },\n          },\n        },\n        {\n          [`${name}-initSleep`]: {\n            assign: [\n              {\n                [`${name}_sleepSeconds`]: 5,\n              },\n            ],\n          },\n        },\n        {\n          [`${name}-awaitDataformCompletion`]: {\n            steps: [\n              {\n                [`${name}-dataformCompletionSleep`]: {\n                  call: 'sys.sleep',\n                  args: {\n                    seconds: `\\${${name}_sleepSeconds}`,\n                  },\n                },\n              },\n              {\n                [`${name}-incrementSleep`]: {\n                  assign: [\n                    {\n                      [`${name}_sleepSeconds`]: `\\${math.min(${name}_sleepSeconds * 1.5, 1800)}`, // max 30 minutes\n                    },\n                  ],\n                },\n              },\n              {\n                [`${name}-getDataformCompletion`]: {\n                  try: {\n                    call: 'http.get',\n                    args: {\n                      url: `\\${\"https://dataform.googleapis.com/v1beta1/\" + ${invocationResultKey}.body.name}`,\n                      auth: {\n                        type: 'OAuth2',\n                      },\n                    },\n                    result: invocationResultKey,\n                  },\n                  retry: {\n                    predicate: `\\${${DATAFORM_PREDICATE}}`,\n                    max_retries: 10,\n                    backoff: {\n                      initial_delay: 2,\n                      max_delay: 60,\n                      multiplier: 2,\n                    },\n                  },\n                },\n              },\n              {\n                [`${name}-checkDataformCompletion`]: {\n                  switch: [\n                    {\n                      condition: `\\${${invocationResultKey}.body.state in [\"RUNNING\", \"CANCELING\"]}`,\n                      next: `${name}-awaitDataformCompletion`,\n                    },\n                    {\n                      condition: `\\${${invocationResultKey}.body.state in [\"FAILED\", \"CANCELLED\"]}`,\n                      raise: `\\${\"Dataform workflow failed: \" + ${invocationResultKey}.body.name + \": \" + ${invocationResultKey}.body.state}`,\n                    },\n                    {\n                      condition: `\\${${invocationResultKey}.body.state == \"SUCCEEDED\"}`,\n                      assign: [\n                        {\n                          [resultsKey]: {\n                            [`\\${${invocationResultKey}.body.name}`]: `\\${${invocationResultKey}.body.state}`,\n                          },\n                        },\n                      ],\n                    },\n                  ],\n                },\n              },\n            ],\n          },\n        },\n      ],\n    },\n  };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  dataformRepository: string;\n  branch: string;\n  dataformVars: {};\n  outputDatasetName: string;\n  target: ITarget;\n  resultsKey: string;\n  serviceAccount: GCPServiceAccount;\n}",
            "type": "{\n  name: string;\n  dataformRepository: string;\n  branch: string;\n  dataformVars: {};\n  outputDatasetName: string;\n  target: ITarget;\n  resultsKey: string;\n  serviceAccount: GCPServiceAccount;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/workflows/decodeArgs.ts",
    "exports": [
      {
        "type": "function",
        "name": " decodeArgsFromTrigger",
        "text": "\n\nexport function decodeArgsFromTrigger(args: {\n  name: string;\n  inputKey: string;\n  resultsKey: string;\n}): {\n  [k: string]: Step;\n} {\n  const { name, inputKey, resultsKey } = args;\n\n  return {\n    [name]: {\n      try: {\n        assign: [\n          {\n            [resultsKey]: `\\${json.decode(text.decode(base64.decode(${inputKey}.data.message.data)))}`,\n          },\n        ],\n      },\n      except: {\n        as: 'e',\n        steps: [\n          {\n            [`${name}-fallback`]: {\n              assign: [\n                {\n                  [resultsKey]: `\\${${inputKey}}`,\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n  };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  inputKey: string;\n  resultsKey: string;\n}",
            "type": "{\n  name: string;\n  inputKey: string;\n  resultsKey: string;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/workflows/index.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/workflows/k8Jobs.ts",
    "exports": [
      {
        "type": "function",
        "name": " k8Jobs",
        "text": "\n\nexport function k8Jobs(args: {\n  name: string;\n  // either the number of jobs to run (number)\n  // or the name of a variable containing the number of jobs to run (string)\n  numJobs?: number | string;\n  // ${resultsKey} - will contain the names of all jobs\n  // ${resultsKey}Completed - will contain the names of successfully completed jobs\n  // ${resultsKey}Failed - will contain the names of jobs that failed\n  resultsKey: string;\n  jobNumKey: string;\n  failWorkflowOnJobFailure?: boolean;\n  config: {\n    job: any;\n    context: string;\n    args?: string[];\n  };\n}): { [k: string]: Step } {\n  const { name, numJobs, resultsKey, jobNumKey, failWorkflowOnJobFailure = true, config } = args;\n\n  const completedVariable = `${resultsKey}Completed`;\n  const failedVariable = `${resultsKey}Failed`;\n\n  const getJobResultKey = `${name}GetJobResult`;\n  const startJobsResultKey = `${name}StartJobsResult`;\n\n  const jobNameKey = `${name}JobName`;\n  return {\n    [name]: {\n      steps: [\n        {\n          [`${name}-initJobNames`]: {\n            assign: [\n              {\n                [resultsKey]: [],\n              },\n              {\n                [completedVariable]: [],\n              },\n              {\n                [failedVariable]: [],\n              },\n            ],\n          },\n        },\n        {\n          [`${name}-logStartingJobs`]: {\n            call: 'sys.log',\n            args: {\n              text: `\\${\"${name} - starting \" + ${numJobs} + \" jobs\"}`,\n            },\n          },\n        },\n        {\n          [`${name}-startJobs`]: {\n            parallel: {\n              shared: [resultsKey],\n              for: {\n                value: jobNumKey,\n                range: `\\${[0, ${numJobs}-1]}`,\n                steps: [\n                  {\n                    [`${name}-startJob`]: {\n                      try: {\n                        call: 'http.post',\n                        args: {\n                          url: `${devopsService}/k8s/create-job`,\n                          auth: {\n                            type: 'OIDC',\n                            audience: 'devops',\n                          },\n                          body: config,\n                        },\n                        result: startJobsResultKey,\n                      },\n                      retry: {\n                        predicate: '${http.default_retry_predicate}',\n                        max_retries: 10,\n                        backoff: {\n                          initial_delay: 2,\n                          max_delay: 60,\n                          multiplier: 2,\n                        },\n                      },\n                    },\n                  },\n                  {\n                    [`${name}-appendJobName`]: {\n                      assign: [\n                        {\n                          [resultsKey]: `\\${list.concat(${resultsKey},${startJobsResultKey}.body.body.metadata.name)}`,\n                        },\n                      ],\n                    },\n                  },\n                ],\n              },\n            },\n          },\n        },\n        {\n          [`${name}-logJobNames`]: {\n            call: 'sys.log',\n            args: {\n              data: { [`${name} - jobs started`]: `\\${${resultsKey}}` },\n            },\n          },\n        },\n        {\n          [`${name}-waitForJobs`]: {\n            parallel: {\n              shared: [completedVariable, failedVariable],\n              for: {\n                value: jobNameKey,\n                in: `\\${${resultsKey}}`,\n                steps: [\n                  {\n                    [`${name}-initSleep`]: {\n                      assign: [\n                        {\n                          [`${name}_sleepSeconds`]: 5,\n                        },\n                      ],\n                    },\n                  },\n                  {\n                    [`${name}-getK8sJob`]: {\n                      try: {\n                        call: 'http.post',\n                        args: {\n                          url: `${devopsService}/k8s/get-job`,\n                          auth: {\n                            type: 'OIDC',\n                            audience: 'devops',\n                          },\n                          body: {\n                            jobName: `\\${${jobNameKey}}`,\n                            context: config.context,\n                            namespace: config.job.metadata.namespace,\n                          },\n                        },\n                        result: getJobResultKey,\n                      },\n                      retry: {\n                        predicate: '${http.default_retry_predicate}',\n                        max_retries: 10,\n                        backoff: {\n                          initial_delay: 2,\n                          max_delay: 60,\n                          multiplier: 2,\n                        },\n                      },\n                    },\n                  },\n                  {\n                    [`${name}-checkResult`]: {\n                      switch: [\n                        {\n                          condition: `\\${${getJobResultKey}.body.completed}`,\n                          steps: [\n                            {\n                              [`${name}-logSuccess`]: {\n                                call: 'sys.log',\n                                args: {\n                                  text: `\\${\"Job completed: \" + ${jobNameKey}}`,\n                                },\n                              },\n                            },\n                            {\n                              [`${name}-assignSuccess`]: {\n                                assign: [\n                                  {\n                                    [completedVariable]: `\\${list.concat(${completedVariable},${jobNameKey})}`,\n                                  },\n                                ],\n                              },\n                            },\n                          ],\n                        },\n                        {\n                          condition: `\\${${getJobResultKey}.body.failed}`,\n                          steps: [\n                            {\n                              [`${name}-logFailure`]: {\n                                call: 'sys.log',\n                                args: {\n                                  text: `\\${\"Job failed: \" + ${jobNameKey}}`,\n                                },\n                              },\n                            },\n                            {\n                              [`${name}-assignFailure`]: {\n                                assign: [\n                                  {\n                                    [failedVariable]: `\\${list.concat(${failedVariable},${jobNameKey})}`,\n                                  },\n                                ],\n                              },\n                            },\n                          ],\n                        },\n                        {\n                          condition: true,\n                          steps: [\n                            {\n                              [`${name}-incrementSleep`]: {\n                                assign: [\n                                  {\n                                    [`${name}_sleepSeconds`]: `\\${math.min(${name}_sleepSeconds * 1.5, 1800)}`, // max 30 minutes\n                                  },\n                                ],\n                              },\n                            },\n                            {\n                              [`${name}-k8sleep`]: {\n                                call: 'sys.sleep',\n                                args: {\n                                  seconds: `\\${${name}_sleepSeconds}`,\n                                },\n                                next: `${name}-getK8sJob`,\n                              },\n                            },\n                          ],\n                        },\n                      ],\n                    },\n                  },\n                ],\n              },\n            },\n          },\n        },\n        {\n          [`${name}-maybeFail`]: {\n            switch: [\n              {\n                condition: `\\${${failWorkflowOnJobFailure} and len(${failedVariable}) > 0}`,\n                steps: [\n                  {\n                    [`${name}-fail`]: {\n                      raise: {\n                        message: `${name} - one or more jobs failed`,\n                        completedVariable: `\\${${completedVariable}}`,\n                        failedVariable: `\\${${failedVariable}}`,\n                      },\n                    },\n                  },\n                ],\n              },\n            ],\n          },\n        },\n      ],\n    },\n  };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  // either the number of jobs to run (number)\n  // or the name of a variable containing the number of jobs to run (string)\n  numJobs?: number | string;\n  // ${resultsKey} - will contain the names of all jobs\n  // ${resultsKey}Completed - will contain the names of successfully completed jobs\n  // ${resultsKey}Failed - will contain the names of jobs that failed\n  resultsKey: string;\n  jobNumKey: string;\n  failWorkflowOnJobFailure?: boolean;\n  config: {\n    job: any;\n    context: string;\n    args?: string[];\n  };\n}",
            "type": "{\n  name: string;\n  // either the number of jobs to run (number)\n  // or the name of a variable containing the number of jobs to run (string)\n  numJobs?: number | string;\n  // ${resultsKey} - will contain the names of all jobs\n  // ${resultsKey}Completed - will contain the names of successfully completed jobs\n  // ${resultsKey}Failed - will contain the names of jobs that failed\n  resultsKey: string;\n  jobNumKey: string;\n  failWorkflowOnJobFailure?: boolean;\n  config: {\n    job: any;\n    context: string;\n    args?: string[];\n  };\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/workflows/pubsub.ts",
    "exports": [
      {
        "type": "function",
        "name": " sendPubSub",
        "text": "\n\nexport function sendPubSub(args: {\n  name: string;\n  topicName: pulumi.Input<string>;\n  payload: {};\n  attributes?: Record<string, string>;\n}): {\n  [k: string]: Step;\n} {\n  const { name, topicName, payload, attributes = {} } = args;\n  const { projectId } = getConfigs();\n\n  return {\n    [name]: {\n      try: {\n        call: 'googleapis.pubsub.v1.projects.topics.publish',\n        args: {\n          topic: pulumi.interpolate`projects/${projectId}/topics/${topicName}`,\n          body: {\n            messages: [\n              {\n                data: Buffer.from(JSON.stringify(payload)).toString('base64'),\n                attributes,\n              },\n            ],\n          },\n        },\n      },\n      retry: {\n        predicate: '${http.default_retry_predicate}',\n      },\n    },\n  };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  name: string;\n  topicName: pulumi.Input<string>;\n  payload: {};\n  attributes?: Record<string, string>;\n}",
            "type": "{\n  name: string;\n  topicName: pulumi.Input<string>;\n  payload: {};\n  attributes?: Record<string, string>;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/pulumi/workflows/schema/README.md",
    "exports": []
  },
  {
    "file": "@tw/pulumi/workflows/schema/generateSchema.ts",
    "exports": []
  },
  {
    "file": "@tw/pulumi/workflows/schema/index.ts",
    "exports": [
      {
        "type": "specifier",
        "name": " GoogleCloudWorkflows",
        "text": " GoogleCloudWorkflows"
      }
    ]
  },
  {
    "file": "@tw/pulumi/workflows/schema/workflows.d.ts",
    "exports": [
      {
        "name": " GoogleCloudWorkflows",
        "text": "/* eslint-disable */\n/**\n * This file was automatically generated by json-schema-to-typescript.\n * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n * and run json-schema-to-typescript to regenerate this file.\n */\n\n/**\n * Orchestrate Workflows consisting of Google Cloud APIs, SaaS APIs or private API endpoints.\n */\nexport type GoogleCloudWorkflows =\n  | {\n      main: {\n        /**\n         * The name of the parameter variable.\n         *\n         * @minItems 0\n         * @maxItems 1\n         */\n        params?: [] | [string];\n        steps?: StepArray;\n      };\n      [k: string]: Subworkflow;\n    }\n  | StepArray6;",
        "type": "| {\n      main: {\n        /**\n         * The name of the parameter variable.\n         *\n         * @minItems 0\n         * @maxItems 1\n         */\n        params?: [] | [string];\n        steps?: StepArray;\n      };\n      [k: string]: Subworkflow;\n    }\n  | StepArray6"
      },
      {
        "name": " StepArray",
        "text": "\n/**\n * An array of objects with a single step.\n *\n * @minItems 1\n * @maxItems 100000\n */\nexport type StepArray = [\n  {\n    [k: string]: Step;\n  },\n  ...{\n    [k: string]: Step;\n  }[]\n];",
        "type": "[\n  {\n    [k: string]: Step;\n  },\n  ...{\n    [k: string]: Step;\n  }[]\n]"
      },
      {
        "name": " Assign",
        "text": "\n/**\n * A list of variable assignment maps.\n *\n * @minItems 1\n * @maxItems 50\n */\nexport type Assign = [\n  {\n    [k: string]: unknown;\n  },\n  ...{\n    [k: string]: unknown;\n  }[]\n];",
        "type": "[\n  {\n    [k: string]: unknown;\n  },\n  ...{\n    [k: string]: unknown;\n  }[]\n]"
      },
      {
        "name": " Call",
        "text": "\n/**\n * Run a function and return a result.\n */\nexport type Call =\n  | ('http.get' | 'http.post' | 'http.put' | 'http.patch' | 'http.delete' | 'http.request')\n  | ('sys.sleep' | 'sys.sleep_until' | 'sys.log')\n  | ('events.await_callback' | 'events.create_callback_endpoint')\n  | string\n  | string;",
        "type": "| ('http.get' | 'http.post' | 'http.put' | 'http.patch' | 'http.delete' | 'http.request')\n  | ('sys.sleep' | 'sys.sleep_until' | 'sys.log')\n  | ('events.await_callback' | 'events.create_callback_endpoint')\n  | string\n  | string"
      },
      {
        "name": " Next",
        "text": "\n/**\n * Define what step Workflows should execute next.\n */\nexport type Next = string | 'end' | 'continue' | 'break';",
        "type": "string | 'end' | 'continue' | 'break'"
      },
      {
        "name": " Switch",
        "text": "\n/**\n * A switch block. A selection mechanism that allows the value of an expression to control the flow of a workflow's execution. If a value matches, that condition's statement is executed.\n *\n * @minItems 1\n * @maxItems 50\n */\nexport type Switch = [Condition, ...Condition[]];",
        "type": "[Condition, ...Condition[]]"
      },
      {
        "name": " StepArray1",
        "text": "\n/**\n * An array of objects with a single step.\n *\n * @minItems 1\n * @maxItems 100000\n */\nexport type StepArray1 = [\n  {\n    [k: string]: Step;\n  },\n  ...{\n    [k: string]: Step;\n  }[]\n];",
        "type": "[\n  {\n    [k: string]: Step;\n  },\n  ...{\n    [k: string]: Step;\n  }[]\n]"
      },
      {
        "name": " For",
        "text": "\n/**\n * Iterates over a sequence of numbers or through a collection of data, such as a list or map.\n */\nexport type For = {\n  /**\n   * A loop variable name. Contains the value of the currently iterated element.\n   */\n  value: string;\n  /**\n   * An index variable name. Contains the value to the current offset of the iteration.\n   */\n  index?: string;\n  /**\n   * An expression that evaluates into a list or a list definition. Required, if not using 'range'.\n   */\n  in?: unknown[] | string;\n  /**\n   * A list of two expressions, specifying the beginning and end of the range, both inclusive. Required, if not using 'in'.\n   */\n  range?: [number, number] | string;\n  steps: StepArray2;\n} & For1;",
        "type": "{\n  /**\n   * A loop variable name. Contains the value of the currently iterated element.\n   */\n  value: string;\n  /**\n   * An index variable name. Contains the value to the current offset of the iteration.\n   */\n  index?: string;\n  /**\n   * An expression that evaluates into a list or a list definition. Required, if not using 'range'.\n   */\n  in?: unknown[] | string;\n  /**\n   * A list of two expressions, specifying the beginning and end of the range, both inclusive. Required, if not using 'in'.\n   */\n  range?: [number, number] | string;\n  steps: StepArray2;\n} & For1"
      },
      {
        "name": " StepArray2",
        "text": "\n/**\n * An array of objects with a single step.\n *\n * @minItems 1\n * @maxItems 100000\n */\nexport type StepArray2 = [\n  {\n    [k: string]: Step;\n  },\n  ...{\n    [k: string]: Step;\n  }[]\n];",
        "type": "[\n  {\n    [k: string]: Step;\n  },\n  ...{\n    [k: string]: Step;\n  }[]\n]"
      },
      {
        "name": " For1",
        "text": "\nexport type For1 =\n  | {\n      [k: string]: unknown;\n    }\n  | {\n      [k: string]: unknown;\n    };",
        "type": "| {\n      [k: string]: unknown;\n    }\n  | {\n      [k: string]: unknown;\n    }"
      },
      {
        "name": " Parallel",
        "text": "\n/**\n * Define a part of your workflow where two or more steps can execute concurrently. A 'parallel' step waits until all the steps defined within it have completed or are interrupted by an unhandled exception; execution then continues.\n */\nexport type Parallel = {\n  /**\n   * The action for other branches when an exception occurs. Optional. The default policy, 'continueAll', results in no further action, and all other branches will attempt to run.\n   */\n  exception_policy?: 'continueAll';\n  /**\n   * A list of writable variables with parent scope that allow assignments within the 'parallel' step.\n   */\n  shared?: string[];\n  /**\n   * The maximum number of branches and iterations that can concurrently execute within a single workflow execution before further branches and iterations are queued to wait. This applies to a single 'parallel' step only and does not cascade. Must be a positive integer and can be either a literal value or an expression.\n   */\n  concurrency_limit?: number;\n  branches?: Branches;\n  for?: For2;\n} & Parallel1;",
        "type": "{\n  /**\n   * The action for other branches when an exception occurs. Optional. The default policy, 'continueAll', results in no further action, and all other branches will attempt to run.\n   */\n  exception_policy?: 'continueAll';\n  /**\n   * A list of writable variables with parent scope that allow assignments within the 'parallel' step.\n   */\n  shared?: string[];\n  /**\n   * The maximum number of branches and iterations that can concurrently execute within a single workflow execution before further branches and iterations are queued to wait. This applies to a single 'parallel' step only and does not cascade. Must be a positive integer and can be either a literal value or an expression.\n   */\n  concurrency_limit?: number;\n  branches?: Branches;\n  for?: For2;\n} & Parallel1"
      },
      {
        "name": " Branches",
        "text": "\n/**\n * Branches that can run concurrently. Required, if not using 'for'.\n *\n * @minItems 2\n * @maxItems 10\n */\nexport type Branches =\n  | [\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      }\n    ]\n  | [\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      }\n    ]\n  | [\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      }\n    ]\n  | [\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      }\n    ]\n  | [\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      }\n    ]\n  | [\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      }\n    ]\n  | [\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      }\n    ]\n  | [\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      }\n    ]\n  | [\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      }\n    ];",
        "type": "| [\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      }\n    ]\n  | [\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      }\n    ]\n  | [\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      }\n    ]\n  | [\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      }\n    ]\n  | [\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      }\n    ]\n  | [\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      }\n    ]\n  | [\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      }\n    ]\n  | [\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      }\n    ]\n  | [\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      },\n      {\n        [k: string]: Step;\n      }\n    ]"
      },
      {
        "name": " For2",
        "text": "\n/**\n * Iterates over a sequence of numbers or through a collection of data, such as a list or map.\n */\nexport type For2 = {\n  /**\n   * A loop variable name. Contains the value of the currently iterated element.\n   */\n  value: string;\n  /**\n   * An index variable name. Contains the value to the current offset of the iteration.\n   */\n  index?: string;\n  /**\n   * An expression that evaluates into a list or a list definition. Required, if not using 'range'.\n   */\n  in?: unknown[] | string;\n  /**\n   * A list of two expressions, specifying the beginning and end of the range, both inclusive. Required, if not using 'in'.\n   */\n  range?: [number, number] | string;\n  steps: StepArray2;\n} & (\n  | {\n      [k: string]: unknown;\n    }\n  | {\n      [k: string]: unknown;\n    }\n);",
        "type": "{\n  /**\n   * A loop variable name. Contains the value of the currently iterated element.\n   */\n  value: string;\n  /**\n   * An index variable name. Contains the value to the current offset of the iteration.\n   */\n  index?: string;\n  /**\n   * An expression that evaluates into a list or a list definition. Required, if not using 'range'.\n   */\n  in?: unknown[] | string;\n  /**\n   * A list of two expressions, specifying the beginning and end of the range, both inclusive. Required, if not using 'in'.\n   */\n  range?: [number, number] | string;\n  steps: StepArray2;\n} & (\n  | {\n      [k: string]: unknown;\n    }\n  | {\n      [k: string]: unknown;\n    }\n)"
      },
      {
        "name": " Parallel1",
        "text": "\nexport type Parallel1 =\n  | {\n      [k: string]: unknown;\n    }\n  | {\n      [k: string]: unknown;\n    };",
        "type": "| {\n      [k: string]: unknown;\n    }\n  | {\n      [k: string]: unknown;\n    }"
      },
      {
        "name": " Raise",
        "text": "\n/**\n * Raise an exception.\n */\nexport type Raise =\n  | string\n  | {\n      /**\n       * Error code.\n       */\n      code?: number;\n      /**\n       * Error message string.\n       */\n      message?: string;\n      [k: string]: unknown;\n    };",
        "type": "| string\n  | {\n      /**\n       * Error code.\n       */\n      code?: number;\n      /**\n       * Error message string.\n       */\n      message?: string;\n      [k: string]: unknown;\n    }"
      },
      {
        "name": " Try",
        "text": "\n/**\n * A try/except structure for error handling.\n */\nexport type Try = Step1 | StepArray4;",
        "type": "Step1 | StepArray4"
      },
      {
        "name": " Retry",
        "text": "\n/**\n * Define a retry policy to retry steps that return a specific error code.\n */\nexport type Retry =\n  | {\n      /**\n       * Defines which error codes will be retried. Options include ${http.default_retry_predicate}, ${http.default_retry_predicate_non_idempotent}, or a custom predicate defined as a subworkflow.\n       */\n      predicate?: string;\n      /**\n       * Maximum number of times a step will be retried, not counting the initial step execution attempt.\n       */\n      max_retries?: number;\n      /**\n       * Block that controls how retries occur.\n       */\n      backoff?: {\n        /**\n         * Delay in seconds between the initial failure and the first retry.\n         */\n        initial_delay?: number;\n        /**\n         * Maximum delay in seconds between retries.\n         */\n        max_delay?: number;\n        /**\n         * Multiplier applied to the previous delay to calculate the delay for the subsequent retry.\n         */\n        multiplier?: number;\n      };\n    }\n  | string;",
        "type": "| {\n      /**\n       * Defines which error codes will be retried. Options include ${http.default_retry_predicate}, ${http.default_retry_predicate_non_idempotent}, or a custom predicate defined as a subworkflow.\n       */\n      predicate?: string;\n      /**\n       * Maximum number of times a step will be retried, not counting the initial step execution attempt.\n       */\n      max_retries?: number;\n      /**\n       * Block that controls how retries occur.\n       */\n      backoff?: {\n        /**\n         * Delay in seconds between the initial failure and the first retry.\n         */\n        initial_delay?: number;\n        /**\n         * Maximum delay in seconds between retries.\n         */\n        max_delay?: number;\n        /**\n         * Multiplier applied to the previous delay to calculate the delay for the subsequent retry.\n         */\n        multiplier?: number;\n      };\n    }\n  | string"
      },
      {
        "name": " StepArray3",
        "text": "\n/**\n * An array of objects with a single step.\n *\n * @minItems 1\n * @maxItems 100000\n */\nexport type StepArray3 = [\n  {\n    [k: string]: Step;\n  },\n  ...{\n    [k: string]: Step;\n  }[]\n];",
        "type": "[\n  {\n    [k: string]: Step;\n  },\n  ...{\n    [k: string]: Step;\n  }[]\n]"
      },
      {
        "name": " StepArray4",
        "text": "\n/**\n * An array of objects with a single step.\n *\n * @minItems 1\n * @maxItems 100000\n */\nexport type StepArray4 = [\n  {\n    [k: string]: Step;\n  },\n  ...{\n    [k: string]: Step;\n  }[]\n];",
        "type": "[\n  {\n    [k: string]: Step;\n  },\n  ...{\n    [k: string]: Step;\n  }[]\n]"
      },
      {
        "name": " StepArray5",
        "text": "\n/**\n * An array of objects with a single step.\n *\n * @minItems 1\n * @maxItems 100000\n */\nexport type StepArray5 = [\n  {\n    [k: string]: Step;\n  },\n  ...{\n    [k: string]: Step;\n  }[]\n];",
        "type": "[\n  {\n    [k: string]: Step;\n  },\n  ...{\n    [k: string]: Step;\n  }[]\n]"
      },
      {
        "name": " StepArray6",
        "text": "\n/**\n * An array of objects with a single step.\n *\n * @minItems 1\n * @maxItems 100000\n */\nexport type StepArray6 = [\n  {\n    [k: string]: Step;\n  },\n  ...{\n    [k: string]: Step;\n  }[]\n];",
        "type": "[\n  {\n    [k: string]: Step;\n  },\n  ...{\n    [k: string]: Step;\n  }[]\n]"
      },
      {
        "name": " Step",
        "text": "\n\n/**\n * A single workflow step.\n *\n * This interface was referenced by `undefined`'s JSON-Schema definition\n * via the `patternProperty` \"^.*$\".\n */\nexport interface Step {\n  assign?: Assign;\n  call?: Call;\n  args?: Args;\n  result?: Result;\n  next?: Next;\n  switch?: Switch;\n  for?: For1;\n  parallel?: Parallel1;\n  raise?: Raise;\n  try?: Try;\n  retry?: Retry;\n  except?: Except;\n  return?: Return;\n  steps?: StepArray1;\n}",
        "type": "interface"
      },
      {
        "name": " Args",
        "text": "\n/**\n * Pass arguments and their values when calling a function that accepts parameters.\n */\nexport interface Args {\n  url?: string | string;\n  /**\n   * The type of HTTP request method to use. Required if using call type http.request.\n   */\n  method?: 'GET' | 'HEAD' | 'POST' | 'PUT' | 'DELETE' | 'CONNECT' | 'OPTIONS' | 'TRACE' | 'PATCH';\n  /**\n   * Header fields to supply input to the API.\n   */\n  headers?: {\n    [k: string]: unknown;\n  };\n  /**\n   * Body fields to supply input to the API.\n   */\n  body?:\n    | {\n        [k: string]: unknown;\n      }\n    | null\n    | string\n    | string;\n  /**\n   * Query fields to supply input to the API.\n   */\n  query?:\n    | {\n        [k: string]: unknown;\n      }\n    | string;\n  /**\n   * Required if the API being called requires authentication.\n   */\n  auth?: {\n    /**\n     * The type of authentication.\n     */\n    type?: 'OIDC' | 'OAuth2';\n    /**\n     * Specify token scope to limit an application's access to a user's account.\n     */\n    scope?: unknown[] | string;\n    /**\n     * Specify token scope to limit an application's access to a user's account.\n     */\n    scopes?: unknown[] | string | string;\n    /**\n     * Specifies the audience for the OIDC token. By default, it's set to the same value as url; however, it should be set to your service's root URL.\n     */\n    audience?: string | string;\n  };\n  /**\n   * Time in seconds. How long a request is allowed to run before throwing an exception. Default and maximum values vary by call.\n   */\n  timeout?: number;\n  /**\n   * Connector-specific parameters.\n   */\n  connector_params?: {\n    /**\n     * Time in seconds. The end-to-end duration the connector call is allowed to run for before throwing a timeout exception.\n     */\n    timeout?: number;\n    /**\n     * Polling policy.\n     */\n    polling_policy?: {\n      /**\n       * Time in seconds. Only applies to long-running operation calls.\n       */\n      initial_delay?: number;\n      /**\n       * Time in seconds. Only applies to long-running operation calls.\n       */\n      multiplier?: number;\n      /**\n       * Time in seconds. Only applies to long-running operation calls.\n       */\n      max_delay?: number;\n      [k: string]: unknown;\n    };\n    /**\n     * If set to True, the connector invocation call is non-blocking if the initial request to manage or update the resource succeeds\n     */\n    skip_polling?: boolean;\n    /**\n     * OAuth2 scopes to pass to the Google API.\n     */\n    scopes?: unknown[] | string | string;\n    [k: string]: unknown;\n  };\n  [k: string]: unknown;\n}",
        "type": "interface"
      },
      {
        "name": " Result",
        "text": "\n/**\n * Assign the result from a call to this variable.\n */\nexport interface Result {\n  [k]: string; // Triple Whale - edited\n}",
        "type": "interface"
      },
      {
        "name": " Condition",
        "text": "\n/**\n * Define conditional expressions for a switch block.\n */\nexport interface Condition {\n  /**\n   * An expression to switch on.\n   */\n  condition: string | boolean;\n  steps?: StepArray1;\n  assign?: Assign;\n  call?: Call;\n  args?: Args;\n  result?: Result;\n  next?: Next;\n  switch?: Switch;\n  for?: For;\n  parallel?: Parallel;\n  raise?: Raise;\n  try?: Try;\n  retry?: Retry;\n  except?: Except;\n  return?: Return;\n  [k: string]: unknown;\n}",
        "type": "interface"
      },
      {
        "name": " Step1",
        "text": "\n/**\n * A step.\n */\nexport interface Step1 {\n  assign?: Assign;\n  call?: Call;\n  args?: Args;\n  result?: Result;\n  next?: Next;\n  switch?: Switch;\n  for?: For1;\n  parallel?: Parallel1;\n  raise?: Raise;\n  try?: Try;\n  retry?: Retry;\n  except?: Except;\n  return?: Return;\n  steps?: StepArray1;\n}",
        "type": "interface"
      },
      {
        "name": " Except",
        "text": "\n/**\n * A try/except structure for error handling.\n */\nexport interface Except {\n  /**\n   * The name of a map variable that contains the error message.\n   */\n  as?: string;\n  steps?: StepArray3;\n}",
        "type": "interface"
      },
      {
        "name": " Return",
        "text": "\n/**\n * Stop a workflow's execution and return a value, variable, or expression.\n */\nexport interface Return {\n  [k: string]: unknown;\n}",
        "type": "interface"
      },
      {
        "name": " Subworkflow",
        "text": "\n/**\n * A subworkflow.\n */\nexport interface Subworkflow {\n  /**\n   * The name of the parameter variable.\n   *\n   * @minItems 0\n   * @maxItems 10\n   */\n  params?:\n    | []\n    | [unknown]\n    | [unknown, unknown]\n    | [unknown, unknown, unknown]\n    | [unknown, unknown, unknown, unknown]\n    | [unknown, unknown, unknown, unknown, unknown]\n    | [unknown, unknown, unknown, unknown, unknown, unknown]\n    | [unknown, unknown, unknown, unknown, unknown, unknown, unknown]\n    | [unknown, unknown, unknown, unknown, unknown, unknown, unknown, unknown]\n    | [unknown, unknown, unknown, unknown, unknown, unknown, unknown, unknown, unknown]\n    | [unknown, unknown, unknown, unknown, unknown, unknown, unknown, unknown, unknown, unknown];\n  steps?: StepArray5;\n}",
        "type": "interface"
      }
    ]
  },
  {
    "file": "./@tw/pulumi/workflows/schema/workflows.json",
    "exports": []
  },
  {
    "file": "@tw/pulumi/workflows/workflow.ts",
    "exports": [
      {
        "name": " WorkflowInvocation",
        "text": "\n\nexport type WorkflowInvocation = {\n  name: string;\n  workflowId: pulumi.Input<string>;\n  workflowArgs?: any;\n  resultKey?: string;\n  exceptionKey?: string;\n  failOnChildFailure?: boolean;\n  maxRetries?: number;\n  timeout?: number; // seconds\n};",
        "type": "{\n  name: string;\n  workflowId: pulumi.Input<string>;\n  workflowArgs?: any;\n  resultKey?: string;\n  exceptionKey?: string;\n  failOnChildFailure?: boolean;\n  maxRetries?: number;\n  timeout?: number; // seconds\n}"
      },
      {
        "type": "function",
        "name": " invokeWorkflows",
        "text": "\n\nexport function invokeWorkflows(args: { name; workflowInvocations: WorkflowInvocation[] }): {\n  [k: string]: Step;\n} {\n  const { name, workflowInvocations } = args;\n  return {\n    [name]: {\n      parallel: {\n        shared: workflowInvocations\n          .map((workflowInvocation) => workflowInvocation.resultKey)\n          .filter(Boolean),\n        branches: workflowInvocations.map((workflowInvocation) =>\n          invokeWorkflow(workflowInvocation)\n        ),\n      },\n    },\n  };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { name; workflowInvocations: WorkflowInvocation[] }",
            "type": "{ name; workflowInvocations: WorkflowInvocation[] }"
          }
        ]
      },
      {
        "type": "function",
        "name": " invokeWorkflow",
        "text": "\n\nexport function invokeWorkflow(args: WorkflowInvocation): {\n  [k: string]: Step;\n} {\n  const {\n    name,\n    workflowId,\n    workflowArgs,\n    resultKey,\n    exceptionKey,\n    failOnChildFailure = true,\n    maxRetries = 5,\n    timeout = 31536000, // max. 1 year\n  } = args;\n  const { projectId, location } = getConfigs();\n  const tempResultKey = `${name.replaceAll('-', '_')}_tempResult`;\n  const assignStep = exceptionKey\n    ? [\n        {\n          [`${name}-assign`]: {\n            assign: [\n              {\n                [exceptionKey]: '',\n                [tempResultKey]: '',\n              },\n            ],\n          },\n        },\n      ]\n    : [];\n\n  // @ts-ignore\n  return {\n    [name]: {\n      steps: [\n        ...assignStep,\n        {\n          [`${name}-invoke`]: {\n            try: {\n              try: {\n                call: 'googleapis.workflowexecutions.v1.projects.locations.workflows.executions.create',\n                args: {\n                  parent: `projects/${projectId}/locations/${location}/workflows/${workflowId}`,\n                  body: {\n                    argument: JSON.stringify(workflowArgs),\n                  },\n                  connector_params: {\n                    timeout,\n                  },\n                },\n                result: tempResultKey,\n              },\n              retry: {\n                predicate: '${http.default_retry_predicate}',\n              },\n            },\n            retry: {\n              predicate: `\\${${CHILD_WORKFLOW_PREDICATE}}`,\n              max_retries: maxRetries,\n            },\n            except: {\n              as: 'e',\n              steps: failOnChildFailure\n                ? [\n                    {\n                      [`${name}-raise`]: {\n                        raise: '${e}',\n                      },\n                    },\n                  ]\n                : [\n                    {\n                      [`${name}-handleFaillure`]: {\n                        call: 'sys.log',\n                        args: {\n                          data: { [`${name} - workflow failed`]: '${e}' },\n                        },\n                      },\n                    },\n                    {\n                      [`${name}-assignFailure`]: {\n                        assign: [\n                          {\n                            [exceptionKey]: '${e}',\n                          },\n                        ],\n                      },\n                    },\n                  ],\n            },\n          },\n        },\n        {\n          [`${name}-logExecutionUrl`]: {\n            call: 'sys.log',\n            args: {\n              text: `\\${\"child workflow started: https://console.cloud.google.com/workflows/workflow/${location}/${workflowId}/execution/\" + text.find_all_regex(${tempResultKey}.name, \"[^/]+$\")[0].match + \"?project=${projectId}\"}`,\n            },\n          },\n        },\n        {\n          [`${name}-assignResult`]: {\n            assign: [\n              {\n                [resultKey]: `\\${json.decode(${tempResultKey}.result)}`,\n              },\n            ],\n          },\n        },\n      ],\n    },\n  };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: WorkflowInvocation",
            "type": "WorkflowInvocation"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/snipestate/$derived.ts",
    "exports": [
      {
        "type": "function",
        "name": " $derived",
        "text": "\n\n/**\n * @description Creates a store with all the methods of `$store`\n * by receiving a callback that takes in the values of the stores as\n * arguments and returns some computed value using those arguments, as\n * well as an array of stores that this store will depend on.\n *\n * This function returns either a store containing the type of the return\n * type of the provided callback or a store containing a \"promisified\" version\n * of the initial data if the return type of the callback is a Promise. This\n * wrapped version is of type `PromisifiedData`.\n *\n * The values in the callback match the order of the stores that are in the\n * array.\n */\nexport function $derived<\n  S extends Store[],\n  TCallback extends (...args: StoreReturnTypes<S>) => unknown | Promise<unknown>,\n  TData = ReturnType<TCallback> extends Promise<unknown>\n    ? PromisifiedData<Awaited<ReturnType<TCallback>>>\n    : ReturnType<TCallback>,\n  TReturned = TData extends Promise<TData> ? PromisifiedData<TData> : TData\n>(cb: TCallback, stores: [...S]): Store<TReturned> {\n  const initialValue = cb(...getValues(stores));\n\n  if (isPromise(initialValue)) {\n    return createDerivedFromAsync(\n      initialValue,\n      cb as (...args: StoreReturnTypes<S>) => Promise<TData>,\n      stores\n    ) as unknown as Store<TReturned>;\n  }\n\n  return createDefaultDerived(\n    initialValue,\n    cb as (...args: StoreReturnTypes<S>) => TData,\n    stores\n  ) as unknown as Store<TReturned>;\n}",
        "parameters": [
          {
            "name": "cb",
            "text": "cb: TCallback",
            "type": "TCallback"
          },
          {
            "name": "stores",
            "text": "stores: [...S]",
            "type": "[...S]"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/snipestate/$effect.ts",
    "exports": [
      {
        "type": "function",
        "name": " $effect",
        "text": "\n\n/**\n * Runs the provided callback whenever any of the subscribed-to stores emit an update.\n * `$effect` also does an initial run of the callback right when its called.\n *\n * It returns an \"off\" function to turn off the effect/remove subscriptions.\n *\n * One important thing is that if the callback is asynchronous, the taskQueue will\n * automatically make sure it's being called in order.  If you don't want this kind of\n * sequential execution, don't make the callback return a Promise.\n */\nexport function $effect<S extends Store[], TCallback extends EffectCallback<S>>(\n  cb: TCallback,\n  stores: [...S]\n): () => void {\n  const taskQueue = new OrderedTaskQueue();\n\n  const unsub = () => {\n    // must clear the task queue, so no further tasks will be executed after an unsub\n    taskQueue.clear();\n    unsubs.forEach((u) => u());\n  };\n\n  const unsubs = stores.map((s) =>\n    s.subscribe(() => {\n      // same as initialVals for same reason\n      const values = getValues(stores);\n      taskQueue.add(() => cb(unsub, ...values));\n    })\n  );\n\n  // must get the values at the exact time the function\n  // is called, so we get the right values for that call\n  const initialVals = getValues(stores);\n\n  // initial run\n  taskQueue.add(() => cb(unsub, ...initialVals));\n\n  return unsub;\n}",
        "parameters": [
          {
            "name": "cb",
            "text": "cb: TCallback",
            "type": "TCallback"
          },
          {
            "name": "stores",
            "text": "stores: [...S]",
            "type": "[...S]"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/snipestate/$lazyEffect.ts",
    "exports": [
      {
        "type": "function",
        "name": " $lazyEffect",
        "text": "\n\n/**\n * Very similar to `$effect` - just doesn't run the provided callback initially.\n * Only runs the callback if any stores emit an update.\n */\nexport function $lazyEffect<S extends Store[], TCallback extends EffectCallback<S>>(\n  cb: TCallback,\n  stores: [...S]\n): () => void {\n  const taskQueue = new OrderedTaskQueue();\n\n  const unsub = () => {\n    // must clear the task queue, so no further tasks will be executed after an unsub\n    taskQueue.clear();\n    unsubs.forEach((u) => u());\n  };\n\n  const unsubs = stores.map((s) =>\n    s.subscribe(() => {\n      // must get the values at the exact time the function\n      // is called, so we get the right values for that call\n      const values = getValues(stores);\n      taskQueue.add(() => cb(unsub, ...values));\n    })\n  );\n\n  return unsub;\n}",
        "parameters": [
          {
            "name": "cb",
            "text": "cb: TCallback",
            "type": "TCallback"
          },
          {
            "name": "stores",
            "text": "stores: [...S]",
            "type": "[...S]"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/snipestate/$store.ts",
    "exports": [
      {
        "type": "function",
        "name": " $store",
        "text": "\n\n/**\n * @description\n * Creates a global store.\n * Just a more functional/React-y wrapper around the Observable class.\n *\n * Exposes the following methods:\n * - `get`: Get the current observed value.\n * - `set`: Sets the value - updating any entity listening to the value's changes.\n * - `subscribe`: Method used to subscribe to changes in the store from anywhere.\n *    Returns an `unsubscribe` method that can be called to remove the subscription and stop listening for changes.\n * - `useStore`: Hook used to listen to the value's changes. Returns value and setter for the value.\n * - `useDerived`: Convenience hook that can be used like useSelector - with the store's data.\n */\nexport function $store<T extends NonFunction<unknown>>(\n  value: T | Observable<T> | ObservableParams<T>\n): Store<T> {\n  const observable = (() => {\n    if (value instanceof Observable) return value;\n    if (isObservableParams(value)) return new Observable(value);\n    return new Observable<T>({ initialData: value });\n  })();\n\n  //\n  // INIT\n  //\n  // useful to track previous value\n  let prevVal = observable.data;\n  // MUST call `set` once on initialization of store to make sure all side effects are in sync\n  set(observable.data);\n\n  //\n  // UTILS\n  //\n  function get() {\n    return observable.data;\n  }\n\n  function set(newValue: T | ((prev: T) => T)) {\n    const computedVal =\n      typeof newValue === 'function' ? (newValue as (prev: T) => T)(observable.data) : newValue;\n\n    prevVal = observable.data;\n    observable.setData(computedVal);\n  }\n\n  function subscribe(cb: (newVal: T, prevVal: T) => T): () => void {\n    const func = (newVal: T) => cb(newVal, prevVal);\n    observable.addUpdateListener(func);\n    return () => observable.removeUpdateListener(func);\n  }\n\n  function eagerSubscribe(cb: (newVal: T, prevVal: T, unsubscribe: () => void) => T): () => void {\n    // This function needs a callback that can receive an unsubscribe in its signature.\n    // Otherwise, it's impossible to unsubscribe on the first run of func if desired.\n\n    function func(newVal: T) {\n      return cb(newVal, prevVal, unsubscribe);\n    }\n\n    function unsubscribe() {\n      observable.removeUpdateListener(func);\n    }\n\n    observable.addUpdateListener(func);\n\n    // immediate first call\n    func(observable.data);\n\n    return unsubscribe;\n  }\n\n  function useStore(): [T, typeof set] {\n    const [val, setVal] = useState<T>(observable.data);\n\n    useEffect(() => {\n      const listener = (newVal: T) => setVal(newVal);\n\n      observable.addUpdateListener(listener);\n\n      return () => {\n        observable.removeUpdateListener(listener);\n      };\n    }, []);\n\n    return [val, set];\n  }\n\n  function useDerived<D = any>(cb: (val: T) => D): D {\n    const [val, setVal] = useState<D>(cb(observable.data));\n\n    useEffect(() => {\n      const listener = (newVal: T) => setVal(cb(newVal));\n\n      observable.addUpdateListener(listener);\n\n      return () => {\n        observable.removeUpdateListener(listener);\n      };\n    }, [cb]);\n\n    return val;\n  }\n\n  return {\n    get,\n    set,\n    subscribe,\n    eagerSubscribe,\n    useStore,\n    useDerived,\n  };\n}",
        "parameters": [
          {
            "name": "value",
            "text": "value: T | Observable<T> | ObservableParams<T>",
            "type": "T | Observable<T> | ObservableParams<T>"
          }
        ]
      }
    ]
  },
  {
    "file": "./@tw/snipestate/.prettierrc.json",
    "exports": []
  },
  {
    "file": "@tw/snipestate/classes/CallbackDebouncer.ts",
    "exports": [
      {
        "name": " CallbackDebouncer",
        "text": "\n\nexport class CallbackDebouncer {\n  private running = false;\n  private currentFunc: Function | null = null;\n  private waitingFunc: Function | null = null;\n\n  /** Get the function that should be run now */\n  private getFunc(): Function | null {\n    try {\n      return this.currentFunc || this.waitingFunc;\n    } finally {\n      // after getting the most current function,\n      // either we'll have the waiting function\n      // in currentFunc, and waitingFunc will be null.\n      // or both will be null\n      this.currentFunc = this.waitingFunc;\n      this.waitingFunc = null;\n    }\n  }\n\n  /**\n   * Does nothing if a function is currently getting execute,\n   * Otherwise, calls the last saved function.\n   */\n  private async flush(): Promise<void> {\n    if (this.running) return;\n\n    const func = this.getFunc();\n    if (!func) return; // nothing to call\n\n    this.running = true;\n\n    try {\n      const res = func();\n      if (isPromise(res)) await res;\n    } catch (err) {\n      console.error('Error caught in snipestate debouncer:>>', err);\n\n      // nothing else should happen after an error - clearing all functions\n      this.currentFunc = null;\n      this.waitingFunc = null;\n    }\n\n    this.running = false;\n    this.flush();\n  }\n\n  /**\n   * Sets the callback to the queue and immediately attempts to execute.\n   */\n  public handle(cb: Function): void {\n    this.waitingFunc = cb;\n    this.flush();\n  }\n}",
        "type": "class"
      }
    ]
  },
  {
    "file": "@tw/snipestate/classes/Observable.ts",
    "exports": [
      {
        "name": " ObservableParams",
        "text": "\n\nexport type ObservableParams<T> = {\n  initialData: T;\n  /** If provided, allows you to extract computed value based on observed data. */\n  get?(data: T): T;\n  /** If provided, allows you to more accurately conditionally control how\n   * data is set as well as provide side effects like saving in localStorage.\n   * If function returns nothing, will be treated as side effect and the new\n   * value in the callback will be the new value. If it returns something, that\n   * returned value will be the new value.*/\n  set?(newData: T, data: T): T | void;\n};",
        "type": "{\n  initialData: T;\n  /** If provided, allows you to extract computed value based on observed data. */\n  get?(data: T): T;\n  /** If provided, allows you to more accurately conditionally control how\n   * data is set as well as provide side effects like saving in localStorage.\n   * If function returns nothing, will be treated as side effect and the new\n   * value in the callback will be the new value. If it returns something, that\n   * returned value will be the new value.*/\n  set?(newData: T, data: T): T | void;\n}"
      },
      {
        "type": "function",
        "name": " isObservableParams",
        "text": "\n\nexport function isObservableParams(obj: unknown): obj is ObservableParams<any> {\n  return !!(typeof obj === 'object' && obj && ('get' in obj || 'set' in obj));\n}",
        "parameters": [
          {
            "name": "obj",
            "text": "obj: unknown",
            "type": "unknown"
          }
        ]
      },
      {
        "name": " Observable",
        "text": "\n\nexport class Observable<T> {\n  private _callbacks = new Set<GenericCallback<T>>();\n  private _get: ObservableParams<T>['get'];\n  private _set: ObservableParams<T>['set'];\n  protected _data: T;\n\n  public constructor({ initialData, get, set }: ObservableParams<T>) {\n    this._data = initialData;\n    if (get) this._get = get;\n    if (set) this._set = set;\n  }\n\n  public get data(): T {\n    return this._get ? this._get(this._data) : this._data;\n  }\n\n  public setData(newData: T): void {\n    // use setter function if it exists\n    newData = this._set?.(newData, this._data) ?? newData;\n\n    // ignore if data is shallow equal\n    if (newData === this._data) return;\n\n    // set data\n    this._data = newData;\n\n    // finally emit to listeners\n    this.emitUpdate();\n  }\n\n  public addUpdateListener = (callback: GenericCallback<T>): void => {\n    this._callbacks.add(callback);\n  };\n\n  public removeUpdateListener = (callback: GenericCallback<T>): void => {\n    this._callbacks.delete(callback);\n  };\n\n  protected emitUpdate = (): void => {\n    this._callbacks.forEach((cb) => cb(this._data));\n  };\n}",
        "type": "class"
      }
    ]
  },
  {
    "file": "@tw/snipestate/classes/OrderedTaskQueue.ts",
    "exports": [
      {
        "name": " OrderedTaskQueue",
        "text": "\n\n/**\n * Contains a queue to which functions can be added and executed in order - even if they're asynchronous.\n *\n * IMPORTANT: If there's an error in a callback added to the queue, the queue is cleared and execution stops.\n */\nexport class OrderedTaskQueue {\n  private running = false;\n  private callQueue: CallQueueFunction[] = [];\n  private cleanupFunc: (() => any) | null = null;\n\n  /**\n   * Does nothing if a function is currently getting executed.\n   * Otherwise, removes and calls the first function in the callback queue.\n   */\n  private async flush(): Promise<void> {\n    if (this.running) return;\n\n    const firstFunc = this.callQueue.shift();\n    if (!firstFunc) return;\n\n    this.running = true;\n\n    try {\n      this.cleanup();\n\n      const res = firstFunc();\n      if (isPromise(res)) await res;\n\n      // save cleanup function to be run before next callback\n      if (typeof res === 'function') this.cleanupFunc = res;\n    } catch (err) {\n      console.error('Error caught in snipestate queue:>>', err);\n\n      // clear queue if we have an error\n      this.clear();\n    }\n\n    // Setting running to false is what allows us to move\n    // to the next function in the queue if one exists.\n    this.running = false;\n    this.flush();\n  }\n\n  /**\n   * Adds the callback to the queue and immediately attempts to execute.\n   */\n  public add(cb: CallQueueFunction): void {\n    this.callQueue.push(cb);\n    this.flush();\n  }\n\n  /**\n   * Clear the task queue. Can't stop a currently running task, but\n   * no further tasks will be executed.\n   */\n  public clear(): void {\n    this.callQueue = [];\n  }\n\n  /**\n   * runs cleanupFunc and clears after finish, since\n   * not all callbacks might return a cleanup function\n   *\n   * Must catch all to be non blocking\n   */\n  public cleanup(): void {\n    try {\n      this.cleanupFunc?.();\n    } catch (err) {\n      // TODO: Create some global setting that can allow devs to see snipestate errors in dev mode only\n    } finally {\n      this.cleanupFunc = null;\n    }\n  }\n}",
        "type": "class"
      }
    ]
  },
  {
    "file": "@tw/snipestate/classes/PromisifiedData.ts",
    "exports": [
      {
        "name": " PromisifiedData",
        "text": "export class PromisifiedData<T = any> {\n  public data?: T;\n  public pending: boolean = true;\n  public error?: unknown;\n\n  public constructor(args?: { data?: T; pending?: boolean; error?: unknown }) {\n    if (args) {\n      this.data = args.data;\n      this.pending = args.pending ?? this.pending;\n      this.error = args.error;\n    }\n  }\n}",
        "type": "class"
      }
    ]
  },
  {
    "file": "@tw/snipestate/classes/index.ts",
    "exports": []
  },
  {
    "file": "@tw/snipestate/index.ts",
    "exports": []
  },
  {
    "file": "@tw/snipestate/types.ts",
    "exports": [
      {
        "name": " NonFunction",
        "text": "export type NonFunction<T> = T extends Function ? never : T;",
        "type": "T extends Function ? never : T"
      },
      {
        "name": " Store",
        "text": "\n\nexport type Store<T = any> = {\n  /** Retrieve the value of the observed data */\n  get: () => T;\n  /** Set value of observed data on a global scope - everyone using the useStore or useDerived hooks is notified */\n  set: (val: NonFunction<T> | ((prev: T) => T)) => void;\n  /** Lets us subscribe to changes from the store. When an update occurs, the callback function is run. Returns an \"unsubscribe\" function to stop listening to updates. */\n  subscribe: (cb: (newVal: T, prevVal: T) => any) => () => void;\n  /** Almost the same as `subscribe`, but it calls the callback right away as well. */\n  eagerSubscribe: (cb: (newVal: T, prevVal: T, unsubscribe: () => void) => any) => () => void;\n  /** Hook that lets you listen to changes in the observed data and set the data globaly - use like useState */\n  useStore: () => [T, Store<T>['set']];\n  /** More of a convenience hook if you need to use some derived value from the store's current data - use like useSelector */\n  useDerived: <D>(cb: (val: T) => D) => D;\n};",
        "type": "{\n  /** Retrieve the value of the observed data */\n  get: () => T;\n  /** Set value of observed data on a global scope - everyone using the useStore or useDerived hooks is notified */\n  set: (val: NonFunction<T> | ((prev: T) => T)) => void;\n  /** Lets us subscribe to changes from the store. When an update occurs, the callback function is run. Returns an \"unsubscribe\" function to stop listening to updates. */\n  subscribe: (cb: (newVal: T, prevVal: T) => any) => () => void;\n  /** Almost the same as `subscribe`, but it calls the callback right away as well. */\n  eagerSubscribe: (cb: (newVal: T, prevVal: T, unsubscribe: () => void) => any) => () => void;\n  /** Hook that lets you listen to changes in the observed data and set the data globaly - use like useState */\n  useStore: () => [T, Store<T>['set']];\n  /** More of a convenience hook if you need to use some derived value from the store's current data - use like useSelector */\n  useDerived: <D>(cb: (val: T) => D) => D;\n}"
      },
      {
        "name": " StoreReturnTypes",
        "text": "\n\nexport type StoreReturnTypes<S extends Store[]> = {\n  [I in keyof S]: S[I] extends Store<infer U> ? U : never;\n};",
        "type": "{\n  [I in keyof S]: S[I] extends Store<infer U> ? U : never;\n}"
      },
      {
        "name": " RegularEffectCallback",
        "text": "\n\nexport type RegularEffectCallback<S extends Store[]> = (\n  unsub: () => void,\n  ...args: StoreReturnTypes<S>\n) => void | (() => void);",
        "type": "(\n  unsub: () => void,\n  ...args: StoreReturnTypes<S>\n) => void | (() => void)"
      },
      {
        "name": " AsyncEffectCallback",
        "text": "\n\nexport type AsyncEffectCallback<S extends Store[]> = (\n  unsub: () => void,\n  ...args: StoreReturnTypes<S>\n) => Promise<void> | (() => void);",
        "type": "(\n  unsub: () => void,\n  ...args: StoreReturnTypes<S>\n) => Promise<void> | (() => void)"
      },
      {
        "name": " EffectCallback",
        "text": "\n\nexport type EffectCallback<S extends Store[]> = RegularEffectCallback<S> | AsyncEffectCallback<S>;",
        "type": "RegularEffectCallback<S> | AsyncEffectCallback<S>"
      }
    ]
  },
  {
    "file": "@tw/snipestate/utils.ts",
    "exports": [
      {
        "type": "function",
        "name": " isPromise",
        "text": "\n\nexport function isPromise(x: unknown): x is Promise<unknown> {\n  // Apparently this is the best way to check if something is a Promise 🤷‍♂️ - JS is weird bruh\n  // https://stackoverflow.com/questions/27746304/how-to-check-if-an-object-is-a-promise#answer-27746324\n  return !!x && typeof x === 'object' && 'then' in x && typeof x.then === 'function';\n}",
        "parameters": [
          {
            "name": "x",
            "text": "x: unknown",
            "type": "unknown"
          }
        ]
      },
      {
        "type": "function",
        "name": " getValues",
        "text": "\n\n/** Extracts all values from an array of stores and returns a new array of their current values */\nexport function getValues<S extends Store[]>(stores: [...S]) {\n  return stores.map((s) => s.get()) as StoreReturnTypes<S>;\n}",
        "parameters": [
          {
            "name": "stores",
            "text": "stores: [...S]",
            "type": "[...S]"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/types/ApiResponses/ApiErrorResponse.ts",
    "exports": [
      {
        "name": " ApiErrorResponse",
        "text": "\nexport declare type ApiErrorResponse = {\n  error: string;\n} & BooleanResponse;",
        "type": "{\n  error: string;\n} & BooleanResponse"
      }
    ]
  },
  {
    "file": "@tw/types/ApiResponses/AttributesResponse.ts",
    "exports": [
      {
        "name": " ApiAttributesResponse",
        "text": "\n\nexport class ApiAttributesResponse extends BaseApiResponse<AnalyticsAttributes[]> {\n  data: AnalyticsAttributes[];\n}",
        "type": " BaseApiResponse"
      }
    ]
  },
  {
    "file": "@tw/types/ApiResponses/BaseApiResponse.ts",
    "exports": [
      {
        "name": " BaseApiResponse",
        "text": "export class BaseApiResponse<D, A extends Record<string, any> = any> {\n  data: D;\n  attributes?: A;\n}",
        "type": "class"
      }
    ]
  },
  {
    "file": "@tw/types/ApiResponses/BenchmarksResponse.ts",
    "exports": [
      {
        "name": " ApiBenchmarksResponse",
        "text": "\n\nexport class ApiBenchmarksResponse extends BaseApiResponse<\n  MetricsResponseData<BenchmarksMetrics>[]\n> {\n  data: MetricsResponseData<BenchmarksMetrics>[];\n}",
        "type": " BaseApiResponse"
      }
    ]
  },
  {
    "file": "@tw/types/ApiResponses/BooleanResponse.ts",
    "exports": [
      {
        "name": " BooleanResponse",
        "text": "export class BooleanResponse {\n    success: boolean;\n}",
        "type": "class"
      }
    ]
  },
  {
    "file": "@tw/types/ApiResponses/CreativeResponse.ts",
    "exports": [
      {
        "name": " CreativeResponse",
        "text": "\n\nexport interface CreativeResponse {\n  creatives: Creative[];\n  averages: any;\n  maximums: any;\n  error?:boolean;\n}",
        "type": "interface"
      },
      {
        "name": " Creative",
        "text": "\n\nexport interface Creative {\n  id: string;\n  comparisons?: any;\n  metricsBreakdown: MetricsBreakdown[];\n  metrics: AllMetricsAndPixelMetricsKeys;\n  assetType: CreativeTypes;\n  thumbnail: string;\n  image: string;\n  body: string;\n  status: AttributeStatus;\n  name: string;\n  numberOfAds: number;\n  account_id: string;\n  campaignName: string;\n  adsetName: string;\n  product_id: string;\n  images?: any[];\n  handle?: string;\n  productUrl?: string;\n}",
        "type": "interface"
      },
      {
        "name": " HighlightCreative",
        "text": "\n\nexport type HighlightCreative = {\n  id: string;\n  assetType: CreativeTypes;\n  name: string;\n  metric: HighlightMetrics;\n  thumbnail?: string;\n  image?: string;\n  body?: string;\n  value: number;\n  prevValue: number;\n  delta: number;\n};",
        "type": "{\n  id: string;\n  assetType: CreativeTypes;\n  name: string;\n  metric: HighlightMetrics;\n  thumbnail?: string;\n  image?: string;\n  body?: string;\n  value: number;\n  prevValue: number;\n  delta: number;\n}"
      },
      {
        "name": " CreativeSegment",
        "text": "\n\nexport type CreativeSegment = {\n  id: string;\n  metrics: AllMetricsAndPixelMetricsKeys;\n  metricsBreakdown: MetricsBreakdown[];\n  numberOfAds: number;\n  thumbnails: string[];\n  segmentTitle: string;\n  segmentDescription: string;\n};",
        "type": "{\n  id: string;\n  metrics: AllMetricsAndPixelMetricsKeys;\n  metricsBreakdown: MetricsBreakdown[];\n  numberOfAds: number;\n  thumbnails: string[];\n  segmentTitle: string;\n  segmentDescription: string;\n}"
      },
      {
        "name": " CreativeHighlightsResponse",
        "text": "\n\nexport type CreativeHighlightsResponse = {\n  creatives: HighlightCreative[];\n};",
        "type": "{\n  creatives: HighlightCreative[];\n}"
      },
      {
        "name": " CreativeSegmentsResponse",
        "text": "\n\nexport type CreativeSegmentsResponse = {\n  segments: CreativeSegment[];\n};",
        "type": "{\n  segments: CreativeSegment[];\n}"
      }
    ]
  },
  {
    "file": "@tw/types/ApiResponses/InfluencersSummaryResponse.ts",
    "exports": [
      {
        "name": " InfluencersSummaryResponse",
        "text": "\n\nexport class InfluencersSummaryResponse extends BaseApiResponse<\n  MetricsResponseData<RawMetrics | AllMetricsAndPixelMetricsKeys>[]\n> {\n  data: MetricsResponseData<RawMetrics | AllMetricsAndPixelMetricsKeys>[];\n}",
        "type": " BaseApiResponse"
      }
    ]
  },
  {
    "file": "@tw/types/ApiResponses/MetricsResponse.ts",
    "exports": [
      {
        "name": " MetricsBreakdown",
        "text": "\n\nexport type MetricsBreakdown<M = RawMetrics | AllMetricsAndPixelMetricsKeys | ShopMetrics> = {\n  date: string;\n  metrics: M;\n};",
        "type": "{\n  date: string;\n  metrics: M;\n}"
      },
      {
        "name": " MetricsResponseData",
        "text": "\n\nexport type MetricsResponseData<M = RawMetrics | AllMetricsAndPixelMetricsKeys | ShopMetrics> = {\n  id: string;\n  metricsBreakdown: MetricsBreakdown<M>[];\n} & Partial<AnalyticsAttributes>;",
        "type": "{\n  id: string;\n  metricsBreakdown: MetricsBreakdown<M>[];\n} & Partial<AnalyticsAttributes>"
      },
      {
        "name": " ApiMetricsResponse",
        "text": "\n\nexport class ApiMetricsResponse extends BaseApiResponse<MetricsResponseData[]> {\n  data: MetricsResponseData[];\n}",
        "type": " BaseApiResponse"
      }
    ]
  },
  {
    "file": "@tw/types/ApiResponses/PostPurchaseSurvey.ts",
    "exports": [
      {
        "name": " Language",
        "text": "export type Language = 'en' | 'fr' | 'es' | 'de' | 'he' | 'nn' | 'da' | 'sv' | 'it' | 'nl' | 'pt';",
        "type": "'en' | 'fr' | 'es' | 'de' | 'he' | 'nn' | 'da' | 'sv' | 'it' | 'nl' | 'pt'"
      },
      {
        "name": " PostPurchaseSurveyQuestionConfig",
        "text": "\n\nexport interface PostPurchaseSurveyQuestionConfig {\n  question: {\n    questionId?: number;\n    text: string;\n    type: 'single_option';\n    createdAt?: string;\n    order: number;\n    status: 'default' | 'active' | 'disabled' | 'deleted';\n  };\n  options: {\n    optionId?: number;\n    label: string;\n    value: string;\n    status: 'active' | 'deleted' | 'hidden';\n    order: number;\n    updatedAt?: string;\n  }[];\n  segments: string[];\n}",
        "type": "interface"
      },
      {
        "name": " PostPurchaseSurveyConfigResponse",
        "text": "\n\nexport interface PostPurchaseSurveyConfigResponse {\n  language: Language;\n  config: PostPurchaseSurveyQuestionConfig[];\n}",
        "type": "interface"
      },
      {
        "name": " SurveyQuestion",
        "text": "\n\nexport interface SurveyQuestion {\n  surveyQuestionId: number;\n  questionId: number;\n  text: string;\n  updatedAt: string;\n  type: 'single_option';\n  order: number;\n  status: 'default' | 'active' | 'disabled' | 'deleted';\n  segments: string[];\n}",
        "type": "interface"
      },
      {
        "name": " SurveyQuestionsResponse",
        "text": "\n\nexport interface SurveyQuestionsResponse {\n  surveyId: number;\n  updatedAt: string;\n  questions: SurveyQuestion[];\n}",
        "type": "interface"
      }
    ]
  },
  {
    "file": "@tw/types/ApiResponses/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/FinanceTypes.ts",
    "exports": [
      {
        "name": " CodatDataConnection",
        "text": "export interface CodatDataConnection {\n  id: string;\n  linkUrl: string;\n  platformName: string;\n  status: string;\n  code: string;\n  lastSynced: CodatRecordLastSynced;\n  bankAccounts?: { id: CodatBankAccount };\n}",
        "type": "interface"
      },
      {
        "name": " CodatBankAccount",
        "text": "\n\nexport interface CodatBankAccount {\n  accountName: string;\n  accountType: string;\n  availableBalance: number;\n  balance: number;\n  currency: string;\n  enabled: boolean;\n  id: string;\n  modifiedDate: string;\n  plaidItem: string;\n  sourceModifiedDate: string;\n}",
        "type": "interface"
      },
      {
        "name": " AccountingProvider",
        "text": "\n\nexport type AccountingProvider = 'custom' | 'codat.Quickbooks' | 'codat.Xero';",
        "type": "'custom' | 'codat.Quickbooks' | 'codat.Xero'"
      },
      {
        "name": " CodatData",
        "text": "\n\nexport interface CodatData {\n  company_id: string;\n  lastBillsModifiedDateChecked?: string;\n  lastBankAccountsModifiedDateChecked?: string;\n  lastAccountsSynced?: string;\n  lastSynced?: string;\n  dataConnections?: { id: CodatDataConnection };\n}",
        "type": "interface"
      },
      {
        "name": " AccounntingData",
        "text": "\n\nexport interface AccounntingData {\n  codat: CodatData;\n  provider: AccountingProvider;\n}",
        "type": "interface"
      }
    ]
  },
  {
    "file": "@tw/types/Shop.ts",
    "exports": [
      {
        "name": " Shop",
        "text": "\n\nexport interface Shop {\n  id: string;\n  createdAt: any;\n  currency?: string;\n  shopName?: string;\n  msp: SalesPlatform;\n  mspConnected: boolean;\n  earliestDate: Record<string, any>;\n  enableRulesEngine: boolean;\n  subscriptionActive: boolean;\n  subscriptionSource?: string;\n  shopifyCreatedAt: Record<string, any>;\n  shopifyFirstOrderAt: Record<string, any>;\n  lastShopifyImportDate: string;\n  facebookAccounts: any[];\n  facebookAccessToken: string;\n  facebookInvalidConnectionState?: boolean;\n  facebookAttributionWindows: string;\n  facebookUseAccountTimezone?: boolean;\n  features?: `CONF_${string}`[];\n  googleAdsAccounts?: any[];\n  googleAdsAccessToken?: Record<string, any>;\n  googleAdsInvalidConnectionState?: boolean;\n  googleSheetsAccounts?: {\n    id: string;\n    name?: string;\n    email?: string;\n    picture?: string;\n    accessToken: Record<string, string>;\n  }[];\n  googleAccessToken?: Record<string, any>;\n  googleAnalyticsAccounts?: any[];\n  googleSheetsAccessToken?: Record<string, any>;\n  googleSheetsInvalidConnectionState?: Boolean;\n  gradualReleaseKeys?: any;\n  forecastingScenarios?: any;\n  forecastingStatus?: 'ready' | 'in-progress' | 'failed' | 'deleted';\n  forecastingStatusLinear?: 'ready' | 'in-progress' | 'failed' | 'deleted';\n  forecastingStatusSeasonal?: 'ready' | 'in-progress' | 'failed' | 'deleted';\n  notificationSettings?: any;\n  pinterestAccounts?: any[];\n  pinterestToken?: Record<string, any>;\n  pinterestTokenInvalidConnectionState?: boolean;\n  timezone: string;\n  tiktokAccessToken: string;\n  tiktokAccounts: any[];\n  tiktokInvalidConnectionState?: boolean;\n  twitterToken?: Record<string, any>;\n  twitterAccounts?: {\n    [key in string]: {\n      accountId: string;\n      currency: string;\n      timezone: string;\n      [props: string]: any;\n    };\n  };\n  twitterInvalidConnectionState?: boolean;\n  shopifyUninstalled: boolean;\n  snapchatAccessToken: Record<string, any>;\n  snapchatAccounts: {\n    created_at: string;\n    currency: string;\n    id: string;\n    name: string;\n    // missing roles\n    selected: boolean;\n    status: string;\n    timezone: string;\n    type: string;\n    updated_at: string;\n  }[];\n  subscription: {\n    status?: string;\n    pricingOffer?: pricingOffer;\n    groupId?: string;\n  };\n  forceUpgrade?: {\n    subscriptionShouldChange?: boolean;\n    subscriptionWillChangeAdminOverride?: boolean;\n    lastChangeDate?: string;\n    lastChangeType?: string;\n    uncapped?: {\n      uncappedEndDate?: any;\n      uncappedTier?: number;\n    };\n    initialCheckHasRun?: boolean;\n  };\n  pixel: boolean;\n  shopifyAccessToken: string;\n  creativeCockpitEnabled: boolean;\n  twSurvey: {\n    isInstalled?: boolean;\n    isEnabled?: boolean;\n    id?: number;\n    updated_at: string;\n  };\n  enquirelabsToken: string;\n  enquirelabsApiKey: string;\n  knoClientId: string;\n  knoClientSecret: string;\n  knoWebhookSecret: string;\n  knoWebhookId: string;\n  klaviyoKey?: string;\n  klaviyoMetrics?: {\n    unsubscribed: string;\n    subscribedtolist: string;\n    openedemail: string;\n    receivedemail: string;\n    clickedsms: string;\n    clickedemail: string;\n    placedorder: string;\n  };\n  industry?: string;\n  stripeAccessToken?: {\n    access_token: string;\n    livemode: boolean;\n    refresh_token: string;\n    scope: string;\n    stripe_publishable_key: string;\n    stripe_user_id: string;\n    token_type: string;\n  };\n  pixel_settings?: {\n    allow_auto_install: boolean;\n    shop_setup?: {\n      shopify?: boolean;\n      shopify_checkout?: boolean;\n      third_party_checkout?: boolean;\n      custom_checkout?: boolean;\n      additional_pages?: boolean;\n    };\n  };\n  pixel_install_status?: {\n    status?: boolean;\n    theme_app_status?: boolean;\n    theme_status?: boolean;\n    web_pixel_status?: boolean;\n    thankyou_status?: boolean;\n  };\n  capi_settings?: CapiSettings;\n  slackAccessToken?: string;\n  slackChannelId?: string;\n  amazon?: {\n    accountsInConfigProcess?: { [key in string]: { initial?: boolean; region: AmazonRegions } };\n    sellerAccounts: {\n      [key in string]: {\n        sellerAccountId: string;\n        marketplaceIds: string[];\n        region: AmazonRegions;\n        currency: string;\n        timezone: string;\n      };\n    };\n  };\n  attributeFreeOrders?: boolean;\n  attributeDraftOrders?: boolean;\n  customerIdLookupAttribution?: boolean;\n  creativeHubUploadToken?: string;\n  pixelWeightNewCustomer?: number;\n  pixelWeightReturningCustomer?: number;\n  bing?: {\n    connectAccountsInProgress?: boolean;\n    user?: {\n      token: string;\n    };\n    bingAccounts?: {\n      [key in string]: {\n        accountId: string;\n        currency: string;\n        timezone: string;\n        [props: string]: any;\n      };\n    };\n  };\n  availableFreeFeatures?: any;\n  skio?: {\n    skioAccounts?: {\n      [key in string]: {\n        accountId: string;\n        [props: string]: any;\n      };\n    };\n  };\n  hubspotAccessToken: {\n    accessToken: string;\n    refreshToken: string;\n    expiresIn: number;\n    tokenType: string;\n  };\n  gorgiasAccessToken?: string;\n  gorgiasAccountUrl?: string;\n  annualRevenue?: {\n    days?: number;\n    last_calc_date?: string;\n    revenue?: number;\n    revenueNotConverted?: number;\n  };\n  averageMonthlyRevenue?: number;\n  splitFetchMetricsTable?: boolean;\n  providers?: {\n    [key in ServicesIds]?: ShopProviderState;\n  };\n  isTrendsShop?: boolean;\n  is3_0Package?: boolean;\n  packageVersion?: number;\n  isDemoShop?: boolean;\n  sourceDemoShop?: string;\n}",
        "type": "interface"
      },
      {
        "name": " ShopWithSensory",
        "text": "\nexport interface ShopWithSensory extends Shop {\n  sensory: {\n    [key in ServicesIds]: Provider;\n  };\n}",
        "type": "interface"
      }
    ]
  },
  {
    "file": "@tw/types/SummaryMetrics/SummaryMetrics.ts",
    "exports": [
      {
        "name": " SummaryMetrics",
        "text": "\n// import { OPERATOR } from 'path/to/OPERATOR', // Replace 'path/to/OPERATOR' with the actual path to the 'OPERATOR' type.\n\nexport const SummaryMetrics: SummaryMetricsDictionary = {\n  sales: {\n    id: 'sales',\n    title: 'Order Revenue',\n    chart: 'chartSales',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'totalSales',\n    providerId: 'shopify',\n    metric: 'sales',\n    tip: 'Order Revenue = Gross Sales - Discounts + Taxes + Shipping',\n    services: ['shopify'],\n    icon: 'shopify',\n    willyMetricId: 'orders_table_gross_sales', // <<<< ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_order_revenue_shopify',\n      tableId: 'orders_table',\n      columnId: 'order_revenue',\n      relatedProvider: 'shopify',\n      aggFunction: 'SUM',\n      filter: [\n        [{ column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['shopify'] }],\n      ],\n    },\n  },\n  newCustomerSales: {\n    id: 'newCustomerSales',\n    title: 'New Customer Revenue',\n    chart: 'chartNewCustomerSales',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'newCustomerSales',\n    tip: 'Amount of sales derived from new customers',\n    services: ['shopify'],\n    icon: 'shopify',\n    providerId: 'shopify',\n    metric: 'newCustomerSales',\n    willyMetricId: 'prepared_blended_stats_table_new_customer_revenue',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_order_revenue_new_customer_shopify',\n      tableId: 'orders_table',\n      columnId: 'order_revenue',\n      relatedProvider: 'shopify',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          { column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['shopify'] },\n          {\n            column: { name: 'Is New Customer', id: 'is_new_customer' },\n            comparator: 'equal',\n            value: true,\n          },\n        ],\n      ],\n    },\n  },\n  netSales: {\n    id: 'netSales',\n    title: 'Total Sales',\n    chart: 'netSalesChart',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'netSales',\n    tip: 'Gross Sales - Discounts - Returns + Shipping + Tax',\n    services: ['shopify'],\n    icon: 'shopify',\n    providerId: 'shopify',\n    metric: 'netSales',\n    willyMetricId: 'prepared_blended_stats_table_net_sales_shopify',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'net_sales_shopify',\n      relatedProvider: 'shopify',\n      expression: [\n        {\n          title: 'Order Revenue',\n          value: 'orders_table_order_revenue_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '+',\n          value: '+',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Refunds',\n          value: 'refunds_table_total_refunded_price_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '+',\n          value: '+',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Refunded Shipping',\n          value: 'refunds_table_shipping_refund_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '+',\n          value: '+',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Total Refunded Tax',\n          value: 'refunds_table_total_returned_tax_shopify',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  grossProfit: {\n    id: 'grossProfit',\n    title: 'Gross Profit',\n    // chart: 'chartGrossProfit',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'grossProfit',\n    tip: 'Net Sales - COGS - Shipping Costs - Handling Fees - Taxes - Payment Gateway Costs',\n    services: ['shopify'],\n    icon: 'shopify',\n    providerId: 'shopify',\n    metric: 'grossProfit',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'gross_profit_shopify',\n      relatedProvider: 'shopify',\n      expression: [\n        {\n          title: 'Net Sales',\n          value: 'net_sales_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'COGS',\n          value: 'orders_table_cost_of_goods_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Shipping Costs',\n          value: 'orders_table_shipping_costs_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Handling Fees',\n          value: 'orders_table_handling_fees_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Taxes',\n          value: 'orders_table_taxes_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Payment Gateway Costs',\n          value: 'orders_table_payment_gateway_costs_shopify',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  rcRevenue: {\n    id: 'rcRevenue',\n    title: 'Returning Customer Revenue',\n    chart: 'chartReturningCustomerSales',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'rcRevenue',\n    tip: 'Amount of sales derived from returning customers',\n    services: ['shopify'],\n    icon: 'shopify',\n    providerId: 'shopify',\n    metric: 'rcRevenue',\n    willyMetricId: 'orders_table_returning_customer_revenue_shopify',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'orders_table_order_revenue_returning_customer_shopify',\n      relatedProvider: 'shopify',\n      expression: [\n        {\n          title: 'Total Sales',\n          value: 'orders_table_order_revenue_shopify',\n          type: ElementTypes.METRIC,\n        },\n        { title: '-', value: '-', type: ElementTypes.OPERATOR },\n        {\n          title: 'New Customer Sales',\n          value: 'orders_table_order_revenue_new_customer_shopify',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  paymentGateways: {\n    id: 'paymentGateways',\n    title: 'Payment Gateways',\n    color: '#737D3F',\n    type: 'currency',\n    valueToFixed: 0,\n    features: [FeatureFlag.EXPENSES_ACCESS_FF],\n    metricId: 'totalPaymentGatewayCosts',\n    tip: 'Payment processing fees. Edit these in: Store > Gateway Costs',\n    chart: 'totalPaymentGatewayCostsChart',\n    services: ['shopify'],\n    icon: 'triple-whale-logo',\n    providerId: 'shopify',\n    metric: 'paymentGateways',\n    willyMetricId: 'prepared_blended_stats_table_payment_gateway_costs',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_payment_gateway_costs_shopify',\n      tableId: 'orders_table',\n      columnId: 'payment_gateway_costs',\n      relatedProvider: 'shopify',\n      aggFunction: 'SUM',\n      filter: [\n        [{ column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['shopify'] }],\n      ],\n    },\n  },\n  cogsOrders: {\n    id: 'cogsOrders',\n    title: 'COGS Orders',\n    color: '#007D3F',\n    type: 'currency',\n    features: [FeatureFlag.EXPENSES_ACCESS_FF],\n    valueToFixed: 0,\n    metricId: 'totalProductCostsOrders',\n    tip: 'Cost of goods sold. Imported from Shopify, or edit these in: Store > Cost of Goods',\n    icon: 'shopify',\n    services: ['shopify'],\n    providerId: 'shopify',\n    metric: 'cogsOrders',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_cost_of_goods_shopify',\n      tableId: 'orders_table',\n      columnId: 'cost_of_goods',\n      relatedProvider: 'shopify',\n      aggFunction: 'SUM',\n      filter: [\n        [{ column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['shopify'] }],\n      ],\n    },\n  },\n  cogsRefunds: {\n    id: 'cogsRefunds',\n    title: 'COGS Refunds',\n    color: '#007D3F',\n    type: 'currency',\n    features: [FeatureFlag.EXPENSES_ACCESS_FF],\n    valueToFixed: 0,\n    metricId: 'totalCostsRefunds',\n    tip: 'Cost of goods refunded. Imported from Shopify, or edit these in: Store > Cost of Goods',\n    icon: 'shopify',\n    services: ['shopify'],\n    providerId: 'shopify',\n    metric: 'cogsRefunds',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'refunds_table_total_refunded_cogs_shopify',\n      tableId: 'refunds_table',\n      columnId: 'total_refunded_cogs',\n      relatedProvider: 'shopify',\n      aggFunction: 'SUM',\n      filter: [\n        [{ column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['shopify'] }],\n      ],\n    },\n  },\n  cogs: {\n    id: 'cogs',\n    title: 'COGS',\n    color: '#007D3F',\n    type: 'currency',\n    features: [FeatureFlag.EXPENSES_ACCESS_FF],\n    chart: 'chartCogs',\n    valueToFixed: 0,\n    metricId: 'totalProductCosts',\n    tip: 'Cost of goods sold in this time frame, minus cost of goods of refunded items in this time frame. Imported from Shopify, or edit these in: Store > Cost of Goods.',\n    icon: 'shopify',\n    services: ['shopify'],\n    providerId: 'shopify',\n    relatedMetrics: ['cogsOrders', 'cogsRefunds'],\n    metric: 'cogs',\n    willyMetricId: '', // ????\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'orders_table_net_cogs',\n      relatedProvider: 'shopify',\n      expression: [\n        {\n          title: 'COGS',\n          value: 'orders_table_cost_of_goods_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '+',\n          value: '+',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Refunded COGS',\n          value: 'refunds_table_total_refunded_cogs_shopify',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  handlingFees: {\n    id: 'handlingFees',\n    title: 'Handling Fees',\n    color: '#f49099',\n    valueToFixed: 0,\n    features: [FeatureFlag.EXPENSES_ACCESS_FF],\n    type: 'currency',\n    chart: 'chartHandlingFees',\n    metricId: 'totalHandlingFees',\n    tip: 'Cost of boxing, packaging, or “pick & pack” services. Edit these in: Store > Cost of Goods',\n    icon: 'shopify',\n    services: ['shopify'],\n    providerId: 'shopify',\n    metric: 'handlingFees',\n    willyMetricId: 'orders_table_handling_fees_shopify',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_handling_fees_shopify',\n      tableId: 'orders_table',\n      columnId: 'handling_fees',\n      relatedProvider: 'shopify',\n      aggFunction: 'SUM',\n      filter: [\n        [{ column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['shopify'] }],\n      ],\n    },\n  },\n  customSpends: {\n    id: 'customSpends',\n    title: 'Custom Expenses',\n    color: '#309811',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'totalCustomSpends',\n    tip: 'Any additional expenses you’d like to see deducted from your Net Profit. Includes custom expenses marked as ad spend. Edit these in Store > Custom Expenses.',\n    icon: 'triple-whale-logo',\n    services: ['shopify'],\n    metricPopupWidget: true,\n    chart: 'totalCustomSpendsChart',\n    providerId: 'triple-whale',\n    // metric: 'customSpends',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'custom_spend_table_amount',\n      tableId: 'custom_spend_table',\n      columnId: 'amount',\n      relatedProvider: 'triple-whale',\n      aggFunction: 'SUM',\n    },\n  },\n  inventoryItems: {\n    id: 'inventoryItems',\n    title: 'Items',\n    color: '#369a36',\n    metricId: 'totalInventoryItems',\n    tip: 'Number of total items you have in stock',\n    services: ['shopify'],\n    icon: 'shopify',\n    type: 'decimal',\n    providerId: 'shopify',\n    metric: 'inventoryItems',\n    willyMetricId: '', // ???? is string in productAnalyticsColumns.ts , needs to be numeric\n    // willyConfig: {\n    //   isCustomMetric: false,\n    //   id: 'product_analytics_table_inventory_quantity',\n    //   tableId: 'product_analytics_table',\n    //   columnId: 'inventory_quantity',\n    //   relatedProvider: 'shopify',\n    //   aggFunction: 'COUNT',\n    // },\n  },\n  inventoryItemsMissing: {\n    id: 'inventoryItemsMissing',\n    title: 'Missing Items',\n    color: '#b7b78c',\n    metricId: 'totalInventoryItemsMissing',\n    tip: 'Number of back order items',\n    services: ['shopify'],\n    icon: 'shopify',\n    type: 'decimal',\n    providerId: 'shopify',\n    metric: 'inventoryItemsMissing',\n    willyMetricId: '', // ?????\n  },\n  totalInventoryCost: {\n    id: 'totalInventoryCost',\n    title: 'Cost',\n    color: '#0567ad',\n    type: 'currency',\n    valueToFixed: 0,\n    metricId: 'totalInventoryCost',\n    tip: 'How much did the items cost',\n    services: ['shopify'],\n    icon: 'shopify',\n    providerId: 'shopify',\n    metric: 'inventoryCost',\n    willyMetricId: '', // ????\n  },\n  totalInventoryValue: {\n    id: 'totalInventoryValue',\n    title: 'Value',\n    color: '#461d4e',\n    type: 'currency',\n    valueToFixed: 0,\n    metricId: 'totalInventoryValue',\n    tip: 'Retail value of items in stock',\n    services: ['shopify'],\n    icon: 'shopify',\n    providerId: 'shopify',\n    metric: 'inventoryValue',\n    willyMetricId: '', // ?????\n    // willyConfig: {\n    //   isCustomMetric: false,\n    //   id: 'product_analytics_table_inventory_value',\n    //   tableId: 'product_analytics_table',\n    //   columnId: 'inventory_value',\n    //   aggFunction: 'SUM',\n    //   relatedProvider: 'shopify',\n    // },\n  },\n  shopifyAov: {\n    id: 'shopifyAov',\n    title: 'True AOV',\n    chart: 'chartShopifyAov',\n    color: '#197DF0',\n    shortTitle: 'True AOV',\n    valueToFixed: 0,\n    metricId: 'shopifyAov',\n    type: 'currency',\n    tip: 'Equates to Total Sales (excluding taxes, duties, and shipping) / Number of orders, excluding zero value orders',\n    services: ['shopify'],\n    icon: 'shopify',\n    providerId: 'shopify',\n    metric: 'aov',\n    willyMetricId: 'orders_table_aov_shopify',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'orders_table_true_aov_shopify',\n      relatedProvider: 'shopify',\n      expression: [\n        {\n          title: '(',\n          value: '(',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: 'Total Sales',\n          value: 'orders_table_order_revenue_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Total Tax',\n          value: 'orders_table_taxes_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Total Shipping Price',\n          value: 'orders_table_shipping_price_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: ')',\n          value: ')',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Number of Orders > $0',\n          value: 'orders_table_orders_with_amount_shopify',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  shopifyAovIncludeZero: {\n    id: 'shopifyAovIncludeZero',\n    title: 'Average Order Value',\n    chart: 'chartShopifyAovIncludeZero',\n    color: '#197DF0',\n    shortTitle: 'Average Order Value',\n    valueToFixed: 0,\n    metricId: 'shopifyAovIncludeZero',\n    type: 'currency',\n    tip: 'Equates to Total Sales (excluding taxes, duties, and shipping)  / Number of orders. This is directly from Shopify',\n    services: ['shopify'],\n    icon: 'shopify',\n    providerId: 'shopify',\n    metric: 'aov',\n    willyMetricId: 'orders_table_true_aov_shopify',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'orders_table_aov_shopify',\n      relatedProvider: 'shopify',\n      expression: [\n        {\n          title: '(',\n          value: '(',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: 'Total Sales',\n          value: 'orders_table_order_revenue_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Total Tax',\n          value: 'orders_table_taxes_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Total Shipping Price',\n          value: 'orders_table_shipping_price_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: ')',\n          value: ')',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Orders Count',\n          value: 'orders_table_orders_count_shopify',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  aov: {\n    id: 'aov',\n    title: 'AOV',\n    chart: 'chartGaRevenuePerTransaction',\n    color: '#FF8456',\n    valueToFixed: 2,\n    type: 'currency',\n    metricId: 'averageGaRevenuePerTransaction',\n    isShow: (state) => state.isShowGoogleAnalytics,\n    tip: 'Average Order Value',\n    services: ['GOOGLE_ANALYTICS'],\n    icon: 'triple-whale-logo',\n    willyMetricId: 'orders_table_aov_shopify',\n    //deprecated GOOGLE_ANALYTICS\n  },\n  facebookAds: {\n    id: 'facebookAds',\n    title: 'Facebook Ads',\n    reportTitle: 'Facebook Ads Spend',\n    chart: 'chartFacebookInsights',\n    color: '#F0C808',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'fb_ads_spend',\n    services: ['facebook-ads'],\n    tip: 'Ad spend',\n    icon: 'facebook-circle',\n    providerId: 'facebook-ads',\n    metric: 'spend',\n    willyMetricId: 'ads_table_spend_facebook_ads',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_spend_facebook_ads',\n      tableId: 'ads_table',\n      columnId: 'spend',\n      relatedProvider: 'facebook-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['facebook-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  googleAds: {\n    id: 'googleAds',\n    title: 'Google Ads',\n    reportTitle: 'Google Ads Spend',\n    chart: 'chartGoogleAds',\n    color: '#242423',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'ga_adCost',\n    services: ['google-ads'],\n    tip: 'Google Ad Spend',\n    icon: 'google-ads',\n    providerId: 'google-ads',\n    metric: 'spend',\n    willyMetricId: 'ads_table_spend_google_ads',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_spend_google_ads',\n      tableId: 'ads_table',\n      columnId: 'spend',\n      relatedProvider: 'google-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['google-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  googleAllCpa: {\n    id: 'googleAllCpa', // There was a reverse between googleCpa/googleAllCpa. Its too complex to fix since it requires reimport for all the shops so I just reverse here.\n    title: 'Google CPA',\n    shortTitle: 'CPA',\n    color: '#af24293',\n    type: 'currency',\n    metricId: 'googleAllCpa',\n    services: ['google-ads'],\n    valueToFixed: 2,\n    tip: 'Cost Per Acquisition',\n    positiveComparison: -1,\n    icon: 'google-ads',\n    chart: 'googleAllCpaChart',\n    providerId: 'google-ads',\n    metric: 'cpa',\n    willyMetricId: 'ads_table_cpa_google_ads',\n    // whats the dif  bw this and googleCpa\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_all_cpa_google_ads',\n      relatedProvider: 'google-ads',\n      expression: [\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_google_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Conversions',\n          value: 'ads_table_conversions_google_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  googleBounceRate: {\n    id: 'googleBounceRate',\n    title: 'Bounce Rate',\n    color: '#f09317',\n    isShow: (state) => state.isShowGoogleAnalytics,\n    valueToFixed: 0,\n    type: 'percent',\n    metricId: 'googleBounceRate',\n    services: ['GOOGLE_ANALYTICS'],\n    tip: 'Percentage of visitors to the website that leave before any action or visiting other pages',\n    icon: 'googleAnalytics',\n    willyMetricId: '',\n    // deprecated GOOGLE_ANALYTICS\n  },\n  googleConversionValue: {\n    id: 'googleConversionValue',\n    title: 'Google Conversion Value',\n    shortTitle: 'Conversion Value',\n    chart: 'googleConversionValueChart',\n    color: '#ed6788',\n    valueToFixed: 0,\n    metricId: 'googleConversionValue',\n    services: ['google-ads'],\n    type: 'currency',\n    tip: 'Recorded revenue from Google Ads',\n    icon: 'google-ads',\n    providerId: 'google-ads',\n    metric: 'conversionValue',\n    willyMetricId: 'ads_table_conversion_value_google_ads',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_conversion_value_google_ads',\n      tableId: 'ads_table',\n      columnId: 'conversion_value',\n      relatedProvider: 'google-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['google-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  snapchatAds: {\n    id: 'snapchatAds',\n    title: 'Snapchat Ads',\n    reportTitle: 'Snapchat Ads Spend',\n    chart: 'chartSnapchatAds',\n    color: '#9999ff',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'totalSnapchatSpend',\n    services: ['snapchat-ads'],\n    tip: 'Snapchat Ad Spend',\n    icon: 'snapchat-circle',\n    providerId: 'snapchat-ads',\n    metric: 'spend',\n    willyMetricId: 'ads_table_spend_snapchat_ads',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_spend_snapchat_ads',\n      tableId: 'ads_table',\n      columnId: 'spend',\n      relatedProvider: 'snapchat-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['snapchat-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  snapchatRoas: {\n    id: 'snapchatRoas',\n    title: 'Snapchat ROAS',\n    shortTitle: 'ROAS',\n    chart: 'snapchatRoasChart',\n    color: '#3333ff',\n    type: 'decimal',\n    valueToFixed: 2,\n    metricId: 'totalSnapchatRoas',\n    services: ['snapchat-ads'],\n    tip: 'Return on Ad Spend',\n    icon: 'snapchat-circle',\n    providerId: 'snapchat-ads',\n    metric: 'roas',\n    isSupportCumulative: false,\n    willyMetricId: 'ads_table_roas_snapchat_ads',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_roas_snapchat_ads',\n      relatedProvider: 'snapchat-ads',\n      expression: [\n        {\n          title: 'Conversion Value',\n          value: 'ads_table_conversion_value_snapchat_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_snapchat_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  snapchatImpressions: {\n    id: 'snapchatImpressions',\n    title: 'Snapchat Impressions',\n    shortTitle: 'Impressions',\n    color: '#1369af',\n    type: 'decimal',\n    metricId: 'snapchatImpressions',\n    chart: 'snapchat_impressions_chart',\n    services: ['snapchat-ads'],\n    icon: 'snapchat-circle',\n    providerId: 'snapchat-ads',\n    metric: 'impressions',\n    willyMetricId: 'ads_table_impressions_snapchat_ads',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_impressions_snapchat_ads',\n      tableId: 'ads_table',\n      columnId: 'impressions',\n      relatedProvider: 'snapchat-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['snapchat-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  snapchatSwipes: {\n    id: 'snapchatSwipes',\n    title: 'Snapchat Swipes',\n    shortTitle: 'Swipes',\n    color: '#af6913',\n    metricId: 'snapchat_swipes',\n    chart: 'snapchat_swipes_chart',\n    type: 'decimal',\n    services: ['snapchat-ads'],\n    icon: 'snapchat-circle',\n    providerId: 'snapchat-ads',\n    // metric: 'swipes',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_clicks_snapchat_ads',\n      tableId: 'ads_table',\n      columnId: 'clicks',\n      relatedProvider: 'snapchat-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['snapchat-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  snapchatCpm: {\n    id: 'snapchatCpm',\n    title: 'Snapchat CPM',\n    shortTitle: 'CPM',\n    color: '#69af13',\n    type: 'currency',\n    valueToFixed: 0,\n    metricId: 'snapchatCpm',\n    chart: 'snapchatCpmChart',\n    services: ['snapchat-ads'],\n    positiveComparison: -1,\n    tip: 'Cost Per 1000 Impressions',\n    icon: 'snapchat-circle',\n    providerId: 'snapchat-ads',\n    metric: 'cpm',\n    willyMetricId: 'ads_table_cpm_snapchat_ads',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_cpm_snapchat_ads',\n      relatedProvider: 'snapchat-ads',\n      expression: [\n        {\n          title: '(',\n          value: '(',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_snapchat_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Impressions',\n          value: 'ads_table_impressions_snapchat_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: ')',\n          value: ')',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: '*',\n          value: '*',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: '1000',\n          value: '1000',\n          type: ElementTypes.INTEGER,\n        },\n      ],\n    },\n  },\n  snapchatCpa: {\n    id: 'snapchatCpa',\n    title: 'Snapchat CPA',\n    shortTitle: 'CPA',\n    color: '#01e78f',\n    type: 'currency',\n    valueToFixed: 1,\n    metricId: 'snapchatCpa',\n    chart: 'snapchatCpaChart',\n    services: ['snapchat-ads'],\n    positiveComparison: -1,\n    tip: 'Cost Per Acquisition',\n    icon: 'snapchat-circle',\n    providerId: 'snapchat-ads',\n    metric: 'cpa',\n    willyMetricId: 'ads_table_cpa_snapchat_ads',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_cpa_snapchat_ads',\n      relatedProvider: 'snapchat-ads',\n      expression: [\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_snapchat_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Conversions',\n          value: 'ads_table_conversions_snapchat_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  snapchatConversionValue: {\n    id: 'snapchatConversionValue',\n    title: 'Snapchat Conversion Value',\n    shortTitle: 'Conversion Value',\n    color: '#87bddb',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'totalSnapchatConversionPurchasesValue',\n    chart: 'chartSnapchatConversionPurchasesValue',\n    services: ['snapchat-ads'],\n    icon: 'snapchat-circle',\n    providerId: 'snapchat-ads',\n    metric: 'conversionValue',\n    willyMetricId: 'ads_table_conversion_value_snachat_ads',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_conversion_value_snapchat_ads',\n      tableId: 'ads_table',\n      columnId: 'conversion_value',\n      relatedProvider: 'snapchat-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['snapchat-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  snapchatConversions: {\n    id: 'snapchatConversions',\n    title: 'Snapchat Conversions',\n    color: '#87bddb',\n    type: 'currency',\n    metricId: 'snapchatConversions',\n    valueToFixed: 0,\n    services: ['snapchat-ads'],\n    icon: 'snapchat-circle',\n    providerId: 'snapchat-ads',\n    metric: 'conversionValue',\n    willyMetricId: '', //??\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_conversions_snapchat_ads',\n      tableId: 'ads_table',\n      columnId: 'conversions',\n      relatedProvider: 'snapchat-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['snapchat-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  snapchatConversionPurchases: {\n    id: 'snapchatConversionPurchases',\n    title: 'Snapchat Conversion Purchases',\n    shortTitle: 'Purchases',\n    color: '#87bddb',\n    type: 'decimal',\n    metricId: 'totalSnapchatConversionPurchases',\n    chart: 'chartSnapchatConversionPurchases',\n    services: ['snapchat-ads'],\n    icon: 'snapchat-circle',\n    providerId: 'snapchat-ads',\n    metric: 'purchases',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_conversions_snapchat_ads',\n      tableId: 'ads_table',\n      columnId: 'conversions',\n      relatedProvider: 'snapchat-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['snapchat-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  googleConversionRate: {\n    id: 'googleConversionRate',\n    title: 'Conversion Rate',\n    chart: 'chartGaTransactionsPerSession',\n    color: '#6C756B',\n    type: 'percent',\n    isShow: (state) => state.isShowGoogleAnalytics,\n    valueToFixed: 2,\n    metricId: 'averageGaTransactionsPerSession',\n    tip: 'Google Analytics reported conversion rate',\n    services: ['GOOGLE_ANALYTICS'],\n    icon: 'googleAnalytics',\n    willyMetricId: '',\n    //deprecated GOOGLE_ANALYTICS\n  },\n  googleSessions: {\n    id: 'googleSessions',\n    title: 'Sessions',\n    type: 'decimal',\n    chart: 'chartGaUsers',\n    color: '#89043D',\n    isShow: (state) => state.isShowGoogleAnalytics,\n    metricId: 'totalGoogleAnalyticsSessions',\n    services: ['GOOGLE_ANALYTICS'],\n    icon: 'googleAnalytics',\n    willyMetricId: '',\n    //deprecated GOOGLE_ANALYTICS\n  },\n  shopifyOrders: {\n    id: 'shopifyOrders',\n    title: 'Shopify Orders',\n    chart: 'chartOrders',\n    color: '#99ff99',\n    type: 'decimal',\n    metricId: 'totalOrders',\n    services: ['shopify'],\n    icon: 'shopify',\n    providerId: 'shopify',\n    metric: 'orders',\n    willyMetricId: 'orders_table_orders_count_shopify',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_orders_count_shopify',\n      tableId: 'orders_table',\n      columnId: 'order_id',\n      relatedProvider: 'shopify',\n      aggFunction: 'COUNT',\n      filter: [\n        [{ column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['shopify'] }],\n      ],\n    },\n  },\n  totalNetProfit: {\n    id: 'totalNetProfit',\n    title: 'Net Profit',\n    chart: 'totalNetProfitChart',\n    hasBackgroundByDefault: true,\n    type: 'currency',\n    color: '#9999ff',\n    metricId: 'totalNetProfit',\n    features: [FeatureFlag.EXPENSES_ACCESS_FF],\n    valueToFixed: 0,\n    relatedMetrics: [\n      'sales',\n      'shipping',\n      'paymentGateways',\n      'handlingFees',\n      'customSpends',\n      'cogs',\n      'totalRefunds',\n      'facebookAds',\n      'googleAds',\n      'snapchatAds',\n      'tiktokAds',\n      'pinterestAds',\n      'influencerSpend',\n      'twitterAds',\n      'taxes',\n      'amazonNetProfit',\n      'bingAdSpend',\n      'mountainSpend',\n      'criteoSpend',\n    ],\n    tip: 'Order Revenue - Returns - Expenses (COGS, Shipping, Handling, Payment Gateways, Taxes, Custom Expenses) - Blended Ad Spend',\n    services: ['triple-whale'],\n    icon: 'triple-whale-logo',\n    additionalMarketplaceBadge: true,\n    providerId: 'triple-whale',\n    metric: 'netProfit',\n    dependOnCostSettings: true,\n    willyMetricId: 'prepared_blended_stats_table_net_profit',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'net_profit',\n      relatedProvider: 'triple-whale',\n      expression: [\n        {\n          title: 'Order revenue Shopify',\n          value: 'orders_table_order_revenue_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '+',\n          value: '+',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Order revenue Amazon',\n          value: 'orders_table_net_sales_amazon',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Shopify Shipping Cost',\n          value: 'orders_table_shipping_costs_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Payment Gateway Costs',\n          value: 'orders_table_payment_gateway_costs_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Handling Fees',\n          value: 'orders_table_handling_fees_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Custom Spend',\n          value: 'custom_spend_table_amount',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'COGS',\n          value: 'orders_table_net_cogs',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Refunds',\n          value: 'refunds_table_total_refunded_price_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Blended Ad Spend Without Custom Expenses',\n          value: 'spend_without_custom',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Net Taxes',\n          value: 'orders_table_net_taxes_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Shipping Refund',\n          value: 'refunds_table_shipping_refund_shopify',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  cashTurnover: {\n    id: 'cashTurnover',\n    title: 'Cash Turnover',\n    type: 'currency',\n    color: '#0911f3',\n    metricId: 'cashTurnover',\n    valueToFixed: 0,\n    tip: 'Order Revenue - Shipping - Taxes - Blended Ad Spend - Returns',\n    services: ['triple-whale'],\n    icon: 'triple-whale-logo',\n    providerId: 'triple-whale',\n    metric: 'cashTurnover',\n    dependOnCostSettings: true,\n    willyMetricId: 'prepared_blended_stats_table_cash_turnover',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'cash_turnover',\n      relatedProvider: 'triple-whale',\n      expression: [\n        {\n          title: 'Sales',\n          value: 'orders_table_order_revenue_shopify', // does this also include amazon sales?\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Shipping Costs', // all shipping?\n          value: 'orders_table_shipping_costs_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Payment Gateway Costs',\n          value: 'orders_table_payment_gateway_costs_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Custom Spend',\n          value: 'custom_spend_table_amount',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Refunds',\n          value: 'refunds_table_total_refunded_price',\n          type: ElementTypes.METRIC,\n        },\n        // {\n        //   title: '-',\n        //   value: '-',\n        //   type: ElementTypes.OPERATOR,\n        // },\n        // {\n        //   title: 'Returned Taxes',\n        //   value: 'refunds_table_total_refunded_taxes',\n        //   type: ElementTypes.METRIC,\n        // },\n        // {\n        //   title: '-',\n        //   value: '-',\n        //   type: ElementTypes.OPERATOR,\n        // },\n        // {\n        //   title: 'Shipping Refund',\n        //   value: 'refunds_table_shipping_refund_shopify',\n        //   type: ElementTypes.METRIC,\n        // },\n        // {\n        //   title: '-',\n        //   value: '-',\n        //   type: ElementTypes.OPERATOR,\n        // },\n        // {\n        //   title: 'Blended Ad Spend',\n        //   value: 'ads_table_spend_without_custom',\n        //   type: ElementTypes.METRIC,\n        // },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Sales Taxes',\n          value: 'orders_table_taxes_shopify',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  totalNetMargin: {\n    id: 'totalNetMargin',\n    title: 'Net Margin',\n    type: 'percent',\n    color: '#72a220',\n    metricId: 'totalNetMargin',\n    valueToFixed: 0,\n    tip: 'Net Profit / Order Revenue x 100. In other words: Percentage of Sales that is Net Profit. Answers the question of: “What percentage of my [Sales] is my [Net Profit]?”',\n    services: ['triple-whale'],\n    icon: 'triple-whale-logo',\n    additionalMarketplaceBadge: true,\n    providerId: 'triple-whale',\n    metric: 'netProfitMargin', //??\n    dependOnCostSettings: true,\n    willyMetricId: 'prepared_blended_stats_table_net_margin',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'net_margin',\n      expression: [\n        {\n          title: 'Net Profit',\n          value: 'net_profit',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Blended Sales',\n          value: 'orders_table_order_revenue',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  totalCpa: {\n    id: 'totalCpa',\n    title: 'Blended CPA',\n    shortTitle: 'CPA',\n    chart: 'chartTotalCpa',\n    hasTarget: true,\n    color: '#339999',\n    metricId: 'totalCpa',\n    valueToFixed: 1,\n    type: 'currency',\n    services: blendedServices,\n    tip: 'Cost Per Acquisition. Ad Spend/Google Analytics Transaction',\n    positiveComparison: -1,\n    icon: 'blended-metrics',\n    isShow: () => false, //if you want to use this metric, you need to change this to true or remove this line\n    providerId: 'triple-whale',\n    metric: 'blendedCpa', //??\n    willyMetricId: 'prepared_blended_stats_table_blended_cpa',\n    // deprecated GOOGLE_ANALYTICS\n  },\n  googleRps: {\n    id: 'googleRps',\n    title: 'RPS',\n    hasTarget: true,\n    color: '#333399',\n    type: 'currency',\n    valueToFixed: 1,\n    metricId: 'totalRevenuePerSession',\n    tip: 'Revenue Per Session. Sales / Web Sessions',\n    services: ['shopify'],\n    icon: 'googleAnalytics',\n    chart: 'totalRevenuePerSessionChart',\n    willyMetricId: '', // ????\n    //deprecated GOOGLE_ANALYTICS\n  },\n  totalRefunds: {\n    id: 'totalRefunds',\n    title: 'Returns',\n    chart: 'chartRefunds',\n    color: '#993399',\n    type: 'currency',\n    metricId: 'totalRefunds',\n    valueToFixed: 0,\n    positiveComparison: -1,\n    tip: 'Returns processed during the selected time period. Does not inclued returns processed by third-party apps',\n    services: ['shopify'],\n    icon: 'shopify',\n    providerId: 'shopify',\n    metric: 'refunds',\n    willyMetricId: 'orders_table_refund_money_shopify',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'refunds_table_total_refunded_price_shopify',\n      tableId: 'refunds_table',\n      columnId: 'total_refunded_price',\n      relatedProvider: 'shopify',\n      aggFunction: 'SUM',\n      filter: [\n        [{ column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['shopify'] }],\n      ],\n    },\n  },\n  facebookRoas: {\n    id: 'facebookRoas',\n    title: 'Facebook ROAS',\n    shortTitle: 'ROAS',\n    type: 'decimal',\n    chart: 'chartFacebookPurchaseRoas',\n    valueToFixed: 2,\n    color: '#9933ff',\n    metricId: 'fb_ads_purchase_roas',\n    services: ['facebook-ads'],\n    tip: 'Return on Ad Spend',\n    icon: 'facebook-circle',\n    providerId: 'facebook-ads',\n    metric: 'roas',\n    isSupportCumulative: false,\n    willyMetricId: 'ads_table_roas_facebook_ads',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_roas_facebook_ads',\n      relatedProvider: 'facebook-ads',\n      expression: [\n        {\n          title: 'Conversion Value',\n          value: 'ads_table_conversion_value_facebook_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_facebook_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  googleRoas: {\n    id: 'googleRoas',\n    title: 'Google ROAS',\n    shortTitle: 'ROAS',\n    type: 'decimal',\n    valueToFixed: 2,\n    color: '#aaffdd',\n    metricId: 'ga_ROAS',\n    chart: 'googleAdsRoasChart',\n    services: ['google-ads'],\n    tip: 'Return on Ad Spend',\n    icon: 'google-ads',\n    providerId: 'google-ads',\n    metric: 'roas',\n    isSupportCumulative: false,\n    willyMetricId: 'ads_table_roas_google_ads',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_roas_google_ads',\n      relatedProvider: 'google-ads',\n      expression: [\n        {\n          title: 'Conversion Value',\n          value: 'ads_table_conversion_value_google_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_google_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  totalGoogleAdsCtr: {\n    id: 'totalGoogleAdsCtr',\n    title: 'Google CTR',\n    shortTitle: 'CTR',\n    valueToFixed: 2,\n    color: '#aaffdd',\n    type: 'decimal',\n    metricId: 'totalGoogleAdsCtr',\n    services: ['google-ads'],\n    tip: 'Click Through Rate. Percentage of people clicking the ad',\n    icon: 'google-ads',\n    chart: 'totalGoogleAdsCtrChart',\n    providerId: 'google-ads',\n    metric: 'ctr',\n    willyMetricId: 'ads_table_ctr_google_ads',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_ctr_google_ads',\n      relatedProvider: 'google-ads',\n      expression: [\n        {\n          title: '',\n          value: '(',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: 'Clicks',\n          value: 'ads_table_clicks_google_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Impressions',\n          value: 'ads_table_impressions_google_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: ')',\n          value: ')',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: '*',\n          value: '*',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: '100',\n          value: '100',\n          type: ElementTypes.INTEGER,\n        },\n      ],\n    },\n  },\n  totalGoogleAdsCpm: {\n    id: 'totalGoogleAdsCpm',\n    title: 'Google CPM',\n    shortTitle: 'CPM',\n    type: 'decimal',\n    valueToFixed: 2,\n    color: '#aaffdd',\n    metricId: 'totalGoogleAdsCpm',\n    services: ['google-ads'],\n    tip: 'Cost Per 1000 Impressions',\n    icon: 'google-ads',\n    chart: 'totalGoogleAdsCpmChart',\n    providerId: 'google-ads',\n    metric: 'cpm',\n    willyMetricId: 'ads_table_cpm_google_ads',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_cpm_google_ads',\n      relatedProvider: 'google-ads',\n      expression: [\n        {\n          title: '(',\n          value: '(',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_google_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Impressions',\n          value: 'ads_table_impressions_google_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: ')',\n          value: ')',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: '*',\n          value: '*',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: '1000',\n          value: '1000',\n          type: ElementTypes.INTEGER,\n        },\n      ],\n    },\n  },\n  googleCpc: {\n    id: 'googleCpc',\n    title: 'Google CPC',\n    shortTitle: 'CPC',\n    valueToFixed: 2,\n    type: 'decimal',\n    color: '#aaffdd',\n    metricId: 'googleCpc',\n    services: ['google-ads'],\n    tip: 'Cost Per Click',\n    icon: 'google-ads',\n    providerId: 'google-ads',\n    metric: 'cpc',\n    willyMetricId: 'ads_table_cpc_google_ads',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_cpc_google_ads',\n      relatedProvider: 'google-ads',\n      expression: [\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_google_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Clicks',\n          value: 'ads_table_clicks_google_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  totalGoogleAdsClicks: {\n    id: 'totalGoogleAdsClicks',\n    title: 'Google Clicks',\n    shortTitle: 'Clicks',\n    type: 'decimal',\n    color: '#aaffdd',\n    metricId: 'totalGoogleAdsClicks',\n    services: ['google-ads'],\n    icon: 'google-ads',\n    chart: 'googleAdsClicksChart',\n    providerId: 'google-ads',\n    metric: 'clicks',\n    willyMetricId: 'ads_table_clicks_google_ads',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_clicks_google_ads',\n      tableId: 'ads_table',\n      columnId: 'clicks',\n      relatedProvider: 'google-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['google-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  totalGoogleAdsImpressions: {\n    id: 'totalGoogleAdsImpressions',\n    title: 'Google Impressions',\n    type: 'decimal',\n    shortTitle: 'Impressions',\n    color: '#aaffdd',\n    metricId: 'totalGoogleAdsImpressions',\n    services: ['google-ads'],\n    icon: 'google-ads',\n    chart: 'totalGoogleAdsImpressionsChart',\n    providerId: 'google-ads',\n    metric: 'impressions',\n    willyMetricId: 'ads_table_impressions_google_ads',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_impressions_google_ads',\n      tableId: 'ads_table',\n      columnId: 'impressions',\n      relatedProvider: 'google-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['google-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  ga_transactions_adGroup: {\n    id: 'ga_transactions_adGroup',\n    title: 'Google All Conversions',\n    type: 'decimal',\n    shortTitle: 'All Conversions',\n    color: '#aaffdd',\n    metricId: 'ga_transactions_adGroup',\n    services: ['google-ads'],\n    icon: 'google-ads',\n    chart: 'googleAdsAllConversionsChart',\n    providerId: 'google-ads',\n    metric: 'allConversions',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_all_conversions_google_ads',\n      tableId: 'ads_table',\n      columnId: 'all_conversions',\n      relatedProvider: 'google-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['google-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  ga_all_transactionsRevenue_adGroup: {\n    id: 'ga_all_transactionsRevenue_adGroup',\n    title: 'Google All Conversions Value',\n    shortTitle: 'All Conversions Value',\n    type: 'decimal',\n    color: '#aaffdd',\n    metricId: 'ga_all_transactionsRevenue_adGroup',\n    services: ['google-ads'],\n    icon: 'google-ads',\n    chart: 'googleAllConversionValueChart',\n    providerId: 'google-ads',\n    metric: 'allConversionValue',\n    willyMetricId: '', // ??????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_all_conversion_value_google_ads',\n      tableId: 'ads_table',\n      columnId: 'all_conversion_value',\n      relatedProvider: 'google-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['google-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  ga_all_transactions_adGroup: {\n    id: 'ga_all_transactions_adGroup',\n    title: 'Google Conversions',\n    type: 'decimal',\n    shortTitle: 'Conversions',\n    color: '#aaffdd',\n    metricId: 'ga_all_transactions_adGroup',\n    services: ['google-ads'],\n    icon: 'google-ads',\n    chart: 'googleAdsConversionsChart',\n    providerId: 'google-ads',\n    // metric: 'conversions',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_conversions_google_ads',\n      tableId: 'ads_table',\n      columnId: 'conversions',\n      relatedProvider: 'google-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['google-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  totalAllRoas: {\n    id: 'totalAllRoas',\n    title: 'Google All Roas',\n    shortTitle: 'All Roas',\n    type: 'decimal',\n    valueToFixed: 2,\n    color: '#aaffdd',\n    metricId: 'totalAllRoas',\n    services: ['google-ads'],\n    icon: 'google-ads',\n    chart: 'totalAllRoasChart',\n    providerId: 'google-ads',\n    metric: 'roas',\n    isSupportCumulative: false,\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_all_roas_google_ads',\n      relatedProvider: 'google-ads',\n      expression: [\n        {\n          title: 'Conversion Value',\n          value: 'ads_table_all_conversion_value_google_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_google_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  googleCpa: {\n    id: 'googleCpa', // There was a reverse between googleCpa/googleAllCpa. Its too complex to fix since it requires reimport for all the shops so I just reverse here.\n    title: 'Google All CPA',\n    shortTitle: 'All CPA',\n    color: '#af24293',\n    valueToFixed: 2,\n    type: 'currency',\n    metricId: 'googleCpa',\n    services: ['google-ads'],\n    tip: 'Cost Per All Conversions',\n    positiveComparison: -1,\n    icon: 'google-ads',\n    chart: 'googleCpaChart',\n    providerId: 'google-ads',\n    metric: 'cpa',\n    willyMetricId: 'ads_table_cpa_google_ads',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_cpa_google_ads',\n      relatedProvider: 'google-ads',\n      expression: [\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_google_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Conversions',\n          value: 'ads_table_all_conversions_google_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  facebookCpc: {\n    id: 'facebookCpc',\n    title: 'Facebook CPC',\n    shortTitle: 'CPC',\n    color: '#a36993',\n    metricId: 'averageFacebookCpc',\n    chart: 'chartFacebookCpc',\n    type: 'currency',\n    valueToFixed: 2,\n    tip: 'Cost Per Click',\n    services: ['facebook-ads'],\n    positiveComparison: -1,\n    icon: 'facebook-circle',\n    providerId: 'facebook-ads',\n    metric: 'cpc',\n    willyMetricId: 'ads_table_cpc_facebook_ads',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_cpc_facebook_ads',\n      relatedProvider: 'facebook-ads',\n      expression: [\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_facebook_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Clicks',\n          value: 'ads_table_clicks_facebook_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  facebookClicks: {\n    id: 'facebookClicks',\n    title: 'Facebook Clicks',\n    type: 'decimal',\n    color: '#80a369',\n    metricId: 'facebookClicks',\n    services: ['facebook-ads'],\n    icon: 'facebook-circle',\n    providerId: 'facebook-ads',\n    metric: 'clicks',\n    willyMetricId: 'ads_table_clicks_facebook_ads',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_clicks_facebook_ads',\n      tableId: 'ads_table',\n      columnId: 'clicks',\n      relatedProvider: 'facebook-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['facebook-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  facebookImpressions: {\n    id: 'facebookImpressions',\n    title: 'Facebook Impressions',\n    type: 'decimal',\n    color: '#80a369',\n    metricId: 'facebookImpressions',\n    services: ['facebook-ads'],\n    icon: 'facebook-circle',\n    providerId: 'facebook-ads',\n    metric: 'impressions',\n    willyMetricId: 'ads_table_impressions_facebook_ads',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_impressions_facebook_ads',\n      tableId: 'ads_table',\n      columnId: 'impressions',\n      relatedProvider: 'facebook-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['facebook-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  facebookViewThrough: {\n    id: 'facebookViewThrough',\n    title: 'Facebook View Conversion Value',\n    shortTitle: 'VCV',\n    color: '#80a369',\n    metricId: 'facebookViewThrough',\n    chart: 'facebookViewThroughChart',\n    type: 'currency',\n    valueToFixed: 0,\n    isShow: (stats) => stats.isViewThrough,\n    tip: 'Facebook View Conversion Value',\n    services: ['facebook-ads'],\n    positiveComparison: -1,\n    icon: 'facebook-circle',\n    providerId: 'facebook-ads',\n    // metric: 'viewThroughConversionValue',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_one_day_view_conversion_value_facebook_ads',\n      tableId: 'ads_table',\n      columnId: 'one_day_view_conversion_value',\n      relatedProvider: 'facebook-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['facebook-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  facebookViewThroughRoas: {\n    id: 'facebookViewThroughRoas',\n    title: 'Facebook View ROAS',\n    shortTitle: 'VROAS',\n    color: '#80a369',\n    metricId: 'facebookViewThroughRoas',\n    chart: 'facebookViewThroughRoasChart',\n    type: 'decimal',\n    valueToFixed: 2,\n    isShow: (stats) => stats.isViewThrough,\n    tip: 'Facebook View Return on Ad Spend',\n    services: ['facebook-ads'],\n    positiveComparison: -1,\n    icon: 'facebook-circle',\n    providerId: 'facebook-ads',\n    // metric: 'viewThroughRoas',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_view_through_roas_facebook_ads',\n      relatedProvider: 'facebook-ads',\n      expression: [\n        {\n          title: 'Conversion Value',\n          value: 'ads_table_one_day_view_conversion_value_facebook_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_facebook_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  facebookViewThroughCpa: {\n    id: 'facebookViewThroughCpa',\n    title: 'Facebook View CPA',\n    shortTitle: 'VCPA',\n    color: '#80a369',\n    metricId: 'facebookViewThroughCpa',\n    chart: 'facebookViewThroughCpaChart',\n    type: 'decimal',\n    valueToFixed: 2,\n    isShow: (stats) => stats.isViewThrough,\n    tip: 'Facebook View Cost Per Acquisition',\n    services: ['facebook-ads'],\n    positiveComparison: -1,\n    icon: 'facebook-circle',\n    providerId: 'facebook-ads',\n    // metric: 'viewThroughCpa',\n    willyMetricId: '',\n    // not relevant\n  },\n  facebookCpm: {\n    id: 'facebookCpm',\n    title: 'Facebook CPM',\n    shortTitle: 'CPM',\n    color: '#333963',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'averageFacebookCpm',\n    chart: 'chartFacebookCpm',\n    tip: 'Cost Per 1000 Impressions',\n    services: ['facebook-ads'],\n    positiveComparison: -1,\n    icon: 'facebook-circle',\n    providerId: 'facebook-ads',\n    metric: 'cpm',\n    willyMetricId: 'ads_table_cpm_facebook_ads',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_cpm_facebook_ads',\n      relatedProvider: 'facebook-ads',\n      expression: [\n        {\n          title: '(',\n          value: '(',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_facebook_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Impressions',\n          value: 'ads_table_impressions_facebook_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: ')',\n          value: ')',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: '*',\n          value: '*',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: '1000',\n          value: '1000',\n          type: ElementTypes.INTEGER,\n        },\n      ],\n    },\n  },\n  facebookCtr: {\n    id: 'facebookCtr',\n    title: 'Facebook CTR',\n    shortTitle: 'CTR',\n    chart: 'chartFacebookCtr',\n    color: '#579af2',\n    valueToFixed: 2,\n    type: 'percent',\n    metricId: 'facebookCtr',\n    tip: 'Click Through Rate. Percentage of people clicking the ad',\n    services: ['facebook-ads'],\n    icon: 'facebook-circle',\n    providerId: 'facebook-ads',\n    metric: 'ctr',\n    willyMetricId: 'ads_table_ctr_facebook_ads',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_ctr_facebook_ads',\n      relatedProvider: 'facebook-ads',\n      expression: [\n        {\n          title: 'Clicks',\n          value: 'ads_table_clicks_facebook_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Impressions',\n          value: 'ads_table_impressions_facebook_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  facebookCpoc: {\n    id: 'facebookCpoc',\n    title: 'Facebook CPOC',\n    shortTitle: 'CPOC',\n    chart: 'chartFacebookCostPerOutboundClick',\n    color: '#71923f',\n    valueToFixed: 2,\n    type: 'currency',\n    metricId: 'facebookCostPerOutboundClick',\n    tip: 'Cost Per Outbound Click',\n    services: ['facebook-ads'],\n    positiveComparison: -1,\n    icon: 'facebook-circle',\n    providerId: 'facebook-ads',\n    // metric: 'cpoc',\n    willyMetricId: '', // ????? cpoc id is broken in adColumns.ts\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_cpoc_facebook_ads',\n      relatedProvider: 'facebook-ads',\n      expression: [\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_facebook_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Outbound Clicks',\n          value: 'ads_table_outbound_clicks_facebook_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  facebookOutboundClicks: {\n    id: 'facebookOutboundClicks',\n    title: 'Facebook Outbound Clicks',\n    shortTitle: 'Outbound Clicks',\n    type: 'decimal',\n    color: '#71923f',\n    metricId: 'facebookOutboundClicks',\n    services: ['facebook-ads'],\n    icon: 'facebook-circle',\n    providerId: 'facebook-ads',\n    metric: 'outboundClicks',\n    willyMetricId: 'ads_table_outbound_clicks_facebook_ads',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_outbound_clicks_facebook_ads',\n      tableId: 'ads_table',\n      columnId: 'outbound_clicks',\n      relatedProvider: 'facebook-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['facebook-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  facebookConversionValue: {\n    id: 'facebookConversionValue',\n    title: 'Facebook Conversion Value',\n    shortTitle: 'Conversion Value',\n    color: '#71923f',\n    metricId: 'facebookConversionValue',\n    chart: 'facebookConversionValueChart',\n    valueToFixed: 0,\n    type: 'currency',\n    tip: 'Facebook-reported revenue from Purchases on your site or on Meta Shop',\n    services: ['facebook-ads'],\n    icon: 'facebook-circle',\n    providerId: 'facebook-ads',\n    metric: 'conversionValue',\n    willyMetricId: 'ads_table_conversion_value_facebook_ads',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_conversion_value_facebook_ads',\n      tableId: 'ads_table',\n      columnId: 'conversion_value',\n      relatedProvider: 'facebook-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['facebook-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  facebookWebConversionValue: {\n    id: 'facebookWebConversionValue',\n    title: 'Facebook Web Conversion Value',\n    shortTitle: 'Web Conversion Value',\n    color: '#71923f',\n    metricId: 'facebookWebConversionValue',\n    chart: 'facebookWebConversionValueChart',\n    valueToFixed: 0,\n    type: 'currency',\n    tip: 'Facebook-reported revenue from Purchases on your site',\n    services: ['facebook-ads'],\n    icon: 'facebook-circle',\n    providerId: 'facebook-ads',\n    // metric: 'webConversionValue',\n    willyMetricId: '', // ????\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_web_conversion_value_facebook_ads',\n      relatedProvider: 'facebook-ads',\n      expression: [\n        {\n          title: 'Conversion Value',\n          value: 'ads_table_conversion_value_facebook_ads',\n          type: ElementTypes.METRIC,\n        },\n        { title: '-', value: '-', type: ElementTypes.OPERATOR },\n        {\n          title: 'Meta Conversion Value',\n          value: 'ads_table_meta_conversion_value_facebook_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  facebookMetaConversionValue: {\n    id: 'facebookMetaConversionValue',\n    title: 'Facebook Meta Conversion Value',\n    shortTitle: 'Meta Conversion Value',\n    color: '#71923f',\n    metricId: 'facebookMetaConversionValue',\n    chart: 'facebookMetaConversionValueChart',\n    valueToFixed: 0,\n    type: 'currency',\n    tip: 'Facebook-reported revenue from Purchases on Meta Shop',\n    services: ['facebook-ads'],\n    icon: 'facebook-circle',\n    providerId: 'facebook-ads',\n    metric: 'metaConversionValue',\n    willyMetricId: 'ads_table_meta_conversion_value_facebook_ads',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_meta_conversion_value_facebook_ads',\n      tableId: 'ads_table',\n      columnId: 'meta_conversion_value',\n      relatedProvider: 'facebook-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['facebook-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  facebookRevenuePerClick: {\n    id: 'facebookRevenuePerClick',\n    title: 'Revenue Per Link Click',\n    color: '#2a9001',\n    type: 'currency',\n    valueToFixed: 2,\n    metricId: 'facebookRevenuePerClick',\n    chart: 'facebookRevenuePerClickChart',\n    tip: 'Conversion Value / Outbound Clicks',\n    services: ['facebook-ads'],\n    icon: 'facebook-circle',\n    providerId: 'facebook-ads',\n    // metric: 'revenuePerClick',\n    willyMetricId: '', // ????? is it same as revenue_per_link_click ?\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_revenue_per_link_click_facebook_ads',\n      relatedProvider: 'facebook-ads',\n      expression: [\n        {\n          title: 'Conversion Value',\n          value: 'ads_table_conversion_value_facebook_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Outbound Clicks',\n          value: 'ads_table_outbound_clicks_facebook_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  facebookCpa: {\n    id: 'facebookCpa',\n    title: 'Facebook CPA',\n    shortTitle: 'CPA',\n    color: '#a5c1db',\n    type: 'currency',\n    valueToFixed: 2,\n    chart: 'facebookCpaChart',\n    metricId: 'facebookCpa',\n    tip: 'Cost Per Acquisition',\n    services: ['facebook-ads'],\n    positiveComparison: -1,\n    icon: 'facebook-circle',\n    providerId: 'facebook-ads',\n    metric: 'cpa',\n    willyMetricId: 'ads_table_cpa_facebook_ads',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_cpa_facebook_ads',\n      relatedProvider: 'facebook-ads',\n      expression: [\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_facebook_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          type: ElementTypes.PARENTHESES,\n          title: '(',\n          value: '(',\n        },\n        {\n          title: 'Web Purchases',\n          value: 'ads_table_web_purchases_facebook_ads',\n          type: ElementTypes.METRIC,\n        },\n\n        {\n          title: '+',\n          value: '+',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Meta Purchases',\n          value: 'ads_table_meta_purchases_facebook_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: ')',\n          value: ')',\n          type: ElementTypes.PARENTHESES,\n        },\n      ],\n    },\n  },\n  facebookPurchases: {\n    id: 'facebookPurchases',\n    title: 'Purchases',\n    color: '#ac26c2',\n    valueToFixed: 0,\n    type: 'decimal',\n    chart: 'facebookPurchasesChart',\n    metricId: 'facebookPurchases',\n    tip: 'Orders made on your site or on Meta Shop',\n    services: ['facebook-ads'],\n    icon: 'facebook-circle',\n    providerId: 'facebook-ads',\n    metric: 'purchases',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_web_purchases_facebook_ads',\n      tableId: 'ads_table',\n      columnId: 'conversions',\n      relatedProvider: 'facebook-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['facebook-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  facebookMetaPurchases: {\n    id: 'facebookMetaPurchases',\n    title: 'Meta Purchases',\n    color: '#ac26c2',\n    valueToFixed: 0,\n    type: 'decimal',\n    chart: 'facebookMetaPurchasesChart',\n    metricId: 'facebookMetaPurchases',\n    services: ['facebook-ads'],\n    tip: 'Orders made on Meta Shop',\n    icon: 'facebook-circle',\n    providerId: 'facebook-ads',\n    metric: 'metaPurchases',\n    willyMetricId: 'ads_table_meta_purchases',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_meta_purchases_facebook_ads',\n      tableId: 'ads_table',\n      columnId: 'meta_purchases',\n      relatedProvider: 'facebook-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['facebook-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  facebookWebPurchases: {\n    id: 'facebookWebPurchases',\n    title: 'Web Purchases',\n    color: '#ac26c2',\n    valueToFixed: 0,\n    type: 'decimal',\n    chart: 'facebookWebPurchasesChart',\n    metricId: 'facebookWebPurchases',\n    tip: 'Orders made on your site',\n    services: ['facebook-ads'],\n    icon: 'facebook-circle',\n    providerId: 'facebook-ads',\n    // metric: 'webPurchases',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_purchases_facebook_ads',\n      relatedProvider: 'facebook-ads',\n      expression: [\n        {\n          title: 'Web Purchases',\n          value: 'ads_table_web_purchases_facebook_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Meta Purchases',\n          value: 'ads_table_meta_purchases_facebook_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  newCustomersCpa: {\n    id: 'newCustomersCpa',\n    title: 'New Customers CPA',\n    shortTitle: 'NCPA',\n    chart: 'chartNewCustomersCpa',\n    hasTarget: true,\n    color: '#909063',\n    valueToFixed: 1,\n    type: 'currency',\n    metricId: 'newCustomersCpa',\n    positiveComparison: -1,\n    tip: 'New Customer Cost Per Acquisition. Total Ad Spend / New Customers',\n    icon: 'blended-metrics',\n    services: ['blended'],\n    isShowLoadWhenImport: 'shopify',\n    providerId: 'triple-whale',\n    metric: 'blendedNcCpa',\n    willyMetricId: 'prepared_blended_stats_table_ncpa',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'new_customer_CPA',\n      expression: [\n        {\n          title: 'Spend',\n          value: 'spend_with_custom',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'New Customer Orders',\n          value: 'orders_table_new_customer_orders_shopify',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  klaviyoSalesPercent: {\n    id: 'klaviyoSalesPercent',\n    title: 'Klaviyo Sales %',\n    shortTitle: 'Klaviyo Sales',\n    chart: 'chartKlaviyoPlacedOrderSalesPercent',\n    color: '#a63099',\n    metricId: 'totalKlaviyoPlacedOrderSalesPercent',\n    type: 'percent',\n    valueToFixed: 0,\n    services: ['klaviyo'],\n    icon: 'klaviyo',\n    providerId: 'klaviyo',\n    // metric: 'salesPercent',\n    willyMetricId: '', // ????\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'sales_percent_klaviyo',\n      relatedProvider: 'klaviyo',\n      expression: [\n        {\n          title: '(',\n          value: '(',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: 'Klaviyo Flow Conversions',\n          value: 'email_sms_table_flow_conversion_value_klaviyo',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '+',\n          value: '+',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Klaviyo Campaign Conversion Value',\n          value: 'email_sms_table_conversion_value_klaviyo',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: ')',\n          value: ')',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Order Revenue',\n          value: 'orders_table_order_revenue_shopify',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  klaviyoFlowsSalesPercent: {\n    id: 'klaviyoFlowsSalesPercent',\n    title: 'Klaviyo Flows Sales %',\n    shortTitle: 'Klaviyo Flows Sales',\n    chart: 'chartKlaviyoPlacedOrderSalesPercentFlows',\n    color: '#30a699',\n    metricId: 'totalKlaviyoPlacedOrderSalesPercentFlows',\n    type: 'percent',\n    valueToFixed: 0,\n    services: ['klaviyo'],\n    icon: 'klaviyo',\n    providerId: 'klaviyo',\n    // metric: 'flowsSalesPercent',\n    willyMetricId: '', // ????\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'sms_email_table_flow_sales_percent_klaviyo',\n      relatedProvider: 'klaviyo',\n      expression: [\n        {\n          title: 'Klaviyo Flow Conversions',\n          value: 'email_sms_table_flow_conversion_value_klaviyo',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Order Revenue',\n          value: 'orders_table_order_revenue_shopify',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  klaviyoCampaignsSalesPercent: {\n    id: 'klaviyoCampaignsSalesPercent',\n    title: 'Klaviyo Campaigns Sales %',\n    shortTitle: 'Klaviyo Campaigns Sales',\n    chart: 'chartKlaviyoPlacedOrderSalesPercentCampaigns',\n    color: '#3099a6',\n    metricId: 'totalKlaviyoPlacedOrderSalesPercentCampaigns',\n    type: 'percent',\n    valueToFixed: 0,\n    services: ['klaviyo'],\n    icon: 'klaviyo',\n    providerId: 'klaviyo',\n    // metric: 'campaignsSalesPercent',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'sms_email_table_campaign_sales_percent_klaviyo',\n      relatedProvider: 'klaviyo',\n      expression: [\n        {\n          title: 'Klaviyo Campaign Conversion Value',\n          value: 'email_sms_table_conversion_value_klaviyo',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Sales',\n          value: 'orders_table_order_revenue_shopify',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  klaviyoEmailOpenRate: {\n    id: 'klaviyoEmailOpenRate',\n    title: 'Email Open Rate',\n    color: '#9399a6',\n    metricId: 'klaviyoEmailOpenRate',\n    type: 'percent',\n    valueToFixed: 0,\n    tip: \"Received Emails / Opened Emails. On a one day view this metric is off and in general TripleWhale's number does not match Klaviyo's number.\",\n    services: ['klaviyo'],\n    icon: 'klaviyo',\n    providerId: 'klaviyo',\n    // metric: 'emailOpenRate',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'email_open_rate_klaviyo',\n      relatedProvider: 'klaviyo',\n      expression: [\n        {\n          title: 'Opened Emails',\n          value: 'email_sms_table_opened_klaviyo',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Received Emails',\n          value: 'email_sms_table_received_klaviyo',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  klaviyoUnsubscribed: {\n    id: 'klaviyoUnsubscribed',\n    title: 'Unsubscribed',\n    color: '#e2e572',\n    type: 'decimal',\n    chart: 'chartKlaviyoUnsubscribed',\n    metricId: 'totalKlaviyoUnsubscribed',\n    services: ['klaviyo'],\n    positiveComparison: -1,\n    icon: 'klaviyo',\n    providerId: 'klaviyo',\n    // metric: 'unsubscribed',\n    willyMetricId: 'email_sms_table_unsubscribed_klaviyo',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'email_sms_table_unsubscribed_klaviyo',\n      tableId: 'email_sms_table',\n      columnId: 'unsubscribed',\n      relatedProvider: 'klaviyo',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['klaviyo'],\n          },\n        ],\n      ],\n    },\n  },\n  klaviyoPlacedOrderTotalPriceFlows: {\n    id: 'klaviyoPlacedOrderTotalPriceFlows',\n    title: 'Revenue Flows',\n    color: '#79ba51',\n    chart: 'chartKlaviyoPlacedOrderTotalPriceFlows',\n    metricId: 'totalKlaviyoPlacedOrderTotalPriceFlows',\n    type: 'currency',\n    valueToFixed: 0,\n    services: ['klaviyo'],\n    icon: 'klaviyo',\n    metricPopupWidget: true,\n    providerId: 'klaviyo',\n    // metric: 'totalPriceFlows',\n    willyMetricId: '', // ??????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'email_sms_table_flow_conversion_value_klaviyo',\n      tableId: 'email_sms_table',\n      columnId: 'conversion_value',\n      relatedProvider: 'klaviyo',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['klaviyo'],\n          },\n          {\n            column: { name: 'report_type', id: 'report_type' },\n            comparator: 'is_in',\n            value: ['flow'],\n          },\n        ],\n      ],\n    },\n  },\n  klaviyoPlacedOrderTotalPriceFlowsPercent: {\n    id: 'klaviyoPlacedOrderTotalPriceFlowsPercent',\n    title: 'Percent of Revenue Flows',\n    color: '#071096',\n    type: 'percent',\n    valueToFixed: 0,\n    chart: 'chartKlaviyoPlacedOrderTotalPriceFlows',\n    metricId: 'totalKlaviyoPlacedOrderSalesPercentFlows',\n    services: ['klaviyo'],\n    icon: 'klaviyo',\n    providerId: 'klaviyo',\n    // metric: 'totalPriceFlowsPercent',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'email_sms_table_flows_percent_klaviyo',\n      relatedProvider: 'klaviyo',\n      expression: [\n        {\n          title: 'Flow Conversion Values',\n          value: 'email_sms_table_flow_conversion_value_klaviyo',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Total Revenue',\n          value: 'orders_table_order_revenue',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  klaviyoPlacedOrderTotalPriceCampaigns: {\n    id: 'klaviyoPlacedOrderTotalPriceCampaigns',\n    title: 'Revenue Campaigns',\n    color: '#1120f2',\n    type: 'currency',\n    valueToFixed: 0,\n    chart: 'chartKlaviyoPlacedOrderTotalPriceCampaigns',\n    metricId: 'totalKlaviyoPlacedOrderTotalPriceCampaigns',\n    services: ['klaviyo'],\n    icon: 'klaviyo',\n    metricPopupWidget: true,\n    providerId: 'klaviyo',\n    // metric: 'totalPriceCampaigns',\n    willyMetricId: '', // ????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'email_sms_table_conversion_value_campaign_klaviyo',\n      tableId: 'email_sms_table',\n      columnId: 'conversion_value',\n      relatedProvider: 'klaviyo',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['klaviyo'],\n          },\n          {\n            column: { name: 'report_type', id: 'report_type' },\n            comparator: 'is_in',\n            value: ['campaign'],\n          },\n        ],\n      ],\n    },\n  },\n  klaviyoPlacedOrderTotalPriceCampaignsPercent: {\n    id: 'klaviyoPlacedOrderTotalPriceCampaignsPercent',\n    title: 'Percent of Revenue Campaigns',\n    color: '#c43e13',\n    type: 'percent',\n    valueToFixed: 0,\n    chart: 'chartKlaviyoPlacedOrderTotalPriceCampaigns',\n    metricId: 'totalKlaviyoPlacedOrderSalesPercentCampaigns',\n    services: ['klaviyo'],\n    icon: 'klaviyo',\n    providerId: 'klaviyo',\n    // metric: 'totalPriceCampaignsPercent',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'email_sms_table_campaigns_percent_klaviyo',\n      relatedProvider: 'klaviyo',\n      expression: [\n        {\n          title: 'Campaign Conversion Values',\n          value: 'email_sms_table_conversion_value_klaviyo',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Total Revenue',\n          value: 'orders_table_order_revenue_shopify',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  klaviyoNewSubscribed: {\n    id: 'klaviyoNewSubscribed',\n    type: 'decimal',\n    title: 'New Subscribed',\n    color: '#e2e572',\n    chart: 'chartKlaviyoSubscribedToList',\n    metricId: 'totalKlaviyoSubscribedToList',\n    services: ['klaviyo'],\n    icon: 'klaviyo',\n    providerId: 'klaviyo',\n    // metric: 'newSubscribed',\n    willyMetricId: 'email_sms_table_subscribed_to_list_klaviyo',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'email_sms_table_subscribed_to_list_klaviyo',\n      tableId: 'email_sms_table',\n      columnId: 'subscribed_to_list',\n      relatedProvider: 'klaviyo',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['klaviyo'],\n          },\n        ],\n      ],\n    },\n  },\n  klaviyoEmailsClicked: {\n    id: 'klaviyoEmailsClicked',\n    title: 'Emails Clicked',\n    color: '#e2e572',\n    type: 'decimal',\n    chart: 'chartKlaviyoClickedEmail',\n    metricId: 'totalKlaviyoClickedEmail',\n    services: ['klaviyo'],\n    positiveComparison: -1,\n    icon: 'klaviyo',\n    providerId: 'klaviyo',\n    // metric: 'emailsClicked',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'email_sms_table_email_clicks_klaviyo',\n      tableId: 'email_sms_table',\n      columnId: 'clicks',\n      relatedProvider: 'klaviyo',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['klaviyo'],\n          },\n          {\n            column: { name: 'channel_type', id: 'channel_type' },\n            comparator: 'is_in',\n            value: ['email'],\n          },\n        ],\n      ],\n    },\n  },\n  klaviyoReceivedEmail: {\n    id: 'klaviyoReceivedEmail',\n    title: 'Emails Received',\n    color: '#e2e572',\n    type: 'decimal',\n    chart: 'chartKlaviyoReceivedEmail',\n    metricId: 'totalKlaviyoReceivedEmail',\n    services: ['klaviyo'],\n    positiveComparison: -1,\n    icon: 'klaviyo',\n    providerId: 'klaviyo',\n    // metric: 'receivedEmail',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'email_sms_table_received_klaviyo',\n      tableId: 'email_sms_table',\n      columnId: 'received',\n      relatedProvider: 'klaviyo',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['klaviyo'],\n          },\n          {\n            column: { name: 'channel_type', id: 'channel_type' },\n            comparator: 'is_in',\n            value: ['email'],\n          },\n        ],\n      ],\n    },\n  },\n  klaviyoOpenedEmail: {\n    id: 'klaviyoOpenedEmail',\n    title: 'Emails Opened',\n    color: '#e2e572',\n    type: 'decimal',\n    metricId: 'totalKlaviyoOpenedEmail',\n    services: ['klaviyo'],\n    icon: 'klaviyo',\n    providerId: 'klaviyo',\n    // metric: 'openedEmail',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'email_sms_table_opened_klaviyo',\n      tableId: 'email_sms_table',\n      columnId: 'opened',\n      relatedProvider: 'klaviyo',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['klaviyo'],\n          },\n          {\n            column: { name: 'channel_type', id: 'channel_type' },\n            comparator: 'is_in',\n            value: ['email'],\n          },\n        ],\n      ],\n    },\n  },\n\n  klaviyoSmsClicked: {\n    id: 'klaviyoSmsClicked',\n    title: 'SMS Clicked',\n    color: '#e2e572',\n    type: 'decimal',\n    chart: 'chartKlaviyoClickedSms',\n    metricId: 'totalKlaviyoClickedSms',\n    services: ['klaviyo'],\n    positiveComparison: -1,\n    icon: 'klaviyo',\n    providerId: 'klaviyo',\n    // metric: 'smsClicked',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'email_sms_table_sms_clicks_klaviyo',\n      tableId: 'email_sms_table',\n      columnId: 'clicks',\n      relatedProvider: 'klaviyo',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['klaviyo'],\n          },\n          {\n            column: { name: 'channel_type', id: 'channel_type' },\n            comparator: 'is_in',\n            value: ['sms'],\n          },\n        ],\n      ],\n    },\n  },\n  klaviyoCVR: {\n    id: 'klaviyoCVR',\n    title: 'CVR',\n    color: '#e2e572',\n    chart: 'chartKlaviyoCVR',\n    type: 'decimal',\n    metricId: 'klaviyoCVR',\n    tip: 'Conversion Rate. Purchase Number / Received Emails',\n    services: ['klaviyo'],\n    positiveComparison: -1,\n    icon: 'klaviyo',\n    providerId: 'klaviyo',\n    metric: 'conversionRate',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'email_sms_table_cvr_klaviyo',\n      relatedProvider: 'klaviyo',\n      expression: [\n        {\n          title: 'Order Revenue',\n          value: 'orders_table_order_revenue_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Received Emails',\n          value: 'email_sms_table_received_klaviyo',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  klaviyoRevenuePerEmail: {\n    id: 'klaviyoRevenuePerEmail',\n    title: 'Revenue Per Email',\n    color: '#e2e572',\n    chart: 'chartKlaviyoRevenuePerEmail',\n    metricId: 'klaviyoRevenuePerEmail',\n    type: 'decimal',\n    tip: 'Sales / Received Emails',\n    services: ['klaviyo'],\n    positiveComparison: -1,\n    icon: 'klaviyo',\n    providerId: 'klaviyo',\n    // metric: 'revenuePerEmail',\n    willyMetricId: '',\n  },\n  klaviyoNetNewSubscribers: {\n    id: 'klaviyoNetNewSubscribers',\n    title: 'Net New subscribers',\n    type: 'decimal',\n    color: '#e2e572',\n    chart: 'chartKlaviyoNetNewSubscribers',\n    metricId: 'totalKlaviyoNetNewSubscribers',\n    services: ['klaviyo'],\n    icon: 'klaviyo',\n    providerId: 'klaviyo',\n    // metric: 'netNewSubscribers',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'email_sms_table_net_new_subscribers_klaviyo',\n      relatedProvider: 'klaviyo',\n      expression: [\n        {\n          title: 'New Subscribed',\n          value: 'email_sms_table_subscribed_to_list_klaviyo',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Unsubscribed',\n          value: 'email_sms_table_unsubscribed_klaviyo',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  klaviyoPlacedOrderSales: {\n    id: 'klaviyoPlacedOrderSales',\n    title: 'Total Revenue',\n    reportTitle: 'klaviyo Total Revenue',\n    type: 'currency',\n    valueToFixed: 0,\n    color: '#de509f',\n    metricId: 'klaviyoPlacedOrderSales',\n    services: ['klaviyo'],\n    icon: 'klaviyo',\n    providerId: 'klaviyo',\n    // metric: 'placedOrderSales',\n    willyMetricId: '',\n    //(!sales ? 0 : flows + campaigns)\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'email_sms_table_conversion_value_klaviyo',\n      tableId: 'email_sms_table',\n      columnId: 'conversion_value',\n      relatedProvider: 'klaviyo',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['klaviyo'],\n          },\n        ],\n      ],\n    },\n  },\n  attentivePlacedOrderSales: {\n    id: 'attentivePlacedOrderSales',\n    title: 'Total Revenue',\n    type: 'currency',\n    valueToFixed: 0,\n    color: '#de509f',\n    metricId: 'attentivePlacedOrderSales',\n    services: ['ATTENTIVE'],\n    icon: 'attentive',\n    willyMetricId: '',\n    // no willyconfig\n  },\n  totalAttentivePlacedOrder: {\n    id: 'totalAttentivePlacedOrder',\n    title: 'Placed Order',\n    type: 'decimal',\n    valueToFixed: 0,\n    color: '#de509f',\n    metricId: 'totalAttentivePlacedOrder',\n    services: ['ATTENTIVE'],\n    icon: 'attentive',\n    willyMetricId: '',\n    // no willyconfig\n  },\n  attentiveNewSubscribed: {\n    id: 'attentiveNewSubscribed',\n    title: 'New Subscribed',\n    icon: 'attentive',\n    type: 'decimal',\n    color: '#e2e572',\n    chart: 'chartAttentiveNewSubscribed',\n    metricId: 'totalAttentiveNewSubscribed',\n    services: ['ATTENTIVE'],\n    positiveComparison: -1,\n    willyMetricId: '',\n    // no willyconfig\n  },\n  attentiveNetNewsubscribers: {\n    id: 'attentiveNetNewsubscribers',\n    title: 'Net New subscribers',\n    icon: 'attentive',\n    type: 'decimal',\n    color: '#e2e572',\n    chart: 'chartAttentiveNetNewsubscribers',\n    metricId: 'totalAttentiveNetNewsubscribers',\n    services: ['ATTENTIVE'],\n    positiveComparison: -1,\n    willyMetricId: '',\n    // no willyconfig\n  },\n  attentiveUnsubscribed: {\n    id: 'attentiveUnsubscribed',\n    title: 'Unsubscribed',\n    icon: 'attentive',\n    type: 'decimal',\n    color: '#e2e572',\n    chart: 'chartAttentiveUnsubscribed',\n    metricId: 'totalAttentiveUnsubscribed',\n    services: ['ATTENTIVE'],\n    positiveComparison: -1,\n    willyMetricId: '',\n    // no willyconfig\n  },\n  attentiveSalesPercent: {\n    id: 'attentiveSalesPercent',\n    title: 'Attentive Sales %',\n    icon: 'attentive',\n    type: 'percent',\n    shortTitle: 'Klaviyo Sales',\n    chart: 'chartAttentivePlacedOrderSalesPercent',\n    color: '#a63099',\n    metricId: 'totalAttentivePlacedOrderSalesPercent',\n    valueToFixed: 0,\n    services: ['ATTENTIVE'],\n    willyMetricId: '',\n    // no willyconfig\n  },\n  attentivePlacedOrderTotalPriceFlows: {\n    id: 'attentivePlacedOrderTotalPriceFlows',\n    title: 'Revenue Flows',\n    icon: 'attentive',\n    color: '#79ba51',\n    chart: 'chartAttentivePlacedOrderTotalPriceFlows',\n    metricId: 'totalAttentivePlacedOrderTotalPriceFlows',\n    type: 'currency',\n    valueToFixed: 0,\n    services: ['ATTENTIVE'],\n    willyMetricId: '',\n    // no willyconfig\n  },\n  attentivePlacedOrderTotalPriceFlowsPercent: {\n    id: 'attentivePlacedOrderTotalPriceFlowsPercent',\n    title: 'Percent of Revenue Flows',\n    icon: 'attentive',\n    type: 'percent',\n    color: '#071096',\n    valueToFixed: 0,\n    chart: 'chartAttentivePlacedOrderTotalPriceFlows',\n    metricId: 'totalAttentivePlacedOrderSalesPercentFlows',\n    services: ['ATTENTIVE'],\n    willyMetricId: '',\n    // no willyconfig\n  },\n  attentivePlacedOrderTotalPriceCampaigns: {\n    id: 'attentivePlacedOrderTotalPriceCampaigns',\n    title: 'Revenue Campaigns',\n    icon: 'attentive',\n    color: '#1120f2',\n    type: 'currency',\n    valueToFixed: 0,\n    chart: 'chartAttentivePlacedOrderTotalPriceCampaigns',\n    metricId: 'totalAttentivePlacedOrderTotalPriceCampaigns',\n    services: ['ATTENTIVE'],\n    willyMetricId: '',\n    // no willyconfig\n  },\n  attentivePlacedOrderTotalPriceCampaignsPercent: {\n    id: 'attentivePlacedOrderTotalPriceCampaignsPercent',\n    title: 'Percent of Revenue Campaigns',\n    icon: 'attentive',\n    type: 'percent',\n    color: '#c43e13',\n    valueToFixed: 0,\n    chart: 'chartAttentivePlacedOrderTotalPriceCampaigns',\n    metricId: 'totalAttentivePlacedOrderSalesPercentCampaigns',\n    services: ['ATTENTIVE'],\n    willyMetricId: '',\n    // no willyconfig\n  },\n  tiktokAds: {\n    id: 'tiktokAds',\n    title: 'TikTok Ads',\n    reportTitle: 'TikTok Ads Spend',\n    chart: 'tiktokSpendChart',\n    color: '#30a808',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'tiktok_spend',\n    services: ['tiktok-ads'],\n    icon: 'tiktok',\n    providerId: 'tiktok-ads',\n    metric: 'spend',\n    willyMetricId: 'ads_table_spend_tiktok_ads',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_spend_tiktok_ads',\n      tableId: 'ads_table',\n      columnId: 'spend',\n      relatedProvider: 'tiktok-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['tiktok-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  tiktokClicks: {\n    id: 'tiktokClicks',\n    title: 'TikTok Clicks',\n    shortTitle: 'Clicks',\n    valueToFixed: 0,\n    type: 'decimal',\n    color: '#a63099',\n    metricId: 'tiktok_clicks',\n    services: ['tiktok-ads'],\n    icon: 'tiktok',\n    providerId: 'tiktok-ads',\n    metric: 'clicks',\n    willyMetricId: 'ads_table_clicks_tiktok_ads',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_clicks_tiktok_ads',\n      tableId: 'ads_table',\n      columnId: 'clicks',\n      relatedProvider: 'tiktok-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['tiktok-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  tiktokRoas: {\n    id: 'tiktokRoas',\n    title: 'TikTok ROAS',\n    shortTitle: 'ROAS',\n    chart: 'tiktokRoasChart',\n    valueToFixed: 2,\n    type: 'decimal',\n    color: '#90aa7f',\n    metricId: 'tiktok_complete_payment_roas',\n    services: ['tiktok-ads'],\n    tip: 'Return on Ad Spend',\n    icon: 'tiktok',\n    providerId: 'tiktok-ads',\n    metric: 'roas',\n    isSupportCumulative: false,\n    willyMetricId: 'ads_table_roas_tiktok_ads',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_roas_tiktok_ads',\n      relatedProvider: 'tiktok-ads',\n      expression: [\n        {\n          title: 'Conversion Value',\n          value: 'ads_table_conversion_value_tiktok_ads_wo_shops',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_tiktok_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  tiktokImpressions: {\n    id: 'tiktokImpressions',\n    title: 'TikTok Impressions',\n    shortTitle: 'Impressions',\n    chart: 'tiktokImpressionsChart',\n    valueToFixed: 0,\n    type: 'decimal',\n    color: '#a975c1',\n    metricId: 'tiktokImpressions',\n    services: ['tiktok-ads'],\n    icon: 'tiktok',\n    providerId: 'tiktok-ads',\n    metric: 'impressions',\n    willyMetricId: 'ads_table_impressions_tiktok_ads',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_impressions_tiktok_ads',\n      tableId: 'ads_table',\n      columnId: 'impressions',\n      relatedProvider: 'tiktok-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['tiktok-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  tiktokCpm: {\n    id: 'tiktokCpm',\n    title: 'TikTok CPM',\n    shortTitle: 'CPM',\n    chart: 'chartTiktokCpm',\n    valueToFixed: 0,\n    type: 'currency',\n    color: '#a69521',\n    metricId: 'averageTiktokCpm',\n    services: ['tiktok-ads'],\n    positiveComparison: -1,\n    tip: 'Cost Per 1000 Impressions',\n    icon: 'tiktok',\n    providerId: 'tiktok-ads',\n    metric: 'cpm',\n    willyMetricId: 'ads_table_cpm_tiktok_ads',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_cpm_tiktok_ads',\n      relatedProvider: 'tiktok-ads',\n      expression: [\n        {\n          title: '(',\n          value: '(',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_tiktok_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Impressions',\n          value: 'ads_table_impressions_tiktok_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: ')',\n          value: ')',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: '*',\n          value: '*',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: '1000',\n          value: '1000',\n          type: ElementTypes.INTEGER,\n        },\n      ],\n    },\n  },\n  tiktokCpc: {\n    id: 'tiktokCpc',\n    title: 'TikTok CPC',\n    shortTitle: 'CPC',\n    chart: 'chartTiktokCpc',\n    valueToFixed: 2,\n    color: '#0539d3',\n    metricId: 'averageTiktokCpc',\n    services: ['tiktok-ads'],\n    positiveComparison: -1,\n    icon: 'tiktok',\n    tip: 'Cost Per Click',\n    type: 'decimal',\n    providerId: 'tiktok-ads',\n    metric: 'cpc',\n    willyMetricId: 'ads_table_cpc_tiktok_ads',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_cpc_tiktok_ads',\n      relatedProvider: 'tiktok-ads',\n      expression: [\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_tiktok_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Clicks',\n          value: 'ads_table_clicks_tiktok_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  tiktokCtr: {\n    id: 'tiktokCtr',\n    title: 'TikTok CTR',\n    shortTitle: 'CTR',\n    chart: 'chartTiktokCtr',\n    valueToFixed: 2,\n    type: 'percent',\n    color: '#765b19',\n    metricId: 'tiktokCtr',\n    services: ['tiktok-ads'],\n    icon: 'tiktok',\n    providerId: 'tiktok-ads',\n    metric: 'ctr',\n    willyMetricId: 'ads_table_ctr_tiktok_ads',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_ctr_tiktok_ads',\n      relatedProvider: 'tiktok-ads',\n      expression: [\n        {\n          title: 'Clicks',\n          value: 'ads_table_clicks_tiktok_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Impressions',\n          value: 'ads_table_impressions_tiktok_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  tiktokCpa: {\n    id: 'tiktokCpa',\n    title: 'TikTok CPA',\n    shortTitle: 'CPA',\n    color: '#1d1a8e',\n    type: 'currency',\n    metricId: 'tiktokCpa',\n    chart: 'tiktokCpaChart',\n    services: ['tiktok-ads'],\n    positiveComparison: -1,\n    tip: 'Cost Per Acquisition',\n    icon: 'tiktok',\n    providerId: 'tiktok-ads',\n    metric: 'cpa',\n    willyMetricId: 'ads_table_cpa_tiktok_ads',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_cpa_tiktok_ads',\n      relatedProvider: 'tiktok-ads',\n      expression: [\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_tiktok_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Conversions',\n          value: 'ads_table_conversions_tiktok_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  tiktokConversionValue: {\n    id: 'tiktokConversionValue',\n    title: 'TikTok Conversion Value',\n    shortTitle: 'Conversion Value',\n    color: '#f2d5f4',\n    type: 'currency',\n    valueToFixed: 0,\n    chart: 'tiktokConversionValueChart',\n    metricId: 'tiktokConversionValue',\n    services: ['tiktok-ads'],\n    icon: 'tiktok',\n    providerId: 'tiktok-ads',\n    metric: 'conversionValue',\n    willyMetricId: 'ads_table_conversion_value_tiktok_ads',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_conversion_value_tiktok_ads',\n      tableId: 'ads_table',\n      columnId: 'conversion_value',\n      relatedProvider: 'tiktok-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['tiktok-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  tiktokConversionValueWOshops: {\n    id: 'tiktokConversionValueWOshops',\n    title: 'TikTok Conversion Value W/O TikTok Shops',\n    shortTitle: 'Conversion Value W/O Shops',\n    color: '#f2d5f4',\n    type: 'currency',\n    valueToFixed: 0,\n    metricId: 'tiktokConversionValueWOshops',\n    services: ['tiktok-ads'],\n    icon: 'tiktok',\n    providerId: 'tiktok-ads',\n    metric: 'conversionValue',\n    // willyMetricId: 'ads_table_conversion_value_tiktok_ads',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_conversion_value_tiktok_ads_wo_shops',\n      relatedProvider: 'tiktok-ads',\n      expression: [\n        {\n          title: 'Conversion Value',\n          value: 'ads_table_conversion_value_tiktok_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'TikTok Shop Conversion Value',\n          value: 'ads_table_meta_conversion_value_tiktok_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  tiktokPurchases: {\n    id: 'tiktokPurchases',\n    title: 'TikTok Purchases',\n    shortTitle: 'Purchases',\n    color: '#f2d5f4',\n    type: 'decimal',\n    valueToFixed: 0,\n    chart: 'tiktokPurchasesChart',\n    metricId: 'tiktokPurchases',\n    services: ['tiktok-ads'],\n    icon: 'tiktok',\n    providerId: 'tiktok-ads',\n    metric: 'purchases',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_conversions_tiktok_ads',\n      tableId: 'ads_table',\n      columnId: 'conversions',\n      relatedProvider: 'tiktok-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['tiktok-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  tiktokShopConversions: {\n    id: 'tiktokShopConversions',\n    title: 'TikTok Shop Conversions',\n    shortTitle: 'Tiktok Shop Conversions',\n    color: '#f2d5f4',\n    type: 'decimal',\n    valueToFixed: 0,\n    chart: 'tiktokShopConversionsChart',\n    metricId: 'tiktokShopConversions',\n    services: ['tiktok-ads'],\n    icon: 'tiktok',\n    providerId: 'tiktok-ads',\n    metric: 'metaPurchases',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_meta_purchases_tiktok_ads',\n      tableId: 'ads_table',\n      columnId: 'meta_purchases',\n      relatedProvider: 'tiktok-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['tiktok-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  tiktokShopConversionsValue: {\n    id: 'tiktokShopConversionsValue',\n    title: 'TikTok Shop Conversion Value',\n    shortTitle: 'Tiktok Shop Conversion Value',\n    color: '#f2d5f4',\n    type: 'currency',\n    valueToFixed: 0,\n    chart: 'tiktokShopConversionsValueChart',\n    metricId: 'tiktokShopConversionsValue',\n    services: ['tiktok-ads'],\n    icon: 'tiktok',\n    providerId: 'tiktok-ads',\n    metric: 'metaConversionValue',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_meta_conversion_value_tiktok_ads',\n      tableId: 'ads_table',\n      columnId: 'meta_conversion_value',\n      relatedProvider: 'tiktok-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['tiktok-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  uniqueCustomerSales: {\n    id: 'uniqueCustomerSales',\n    title: 'LTV',\n    color: '#4497d9',\n    metricId: 'uniqueCustomerLifetimeValue',\n    services: ['shopify'],\n    valueToFixed: 2,\n    type: 'currency',\n    tip: 'Lifetime Value. Sales / Unique Customers',\n    icon: 'shopify',\n    isShowLoadWhenImport: 'shopify',\n    providerId: 'shopify',\n    metric: 'lifetimeValue', //??\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'unique_customer_lifetime_value_shopify',\n      relatedProvider: 'shopify',\n      expression: [\n        {\n          title: 'Order Revenue',\n          value: 'orders_table_order_revenue_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Unique Customers',\n          value: 'orders_table_unique_customer_id_shopify',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  customerFrequency: {\n    id: 'customerFrequency',\n    title: 'Frequency',\n    color: '#9537de',\n    type: 'decimal',\n    metricId: 'customerFrequency',\n    services: ['shopify'],\n    valueToFixed: 2,\n    tip: 'The average number of times Unique Customers place a purchase',\n    icon: 'triple-whale-logo',\n    isShowLoadWhenImport: 'shopify',\n    providerId: 'shopify',\n    metric: 'frequency', //??\n    willyMetricId: '', // ?????\n    // is this good?\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'orders_table_unique_customer_frequency_shopify',\n      relatedProvider: 'shopify',\n      expression: [\n        //uniqueCustomerCount == 0 ? 0 : totalOrdersWithAmount / uniqueCustomerCount\n        {\n          title: 'Orders > $0',\n          value: 'orders_table_orders_with_amount_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Unique Customers',\n          value: 'orders_table_unique_customer_id_shopify',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  ltvCpa: {\n    id: 'ltvCpa',\n    title: 'LTV/CPA',\n    type: 'decimal',\n    color: '#264a15',\n    metricId: 'ltvCpa',\n    services: ['shopify'],\n    valueToFixed: 2,\n    tip: 'Lifetime Value / Cost Per Acquisition',\n    icon: 'triple-whale-logo',\n    isShowLoadWhenImport: 'shopify',\n    providerId: 'shopify',\n    metric: 'ltvPerCpa', //??\n    willyMetricId: '', // ????\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ltv_cpa_shopify',\n      relatedProvider: 'shopify',\n      expression: [\n        {\n          title: 'LTV',\n          value: 'unique_customer_lifetime_value_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'CPA',\n          value: 'blended_cpa',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  mer: {\n    id: 'mer',\n    title: 'MER',\n    color: '#c2ec95',\n    metricId: 'mer',\n    type: 'percent',\n    valueToFixed: 0,\n    services: ['facebook-ads', 'google-ads', 'snapchat-ads', 'tiktok-ads'],\n    tip: 'Marketing Efficiency Ratio. Percentage of Sales spent on Ads. Blended Ad Spend / Order Revenue x 100',\n    positiveComparison: -1,\n    icon: 'triple-whale-logo',\n    chart: 'merChart',\n    additionalMarketplaceBadge: true,\n    providerId: 'triple-whale',\n    metric: 'marketingEfficiencyRatio',\n    willyMetricId: 'prepared_blended_stats_table_mer',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'mer',\n      relatedProvider: 'triple-whale',\n      expression: [\n        {\n          title: 'Blended Ad Spend',\n          value: 'spend_with_custom',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: '(',\n          value: '(',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: 'Amazon Order Revenue',\n          value: 'orders_table_gross_product_sales_amazon',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '+',\n          value: '+',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Shopify Order Revenue',\n          value: 'orders_table_order_revenue_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: ')',\n          value: ')',\n          type: ElementTypes.PARENTHESES,\n        },\n      ],\n    },\n  },\n  totalReturns: {\n    id: 'totalReturns',\n    title: 'Returns %',\n    color: '#f247dd',\n    tip: 'Returns / Order Revenue. The percentage of your returns relative to your sales',\n    metricId: 'totalReturns',\n    type: 'percent',\n    valueToFixed: 1,\n    services: ['shopify'],\n    icon: 'shopify',\n    chart: 'totalReturnsChart',\n    providerId: 'shopify',\n    metric: 'returnsTotal',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'refunds_table_total_refunded_price',\n      relatedProvider: 'shopify',\n      expression: [\n        {\n          title: 'Total Refunded Price',\n          value: 'refunds_table_total_refunded_price_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Sales',\n          value: 'orders_table_order_revenue_shopify',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  orders: {\n    id: 'orders',\n    title: 'Orders',\n    type: 'decimal',\n    color: '#e3ac62',\n    tip: 'Number of Orders within the selected timeframe',\n    chart: 'chartOrders',\n    metricId: 'totalOrders',\n    services: ['shopify'],\n    icon: 'shopify',\n    providerId: 'shopify',\n    metric: 'orders',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_orders_count_shopify',\n      tableId: 'orders_table',\n      columnId: 'order_id',\n      relatedProvider: 'shopify',\n      aggFunction: 'COUNT',\n      filter: [\n        [{ column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['shopify'] }],\n      ],\n    },\n  },\n  shopifyOrdersWithAmount: {\n    id: 'shopifyOrdersWithAmount',\n    title: 'Orders > $0',\n    chart: 'chartOrdersWithAmount',\n    color: '#e3ac62',\n    tip: 'Shopify Orders excluding $0 Orders',\n    type: 'decimal',\n    metricId: 'totalOrdersWithAmount',\n    services: ['shopify'],\n    icon: 'shopify',\n    providerId: 'shopify',\n    metric: 'ordersWithAmount',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_orders_with_amount_shopify',\n      tableId: 'orders_table',\n      columnId: 'order_id',\n      relatedProvider: 'shopify',\n      aggFunction: 'COUNT',\n      filter: [\n        [\n          {\n            column: { name: 'platform', id: 'platform' },\n            comparator: 'is_in',\n            value: ['shopify'],\n          },\n          {\n            column: { name: 'order_revenue', id: 'order_revenue' },\n            comparator: 'greater_than',\n            value: 0,\n          },\n        ],\n      ],\n    },\n  },\n  taxesSales: {\n    id: 'taxesSales',\n    title: 'Sale Taxes',\n    color: '#91ca65',\n    tip: 'Amount customers paid in taxes',\n    metricId: 'totalTaxes',\n    services: ['shopify'],\n    valueToFixed: 0,\n    type: 'currency',\n    icon: 'shopify',\n    providerId: 'shopify',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_taxes_shopify',\n      tableId: 'orders_table',\n      columnId: 'taxes',\n      relatedProvider: 'shopify',\n      aggFunction: 'SUM',\n      filter: [\n        [{ column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['shopify'] }],\n      ],\n    },\n  },\n  totalRefundTaxes: {\n    id: 'totalRefundTaxes',\n    title: 'Returned Taxes',\n    color: '#91ca65',\n    tip: 'Amount shop returned in taxes',\n    metricId: 'totalRefundTaxes',\n    services: ['shopify'],\n    valueToFixed: 0,\n    type: 'currency',\n    icon: 'shopify',\n    providerId: 'shopify',\n    willyMetricId: '', // ??? totalTaxes was renamed to totalNetTaxes , but in Firestore it's still totalTaxes\n\n    // so now both totalTaxes and totalNetTaxes are used\n    // @TODO: returned_taxes column is not available in the refunds_table\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'refunds_table_total_returned_tax_shopify',\n      tableId: 'refunds_table',\n      columnId: 'total_refunded_tax',\n      relatedProvider: 'shopify',\n      aggFunction: 'SUM',\n      filter: [\n        [{ column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['shopify'] }],\n      ],\n    },\n  },\n  taxes: {\n    id: 'taxes',\n    title: 'Taxes',\n    color: '#91ca65',\n    chart: 'chartNetTaxes',\n    tip: 'Amount customers paid in taxes - returned taxes',\n    metricId: 'totalNetTaxes',\n    services: ['shopify'],\n    valueToFixed: 0,\n    type: 'currency',\n    icon: 'shopify',\n    providerId: 'shopify',\n    metric: 'taxes',\n    willyMetricId: '', // ??? totalTaxes was renamed to totalNetTaxes , but in Firestore it's still totalTaxes\n\n    // so now both totalTaxes and totalNetTaxes are used\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'orders_table_net_taxes_shopify',\n      relatedProvider: 'shopify',\n      expression: [\n        {\n          title: 'Taxes',\n          value: 'orders_table_taxes_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '+',\n          value: '+',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Returned Taxes',\n          value: 'refunds_table_total_returned_tax_shopify',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  grossSales: {\n    id: 'grossSales',\n    title: 'Gross Sales',\n    color: '#91ca65',\n    chart: 'chartNewGrossSales',\n    tip: 'Product price x quantity (before taxes, shipping, discounts and returns)',\n    metricId: 'totalNewGrossSales',\n    services: ['shopify'],\n    valueToFixed: 0,\n    type: 'currency',\n    icon: 'shopify',\n    providerId: 'shopify',\n    metric: 'grossSales',\n    willyMetricId: 'prepared_blended_stats_table_gross_sales',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_gross_product_sales_shopify',\n      tableId: 'orders_table',\n      columnId: 'gross_product_sales',\n      relatedProvider: 'shopify',\n      aggFunction: 'SUM',\n      filter: [\n        [{ column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['shopify'] }],\n      ],\n    },\n  },\n  newCustomersPercent: {\n    id: 'newCustomersPercent',\n    title: 'New Customers',\n    color: '#cfce47',\n    chart: 'chartNewCustomersPercent',\n    tip: 'Percentage of orders placed by New Customers',\n    metricId: 'newCustomersPercent',\n    type: 'percent',\n    valueToFixed: 0,\n    services: ['shopify'],\n    icon: 'shopify',\n    providerId: 'shopify',\n    metric: 'newCustomersPercent',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'orders_table_new_customer_percent_shopify',\n      relatedProvider: 'shopify',\n      expression: [\n        {\n          title: 'New Customers',\n          value: 'orders_table_new_customer_orders_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Total Orders',\n          value: 'orders_table_orders_count_shopify',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  oldCustomersPercent: {\n    id: 'oldCustomersPercent',\n    title: 'Returning Customers',\n    color: '#3675b5',\n    chart: 'chartOldCustomersPercent',\n    tip: 'Percentage of orders placed by Returning Customers',\n    metricId: 'oldCustomersPercent',\n    valueToFixed: 0,\n    type: 'percent',\n    services: ['shopify'],\n    icon: 'shopify',\n    providerId: 'shopify',\n    metric: 'oldCustomersPercent',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'orders_table_returning_customer_percent_shopify',\n      relatedProvider: 'shopify',\n      expression: [\n        {\n          title: 'Returning Customers',\n          value: 'orders_table_returning_customer_orders_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Total Orders',\n          value: 'orders_table_orders_count_shopify',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  newCustomersOrders: {\n    id: 'newCustomersOrders',\n    title: 'New Customer Orders',\n    color: '#cfce47',\n    chart: 'chartNewCustomersOrders',\n    tip: 'Number of orders placed by New Customers',\n    metricId: 'newCustomersOrders',\n    type: 'decimal',\n    valueToFixed: 0,\n    services: ['shopify'],\n    icon: 'shopify',\n    providerId: 'shopify',\n    metric: 'newCustomerOrders',\n    willyMetricId: 'prepared_blended_stats_table_new_customer_orders',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_new_customer_orders_shopify',\n      tableId: 'orders_table',\n      columnId: 'order_id',\n      relatedProvider: 'shopify',\n      aggFunction: 'COUNT',\n      filter: [\n        [\n          { column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['shopify'] },\n          {\n            column: { name: 'Is New Customer', id: 'is_new_customer' },\n            comparator: 'equal',\n            value: true,\n          },\n        ],\n      ],\n    },\n  },\n  returningCustomerOrders: {\n    id: 'returningCustomerOrders',\n    title: 'Returning Customer Orders',\n    color: '#3675b5',\n    tip: 'Number of orders placed by Returning Customers',\n    metricId: 'returningCustomerOrders',\n    type: 'decimal',\n    valueToFixed: 0,\n    services: ['shopify'],\n    icon: 'shopify',\n    providerId: 'shopify',\n    metric: 'returningCustomerOrders',\n    willyMetricId: 'prepared_blended_stats_table_returning_customer_orders',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_returning_customer_orders_shopify',\n      tableId: 'orders_table',\n      columnId: 'order_id',\n      relatedProvider: 'shopify',\n      aggFunction: 'COUNT',\n      filter: [\n        [\n          { column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['shopify'] },\n          {\n            column: { name: 'Is New Customer', id: 'is_new_customer' },\n            comparator: 'equal',\n            value: false,\n          },\n        ],\n      ],\n    },\n  },\n  uniqueCustomers: {\n    id: 'uniqueCustomers',\n    title: 'Unique Customers',\n    color: '#dba655',\n    type: 'decimal',\n    tip: 'Number of Unique Customers within the selected timeframe',\n    metricId: 'getUniqueCustomerCount',\n    valueToFixed: 0,\n    services: ['shopify'],\n    icon: 'shopify',\n    isShowLoadWhenImport: 'shopify',\n    providerId: 'shopify',\n    metric: 'uniqueCustomers',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_unique_customer_id_shopify',\n      tableId: 'orders_table',\n      columnId: 'customer_id',\n      relatedProvider: 'shopify',\n      aggFunction: 'COUNT_DISTINCT',\n      filter: [\n        [{ column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['shopify'] }],\n      ],\n    },\n  },\n  shipping: {\n    id: 'shipping',\n    title: 'Shipping',\n    color: '#6ebb15',\n    metricId: 'totalShippingCosts',\n    tip: 'Amount the store paid in shipping costs for fulfilling orders within the select timeframe. Edit these in: Store > Shipping',\n    valueToFixed: 0,\n    features: [FeatureFlag.EXPENSES_ACCESS_FF],\n    type: 'currency',\n    chart: 'totalShippingCostsChart',\n    services: ['shopify'],\n    icon: (stats) => stats?.activeShippingProvider ?? 'shopify',\n    providerId: 'shopify',\n    metric: 'shipping',\n    willyMetricId: '', // ????\n\n    // @TODO what abt other shipping providers?\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_shipping_costs_shopify',\n      tableId: 'orders_table',\n      columnId: 'shipping_costs',\n      relatedProvider: 'shopify',\n      aggFunction: 'SUM',\n      filter: [\n        [{ column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['shopify'] }],\n      ],\n    },\n  },\n  shippingRefunds: {\n    id: 'shippingRefunds',\n    title: 'Shipping Refunds',\n    color: '#6ebb15',\n    metricId: 'shippingRefunds',\n    tip: 'Amount the store refunded in shipping amount within the select timeframe',\n    valueToFixed: 0,\n    type: 'currency',\n    services: ['shopify'],\n    icon: 'shopify',\n    providerId: 'shopify',\n    willyMetricId: '', // ????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'refunds_table_shipping_refund_shopify',\n      tableId: 'refunds_table',\n      columnId: 'total_refunded_shipping',\n      relatedProvider: 'shopify',\n      aggFunction: 'SUM',\n      filter: [\n        [{ column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['shopify'] }],\n      ],\n    },\n  },\n  shippingPrice: {\n    id: 'shippingPrice',\n    title: 'Shipping Price',\n    color: '#6ebb15',\n    metricId: 'totalShippingPrice',\n    tip: 'Amount the customer paid in shipping amount within the select timeframe',\n    valueToFixed: 0,\n    type: 'currency',\n    services: ['shopify'],\n    icon: 'shopify',\n    providerId: 'shopify',\n    willyMetricId: '', // ????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_shipping_price_shopify',\n      tableId: 'orders_table',\n      columnId: 'shipping_price',\n      relatedProvider: 'shopify',\n      aggFunction: 'SUM',\n      filter: [\n        [{ column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['shopify'] }],\n      ],\n    },\n  },\n  discounts: {\n    id: 'discounts',\n    title: 'Discounts',\n    color: '#e3ac62',\n    metricId: 'totalDiscounts',\n    tip: 'Discount amount including shipping discounts',\n    chart: 'totalDiscountsChart',\n    valueToFixed: 0,\n    type: 'currency',\n    services: ['shopify'],\n    icon: 'shopify',\n    providerId: 'shopify',\n    metric: 'discounts',\n    willyMetricId: 'orders_table_discount_amount',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_discount_amount',\n      tableId: 'orders_table',\n      columnId: 'discount_amount',\n      relatedProvider: 'shopify',\n      aggFunction: 'SUM',\n      filter: [\n        [{ column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['shopify'] }],\n      ],\n    },\n  },\n  googleAnalyticsUsers: {\n    id: 'googleAnalyticsUsers',\n    title: 'Sessions',\n    color: '#19bfd9',\n    chart: 'chartGaUsers',\n    metricId: 'totalGoogleAnalyticsUsers',\n    isShow: (state) => state.isShowGoogleAnalytics,\n    valueToFixed: 0,\n    type: 'decimal',\n    services: ['GOOGLE_ANALYTICS'],\n    icon: 'googleAnalytics',\n    willyMetricId: '',\n    //deprecated GOOGLE_ANALYTICS\n  },\n  totalVariantsSold: {\n    id: 'totalVariantsSold',\n    title: 'Units Sold',\n    type: 'decimal',\n    color: '#092129',\n    tip: 'The Number Of Individual Items Sold Within Order Count',\n    chart: 'chartTotalVariantsSold',\n    metricId: 'totalVariantsSold',\n    services: ['shopify'],\n    icon: 'shopify',\n    providerId: 'shopify',\n    metric: 'itemsSold',\n    willyMetricId: '',\n    // willyConfig: {\n    //   isCustomMetric: false,\n    //   id: 'product_analytics_table_total_items_sold_shopify',\n    //   tableId: 'product_analytics_table',\n    //   columnId: 'total_items_sold',\n    //   relatedProvider: 'shopify',\n    //   aggFunction: 'SUM',\n    // },\n  },\n  adsSpend: {\n    id: 'adsSpend',\n    title: 'Blended Ad Spend Without Custom Expenses',\n    color: '#f03911',\n    metricId: 'adsSpend',\n    type: 'currency',\n    valueToFixed: 0,\n    services: blendedServices,\n    tip: 'Total Ad Spend. This includes the reported ad spend of each marketing channel connected to Triple Whale',\n    icon: 'blended-metrics',\n    additionalMarketplaceBadge: true,\n    providerId: 'triple-whale',\n    // metric: 'blendedSpendWithoutCustom',\n    // willyMetricId: 'spend_with_custom',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'spend_without_custom',\n      columnId: 'spend',\n      tableId: 'pixel_joined_table',\n      aggFunction: 'SUM',\n      relatedProvider: 'triple-whale',\n    },\n  },\n  blendedAds: {\n    id: 'blendedAds',\n    title: 'Blended Ad Spend',\n    shortTitle: 'Ads',\n    chart: 'chartBlendedAds',\n    color: '#f03911',\n    metricId: 'blendedAds',\n    type: 'currency',\n    valueToFixed: 0,\n    services: blendedServices,\n    relatedMetrics: [\n      'facebookAds',\n      'googleAds',\n      'snapchatAds',\n      'tiktokAds',\n      'pinterestAds',\n      'influencerSpend',\n      'totalCustomAdSpends',\n      'twitterAds',\n      'bingAdSpend',\n      'mountainSpend',\n      'criteoSpend',\n      'smsbumpSpend',\n    ],\n    tip: 'Total Ad Spend. This includes the reported ad spend of each marketing channel connected to Triple Whale, plus any Custom Expenses marked as Ad Spend',\n    icon: 'blended-metrics',\n    additionalMarketplaceBadge: true,\n    providerId: 'triple-whale',\n    metric: 'blendedSpend',\n    // willyMetricId: 'ads_table_spend',\n    // missing affluencer spend\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'spend_with_custom',\n      relatedProvider: 'triple-whale',\n      expression: [\n        {\n          title: 'Ads table Spend without custom expenses',\n          value: 'spend_without_custom',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '+',\n          value: '+',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Custom Ads Spend',\n          value: 'custom_spend_table_amount_is_ad_spend',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  conversionValue: {\n    id: 'conversionValue',\n    title: 'Conversion Value',\n    color: '#f2d5f4',\n    type: 'currency',\n    valueToFixed: 0,\n    metricId: 'conversionValue',\n    services: blendedServices,\n    icon: 'blended-metrics',\n    providerId: 'triple-whale',\n    metric: 'conversionValue',\n    willyMetricId: 'ads_table_conversion_value',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_conversion_value',\n      relatedProvider: 'triple-whale',\n      expression: [\n        {\n          title: 'Google Conversion Value',\n          value: 'ads_table_conversion_value_google_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '+',\n          value: '+',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Facebook Conversion Value',\n          value: 'ads_table_conversion_value_facebook_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '+',\n          value: '+',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Snapchat Conversion Value',\n          value: 'ads_table_conversion_value_snapchat_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '+',\n          value: '+',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'TikTok Conversion Value',\n          value: 'ads_table_conversion_value_tiktok_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '+',\n          value: '+',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Amazon Conversion Value',\n          value: 'ads_table_conversion_value_amazon',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '+',\n          value: '+',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Twitter Conversion Value',\n          value: 'ads_table_conversion_value_twitter_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '+',\n          value: '+',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Microsoft Ads Conversion Value',\n          value: 'ads_table_conversion_value_bing',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '+',\n          value: '+',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Total conversion value from MNTN',\n          value: 'ads_table_conversion_value_mountain',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '+',\n          value: '+',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Criteo Conversion Value',\n          value: 'ads_table_conversion_value_criteo',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '+',\n          value: '+',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'SMSBump Conversion Value',\n          value: 'email_sms_table_conversion_value_smsbump',\n          type: ElementTypes.METRIC,\n        }\n      ],\n    },\n  },\n  roas: {\n    id: 'roas',\n    title: 'Blended ROAS',\n    shortTitle: 'ROAS',\n    chart: 'chartRoas',\n    hasTarget: true,\n    isNotRealTime: true,\n    color: '#82E1DA',\n    valueToFixed: 2,\n    type: 'decimal',\n    metricId: 'totalRoas',\n    services: blendedServices,\n    relatedMetrics: [\n      'facebookRoas',\n      'googleRoas',\n      'tiktokRoas',\n      'snapchatRoas',\n      'pinterestRoas',\n      'twitterRoas',\n      'bingRoas',\n      'mountainRoas',\n      'criteoRoas',\n    ],\n    tip: 'Blended Return on Ad Spend. Order Revenue / Blended Ads',\n    icon: 'blended-metrics',\n    additionalMarketplaceBadge: true,\n    providerId: 'triple-whale',\n    metric: 'blendedRoas',\n    willyMetricId: 'prepared_blended_stats_table_roas',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_roas',\n      relatedProvider: 'triple-whale',\n      expression: [\n        {\n          title: '(',\n          value: '(',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: 'Amazon Order Revenue',\n          value: 'orders_table_gross_product_sales_amazon',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '+',\n          value: '+',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Shopify Order Revenue',\n          value: 'orders_table_order_revenue_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: ')',\n          value: ')',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Blended Ads',\n          value: 'spend_with_custom',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  newCustomersRoas: {\n    id: 'newCustomersRoas',\n    title: 'New Customer ROAS',\n    shortTitle: 'NC-ROAS',\n    hasTarget: true,\n    color: '#82E1DA',\n    type: 'decimal',\n    valueToFixed: 2,\n    metricId: 'newCustomersRoas',\n    services: blendedServices,\n    tip: 'New Customer Return on Ad Spend. Sales from New Customers / Blended Ad Spend',\n    icon: 'blended-metrics',\n    chart: 'chartNewCustomerRoas',\n    isShowLoadWhenImport: 'shopify',\n    providerId: 'triple-whale',\n    metric: 'blendedNewCustomerRoas',\n    willyMetricId: 'prepared_blended_stats_table_nc_roas',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'pixel_joined_table_ncroas',\n      relatedProvider: 'triple-whale',\n      expression: [\n        {\n          title: 'New Customer Sales',\n          value: 'orders_table_order_revenue_new_customer_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Blended Ad Spend',\n          value: 'spend_with_custom',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  blendedAttributedRoas: {\n    id: 'blendedAttributedRoas',\n    title: 'Blended Attributed ROAS',\n    shortTitle: 'BA-ROAS',\n    type: 'decimal',\n    hasTarget: true,\n    chart: 'chartBlendedAttributedRoas',\n    color: '#82E1DA',\n    valueToFixed: 2,\n    metricId: 'blendedAttributedRoas',\n    services: ['facebook-ads', 'google-ads', 'snapchat-ads', 'tiktok-ads'],\n    tip: 'Blended-Attributed Return on Ad Spend. Total Blended Conversion Value / Blended Ad Spend',\n    icon: 'blended-metrics',\n    additionalMarketplaceBadge: true,\n    providerId: 'triple-whale',\n    metric: 'blendedAttributedRoas',\n    willyMetricId: 'prepared_blended_stats_table_ba_roas',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'blended_attributed_roas',\n      relatedProvider: 'triple-whale',\n      expression: [\n        {\n          title: 'Blended Conversion Value',\n          value: 'ads_table_conversion_value',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Blended Ad Spend',\n          value: 'spend_with_custom',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  poas: {\n    id: 'poas',\n    title: 'Profit on Ad Spend',\n    shortTitle: 'POAS',\n    hasTarget: true,\n    type: 'decimal',\n    color: '#82E1DA',\n    valueToFixed: 2,\n    metricId: 'poas',\n    services: blendedServices,\n    tip: 'Profit on Ad Spend. Gross Profit/Total Ad Spend',\n    icon: 'blended-metrics',\n    additionalMarketplaceBadge: true,\n    providerId: 'triple-whale',\n    metric: 'blendedPoas',\n    willyMetricId: '', // ????\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'poas',\n      relatedProvider: 'triple-whale',\n      expression: [\n        {\n          title: '(',\n          value: '(',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: 'Gross Profit',\n          value: 'gross_profit_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '+',\n          value: '+',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Amazon Net Profit',\n          value: 'net_profit_amazon',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: ')',\n          value: ')',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Blended Ad Spend',\n          value: 'spend_with_custom',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  shopifyCpa: {\n    id: 'shopifyCpa',\n    title: 'Blended CPA',\n    chart: 'chartTotalCpa',\n    color: '#91d70f',\n    valueToFixed: 2,\n    type: 'currency',\n    metricId: 'totalCpa',\n    tip: 'Cost Per Acquisition. Blended Ad Spend / Orders > $0',\n    services: blendedServices,\n    positiveComparison: -1,\n    icon: 'blended-metrics',\n    additionalMarketplaceBadge: true,\n    providerId: 'triple-whale',\n    metric: 'blendedCpa', //??\n    willyMetricId: 'prepared_blended_stats_table_blended_cpa',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'blended_cpa',\n      relatedProvider: 'triple-whale',\n      expression: [\n        {\n          title: 'Blended Ad Spend',\n          value: 'spend_with_custom',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: '(',\n          value: '(',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: 'Orders > $0',\n          value: 'orders_table_orders_with_amount_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '+',\n          value: '+',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Amazon Orders',\n          value: 'orders_table_orders_count_amazon',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: ')',\n          value: ')',\n          type: ElementTypes.PARENTHESES,\n        },\n      ],\n    },\n  },\n  pinterestAds: {\n    id: 'pinterestAds',\n    title: 'Pinterest Ads',\n    reportTitle: 'Pinterest Ads Spend',\n    chart: 'pinterestSpendChart',\n    color: '#30a808',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'pinterestSpend',\n    services: ['pinterest-ads'],\n    icon: 'pinterest',\n    providerId: 'pinterest-ads',\n    metric: 'spend',\n    willyMetricId: 'ads_table_spend_pinterest_ads',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_spend_pinterest_ads',\n      tableId: 'ads_table',\n      columnId: 'spend',\n      relatedProvider: 'pinterest-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['pinterest-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  pinterestClicks: {\n    id: 'pinterestClicks',\n    title: 'Pinterest Clicks',\n    color: '#f2d5f4',\n    type: 'decimal',\n    metricId: 'pinterestClicks',\n    services: ['pinterest-ads'],\n    icon: 'pinterest',\n    providerId: 'pinterest-ads',\n    metric: 'clicks',\n    willyMetricId: 'ads_table_clicks_pinterest_ads',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_clicks_pinterest_ads',\n      tableId: 'ads_table',\n      columnId: 'clicks',\n      relatedProvider: 'pinterest-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['pinterest-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  pinterestRoas: {\n    id: 'pinterestRoas',\n    title: 'Pinterest ROAS',\n    shortTitle: 'ROAS',\n    chart: 'pinterestRoasChart',\n    type: 'decimal',\n    valueToFixed: 2,\n    color: '#90aa7f',\n    metricId: 'pinterestRoas',\n    services: ['pinterest-ads'],\n    tip: 'Return on Ad Spend',\n    icon: 'pinterest',\n    providerId: 'pinterest-ads',\n    metric: 'roas',\n    isSupportCumulative: false,\n    willyMetricId: 'ads_table_roas_pinterest_ads',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_roas_pinterest_ads',\n      relatedProvider: 'pinterest-ads',\n      expression: [\n        {\n          title: 'Conversion Value',\n          value: 'ads_table_conversion_value_pinterest_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_pinterest_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  pinterestCpc: {\n    id: 'pinterestCpc',\n    title: 'Pinterest CPC',\n    shortTitle: 'CPC',\n    type: 'decimal',\n    chart: 'pinterestCpcChart',\n    valueToFixed: 2,\n    color: '#0539d3',\n    metricId: 'pinterestCpc',\n    services: ['pinterest-ads'],\n    positiveComparison: -1,\n    tip: 'Cost Per Click',\n    icon: 'pinterest',\n    providerId: 'pinterest-ads',\n    metric: 'cpc',\n    willyMetricId: 'ads_table_cpc_pinterest_ads',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_cpc_pinterest_ads',\n      relatedProvider: 'pinterest-ads',\n      expression: [\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_pinterest_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Clicks',\n          value: 'ads_table_clicks_pinterest_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  pinterestCpm: {\n    id: 'pinterestCpm',\n    title: 'Pinterest CPM',\n    shortTitle: 'CPM',\n    chart: 'pinterestCpmChart',\n    valueToFixed: 2,\n    type: 'currency',\n    color: '#a69521',\n    metricId: 'pinterestCpm',\n    services: ['pinterest-ads'],\n    positiveComparison: -1,\n    tip: 'Cost Per 1000 Impressions',\n    icon: 'pinterest',\n    providerId: 'pinterest-ads',\n    metric: 'cpm',\n    willyMetricId: 'ads_table_cpm_pinterest_ads',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_cpm_pinterest_ads',\n      relatedProvider: 'pinterest-ads',\n      expression: [\n        {\n          title: '(',\n          value: '(',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_pinterest_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Impressions',\n          value: 'ads_table_impressions_pinterest_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: ')',\n          value: ')',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: '*',\n          value: '*',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: '1000',\n          value: '1000',\n          type: ElementTypes.INTEGER,\n        },\n      ],\n    },\n  },\n  pinterestConversionValue: {\n    id: 'pinterestConversionValue',\n    title: 'Pinterest Conversion Value',\n    shortTitle: 'Conversion Value',\n    color: '#f2d5f4',\n    type: 'currency',\n    valueToFixed: 0,\n    chart: 'pinterestConversionValueChart',\n    metricId: 'pinterestConversionValue',\n    services: ['pinterest-ads'],\n    icon: 'pinterest',\n    providerId: 'pinterest-ads',\n    metric: 'conversionValue',\n    willyMetricId: 'ads_table_conversion_value_pinterest_ads',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_conversion_value_pinterest_ads',\n      tableId: 'ads_table',\n      columnId: 'conversion_value',\n      relatedProvider: 'pinterest-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['pinterest-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  pinterestPurchases: {\n    id: 'pinterestPurchases',\n    title: 'Pinterest Purchases',\n    shortTitle: 'Purchases',\n    chart: 'pinterestPurchasesChart',\n    valueToFixed: 0,\n    color: '#765b19',\n    type: 'decimal',\n    metricId: 'pinterestPurchases',\n    services: ['pinterest-ads'],\n    icon: 'pinterest',\n    providerId: 'pinterest-ads',\n    metric: 'purchases',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_conversions_pinterest_ads',\n      tableId: 'ads_table',\n      columnId: 'conversions',\n      relatedProvider: 'pinterest-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['pinterest-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  pinterestImpressions: {\n    id: 'pinterestImpressions',\n    title: 'Pinterest Impressions',\n    type: 'decimal',\n    shortTitle: 'Impressions',\n    chart: 'pinterestImpressionsChart',\n    valueToFixed: 0,\n    color: '#a975c1',\n    metricId: 'pinterestImpressions',\n    services: ['pinterest-ads'],\n    icon: 'pinterest',\n    providerId: 'pinterest-ads',\n    metric: 'impressions',\n    willyMetricId: 'ads_table_impressions_pinterest_ads',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_impressions_pinterest_ads',\n      tableId: 'ads_table',\n      columnId: 'impressions',\n      relatedProvider: 'pinterest-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['pinterest-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  pinterestCtr: {\n    id: 'pinterestCtr',\n    title: 'Pinterest CTR',\n    shortTitle: 'CTR',\n    chart: 'pinterestCtrChart',\n    valueToFixed: 2,\n    type: 'percent',\n    color: '#765b19',\n    metricId: 'pinterestCtr',\n    services: ['pinterest-ads'],\n    icon: 'pinterest',\n    providerId: 'pinterest-ads',\n    metric: 'ctr',\n    willyMetricId: 'ads_table_ctr_pinterest_ads',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_ctr_pinterest_ads',\n      relatedProvider: 'pinterest-ads',\n      expression: [\n        {\n          title: 'Clicks',\n          value: 'ads_table_clicks_pinterest_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Impressions',\n          value: 'ads_table_impressions_pinterest_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  benchmarksCPM: {\n    id: 'benchmarksCPM',\n    title: 'Peer Facebook CPM',\n    icon: 'benchmarks',\n    type: 'currency',\n    valueToFixed: 2,\n    color: '#e2e572',\n    chart: 'chartBenchmarksCPM',\n    metricId: 'totalBenchmarksCPM',\n    services: ['benchmarks'],\n    positiveComparison: -1,\n    tip: 'Average Facebook Cost Per 1000 Impressions',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'benchmark_cpm_facebook_ads',\n      relatedProvider: 'benchmarks',\n      expression: [\n        {\n          title: '(',\n          value: '(',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_facebook_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Impressions',\n          value: 'ads_table_impressions_facebook_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: ')',\n          value: ')',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: '*',\n          value: '*',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: '1000',\n          value: '1000',\n          type: ElementTypes.INTEGER,\n        },\n      ],\n    },\n  },\n  benchmarksCPC: {\n    id: 'benchmarksCPC',\n    title: 'Peer Facebook CPC',\n    icon: 'benchmarks',\n    valueToFixed: 2,\n    type: 'currency',\n    color: '#e2e572',\n    chart: 'chartBenchmarksCPC',\n    metricId: 'totalBenchmarksCPC',\n    services: ['benchmarks'],\n    positiveComparison: -1,\n    tip: 'Average Facebook Cost Per Click',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'benchmark_cpc_facebook_ads',\n      relatedProvider: 'benchmarks',\n      expression: [\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_facebook_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Clicks',\n          value: 'ads_table_clicks_facebook_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  benchmarksCTR: {\n    id: 'benchmarksCTR',\n    title: 'Peer Facebook CTR',\n    icon: 'benchmarks',\n    type: 'percent',\n    valueToFixed: 2,\n    color: '#e2e572',\n    chart: 'chartBenchmarksCTR',\n    metricId: 'totalBenchmarksCTR',\n    services: ['benchmarks'],\n    positiveComparison: -1,\n    tip: 'Average Facebook Click Through Rate',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'benchmark_ctr_facebook_ads',\n      relatedProvider: 'benchmarks',\n      expression: [\n        {\n          title: 'Clicks',\n          value: 'ads_table_clicks_facebook_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Impressions',\n          value: 'ads_table_impressions_facebook_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  benchmarksNCROAS: {\n    id: 'benchmarksNCROAS',\n    title: 'Peer New Customer Blended ROAS',\n    shortTitle: 'Peer NC ROAS',\n    icon: 'benchmarks',\n    valueToFixed: 2,\n    type: 'decimal',\n    color: '#e2e572',\n    chart: 'chartBenchmarksNCROAS',\n    metricId: 'totalBenchmarksNCROAS',\n    services: ['benchmarks'],\n    positiveComparison: -1,\n    tip: 'Average New Customers Blended Return On Ad Spend',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'benchmark_nc_roas',\n      relatedProvider: 'benchmarks',\n      expression: [\n        {\n          title: 'New Customer Sales',\n          value: 'orders_table_order_revenue_new_customer_shopify',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Blended Ad Spend',\n          value: 'spend_without_custom',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  benchmarksNCPA: {\n    id: 'benchmarksNCPA',\n    title: 'Peer New Customer Blended CPA',\n    shortTitle: 'Peer NC CPA',\n    icon: 'benchmarks',\n    type: 'currency',\n    valueToFixed: 2,\n    color: '#e2e572',\n    chart: 'chartBenchmarksNCPA',\n    metricId: 'totalBenchmarksNCPA',\n    services: ['benchmarks'],\n    positiveComparison: -1,\n    tip: 'Average New Customers Blended Cost Per Acquisition',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'benchmark_nc_cpa',\n      relatedProvider: 'benchmarks',\n      expression: [\n        {\n          title: 'Blended Ad Spend',\n          value: 'spend_without_custom',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'New Customer Orders',\n          value: 'orders_table_new_customer_orders_shopify',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  benchmarksBlendedROAS: {\n    id: 'benchmarksBlendedROAS',\n    title: 'Peer Blended ROAS',\n    shortTitle: 'Peer TW Blended ROAS',\n    icon: 'benchmarks',\n    type: 'decimal',\n    valueToFixed: 2,\n    color: '#e2e572',\n    chart: 'chartBenchmarksBlendedROAS',\n    metricId: 'totalBenchmarksBlendedROAS',\n    services: ['benchmarks'],\n    positiveComparison: -1,\n    tip: 'Blended Return on Ad Spend. Order Revenue / Blended Ads',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_blended_roas',\n      relatedProvider: 'triple-whale',\n      expression: [\n        {\n          title: 'Conversion Value',\n          value: 'ads_table_conversion_value',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Blended Ads',\n          value: 'spend_without_custom',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  benchmarksTotalSpendAvg: {\n    id: 'benchmarksTotalSpendAvg',\n    title: 'Peer Facebook Spend',\n    icon: 'benchmarks',\n    type: 'currency',\n    valueToFixed: 2,\n    color: '#e2e572',\n    chart: 'chartBenchmarksTotalSpendAAvg',\n    metricId: 'totalBenchmarksTotalSpendAvg',\n    services: ['benchmarks'],\n    positiveComparison: -1,\n    tip: 'Average Facebook Spend',\n    willyMetricId: '',\n  },\n  benchmarksNewCustomersAvg: {\n    id: 'benchmarksNewCustomersAvg',\n    title: 'Peer Facebook New Customers',\n    shortTitle: 'Peer FB New Customers',\n    icon: 'benchmarks',\n    type: 'decimal',\n    color: '#e2e572',\n    chart: 'chartBenchmarksFBAdsNewCustomersAvg',\n    metricId: 'totalBenchmarksNewCustomersAvg',\n    services: ['benchmarks'],\n    positiveComparison: -1,\n    tip: 'Average Facebook Number of New Customers',\n    willyMetricId: '',\n  },\n  benchmarksSize: {\n    id: 'benchmarksSize',\n    title: 'Peer Group Size',\n    icon: 'benchmarks',\n    type: 'decimal',\n    color: '#e2e572',\n    chart: 'chartBenchmarksSize',\n    metricId: 'totalBenchmarksSize',\n    services: ['benchmarks'],\n    positiveComparison: -1,\n    willyMetricId: '',\n  },\n  benchmarksOrdersAvg: {\n    id: 'benchmarksOrdersAvg',\n    title: 'Peer Facebook Number Of Orders',\n    shortTitle: 'Peer Facebook # Orders',\n    icon: 'benchmarks',\n    type: 'decimal',\n    color: '#e2e572',\n    chart: 'chartBenchmarksOrdersAvg',\n    metricId: 'totalBenchmarksOrdersAvg',\n    services: ['benchmarks'],\n    positiveComparison: -1,\n    tip: 'Average Facebook Number of Orders',\n    willyMetricId: '',\n  },\n  benchmarksNewCustomersTotalPriceAvg: {\n    id: 'benchmarksNewCustomersTotalPriceAvg',\n    title: 'Peer New Customers Conversion Value',\n    shortTitle: 'Peer NC CV',\n    icon: 'benchmarks',\n    type: 'currency',\n    valueToFixed: 2,\n    color: '#e2e572',\n    chart: 'chartBenchmarksNewCustomersTotalPriceAvg',\n    metricId: 'totalBenchmarksNewCustomersTotalPriceAvg',\n    services: ['benchmarks'],\n    positiveComparison: -1,\n    tip: 'Average New Customers Conversion Value',\n    willyMetricId: '',\n  },\n  benchmarksBlendedSpendAvg: {\n    id: 'benchmarksBlendedSpendAvg',\n    title: 'Peer TW Blended Spend',\n    icon: 'benchmarks',\n    valueToFixed: 2,\n    type: 'currency',\n    color: '#e2e572',\n    chart: 'chartBenchmarksTotalPriceUSDAvg',\n    metricId: 'totalBenchmarksBlendedSpendAvg',\n    services: ['benchmarks'],\n    positiveComparison: -1,\n    tip: 'Total Ad Spend. This includes the reported ad spend of each marketing channel connected to Triple Whale',\n    willyMetricId: '',\n    // willyConfig: {\n    //   isCustomMetric: false,\n    //   id: 'tw_benchmarks_table_blended_spend',\n    //   tableId: 'tw_benchmarks_table',\n    //   columnId: 'blended_spend',\n    //   relatedProvider: 'triple-whale',\n    //   aggFunction: 'AVG',\n    // },\n  },\n  benchmarksFBAdsSpendAvg: {\n    id: 'benchmarksFBAdsSpendAvg',\n    title: 'Peer Facebook Ads Spend',\n    icon: 'benchmarks',\n    valueToFixed: 2,\n    type: 'currency',\n    color: '#e2e572',\n    chart: 'chartBenchmarksFBAdsSpendAvg',\n    metricId: 'totalBenchmarksFBAdsSpendAvg',\n    services: ['benchmarks'],\n    positiveComparison: -1,\n    tip: 'Average Facebook Spend',\n    willyMetricId: '',\n  },\n  benchmarksFBAdsImpressionsAvg: {\n    id: 'benchmarksFBAdsImpressionsAvg',\n    title: 'Peer Facebook Impressions',\n    icon: 'benchmarks',\n    type: 'decimal',\n    color: '#e2e572',\n    chart: 'chartBenchmarksFBAdsImpressionsAvg',\n    metricId: 'totalBenchmarksFBAdsImpressionsAvg',\n    services: ['benchmarks'],\n    positiveComparison: -1,\n    tip: 'Average Facebook Impressions',\n    willyMetricId: '',\n  },\n  benchmarksFBAdsClicksAvg: {\n    id: 'benchmarksFBAdsClicksAvg',\n    title: 'Peer Facebook Clicks',\n    icon: 'benchmarks',\n    type: 'decimal',\n    color: '#e2e572',\n    chart: 'chartBenchmarksFBAdsClicksAvg',\n    metricId: 'totalBenchmarksFBAdsClicksAvg',\n    services: ['benchmarks'],\n    positiveComparison: -1,\n    tip: 'Average Facebook Clicks',\n    willyMetricId: '',\n  },\n  benchmarksFacebookRoas: {\n    id: 'benchmarksFacebookRoas',\n    title: 'Peer Facebook ROAS',\n    icon: 'benchmarks',\n    type: 'decimal',\n    valueToFixed: 2,\n    color: '#e2e572',\n    chart: 'chartBenchmarksFacebookRoas',\n    metricId: 'benchmarksFacebookRoas',\n    services: ['benchmarks'],\n    positiveComparison: -1,\n    tip: 'Average Facebook Return On Ad Spend',\n    willyMetricId: '', // ?????\n  },\n  benchmarksGoogleRoas: {\n    id: 'benchmarksGoogleRoas',\n    title: 'Peer Google ROAS',\n    icon: 'benchmarks',\n    type: 'decimal',\n    valueToFixed: 2,\n    color: '#e2e572',\n    chart: 'chartBenchmarksGoogleRoas',\n    metricId: 'benchmarksGoogleRoas',\n    services: ['benchmarks'],\n    positiveComparison: -1,\n    tip: 'Average Google Return On Ad Spend',\n    willyMetricId: '',\n  },\n  totalBenchmarksCPCGoogle: {\n    id: 'totalBenchmarksCPCGoogle',\n    title: 'Peer Google CPC',\n    icon: 'benchmarks',\n    type: 'currency',\n    valueToFixed: 2,\n    color: '#e2e572',\n    chart: 'chartBenchmarksCPCGoogle',\n    metricId: 'totalBenchmarksCPCGoogle',\n    services: ['benchmarks'],\n    positiveComparison: -1,\n    tip: 'Average Google Cost Per Click',\n    willyMetricId: '',\n  },\n  totalBenchmarksCPMGoogle: {\n    id: 'totalBenchmarksCPMGoogle',\n    title: 'Peer Google CPM',\n    icon: 'benchmarks',\n    type: 'currency',\n    valueToFixed: 2,\n    color: '#e2e572',\n    chart: 'chartBenchmarksCPMGoogle',\n    metricId: 'totalBenchmarksCPMGoogle',\n    services: ['benchmarks'],\n    positiveComparison: -1,\n    tip: 'Average Google Cost Per Thousand Impressions',\n    willyMetricId: '',\n  },\n  totalBenchmarksCTRGoogle: {\n    id: 'totalBenchmarksCTRGoogle',\n    title: 'Peer Google CTR',\n    icon: 'benchmarks',\n    type: 'percent',\n    valueToFixed: 2,\n    color: '#e2e572',\n    chart: 'chartBenchmarksCTRGoogle',\n    metricId: 'totalBenchmarksCTRGoogle',\n    services: ['benchmarks'],\n    positiveComparison: -1,\n    tip: 'Average Google Click Through Rate',\n    willyMetricId: '',\n  },\n  totalBenchmarksGoogleAdsSpendAvg: {\n    id: 'totalBenchmarksGoogleAdsSpendAvg',\n    title: 'Peer Google Spend',\n    icon: 'benchmarks',\n    type: 'currency',\n    valueToFixed: 2,\n    color: '#e2e572',\n    chart: 'chartBenchmarksGoogleAdsSpendAvg',\n    metricId: 'totalBenchmarksGoogleAdsSpendAvg',\n    services: ['benchmarks'],\n    positiveComparison: -1,\n    tip: 'Ad Spend',\n    willyMetricId: '',\n  },\n  totalBenchmarksCTRTiktok: {\n    id: 'totalBenchmarksCTRTiktok',\n    title: 'Peer Tiktok CTR',\n    icon: 'benchmarks',\n    type: 'percent',\n    valueToFixed: 2,\n    color: '#e2e572',\n    chart: 'chartBenchmarksCTRTiktok',\n    metricId: 'totalBenchmarksCTRTiktok',\n    services: ['benchmarks'],\n    positiveComparison: -1,\n    tip: 'Click Through Rate. Percentage of people clicking the ad',\n    willyMetricId: '',\n  },\n  totalBenchmarksCPCTiktok: {\n    id: 'totalBenchmarksCPCTiktok',\n    title: 'Peer Tiktok CPC',\n    icon: 'benchmarks',\n    type: 'currency',\n    valueToFixed: 2,\n    color: '#e2e572',\n    chart: 'chartBenchmarksCPCTiktok',\n    metricId: 'totalBenchmarksCPCTiktok',\n    services: ['benchmarks'],\n    positiveComparison: -1,\n    tip: 'Cost Per Click',\n    willyMetricId: '',\n  },\n  benchmarksTiktokRoas: {\n    id: 'benchmarksTiktokRoas',\n    title: 'Peer Tiktok ROAS',\n    icon: 'benchmarks',\n    type: 'decimal',\n    valueToFixed: 2,\n    color: '#e2e572',\n    chart: 'chartBenchmarksTiktokRoas',\n    metricId: 'benchmarksTiktokRoas',\n    services: ['benchmarks'],\n    positiveComparison: -1,\n    tip: 'Return on Ad Spend. Order Revenue / Blended Ads',\n    willyMetricId: '',\n  },\n  totalBenchmarksTiktokAdsSpendAvg: {\n    id: 'totalBenchmarksTiktokAdsSpendAvg',\n    title: 'Peer Tiktok Spend',\n    icon: 'benchmarks',\n    type: 'currency',\n    valueToFixed: 2,\n    color: '#e2e572',\n    chart: 'chartBenchmarksTiktokAdsSpendAvg',\n    metricId: 'totalBenchmarksTiktokAdsSpendAvg',\n    services: ['benchmarks'],\n    positiveComparison: -1,\n    tip: 'Ad Spend',\n    willyMetricId: '',\n  },\n  totalBenchmarksBlendedCTR: {\n    id: 'totalBenchmarksBlendedCTR',\n    title: 'Peer TW Blended CTR',\n    icon: 'benchmarks',\n    type: 'percent',\n    valueToFixed: 2,\n    color: '#e2e572',\n    chart: 'chartBenchmarksBlendedCTR',\n    metricId: 'totalBenchmarksBlendedCTR',\n    services: ['benchmarks'],\n    positiveComparison: -1,\n    tip: 'Blended Click Through Rate. This includes data of each marketing channel connected to Triple Whale',\n    willyMetricId: '',\n  },\n  totalBenchmarksBlendedCpc: {\n    id: 'totalBenchmarksBlendedCpc',\n    title: 'Peer TW Blended CPC',\n    icon: 'benchmarks',\n    type: 'currency',\n    valueToFixed: 2,\n    color: '#e2e572',\n    chart: 'chartBenchmarksBlendedCpc',\n    metricId: 'totalBenchmarksBlendedCpc',\n    services: ['benchmarks'],\n    positiveComparison: -1,\n    tip: 'Blended Cost Per Click. This includes data of each marketing channel connected to Triple Whale',\n    willyMetricId: '',\n  },\n  totalFacebookEnq: {\n    id: 'totalFacebookEnq',\n    title: 'From facebook',\n    icon: 'enquirelabs',\n    type: 'percent',\n    valueToFixed: 2,\n    color: '#e2e572',\n    metricId: 'totalFacebookEnq',\n    services: ['enquirelabs'],\n    chart: 'totalFacebookEnqChart',\n    willyMetricId: '', // ????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'post_purchase_survey_table_order_id_enquirelabs_facebook_ads',\n      tableId: 'post_purchase_survey_table',\n      columnId: 'order_id',\n      relatedProvider: 'enquirelabs',\n      aggFunction: 'COUNT',\n      filter: [\n        [\n          {\n            column: { name: 'survey_type', id: 'survey_type' },\n            comparator: 'is_in',\n            value: ['fairing'],\n          },\n          {\n            column: { name: 'source', id: 'source' },\n            comparator: 'is_in',\n            value: ['facebook-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  totalGoogleEnq: {\n    id: 'totalGoogleEnq',\n    title: 'From Google',\n    icon: 'enquirelabs',\n    type: 'percent',\n    valueToFixed: 2,\n    color: '#e2e572',\n    metricId: 'totalGoogleEnq',\n    services: ['enquirelabs'],\n    chart: 'totalGoogleEnqChart',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'post_purchase_survey_table_order_id_enquirelabs_google_ads',\n      tableId: 'post_purchase_survey_table',\n      columnId: 'order_id',\n      relatedProvider: 'enquirelabs',\n      aggFunction: 'COUNT',\n      filter: [\n        [\n          {\n            column: { name: 'survey_type', id: 'survey_type' },\n            comparator: 'is_in',\n            value: ['fairing'],\n          },\n          {\n            column: { name: 'source', id: 'source' },\n            comparator: 'is_in',\n            value: ['google-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  totalSnapchatEnq: {\n    id: 'totalSnapchatEnq',\n    title: 'From Snapchat',\n    icon: 'enquirelabs',\n    type: 'percent',\n    valueToFixed: 2,\n    color: '#e2e572',\n    metricId: 'totalSnapchatEnq',\n    services: ['enquirelabs'],\n    chart: 'totalSnapchatEnqChart',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'post_purchase_survey_table_order_id_enquirelabs_snapchat_ads',\n      tableId: 'post_purchase_survey_table',\n      columnId: 'order_id',\n      relatedProvider: 'enquirelabs',\n      aggFunction: 'COUNT',\n      filter: [\n        [\n          {\n            column: { name: 'survey_type', id: 'survey_type' },\n            comparator: 'is_in',\n            value: ['fairing'],\n          },\n          {\n            column: { name: 'source', id: 'source' },\n            comparator: 'is_in',\n            value: ['snapchat-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  totalTiktokEnq: {\n    id: 'totalTiktokEnq',\n    title: 'From TikTok',\n    icon: 'enquirelabs',\n    type: 'percent',\n    valueToFixed: 2,\n    color: '#e2e572',\n    metricId: 'totalTiktokEnq',\n    services: ['enquirelabs'],\n    chart: 'totalTiktokEnqChart',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'post_purchase_survey_table_order_id_enquirelabs_tiktok_ads',\n      tableId: 'post_purchase_survey_table',\n      columnId: 'order_id',\n      relatedProvider: 'enquirelabs',\n      aggFunction: 'COUNT',\n      filter: [\n        [\n          {\n            column: { name: 'survey_type', id: 'survey_type' },\n            comparator: 'is_in',\n            value: ['fairing'],\n          },\n          {\n            column: { name: 'source', id: 'source' },\n            comparator: 'is_in',\n            value: ['tiktok-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  totalPinterestEnq: {\n    id: 'totalPinterestEnq',\n    title: 'From Pinterest',\n    icon: 'enquirelabs',\n    type: 'percent',\n    valueToFixed: 2,\n    color: '#e2e572',\n    metricId: 'totalPinterestEnq',\n    services: ['enquirelabs'],\n    chart: 'totalPinterestEnqChart',\n    willyMetricId: '', // ??????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'post_purchase_survey_table_order_id_enquirelabs_pinterest_ads',\n      tableId: 'post_purchase_survey_table',\n      columnId: 'order_id',\n      relatedProvider: 'enquirelabs',\n      aggFunction: 'COUNT',\n      filter: [\n        [\n          {\n            column: { name: 'survey_type', id: 'survey_type' },\n            comparator: 'is_in',\n            value: ['fairing'],\n          },\n          {\n            column: { name: 'source', id: 'source' },\n            comparator: 'is_in',\n            value: ['pinterest-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  totalInstagramEnq: {\n    id: 'totalInstagramEnq',\n    title: 'From Instagram',\n    icon: 'enquirelabs',\n    type: 'percent',\n    valueToFixed: 2,\n    color: '#e2e572',\n    metricId: 'totalInstagramEnq',\n    services: ['enquirelabs'],\n    chart: 'totalInstagramEnqChart',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'post_purchase_survey_table_order_id_enquirelabs_instagram_ads',\n      tableId: 'post_purchase_survey_table',\n      columnId: 'order_id',\n      relatedProvider: 'enquirelabs',\n      aggFunction: 'COUNT',\n      filter: [\n        [\n          {\n            column: { name: 'survey_type', id: 'survey_type' },\n            comparator: 'is_in',\n            value: ['fairing'],\n          },\n          {\n            column: { name: 'source', id: 'source' },\n            comparator: 'is_in',\n            value: ['instagram-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  responsesPrecent: {\n    services: ['enquirelabs'],\n    id: 'responsesPrecent',\n    title: '% Responses',\n    icon: 'enquirelabs',\n    type: 'percent',\n    valueToFixed: 2,\n    color: '#e2e572',\n    metricId: 'responsesPrecent',\n    tip: '% responses from total orders',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'post_purchase_survey_table_responses_percent_enquirelabs',\n      relatedProvider: 'enquirelabs',\n      expression: [\n        {\n          title: 'Total Enquirelabs Orders',\n          value: 'post_purchase_survey_table_order_id_enquirelabs',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Enquirelabs Responses',\n          value: 'post_purchase_survey_table_answer_enquirelabs',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  enqOrders: {\n    id: 'enqOrders',\n    title: 'Enquirelabs Orders',\n    icon: 'kno',\n    type: 'decimal',\n    valueToFixed: 0,\n    color: '#e2e572',\n    metricId: 'enqOrders',\n    services: ['enquirelabs'],\n    tip: 'total orders from Enquirelabs',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'post_purchase_survey_table_order_id_enquirelabs',\n      tableId: 'post_purchase_survey_table',\n      columnId: 'order_id',\n      relatedProvider: 'enquirelabs',\n      aggFunction: 'COUNT',\n    },\n  },\n  responsesEnq: {\n    services: ['enquirelabs'],\n    id: 'responsesEnq',\n    title: 'Enquirelabs Responses',\n    icon: 'enquirelabs',\n    type: 'percent',\n    valueToFixed: 2,\n    color: '#e2e572',\n    metricId: 'responsesEnq',\n    tip: 'responses from total Enquirelabs orders ',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'post_purchase_survey_table_answer_enquirelabs',\n      tableId: 'post_purchase_survey_table',\n      columnId: 'answer',\n      relatedProvider: 'enquirelabs',\n      aggFunction: 'COUNT',\n      filter: [\n        [\n          {\n            column: { name: 'survey_type', id: 'survey_type' },\n            comparator: 'is_in',\n            value: ['fairing'],\n          },\n        ],\n      ],\n    },\n  },\n  totalFacebookKno: {\n    id: 'totalFacebookKno',\n    title: 'From facebook',\n    icon: 'facebook-circle',\n    type: 'percent',\n    valueToFixed: 2,\n    color: '#e2e572',\n    metricId: 'totalFacebookKno',\n    services: ['kno'],\n    chart: 'totalFacebookKnoChart',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'post_purchase_survey_table_order_id_kno_facebook_ads',\n      tableId: 'post_purchase_survey_table',\n      columnId: 'order_id',\n      relatedProvider: 'kno',\n      aggFunction: 'COUNT',\n      filter: [\n        [\n          {\n            column: { name: 'survey_type', id: 'survey_type' },\n            comparator: 'is_in',\n            value: ['kno'],\n          },\n          {\n            column: { name: 'source', id: 'source' },\n            comparator: 'is_in',\n            value: ['facebook-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  totalGoogleKno: {\n    id: 'totalGoogleKno',\n    title: 'From Google',\n    icon: 'google-ads',\n    type: 'percent',\n    valueToFixed: 2,\n    color: '#e2e572',\n    metricId: 'totalGoogleKno',\n    services: ['kno'],\n    chart: 'totalGoogleKnoChart',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'post_purchase_survey_table_order_id_kno_google_ads',\n      tableId: 'post_purchase_survey_table',\n      columnId: 'order_id',\n      relatedProvider: 'kno',\n      aggFunction: 'COUNT',\n      filter: [\n        [\n          {\n            column: { name: 'survey_type', id: 'survey_type' },\n            comparator: 'is_in',\n            value: ['kno'],\n          },\n          {\n            column: { name: 'source', id: 'source' },\n            comparator: 'is_in',\n            value: ['google-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  totalSnapchatKno: {\n    id: 'totalSnapchatKno',\n    title: 'From Snapchat',\n    icon: 'snapchat-circle',\n    type: 'percent',\n    valueToFixed: 2,\n    color: '#e2e572',\n    metricId: 'totalSnapchatKno',\n    services: ['kno'],\n    chart: 'totalSnapchatKnoChart',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'post_purchase_survey_table_order_id_kno_snapchat_ads',\n      tableId: 'post_purchase_survey_table',\n      columnId: 'order_id',\n      relatedProvider: 'kno',\n      aggFunction: 'COUNT',\n      filter: [\n        [\n          {\n            column: { name: 'survey_type', id: 'survey_type' },\n            comparator: 'is_in',\n            value: ['kno'],\n          },\n          {\n            column: { name: 'source', id: 'source' },\n            comparator: 'is_in',\n            value: ['snapchat-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  totalTiktokKno: {\n    id: 'totalTiktokKno',\n    title: 'From TikTok',\n    icon: 'tiktok',\n    type: 'percent',\n    valueToFixed: 2,\n    color: '#e2e572',\n    metricId: 'totalTiktokKno',\n    services: ['kno'],\n    chart: 'totalTiktokKnoChart',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'post_purchase_survey_table_order_id_kno_tiktok_ads',\n      tableId: 'post_purchase_survey_table',\n      columnId: 'order_id',\n      relatedProvider: 'kno',\n      aggFunction: 'COUNT',\n      filter: [\n        [\n          {\n            column: { name: 'survey_type', id: 'survey_type' },\n            comparator: 'is_in',\n            value: ['kno'],\n          },\n          {\n            column: { name: 'source', id: 'source' },\n            comparator: 'is_in',\n            value: ['tiktok-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  totalPinterestKno: {\n    id: 'totalPinterestKno',\n    title: 'From Pinterest',\n    icon: 'pinterest',\n    type: 'percent',\n    valueToFixed: 2,\n    color: '#e2e572',\n    metricId: 'totalPinterestKno',\n    services: ['kno'],\n    chart: 'totalPinterestKnoChart',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'post_purchase_survey_table_order_id_kno_pinterest_ads',\n      tableId: 'post_purchase_survey_table',\n      columnId: 'order_id',\n      relatedProvider: 'kno',\n      aggFunction: 'COUNT',\n      filter: [\n        [\n          {\n            column: { name: 'survey_type', id: 'survey_type' },\n            comparator: 'is_in',\n            value: ['kno'],\n          },\n          {\n            column: { name: 'source', id: 'source' },\n            comparator: 'is_in',\n            value: ['pinterest-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  totalInstagramKno: {\n    id: 'totalInstagramKno',\n    title: 'From Instagram',\n    icon: 'instagram',\n    type: 'percent',\n    valueToFixed: 2,\n    color: '#e2e572',\n    metricId: 'totalInstagramKno',\n    services: ['kno'],\n    chart: 'totalInstagramKnoChart',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'post_purchase_survey_table_order_id_kno_instagram',\n      tableId: 'post_purchase_survey_table',\n      columnId: 'order_id',\n      relatedProvider: 'kno',\n      aggFunction: 'COUNT',\n      filter: [\n        [\n          {\n            column: { name: 'survey_type', id: 'survey_type' },\n            comparator: 'is_in',\n            value: ['kno'],\n          },\n          {\n            column: { name: 'source', id: 'source' },\n            comparator: 'is_in',\n            value: ['instagram'],\n          },\n        ],\n      ],\n    },\n  },\n  responsesPrecentKno: {\n    services: ['kno'],\n    id: 'responsesPrecentKno',\n    title: '% Responses',\n    icon: 'kno',\n    type: 'percent',\n    valueToFixed: 2,\n    color: '#e2e572',\n    metricId: 'responsesPrecentKno',\n    tip: '% responses from total orders',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'responsesPrecentKno',\n      relatedProvider: 'kno',\n      expression: [\n        {\n          title: 'Total Kno Orders',\n          value: 'post_purchase_survey_table_order_id_kno',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Kno Responses',\n          value: 'post_purchase_survey_table_answer_kno',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  knoOrders: {\n    id: 'knoOrders',\n    title: 'Kno Orders',\n    icon: 'kno',\n    type: 'decimal',\n    valueToFixed: 0,\n    color: '#e2e572',\n    metricId: 'knoOrders',\n    services: ['kno'],\n    tip: 'total orders from Kno',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'post_purchase_survey_table_order_id_kno',\n      tableId: 'post_purchase_survey_table',\n      columnId: 'order_id',\n      relatedProvider: 'kno',\n      aggFunction: 'COUNT',\n    },\n  },\n  responsesKno: {\n    services: ['kno'],\n    id: 'responsesKno',\n    title: 'Kno Responses',\n    icon: 'kno',\n    type: 'percent',\n    valueToFixed: 2,\n    color: '#e2e572',\n    metricId: 'responsesKno',\n    tip: 'responses from total Kno orders',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'post_purchase_survey_table_answer_kno',\n      tableId: 'post_purchase_survey_table',\n      columnId: 'answer',\n      relatedProvider: 'kno',\n      aggFunction: 'COUNT',\n      filter: [\n        [\n          {\n            column: { name: 'survey_type', id: 'survey_type' },\n            comparator: 'is_in',\n            value: ['kno'],\n          },\n        ],\n      ],\n    },\n  },\n  facebookLikes: {\n    id: 'facebookLikes',\n    title: 'Likes',\n    icon: 'facebook-circle',\n    type: 'decimal',\n    chart: 'chartFacebookLikes',\n    color: '#ac26c2',\n    valueToFixed: 0,\n    metricId: 'facebookLikes',\n    services: ['FACEBOOK_SOCIAL'],\n    tip: 'total likes for page and posts',\n    willyMetricId: '',\n    //basicSelector\n  },\n  facebookComments: {\n    id: 'facebookComments',\n    title: 'Comments',\n    icon: 'facebook-circle',\n    type: 'decimal',\n    chart: 'chartFacebookComments',\n    color: '#ac26c2',\n    valueToFixed: 0,\n    metricId: 'facebookComments',\n    services: ['FACEBOOK_SOCIAL'],\n    tip: '',\n    willyMetricId: '',\n    //basicSelector\n  },\n  facebookShares: {\n    id: 'facebookShares',\n    title: 'Shares',\n    icon: 'facebook-circle',\n    type: 'decimal',\n    chart: 'chartFacebookShares',\n    color: '#ac26c2',\n    valueToFixed: 0,\n    metricId: 'facebookShares',\n    services: ['FACEBOOK_SOCIAL'],\n    tip: '',\n    willyMetricId: '',\n    //basicSelector\n  },\n  facebookPosts: {\n    id: 'facebookPosts',\n    title: 'Posts',\n    icon: 'facebook-circle',\n    type: 'decimal',\n    chart: 'chartFacebookPosts',\n    color: '#ac26c2',\n    valueToFixed: 0,\n    metricId: 'facebookPosts',\n    services: ['FACEBOOK_SOCIAL'],\n    tip: '',\n    willyMetricId: '',\n    //basicSelector\n  },\n  facebookFollowers: {\n    id: 'facebookFollowers',\n    title: 'Followers',\n    icon: 'facebook-circle',\n    type: 'decimal',\n    chart: 'chartFacebookFollowers',\n    color: '#ac26c2',\n    valueToFixed: 0,\n    metricId: 'facebookFollowers',\n    services: ['FACEBOOK_SOCIAL'],\n    tip: '',\n    willyMetricId: '',\n    //basicSelector\n  },\n  facebookSocialImpressions: {\n    id: 'facebookSocialImpressions',\n    title: 'Impressions',\n    icon: 'facebook-circle',\n    type: 'decimal',\n    chart: 'chartFacebookImpressions',\n    color: '#ac26c2',\n    valueToFixed: 0,\n    metricId: 'facebookSocialImpressions',\n    services: ['FACEBOOK_SOCIAL'],\n    tip: '',\n    willyMetricId: '',\n    //basicSelector\n  },\n  facebookSocialAvg: {\n    id: 'facebookSocialAvg',\n    title: 'AVG',\n    icon: 'facebook-circle',\n    type: 'decimal',\n    chart: 'chartFacebookSocialAvg',\n    color: '#ac26c2',\n    valueToFixed: 0,\n    metricId: 'facebookSocialAvg',\n    services: ['FACEBOOK_SOCIAL'],\n    tip: '',\n    willyMetricId: '',\n    //basicSelector\n  },\n  facebookReach: {\n    id: 'facebookReach',\n    title: 'Reach',\n    icon: 'facebook-circle',\n    type: 'decimal',\n    chart: 'chartFacebookReach',\n    color: '#ac26c2',\n    valueToFixed: 0,\n    metricId: 'facebookReach',\n    services: ['FACEBOOK_SOCIAL'],\n    tip: '',\n    willyMetricId: '',\n    //basicSelector\n  },\n  facebookProfileView: {\n    id: 'facebookProfileView',\n    title: 'Profile view',\n    icon: 'facebook-circle',\n    type: 'decimal',\n    chart: 'chartFacebookProfileView',\n    color: '#ac26c2',\n    valueToFixed: 0,\n    metricId: 'facebookProfileView',\n    services: ['FACEBOOK_SOCIAL'],\n    tip: '',\n    willyMetricId: '',\n    //basicSelector\n  },\n  facebookWebsiteClicks: {\n    id: 'facebookWebsiteClicks',\n    title: 'Website Clicks',\n    icon: 'facebook-circle',\n    type: 'decimal',\n    chart: 'chartFacebookWebsiteClicks',\n    color: '#ac26c2',\n    valueToFixed: 0,\n    metricId: 'facebookWebsiteClicks',\n    services: ['FACEBOOK_SOCIAL'],\n    tip: '',\n    willyMetricId: '',\n    //basicSelector\n  },\n  instagramLikes: {\n    id: 'instagramLikes',\n    title: 'Likes',\n    icon: 'instagram',\n    type: 'decimal',\n    chart: 'chartInstagramLikes',\n    color: '#ac26c2',\n    valueToFixed: 0,\n    metricId: 'instagramLikes',\n    services: ['FACEBOOK_SOCIAL'],\n    tip: '',\n    willyMetricId: '',\n    //basicSelector\n  },\n  instagramComments: {\n    id: 'instagramComments',\n    title: 'Comments',\n    icon: 'instagram',\n    type: 'decimal',\n    chart: 'chartInstagramComments',\n    color: '#ac26c2',\n    valueToFixed: 0,\n    metricId: 'instagramComments',\n    services: ['FACEBOOK_SOCIAL'],\n    tip: '',\n    willyMetricId: '',\n    //basicSelector\n  },\n  instagramShares: {\n    id: 'instagramShares',\n    title: 'Shares',\n    icon: 'instagram',\n    type: 'decimal',\n    chart: 'chartInstagramShares',\n    color: '#ac26c2',\n    valueToFixed: 0,\n    metricId: 'instagramShares',\n    services: ['FACEBOOK_SOCIAL'],\n    tip: '',\n    willyMetricId: '',\n    //basicSelector\n  },\n  instagramPosts: {\n    id: 'instagramPosts',\n    title: 'Media posted',\n    icon: 'instagram',\n    type: 'decimal',\n    chart: 'chartInstagramPosts',\n    color: '#ac26c2',\n    valueToFixed: 0,\n    metricId: 'instagramPosts',\n    services: ['FACEBOOK_SOCIAL'],\n    tip: '',\n    willyMetricId: '',\n    //basicSelector\n  },\n  instagramFollowers: {\n    id: 'instagramFollowers',\n    title: 'Followers',\n    icon: 'instagram',\n    type: 'decimal',\n    chart: 'chartInstagramFollowers',\n    color: '#ac26c2',\n    valueToFixed: 0,\n    metricId: 'instagramFollowers',\n    services: ['FACEBOOK_SOCIAL'],\n    tip: '',\n    willyMetricId: '',\n    //basicSelector\n  },\n  instagramImpressions: {\n    id: 'instagramImpressions',\n    title: 'Impressions',\n    icon: 'instagram',\n    type: 'decimal',\n    chart: 'chartInstagramImpressions',\n    color: '#ac26c2',\n    valueToFixed: 0,\n    metricId: 'instagramImpressions',\n    services: ['FACEBOOK_SOCIAL'],\n    tip: '',\n    willyMetricId: '',\n    //basicSelector\n  },\n  instagramAvg: {\n    id: 'instagramAvg',\n    title: 'AVG',\n    icon: 'instagram',\n    type: 'decimal',\n    chart: 'chartInstagramAvg',\n    color: '#ac26c2',\n    valueToFixed: 0,\n    metricId: 'instagramAvg',\n    services: ['FACEBOOK_SOCIAL'],\n    tip: '',\n    willyMetricId: '',\n    //basicSelector\n  },\n  instagramAvgImpressionsFollowers: {\n    id: 'instagramAvgImpressionsFollowers',\n    title: 'AVG',\n    icon: 'instagram',\n    type: 'decimal',\n    chart: 'chartInstagramAvgImpressionsFollowers',\n    color: '#ac26c2',\n    valueToFixed: 0,\n    metricId: 'instagramAvgImpressionsFollowers',\n    services: ['FACEBOOK_SOCIAL'],\n    tip: '',\n    willyMetricId: '',\n    //basicSelector\n  },\n  instagramReach: {\n    id: 'instagramReach',\n    title: 'Reach',\n    icon: 'instagram',\n    type: 'decimal',\n    chart: 'chartInstagramReach',\n    color: '#ac26c2',\n    valueToFixed: 0,\n    metricId: 'instagramReach',\n    services: ['FACEBOOK_SOCIAL'],\n    tip: '',\n    willyMetricId: '',\n    //basicSelector\n  },\n  instagramProfileView: {\n    id: 'instagramProfileView',\n    title: 'Profile view',\n    icon: 'instagram',\n    type: 'decimal',\n    chart: 'chartInstagramProfileView',\n    color: '#ac26c2',\n    valueToFixed: 0,\n    metricId: 'instagramProfileView',\n    services: ['FACEBOOK_SOCIAL'],\n    tip: '',\n    willyMetricId: '',\n    //basicSelector\n  },\n  instagramWebsiteClicks: {\n    id: 'instagramWebsiteClicks',\n    title: 'Website Clicks',\n    icon: 'instagram',\n    type: 'decimal',\n    chart: 'chartInstagramWebsiteClicks',\n    color: '#ac26c2',\n    valueToFixed: 0,\n    metricId: 'instagramWebsiteClicks',\n    services: ['FACEBOOK_SOCIAL'],\n    tip: '',\n    willyMetricId: '',\n    //basicSelector\n  },\n  influencerConversionValue: {\n    id: 'influencerConversionValue',\n    metricId: 'influencerConversionValue',\n    title: 'Affluencer Conversion Value',\n    shortTitle: 'CV',\n    chart: 'influencerConversionValueChart',\n    color: '',\n    valueToFixed: 0,\n    type: 'currency',\n    services: ['influencers'],\n    tip: 'Conversion Value',\n    icon: 'influencers',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'pixel_orders_table_order_revenue_influencer',\n      tableId: 'pixel_orders_table',\n      columnId: 'order_revenue',\n      relatedProvider: 'influencers',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'Channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['influencer'],\n          },\n        ],\n      ],\n    },\n  },\n  influencerSpend: {\n    id: 'influencerSpend',\n    metricId: 'influencerSpend',\n    title: 'Affluencer Spend',\n    shortTitle: '',\n    chart: 'influencerSpendChart',\n    color: '',\n    valueToFixed: 0,\n    type: 'currency',\n    services: ['influencers'],\n    icon: 'influencers',\n    willyMetricId: '', // ?????\n    //no willyconfig\n  },\n  influencerRoas: {\n    id: 'influencerRoas',\n    metricId: 'influencerRoas',\n    title: 'Affluencer Roas',\n    shortTitle: '',\n    chart: 'influencerRoasChart',\n    color: '',\n    valueToFixed: 2,\n    type: 'decimal',\n    services: ['influencers'],\n    tip: 'Return on Ad Spend',\n    icon: 'influencers',\n    willyMetricId: '',\n    // no willyconfig for influnecer spend\n    // willyConfig: {\n    //   isCustomMetric: true,\n    //   id: 'influencer_roas',\n    //   relatedProvider: 'influencers',\n    //   expression: [\n    //     {\n    //       title: 'Conversion Value',\n    //       value: 'pixel_joined_table_channel_reported_conversion_value_influencer',\n    //       type: ElementTypes.METRIC,\n    //     },\n    //     {\n    //       title: '/',\n    //       value: '/',\n    //       type: ElementTypes.OPERATOR,\n    //     },\n    //     {\n    //       title: 'Spend',\n    //       value: 'pixel_joined_table_spend_influencer',\n    //       type: ElementTypes.METRIC,\n    //     },\n    //   ],\n    // },\n  },\n  influencerPurchases: {\n    id: 'influencerPurchases',\n    metricId: 'influencerPurchases',\n    title: 'Affluencer Purchases',\n    shortTitle: '',\n    chart: 'influencerPurchasesChart',\n    color: '',\n    valueToFixed: 0,\n    type: 'decimal',\n    services: ['influencers'],\n    icon: 'influencers',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'pixel_orders_table_order_revenue_influencers',\n      tableId: 'pixel_orders_table',\n      columnId: 'order_revenue',\n      relatedProvider: 'influencers',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'Channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['influencer'],\n          },\n        ],\n      ],\n    },\n  },\n  influencerNcPurchases: {\n    id: 'influencerNcPurchases',\n    metricId: 'influencerNcPurchases',\n    title: 'Affluencer New Customer Purchases',\n    shortTitle: 'NC Purchases',\n    chart: 'influencerNcPurchasesChart',\n    color: '',\n    valueToFixed: 0,\n    type: 'decimal',\n    services: ['influencers'],\n    icon: 'influencers',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'pixel_orders_table_new_customer_orders_influencers',\n      tableId: 'pixel_orders_table',\n      columnId: 'order_revenue',\n      relatedProvider: 'influencers',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'Channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['influencer'],\n          },\n          {\n            column: { name: 'Is New Customer', id: 'is_new_customer' },\n            comparator: 'equal',\n            value: true,\n          },\n        ],\n      ],\n    },\n  },\n  influencerNcConversionValue: {\n    id: 'influencerNcConversionValue',\n    metricId: 'influencerNcConversionValue',\n    title: 'Affluencer New Customer Conversion Value',\n    shortTitle: 'NC CV',\n    chart: 'influencerNcConversionValueChart',\n    color: '',\n    valueToFixed: 0,\n    type: 'currency',\n    services: ['influencers'],\n    tip: 'New Customer Conversion Value',\n    icon: 'influencers',\n    willyMetricId: '', // ????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'pixel_joined_table_channel_reported_conversion_value_influencer',\n      tableId: 'pixel_joined_table',\n      columnId: 'channel_reported_conversion_value',\n      relatedProvider: 'influencers',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'Channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['influencer'],\n          },\n        ],\n      ],\n    },\n  },\n  totalCustomAdSpends: {\n    id: 'totalCustomAdSpends',\n    metricId: 'totalCustomAdSpends',\n    title: 'Custom Expense Ad Spend',\n    chart: 'totalCustomAdSpendsChart',\n    color: '',\n    valueToFixed: 0,\n    type: 'currency',\n    services: [],\n    icon: 'triple-whale-logo',\n    providerId: 'triple-whale',\n    // metric:'customSpend'\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'custom_spend_table_amount_is_ad_spend',\n      tableId: 'custom_spend_table',\n      columnId: 'amount',\n      relatedProvider: 'triple-whale',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'Is Ad Spend', id: 'is_ad_spend' },\n            comparator: 'equal',\n            value: true,\n          },\n        ],\n      ],\n    },\n  },\n  totalCustomNonAdSpends: {\n    id: 'totalCustomNonAdSpends',\n    metricId: 'totalCustomNonAdSpends',\n    title: 'Custom Expenses excl. Ad Spend',\n    chart: 'totalCustomNonAdSpendsChart',\n    color: '',\n    valueToFixed: 0,\n    type: 'currency',\n    services: [],\n    icon: 'triple-whale-logo',\n    providerId: 'triple-whale',\n    willyMetricId: '', // ????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'custom_spend_table_amount_non_ad_spend',\n      tableId: 'custom_spend_table',\n      columnId: 'amount',\n      relatedProvider: 'triple-whale',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'Is Ad Spend', id: 'is_ad_spend' },\n            comparator: 'equal',\n            value: false,\n          },\n        ],\n      ],\n    },\n  },\n  amazonSales: {\n    id: 'amazonSales',\n    title: 'Amazon Sales',\n    shortTitle: 'Sales',\n    chart: 'chartAmazonSales',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'totalAmazonSales',\n    services: ['amazon'],\n    icon: 'amazon',\n    tip: 'What the customer paid for the order including shipping, taxes, discounts',\n    providerId: 'amazon',\n    metric: 'sales',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_order_revenue_amazon',\n      tableId: 'orders_table',\n      columnId: 'order_revenue',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'platform', id: 'platform' },\n            comparator: 'is_in',\n            value: ['amazon'],\n          },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBA', 'FBM'],\n          },\n        ],\n      ],\n    },\n  },\n  amazonProductItemPrice: {\n    id: 'amazonProductItemPrice',\n    title: 'Amazon Product Sales',\n    shortTitle: 'Product Sales',\n    chart: 'chartAmazonProductItemPrice',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'totalAmazonProductItemPrice',\n    services: ['amazon'],\n    icon: 'amazon',\n    tip: 'The amount of ordered product sales, calculated by multiplying the price of order items and the number of units sold for the selected time period. This is what Amazon shows in the Sales Dashboard.',\n    providerId: 'amazon',\n    // metric: 'productSales',\n    willyMetricId: '', // ??????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_gross_product_sales_amazon',\n      tableId: 'orders_table',\n      columnId: 'gross_product_sales',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          { column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['amazon'] },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBA', 'FBM'],\n          },\n        ],\n      ],\n    },\n  },\n  amazonSalesTaxes: {\n    id: 'amazonSalesTaxes',\n    title: 'Amazon Taxes',\n    shortTitle: 'Taxes',\n    chart: 'chartAmazonSalesTaxes',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'totalAmazonSalesTaxes',\n    services: ['amazon'],\n    icon: 'amazon',\n    tip: 'Amount customers paid in taxes. ',\n    providerId: 'amazon',\n    metric: 'taxes',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_taxes_amazon',\n      tableId: 'orders_table',\n      columnId: 'taxes',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          { column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['amazon'] },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBA', 'FBM'],\n          },\n        ],\n      ],\n    },\n  },\n  amazonOrders: {\n    id: 'amazonOrders',\n    shortTitle: 'Orders',\n    title: 'Amazon Orders',\n    chart: 'chartAmazonOrders',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'decimal',\n    metricId: 'totalAmazonOrders',\n    services: ['amazon'],\n    icon: 'amazon',\n    tip: 'Number of orders placed',\n    providerId: 'amazon',\n    metric: 'orders',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_orders_count_amazon',\n      tableId: 'orders_table',\n      columnId: 'order_id',\n      relatedProvider: 'amazon',\n      aggFunction: 'COUNT',\n      filter: [\n        [\n          { column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['amazon'] },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBA', 'FBM'],\n          },\n        ],\n      ],\n    },\n  },\n  amazonOrdersWithAmount: {\n    id: 'amazonOrdersWithAmount',\n    shortTitle: 'Amazon Orders > $0',\n    title: 'Amazon Orders > $0',\n    // chart: 'chartAmazonOrders',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'decimal',\n    metricId: 'amazonOrdersWithAmount',\n    services: ['amazon'],\n    icon: 'amazon',\n    tip: 'Number of Amazon Orders placed > $0',\n    providerId: 'amazon',\n    metric: 'orders',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_orders_count_with_amount_amazon',\n      tableId: 'orders_table',\n      columnId: 'order_id',\n      relatedProvider: 'amazon',\n      aggFunction: 'COUNT',\n      filter: [\n        [\n          { column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['amazon'] },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBA', 'FBM'],\n          },\n          {\n            column: { name: 'order_revenue', id: 'order_revenue' },\n            comparator: 'greater_than',\n            value: 0,\n          },\n        ],\n      ],\n    },\n  },\n  amazonItems: {\n    id: 'amazonItems',\n    title: 'Amazon Items Sold',\n    shortTitle: 'Items Sold',\n    chart: 'chartAmazonItems',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'decimal',\n    metricId: 'totalAmazonItems',\n    services: ['amazon'],\n    icon: 'amazon',\n    tip: 'Number of items sold',\n    providerId: 'amazon',\n    metric: 'itemsSold',\n    willyMetricId: '', // ????\n  },\n  amazonFees: {\n    id: 'amazonFees',\n    title: 'Amazon Estimated Fees',\n    chart: 'chartAmazonFees',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'totalAmazonFees',\n    services: ['amazon'],\n    icon: 'amazon',\n    tip: 'Estimated fees based on products purchased. This amount is an estimate and is not final until Amazon reports on actual fees',\n    providerId: 'amazon',\n    // metric: 'fees',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_amazon_estimated_fees_amazon',\n      tableId: 'orders_table',\n      columnId: 'amazon_estimated_fees',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          { column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['amazon'] },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBA', 'FBM'],\n          },\n        ],\n      ],\n    },\n  },\n  amazonSalesAFN: {\n    id: 'amazonSalesAFN',\n    title: 'FBA Amazon Sales',\n    shortTitle: 'FBA Sales',\n    chart: 'chartAmazonSalesAFN',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'totalAmazonSalesAFN',\n    services: ['amazon'],\n    icon: 'amazon',\n    tip: 'Gross sales value sold in Amazon fulfillment network. What the customer paid for the order including shipping, taxes, discounts',\n    providerId: 'amazon',\n    // metric: 'amazonSalesAFN',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_order_revenue_amazon_fba',\n      tableId: 'orders_table',\n      columnId: 'order_revenue',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'platform', id: 'platform' },\n            comparator: 'is_in',\n            value: ['amazon'],\n          },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBA'],\n          },\n        ],\n      ],\n    },\n  },\n  amazonProductItemPriceAFN: {\n    id: 'amazonProductItemPriceAFN',\n    title: 'FBA Amazon Product Sales',\n    shortTitle: 'FBA Product Sales',\n    chart: 'chartAmazonProductItemPriceAFN',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'totalAmazonProductItemPriceAFN',\n    services: ['amazon'],\n    icon: 'amazon',\n    tip: 'Ordered product sales in Amazon fulfillment network. This is what Amazon shows in the financial report',\n    providerId: 'amazon',\n    // metric: 'amazonProductItemPriceAFN',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_gross_product_sales_amazon_fba',\n      tableId: 'orders_table',\n      columnId: 'gross_product_sales',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          { column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['amazon'] },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBA'],\n          },\n        ],\n      ],\n    },\n  },\n  amazonSalesTaxesAFN: {\n    id: 'amazonSalesTaxesAFN',\n    title: 'FBA Amazon Taxes',\n    shortTitle: 'FBA Taxes',\n    chart: 'chartAmazonSalesTaxesAFN',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'totalAmazonSalesTaxesAFN',\n    services: ['amazon'],\n    icon: 'amazon',\n    tip: 'Amount customers paid in taxes on orders placed in Amazon fulfillment network',\n    providerId: 'amazon',\n    // metric: 'amazonSalesTaxesAFN',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_taxes_amazon_fba',\n      tableId: 'orders_table',\n      columnId: 'taxes',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          { column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['amazon'] },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBA'],\n          },\n        ],\n      ],\n    },\n  },\n  amazonOrdersAFN: {\n    id: 'amazonOrdersAFN',\n    title: 'FBA Amazon Orders',\n    shortTitle: 'FBA Orders',\n    chart: 'chartAmazonOrdersAFN',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'decimal',\n    metricId: 'totalAmazonOrdersAFN',\n    services: ['amazon'],\n    icon: 'amazon',\n    tip: 'Number of orders placed in Amazon fulfillment network',\n    providerId: 'amazon',\n    // metric: 'amazonOrdersAFN',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_orders_count_amazon_fba',\n      tableId: 'orders_table',\n      columnId: 'order_id',\n      relatedProvider: 'amazon',\n      aggFunction: 'COUNT',\n      filter: [\n        [\n          { column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['amazon'] },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBA'],\n          },\n        ],\n      ],\n    },\n  },\n  amazonItemsAFN: {\n    id: 'amazonItemsAFN',\n    title: 'FBA Amazon Items Sold',\n    shortTitle: 'FBA Items Sold',\n    chart: 'chartAmazonItemsAFN',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'decimal',\n    metricId: 'totalAmazonItemsAFN',\n    services: ['amazon'],\n    icon: 'amazon',\n    tip: 'Number of items sold in Amazon fulfillment network',\n    providerId: 'amazon',\n    // metric: 'amazonItemsAFN',\n    willyMetricId: '', // ?????\n  },\n  amazonFeesAFN: {\n    id: 'amazonFeesAFN',\n    title: 'FBA Amazon Estimated Fees',\n    chart: 'chartAmazonFeesAFN',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'totalAmazonFeesAFN',\n    services: ['amazon'],\n    icon: 'amazon',\n    tip: 'Estimated fees based on products purchased in Amazon fulfillment network. This amount is an estimate and is not final until Amazon reports on actual fees',\n    providerId: 'amazon',\n    // metric: 'amazonFeesAFN',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_amazon_estimated_fees_amazon',\n      tableId: 'orders_table',\n      columnId: 'amazon_estimated_fees',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          { column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['amazon'] },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBA'],\n          },\n        ],\n      ],\n    },\n  },\n  amazonSalesMFN: {\n    id: 'amazonSalesMFN',\n    title: 'FBM Amazon Sales',\n    shortTitle: 'FBM Sales',\n    chart: 'chartAmazonSalesMFN',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'totalAmazonSalesMFN',\n    services: ['amazon'],\n    icon: 'amazon',\n    tip: 'Gross sales value sold in Merchant fulfillment network. What the customer paid for the order including shipping, taxes, discounts',\n    providerId: 'amazon',\n    // metric: 'amazonSalesMFN',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_order_revenue_amazon_fbm',\n      tableId: 'orders_table',\n      columnId: 'order_revenue',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'platform', id: 'platform' },\n            comparator: 'is_in',\n            value: ['amazon'],\n          },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBM'],\n          },\n        ],\n      ],\n    },\n  },\n  amazonProductItemPriceMFN: {\n    id: 'amazonProductItemPriceMFN',\n    title: 'FBM Amazon Product Sales',\n    shortTitle: 'FBM Product Sales',\n    chart: 'chartAmazonProductItemPriceMFN',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'totalAmazonProductItemPriceMFN',\n    services: ['amazon'],\n    icon: 'amazon',\n    tip: 'Ordered product sales in Merchant fulfillment network. This is what Amazon shows in the financial report',\n    providerId: 'amazon',\n    // metric: 'amazonProductItemPriceMFN',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_gross_product_sales_amazon_fbm',\n      tableId: 'orders_table',\n      columnId: 'gross_product_sales',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          { column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['amazon'] },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBM'],\n          },\n        ],\n      ],\n    },\n  },\n  amazonSalesTaxesMFN: {\n    id: 'amazonSalesTaxesMFN',\n    title: 'FBM Amazon Taxes',\n    shortTitle: 'FBM Taxes',\n    chart: 'chartAmazonSalesTaxesMFN',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'totalAmazonSalesTaxesMFN',\n    services: ['amazon'],\n    icon: 'amazon',\n    tip: 'Amount customers paid in taxes on orders placed in Merchant fulfillment network',\n    providerId: 'amazon',\n    // metric: 'amazonSalesTaxesMFN',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_taxes_amazon_fbm',\n      tableId: 'orders_table',\n      columnId: 'taxes',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          { column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['amazon'] },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBM'],\n          },\n        ],\n      ],\n    },\n  },\n  amazonOrdersMFN: {\n    id: 'amazonOrdersMFN',\n    title: 'FBM Amazon Orders',\n    shortTitle: 'FBM Orders',\n    chart: 'chartAmazonOrdersMFN',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'decimal',\n    metricId: 'totalAmazonOrdersMFN',\n    services: ['amazon'],\n    icon: 'amazon',\n    tip: 'Number of orders placed in Merchant fulfillment network',\n    providerId: 'amazon',\n    // metric: 'amazonOrdersMFN',\n    willyMetricId: '', // ???\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_orders_count_amazon_fbm',\n      tableId: 'orders_table',\n      columnId: 'order_id',\n      relatedProvider: 'amazon',\n      aggFunction: 'COUNT',\n      filter: [\n        [\n          { column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['amazon'] },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBM'],\n          },\n        ],\n      ],\n    },\n  },\n  amazonItemsMFN: {\n    id: 'amazonItemsMFN',\n    title: 'FBM Amazon Items Sold',\n    shortTitle: 'FBM Items Sold',\n    chart: 'chartAmazonItemsMFN',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'decimal',\n    metricId: 'totalAmazonItemsMFN',\n    services: ['amazon'],\n    icon: 'amazon',\n    tip: 'Number of items sold in Merchant fulfillment network',\n    providerId: 'amazon',\n    // metric: 'amazonItemsMFN',\n    willyMetricId: '',\n  },\n  amazonFeesMFN: {\n    id: 'amazonFeesMFN',\n    title: 'FBM Amazon Estimated Fees',\n    chart: 'chartAmazonFeesMFN',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'totalAmazonFeesMFN',\n    services: ['amazon'],\n    icon: 'amazon',\n    tip: 'Estimated fees based on products purchased in Merchant fulfillment network. This amount is an estimate and is not final until Amazon reports on actual fees',\n    providerId: 'amazon',\n    // metric: 'amazonFeesMFN',\n    willyMetricId: '', // ??????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_amazon_estimated_fees_amazon',\n      tableId: 'orders_table',\n      columnId: 'amazon_estimated_fees',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          { column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['amazon'] },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBM'],\n          },\n        ],\n      ],\n    },\n  },\n  canceledAmazonSales: {\n    id: 'canceledAmazonSales',\n    title: 'Canceled Sales',\n    chart: 'chartCanceledAmazonSales',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'totalCanceledAmazonSales',\n    services: ['amazon'],\n    icon: 'amazon',\n    tip: 'Value of canceled orders',\n    providerId: 'amazon',\n    // metric: 'canceledAmazonSales',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_order_revenue_amazon_canceled',\n      tableId: 'orders_table',\n      columnId: 'order_revenue',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          { column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['amazon'] },\n          {\n            column: { name: 'amazon_fulfillment_status', id: 'amazon_fulfillment_status' },\n            comparator: 'is_in',\n            value: ['Canceled'],\n          },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBA', 'FBM'],\n          },\n        ],\n      ],\n    },\n  },\n  canceledAmazonProductItemPrice: {\n    id: 'canceledAmazonProductItemPrice',\n    title: 'Canceled Amazon Product Sales',\n    shortTitle: 'Canceled Product Sales',\n    chart: 'chartCanceledAmazonProductItemPrice',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'totalCanceledAmazonProductItemPrice',\n    services: ['amazon'],\n    icon: 'amazon',\n    tip: 'Canceled ordered product sales',\n    providerId: 'amazon',\n    // metric: 'canceledAmazonProductItemPrice',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_gross_product_sales_amazon_canceled',\n      tableId: 'orders_table',\n      columnId: 'gross_product_sales',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          { column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['amazon'] },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBA', 'FBM'],\n          },\n          {\n            column: { name: 'amazon_fulfillment_status', id: 'amazon_fulfillment_status' },\n            comparator: 'is_in',\n            value: ['Canceled'],\n          },\n        ],\n      ],\n    },\n  },\n  canceledAmazonSalesTaxes: {\n    id: 'canceledAmazonSalesTaxes',\n    title: 'Canceled Taxes',\n    chart: 'chartCanceledAmazonSalesTaxes',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'totalCanceledAmazonSalesTaxes',\n    services: ['amazon'],\n    icon: 'amazon',\n    providerId: 'amazon',\n    // metric: 'canceledAmazonSalesTaxes',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_taxes_amazon_canceled',\n      tableId: 'orders_table',\n      columnId: 'taxes',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          { column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['amazon'] },\n          {\n            column: { name: 'amazon_fulfillment_status', id: 'amazon_fulfillment_status' },\n            comparator: 'is_in',\n            value: ['Canceled'],\n          },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBA', 'FBM'],\n          },\n        ],\n      ],\n    },\n  },\n  canceledAmazonOrders: {\n    id: 'canceledAmazonOrders',\n    title: 'Canceled Orders',\n    chart: 'chartCanceledAmazonOrders',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'decimal',\n    metricId: 'totalCanceledAmazonOrders',\n    services: ['amazon'],\n    icon: 'amazon',\n    tip: 'Number of canceled orders',\n    providerId: 'amazon',\n    // metric: 'canceledAmazonOrders',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_orders_count_amazon_canceled',\n      tableId: 'orders_table',\n      columnId: 'order_id',\n      relatedProvider: 'amazon',\n      aggFunction: 'COUNT',\n      filter: [\n        [\n          { column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['amazon'] },\n          {\n            column: { name: 'amazon_fulfillment_status', id: 'amazon_fulfillment_status' },\n            comparator: 'is_in',\n            value: ['Canceled'],\n          },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBA', 'FBM'],\n          },\n        ],\n      ],\n    },\n  },\n  canceledAmazonItems: {\n    id: 'canceledAmazonItems',\n    title: 'Canceled Items Sold',\n    chart: 'chartCanceledAmazonItems',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'decimal',\n    metricId: 'totalCanceledAmazonItems',\n    services: ['amazon'],\n    icon: 'amazon',\n    providerId: 'amazon',\n    // metric: 'canceledAmazonItems',\n    willyMetricId: '',\n  },\n  canceledAmazonFees: {\n    id: 'canceledAmazonFees',\n    title: 'Canceled Amazon Fees',\n    chart: 'chartCanceledAmazonFees',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'totalCanceledAmazonFees',\n    services: ['amazon'],\n    icon: 'amazon',\n    providerId: 'amazon',\n    // metric: 'canceledAmazonFees',\n    willyMetricId: '',\n  },\n  canceledAmazonSalesAFN: {\n    id: 'canceledAmazonSalesAFN',\n    title: 'Canceled FBA Sales',\n    chart: 'chartCanceledAmazonSalesAFN',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'totalCanceledAmazonSalesAFN',\n    services: ['amazon'],\n    icon: 'amazon',\n    tip: 'Value of canceled orders from Amazon fulfillment network',\n    providerId: 'amazon',\n    // metric: 'canceledAmazonSalesAFN',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_order_revenue_amazon_canceled_fba',\n      tableId: 'orders_table',\n      columnId: 'order_revenue',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'platform', id: 'platform' },\n            comparator: 'is_in',\n            value: ['amazon'],\n          },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBA'],\n          },\n          {\n            column: { name: 'amazon_fulfillment_status', id: 'amazon_fulfillment_status' },\n            comparator: 'is_in',\n            value: ['Canceled'],\n          },\n        ],\n      ],\n    },\n  },\n  canceledAmazonProductItemPriceAFN: {\n    id: 'canceledAmazonProductItemPriceAFN',\n    title: 'Canceled FBA Amazon Product Sales',\n    shortTitle: 'Canceled FBA Product Sales',\n    chart: 'chartCanceledAmazonProductItemPriceAFN',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'totalCanceledAmazonProductItemPriceAFN',\n    services: ['amazon'],\n    icon: 'amazon',\n    tip: 'Canceled ordered product sales in Amazon fulfillment network',\n    providerId: 'amazon',\n    // metric: 'canceledAmazonProductItemPriceAFN',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_gross_product_sales_amazon_canceled_fba',\n      tableId: 'orders_table',\n      columnId: 'gross_product_sales',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          { column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['amazon'] },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBA'],\n          },\n          {\n            column: { name: 'amazon_fulfillment_status', id: 'amazon_fulfillment_status' },\n            comparator: 'is_in',\n            value: ['Canceled'],\n          },\n        ],\n      ],\n    },\n  },\n  canceledAmazonSalesTaxesAFN: {\n    id: 'canceledAmazonSalesTaxesAFN',\n    title: 'Canceled FBA Taxes',\n    chart: 'chartCanceledAmazonSalesTaxesAFN',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'totalCanceledAmazonSalesTaxesAFN',\n    services: ['amazon'],\n    icon: 'amazon',\n    providerId: 'amazon',\n    // metric: 'canceledAmazonSalesTaxesAFN',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_taxes_amazon_canceled_fba',\n      tableId: 'orders_table',\n      columnId: 'taxes',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          { column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['amazon'] },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBA'],\n          },\n          {\n            column: { name: 'amazon_fulfillment_status', id: 'amazon_fulfillment_status' },\n            comparator: 'is_in',\n            value: ['Canceled'],\n          },\n        ],\n      ],\n    },\n  },\n  canceledAmazonOrdersAFN: {\n    id: 'canceledAmazonOrdersAFN',\n    title: 'Canceled FBA Orders',\n    chart: 'chartCanceledAmazonOrdersAFN',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'decimal',\n    metricId: 'totalCanceledAmazonOrdersAFN',\n    services: ['amazon'],\n    icon: 'amazon',\n    tip: 'Number of canceled orders from Amazon fulfillment network',\n    providerId: 'amazon',\n    // metric: 'canceledAmazonOrdersAFN',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_orders_count_amazon_canceled_fba',\n      tableId: 'orders_table',\n      columnId: 'order_id',\n      relatedProvider: 'amazon',\n      aggFunction: 'COUNT',\n      filter: [\n        [\n          { column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['amazon'] },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBA'],\n          },\n          {\n            column: { name: 'amazon_fulfillment_status', id: 'amazon_fulfillment_status' },\n            comparator: 'is_in',\n            value: ['Canceled'],\n          },\n        ],\n      ],\n    },\n  },\n  canceledAmazonItemsAFN: {\n    id: 'canceledAmazonItemsAFN',\n    title: 'Canceled FBA Items Sold',\n    chart: 'chartCanceledAmazonItemsAFN',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'decimal',\n    metricId: 'totalCanceledAmazonItemsAFN',\n    services: ['amazon'],\n    icon: 'amazon',\n    providerId: 'amazon',\n    // metric: 'canceledAmazonItemsAFN',\n    willyMetricId: '',\n  },\n  canceledAmazonFeesAFN: {\n    id: 'canceledAmazonFeesAFN',\n    title: 'Canceled FBA Amazon Fees',\n    chart: 'chartCanceledAmazonFeesAFN',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'totalCanceledAmazonFeesAFN',\n    services: ['amazon'],\n    icon: 'amazon',\n    providerId: 'amazon',\n    // metric: 'canceledAmazonFeesAFN',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_amazon_estimated_fees_amazon',\n      tableId: 'orders_table',\n      columnId: 'amazon_estimated_fees',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          { column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['amazon'] },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBA'],\n          },\n          {\n            column: { name: 'amazon_fulfillment_status', id: 'amazon_fulfillment_status' },\n            comparator: 'is_in',\n            value: ['Canceled'],\n          },\n        ],\n      ],\n    },\n  },\n  canceledAmazonSalesMFN: {\n    id: 'canceledAmazonSalesMFN',\n    shortTitle: 'Canceled FBM Sales',\n    title: 'Canceled FBM Amazon Sales',\n    chart: 'chartCanceledAmazonSalesMFN',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'totalCanceledAmazonSalesMFN',\n    services: ['amazon'],\n    icon: 'amazon',\n    tip: 'Value of canceled orders from Merchant fulfillment network',\n    providerId: 'amazon',\n    // metric: 'canceledAmazonSalesMFN',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_tableorder_revenue_amazon_canceled_fbm',\n      tableId: 'orders_table',\n      columnId: 'order_revenue',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'platform', id: 'platform' },\n            comparator: 'is_in',\n            value: ['amazon'],\n          },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBM'],\n          },\n          {\n            column: { name: 'amazon_fulfillment_status', id: 'amazon_fulfillment_status' },\n            comparator: 'is_in',\n            value: ['Canceled'],\n          },\n        ],\n      ],\n    },\n  },\n  canceledAmazonProductItemPriceMFN: {\n    id: 'canceledAmazonProductItemPriceMFN',\n    title: 'Canceled FBM Amazon Product Sales',\n    shortTitle: 'Canceled FBM Product Sales',\n    chart: 'chartCanceledAmazonProductItemPriceMFN',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'totalCanceledAmazonProductItemPriceMFN',\n    services: ['amazon'],\n    icon: 'amazon',\n    tip: 'Canceled ordered product sales in Merchant fulfillment network',\n    providerId: 'amazon',\n    // metric: 'canceledAmazonProductItemPriceMFN',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_gross_product_sales_amazon_fbm',\n      tableId: 'orders_table',\n      columnId: 'gross_product_sales',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          { column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['amazon'] },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBM'],\n          },\n          {\n            column: { name: 'amazon_fulfillment_status', id: 'amazon_fulfillment_status' },\n            comparator: 'is_in',\n            value: ['Canceled'],\n          },\n        ],\n      ],\n    },\n  },\n  canceledAmazonSalesTaxesMFN: {\n    id: 'canceledAmazonSalesTaxesMFN',\n    shortTitle: 'Canceled FBM Taxes',\n    title: 'Canceled FBM Amazon Taxes',\n    chart: 'chartCanceledAmazonSalesTaxesMFN',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'totalCanceledAmazonSalesTaxesMFN',\n    services: ['amazon'],\n    icon: 'amazon',\n    providerId: 'amazon',\n    // metric: 'canceledAmazonSalesTaxesMFN',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_taxes_amazon_canceled_fbm',\n      tableId: 'orders_table',\n      columnId: 'taxes',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          { column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['amazon'] },\n          {\n            column: { name: 'amazon_fulfillment_status', id: 'amazon_fulfillment_status' },\n            comparator: 'is_in',\n            value: ['Canceled'],\n          },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBM'],\n          },\n        ],\n      ],\n    },\n  },\n  canceledAmazonOrdersMFN: {\n    id: 'canceledAmazonOrdersMFN',\n    shortTitle: 'Canceled FBM Orders',\n    title: 'Canceled FBM Amazon Orders',\n    chart: 'chartCanceledAmazonOrdersMFN',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'decimal',\n    metricId: 'totalCanceledAmazonOrdersMFN',\n    services: ['amazon'],\n    icon: 'amazon',\n    tip: 'Number of canceled orders from Merchant fulfillment network',\n    providerId: 'amazon',\n    // metric: 'canceledAmazonOrdersMFN',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_orders_count_amazon_canceled_fbm',\n      tableId: 'orders_table',\n      columnId: 'order_id',\n      relatedProvider: 'amazon',\n      aggFunction: 'COUNT',\n      filter: [\n        [\n          { column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['amazon'] },\n          {\n            column: { name: 'amazon_fulfillment_status', id: 'amazon_fulfillment_status' },\n            comparator: 'is_in',\n            value: ['Canceled'],\n          },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBM'],\n          },\n        ],\n      ],\n    },\n  },\n  canceledAmazonItemsMFN: {\n    id: 'canceledAmazonItemsMFN',\n    shortTitle: 'Canceled FBM Items Sold',\n    title: 'Canceled FBM Amazon Items Sold',\n    chart: 'chartCanceledAmazonItemsMFN',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'decimal',\n    metricId: 'totalCanceledAmazonItemsMFN',\n    services: ['amazon'],\n    icon: 'amazon',\n    isMinutes: false,\n    providerId: 'amazon',\n    // metric: 'canceledAmazonItemsMFN',\n    willyMetricId: '',\n  },\n  canceledAmazonFeesMFN: {\n    id: 'canceledAmazonFeesMFN',\n    shortTitle: 'Canceled FBM Fees',\n    title: 'Canceled FBM Amazon Fees',\n    chart: 'chartCanceledAmazonFeesMFN',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'totalCanceledAmazonFeesMFN',\n    services: ['amazon'],\n    icon: 'amazon',\n    providerId: 'amazon',\n    // metric: 'canceledAmazonFeesMFN',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_amazon_estimated_fees_amazon',\n      tableId: 'orders_table',\n      columnId: 'amazon_estimated_fees',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          { column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['amazon'] },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBM'],\n          },\n          {\n            column: { name: 'amazon_fulfillment_status', id: 'amazon_fulfillment_status' },\n            comparator: 'is_in',\n            value: ['Canceled'],\n          },\n        ],\n      ],\n    },\n  },\n  amazonAds: {\n    id: 'amazonAds',\n    shortTitle: 'Ads',\n    title: 'Amazon Ads',\n    reportTitle: 'Amazon Ads Spend',\n    chart: 'chartAmazonAds',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'amazonAds',\n    services: ['amazon'],\n    icon: 'amazon',\n    isMinutes: false,\n    tip: 'Ads = Ad spend',\n    providerId: 'amazon',\n    metric: 'spend',\n    willyMetricId: 'ads_table_spend_amazon',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_spend_amazon',\n      tableId: 'ads_table',\n      columnId: 'spend',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [{ column: { name: 'channel', id: 'channel' }, comparator: 'is_in', value: ['amazon'] }],\n      ],\n    },\n  },\n  amazonROAS: {\n    id: 'amazonROAS',\n    shortTitle: 'ROAS',\n    title: 'Amazon ROAS',\n    color: '#7D4DFF',\n    valueToFixed: 2,\n    type: 'decimal',\n    metricId: 'amazonROAS',\n    chart: 'amazonRoasChart',\n    services: ['amazon'],\n    icon: 'amazon',\n    isMinutes: false,\n    tip: 'Return On Ad Spend',\n    providerId: 'amazon',\n    metric: 'roas',\n    isSupportCumulative: false,\n    willyMetricId: 'ads_table_roas_amazon',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_roas_amazon',\n      relatedProvider: 'amazon',\n      expression: [\n        {\n          title: 'Conversion Value',\n          value: 'ads_table_conversion_value_amazon',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_amazon',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  amazonCPC: {\n    id: 'amazonCPC',\n    shortTitle: 'CPC',\n    title: 'Amazon CPC',\n    color: '#7D4DFF',\n    valueToFixed: 2,\n    type: 'currency',\n    metricId: 'amazonCPC',\n    services: ['amazon'],\n    icon: 'amazon',\n    isMinutes: false,\n    chart: 'chartAmazonCPC',\n    tip: 'Cost Per Click',\n    providerId: 'amazon',\n    metric: 'cpc',\n    willyMetricId: 'ads_table_cpc_amazon',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_cpc_amazon',\n      relatedProvider: 'amazon',\n      expression: [\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_amazon',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Clicks',\n          value: 'ads_table_clicks_amazon',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  amazonClicks: {\n    id: 'amazonClicks',\n    shortTitle: 'Clicks',\n    title: 'Amazon Clicks',\n    chart: 'chartAmazonClicks',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'decimal',\n    metricId: 'amazonClicks',\n    services: ['amazon'],\n    icon: 'amazon',\n    isMinutes: false,\n    tip: 'Total number of clicks',\n    providerId: 'amazon',\n    metric: 'clicks',\n    willyMetricId: 'ads_table_clicks_amazon_ads',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_clicks_amazon',\n      tableId: 'ads_table',\n      columnId: 'clicks',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [{ column: { name: 'channel', id: 'channel' }, comparator: 'is_in', value: ['amazon'] }],\n      ],\n    },\n  },\n  amazonPurchases: {\n    id: 'amazonPurchases',\n    shortTitle: 'Purchases',\n    title: 'Amazon Purchases',\n    chart: 'chartAmazonPurchases',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'decimal',\n    metricId: 'amazonPurchases',\n    services: ['amazon'],\n    icon: 'amazon',\n    isMinutes: false,\n    tip: 'Number of Amazon Orders attributed to Amazon advertising campaigns',\n    providerId: 'amazon',\n    metric: 'purchases',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_conversions_amazon',\n      tableId: 'ads_table',\n      columnId: 'conversions',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [{ column: { name: 'channel', id: 'channel' }, comparator: 'is_in', value: ['amazon'] }],\n      ],\n    },\n  },\n  amazonTACos: {\n    id: 'amazonTACos',\n    shortTitle: 'TACoS',\n    title: 'Amazon TACoS',\n    // chart: 'chartCanceledAmazonItemsMFN',\n    color: '#7D4DFF',\n    valueToFixed: 2,\n    type: 'percent',\n    metricId: 'amazonTACos',\n    services: ['amazon'],\n    icon: 'amazon',\n    isMinutes: false,\n    tip: 'Total advertising cost of sales: (Amazon Advertising Spend / Amazon Total Revenue) x 100',\n    providerId: 'amazon',\n    // metric: 'tacos',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'tacos_amazon',\n      relatedProvider: 'amazon',\n      expression: [\n        {\n          title: 'Amazon Ads Spend',\n          value: 'ads_table_spend_amazon',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Amazon Product Price',\n          value: 'orders_table_gross_product_sales_amazon',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  amazonAdsConversionValue: {\n    id: 'amazonAdsConversionValue',\n    shortTitle: 'Ads Conversion Value',\n    title: 'Amazon Conversion Value',\n    chart: 'amazonConversionValueChart',\n    color: '#7D4DFF',\n    valueToFixed: 2,\n    type: 'currency',\n    metricId: 'amazonAdsConversionValue',\n    services: ['amazon'],\n    icon: 'amazon',\n    isMinutes: false,\n    tip: 'Amazon reported revenue attributed from your ads',\n    providerId: 'amazon',\n    metric: 'conversionValue',\n    willyMetricId: 'ads_table_conversion_value_amazon',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_conversion_value_amazon',\n      tableId: 'ads_table',\n      columnId: 'conversion_value',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [{ column: { name: 'channel', id: 'channel' }, comparator: 'is_in', value: ['amazon'] }],\n      ],\n    },\n  },\n  amazonNetSales: {\n    id: 'amazonNetSales',\n    shortTitle: 'Net Sales',\n    title: 'Amazon Net Sales',\n    chart: 'chartAmazonNetSales',\n    color: '#7D4DFF',\n    valueToFixed: 2,\n    type: 'currency',\n    metricId: 'amazonNetSales',\n    services: ['amazon'],\n    icon: 'amazon',\n    isMinutes: false,\n    tip: 'Gross sales - shipping - taxes + shipping discounts',\n    providerId: 'amazon',\n    metric: 'netSales',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'orders_table_net_sales_amazon',\n      relatedProvider: 'amazon',\n      expression: [\n        {\n          title: 'Gross Sales',\n          value: 'orders_table_gross_product_sales_amazon',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Shipping Price',\n          value: 'orders_table_shipping_price_amazon',\n          type: ElementTypes.METRIC,\n        },\n        // {\n        //   title: '+',\n        //   value: '+',\n        //   type: ElementTypes.OPERATOR,\n        // },\n        // {\n        //   title: 'Shipping Discount', // doesnt exist in willy\n        //   value: 'orders_table_shipping_discount_amazon',\n        //   type: ElementTypes.METRIC,\n        // },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Taxes',\n          value: 'orders_table_taxes_amazon',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  amazonNetProfit: {\n    id: 'amazonNetProfit',\n    shortTitle: 'Net Profit',\n    title: 'Amazon Net Profit',\n    chart: 'cahrtAmazonNetProfit',\n    color: '#7D4DFF',\n    valueToFixed: 2,\n    type: 'currency',\n    metricId: 'amazonNetProfit',\n    services: ['amazon'],\n    icon: 'amazon',\n    isMinutes: false,\n    tip: 'Net sales - Expenses (COGS, handling fees, amazon estimated fees, Amazon Ad spend)',\n    providerId: 'amazon',\n    metric: 'netProfit',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'net_profit_amazon',\n      relatedProvider: 'amazon',\n      expression: [\n        {\n          title: 'Net Sales',\n          value: 'orders_table_net_sales_amazon',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Expenses',\n          value: 'expenses_amazon',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  // 'amazonROAS',\n  totalAmazonShippingPrice: {\n    id: 'totalAmazonShippingPrice',\n    shortTitle: 'Shipping Price',\n    title: 'Amazon Shipping Price',\n    color: '#7D4DFF',\n    valueToFixed: 2,\n    type: 'currency',\n    metricId: 'totalAmazonShippingPrice',\n    services: ['amazon'],\n    icon: 'amazon',\n    isMinutes: false,\n    tip: 'Total Amazon shipping price',\n    providerId: 'amazon',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_shipping_price_amazon',\n      tableId: 'orders_table',\n      columnId: 'shipping_price',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [{ column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['amazon'] }],\n      ],\n    },\n  },\n  totalAmazonShippingDiscount: {\n    id: 'totalAmazonShippingDiscount',\n    shortTitle: 'Shipping Discount',\n    title: 'Amazon Shipping Discount',\n    color: '#7D4DFF',\n    valueToFixed: 2,\n    type: 'currency',\n    metricId: 'totalAmazonShippingDiscount',\n    services: ['amazon'],\n    icon: 'amazon',\n    isMinutes: false,\n    tip: 'Total Amazon shipping discount',\n    providerId: 'amazon',\n    willyMetricId: '',\n    // doesnt exist in willy\n    // willyConfig: {\n    //   isCustomMetric: false,\n    //   id: 'orders_table_shipping_discount_amazon',\n    //   tableId: 'orders_table',\n    //   columnId: 'shipping_discount',\n    //   relatedProvider: 'amazon',\n    //   aggFunction: 'SUM',\n    //   filter: [\n    //     [{ column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['amazon'] }],\n    //   ],\n    // },\n  },\n  amazonMER: {\n    id: 'amazonMER',\n    shortTitle: 'MER',\n    title: 'Amazon MER',\n    chart: 'amazonMERChart',\n    color: '#7D4DFF',\n    valueToFixed: 2,\n    type: 'percent',\n    metricId: 'amazonMER',\n    services: ['amazon'],\n    icon: 'amazon',\n    isMinutes: false,\n    tip: 'Percentage of sales spent on ads',\n    providerId: 'amazon',\n    metric: 'marketingEfficiencyRatio',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'orders_table_mer_amazon',\n      relatedProvider: 'amazon',\n      expression: [\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_amazon',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          // this is missing shipping discount\n          title: 'Net Sales',\n          value: 'orders_table_net_sales_amazon',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  amazonAOV: {\n    id: 'amazonAOV',\n    shortTitle: 'AOV',\n    title: 'Amazon AOV',\n    chart: 'amazonAOVChart',\n    color: '#7D4DFF',\n    valueToFixed: 2,\n    type: 'currency',\n    metricId: 'amazonAOV',\n    services: ['amazon'],\n    icon: 'amazon',\n    isMinutes: false,\n    tip: 'Average Order Value. Total Sales / Number of Orders > $0',\n    providerId: 'amazon',\n    metric: 'aov',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'orders_table_aov_amazon',\n      relatedProvider: 'amazon',\n      expression: [\n        {\n          title: '(',\n          value: '(',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: 'Order revenue',\n          value: 'orders_table_order_revenue_amazon',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Shipping Price',\n          value: 'orders_table_shipping_price_amazon',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Taxes',\n          value: 'orders_table_taxes_amazon',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: ')',\n          value: ')',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Orders',\n          value: 'orders_table_orders_count_amazon',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  amazonCPA: {\n    id: 'amazonCPA',\n    shortTitle: 'CPA',\n    title: 'Amazon CPA',\n    chart: 'amazonCPAChart',\n    color: '#7D4DFF',\n    valueToFixed: 2,\n    type: 'currency',\n    metricId: 'amazonCPA',\n    services: ['amazon'],\n    icon: 'amazon',\n    isMinutes: false,\n    tip: 'Cost Per Acquisition. Ad Spend / Orders > $0',\n    providerId: 'amazon',\n    metric: 'cpa',\n    willyMetricId: 'ads_table_cpa_amazon',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_cpa_amazon',\n      relatedProvider: 'amazon',\n      expression: [\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_amazon',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Orders',\n          value: 'orders_table_orders_count_amazon',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  amazonExpenses: {\n    id: 'amazonExpenses',\n    shortTitle: 'Expenses',\n    title: 'Amazon Expenses',\n    chart: 'amazonExpensesChart',\n    color: '#7D4DFF',\n    valueToFixed: 2,\n    type: 'currency',\n    metricId: 'amazonExpenses',\n    services: ['amazon'],\n    icon: 'amazon',\n    isMinutes: false,\n    tip: 'Amazon estimated fees + COGs + Handling fees + Ad Spend ',\n    providerId: 'amazon',\n    // metric: 'expenses',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'expenses_amazon',\n      relatedProvider: 'amazon',\n      expression: [\n        {\n          title: 'Amazon Estimated Fees',\n          value: 'orders_table_amazon_estimated_fees_amazon',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '+',\n          value: '+',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Ads Spend',\n          value: 'ads_table_spend_amazon',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '+',\n          value: '+',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'COGs',\n          value: 'orders_table_cost_of_goods_amazon',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '+',\n          value: '+',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Handling Fees',\n          value: 'orders_table_handling_fees_amazon',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  amazonCogs: {\n    id: 'amazonCogs',\n    shortTitle: 'COGS',\n    title: 'Amazon COGS',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'amazonCogs',\n    services: ['amazon'],\n    icon: 'amazon',\n    isMinutes: false,\n    tip: 'Cost of Goods Sold',\n    providerId: 'amazon',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_cost_of_goods_amazon',\n      tableId: 'orders_table',\n      columnId: 'cost_of_goods',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'platform', id: 'platform' },\n            comparator: 'is_in',\n            value: ['amazon'],\n          },\n        ],\n      ],\n    },\n  },\n  amazonHandlingFees: {\n    id: 'amazonHandlingFees',\n    shortTitle: 'Handling Fees',\n    title: 'Amazon Handling Fees',\n    color: '#7D4DFF',\n    valueToFixed: 2,\n    type: 'currency',\n    metricId: 'amazonHandlingFees',\n    services: ['amazon'],\n    icon: 'amazon',\n    isMinutes: false,\n    tip: 'Amazon handling fees',\n    providerId: 'amazon',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_handling_fees_amazon',\n      tableId: 'orders_table',\n      columnId: 'handling_fees',\n      relatedProvider: 'amazon',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'platform', id: 'platform' },\n            comparator: 'is_in',\n            value: ['amazon'],\n          },\n          {\n            column: { name: 'amazon_fulfillment_channel', id: 'amazon_fulfillment_channel' },\n            comparator: 'is_in',\n            value: ['FBA', 'FBM'],\n          },\n        ],\n      ],\n    },\n  },\n  blendedSales: {\n    id: 'blendedSales',\n    title: 'Blended Sales',\n    chart: 'chartBlendedSales',\n    color: '#7D4DFF',\n    valueToFixed: 2,\n    type: 'currency',\n    metricId: 'blendedSales',\n    isShow: (state) =>\n      state.isAmazonConnectedNA || state.isAmazonConnectedEU || state.isAmazonConnectedFE,\n    services: ['amazon'],\n    icon: 'triple-whale-logo',\n    isMinutes: false,\n    tip: 'Shopify Total Revenue + Amazon Sales',\n    providerId: 'amazon',\n    // metric: 'blendedSales',\n    willyMetricId: '', // ????? related to amazon\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'orders_table_order_revenue',\n      relatedProvider: 'triple-whale',\n      expression:\n      [\n        {\n        title: 'Shopify Total Revenue',\n        value: 'orders_table_order_revenue_shopify',\n        type: ElementTypes.METRIC,\n        },\n        {\n        title: '+',\n        value: '+',\n        type: ElementTypes.OPERATOR,\n        },\n        {\n        title: 'Amazon Sales',\n        value: 'orders_table_gross_product_sales_amazon',\n        type: ElementTypes.METRIC,\n        }\n      ]\n    },\n  },\n  pixelPurchases: {\n    id: 'pixelPurchases',\n    title: 'Purchases',\n    chart: 'pixelPurchasesChart',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'decimal',\n    metricId: 'pixelPurchases',\n    services: ['pixel'],\n    icon: 'pixel',\n    providerId: 'triple-whale',\n    metric: 'pixelPurchases',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'pixel_orders_table_purchases_count',\n      tableId: 'pixel_orders_table',\n      columnId: 'order_id',\n      relatedProvider: 'pixel',\n      aggFunction: 'COUNT_DISTINCT',\n      filter: [\n        [\n          { column: { name: 'model', id: 'model' }, comparator: 'equals', value: ['lastPlatformClick'] },\n          {\n            column: { name: 'session_id', id: 'session_id' },\n            comparator: FilterComparator.IS_NOT_SET,\n          },\n        ],\n      ],\n    },\n  },\n  pixelUniqueAtc: {\n    id: 'pixelUniqueAtc',\n    title: 'Unique Add to Carts',\n    chart: 'pixelUniqueAtcChart',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'decimal',\n    metricId: 'pixelUniqueAtc',\n    services: ['pixel'],\n    icon: 'pixel',\n    providerId: 'triple-whale',\n    metric: 'pixelUniqueAtc',\n    willyMetricId: '',\n    // doesnt exist in defaultTileSections\n  },\n  pixelUniqueSessionsAtc: {\n    id: 'pixelUniqueSessionsAtc',\n    title: 'Sessions with Add to Carts',\n    chart: 'pixelUniqueSessionsAtcChart',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'decimal',\n    metricId: 'pixelUniqueSessionsAtc',\n    services: ['pixel'],\n    icon: 'pixel',\n    providerId: 'triple-whale',\n    //metric: 'pixelUniqueSessionsAtc',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'pixel_joined_table_add_to_carts',\n      tableId: 'pixel_joined_table',\n      columnId: 'add_to_carts',\n      relatedProvider: 'pixel',\n      aggFunction: 'SUM',\n    },\n  },\n  pixelVisitors: {\n    id: 'pixelVisitors',\n    title: 'Sessions',\n    chart: 'pixelVisitorsChart',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'decimal',\n    metricId: 'pixelVisitors',\n    services: ['pixel'],\n    icon: 'pixel',\n    tip: 'Total number of sessions',\n    providerId: 'triple-whale',\n    metric: 'pixelVisitors',\n    willyMetricId: '', // ????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'pixel_joined_table_sessions',\n      tableId: 'pixel_joined_table',\n      columnId: 'sessions',\n      relatedProvider: 'pixel',\n      aggFunction: 'SUM',\n    },\n  },\n  pixelUniqueVisitors: {\n    id: 'pixelUniqueVisitors',\n    title: 'Users',\n    chart: 'pixelUniqueVisitorsChart',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'decimal',\n    metricId: 'pixelUniqueVisitors',\n    services: ['pixel'],\n    icon: 'pixel',\n    tip: 'Unique users who visited your site',\n    providerId: 'triple-whale',\n    metric: 'pixelUniqueVisitors',\n    willyMetricId: 'pixel_joined_table_unique_visitors',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'pixel_joined_table_unique_visitors',\n      tableId: 'pixel_joined_table',\n      columnId: 'unique_visitors',\n      relatedProvider: 'pixel',\n      aggFunction: 'SUM',\n    },\n  },\n  pixelConversionRate: {\n    id: 'pixelConversionRate',\n    title: 'Conversion Rate',\n    chart: 'pixelConversionRateChart',\n    color: '#7D4DFF',\n    valueToFixed: 2,\n    type: 'percent',\n    metricId: 'pixelConversionRate',\n    services: ['pixel'],\n    icon: 'pixel',\n    tip: 'Website purchases / Sessions',\n    providerId: 'triple-whale',\n    metric: 'pixelConversionRate',\n    willyMetricId: 'pixel_joined_table_pixel_conversion_rate',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'pixel_joined_table_pixel_conversion_rate',\n      relatedProvider: 'pixel',\n      expression: [\n        {\n          title: 'Number Of Pixel Purchases',\n          value: 'pixel_orders_table_purchases_count',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Visitors',\n          value: 'pixel_joined_table_sessions',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  pixelPageViews: {\n    id: 'pixelPageViews',\n    title: 'Pixel Page Views',\n    color: '#7D4DFF',\n    valueToFixed: 2,\n    type: 'decimal',\n    metricId: 'pixelPageViews',\n    services: ['pixel'],\n    icon: 'pixel',\n    tip: 'Number of pages viewed',\n    providerId: 'triple-whale',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'pixel_joined_table_session_page_views',\n      tableId: 'pixel_joined_table',\n      columnId: 'session_page_views',\n      relatedProvider: 'pixel',\n      aggFunction: 'SUM',\n    },\n  },\n  pixelBounces: {\n    id: 'pixelBounces',\n    title: 'Pixel Bounces',\n    color: '#7D4DFF',\n    valueToFixed: 2,\n    type: 'decimal',\n    metricId: 'pixelBounces',\n    services: ['pixel'],\n    icon: 'pixel',\n    tip: 'Number of Bounces',\n    providerId: 'triple-whale',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'pixel_joined_table_bounces',\n      tableId: 'pixel_joined_table',\n      columnId: 'bounces',\n      relatedProvider: 'pixel',\n      aggFunction: 'SUM',\n    },\n  },\n  pixelTimeOnSite: {\n    id: 'pixelTimeOnSite',\n    title: 'Time on Site',\n    color: '#7D4DFF',\n    valueToFixed: 2,\n    type: 'duration',\n    metricId: 'pixelTimeOnSite',\n    services: ['pixel'],\n    icon: 'pixel',\n    tip: 'Total time spent on your site',\n    providerId: 'triple-whale',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'pixel_joined_table_time_on_site',\n      tableId: 'pixel_joined_table',\n      columnId: 'time_on_site',\n      relatedProvider: 'pixel',\n      aggFunction: 'SUM',\n    },\n  },\n  pixelAvgPagesPerSession: {\n    id: 'pixelAvgPagesPerSession',\n    title: 'Pages per Session',\n    chart: 'pixelAvgPagesPerSessionChart',\n    color: '#7D4DFF',\n    valueToFixed: 2,\n    type: 'decimal',\n    metricId: 'pixelAvgPagesPerSession',\n    services: ['pixel'],\n    icon: 'pixel',\n    tip: 'Average number of pages viewed per session',\n    providerId: 'triple-whale',\n    // metric: 'pixelAvgPagesPerSession',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'pixel_joined_table_avg_pages_per_session',\n      relatedProvider: 'pixel',\n      expression: [\n        {\n          title: 'Pixel Page Views',\n          value: 'pixel_joined_table_session_page_views',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Visitors',\n          value: 'pixel_joined_table_sessions',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  pixelAvgSessionDuration: {\n    id: 'pixelAvgSessionDuration',\n    title: 'Session Duration',\n    chart: 'pixelAvgSessionDurationChart',\n    color: '#7D4DFF',\n    valueToFixed: 2,\n    type: 'duration',\n    metricId: 'pixelAvgSessionDuration',\n    services: ['pixel'],\n    icon: 'pixel',\n    tip: 'Average duration of a session',\n    providerId: 'triple-whale',\n    // metric: 'pixelAvgSessionDuration',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'pixel_joined_table_avg_session_duration',\n      relatedProvider: 'pixel',\n      expression: [\n        {\n          title: 'Time on Site',\n          value: 'pixel_joined_table_time_on_site',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Visitors',\n          value: 'pixel_joined_table_sessions',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  pixelBounceRate: {\n    id: 'pixelBounceRate',\n    title: 'Bounce Rate',\n    chart: 'pixelBounceRateChart',\n    color: '#7D4DFF',\n    valueToFixed: 2,\n    type: 'percent',\n    metricId: 'pixelBounceRate',\n    services: ['pixel'],\n    icon: 'pixel',\n    tip: 'Percentage of sessions that bounce (leave your site after viewing only one page)',\n    providerId: 'triple-whale',\n    metric: 'pixelBounceRate',\n    willyMetricId: 'pixel_joined_table_bounce_rate',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'pixel_joined_table_bounce_rate',\n      relatedProvider: 'pixel',\n      expression: [\n        {\n          title: 'Bounces',\n          value: 'pixel_joined_table_bounces',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Visitors',\n          value: 'pixel_joined_table_sessions',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  pixelNewVisitors: {\n    id: 'pixelNewVisitors',\n    title: 'New Users',\n    chart: 'pixelNewVisitorsChart',\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'decimal',\n    metricId: 'pixelNewVisitors',\n    services: ['pixel'],\n    icon: 'pixel',\n    tip: 'Users who visited your site for the first time',\n    providerId: 'triple-whale',\n    metric: 'pixelNewVisitors',\n    willyMetricId: 'pixel_joined_table_new_visitors',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'pixel_joined_table_new_visitors',\n      tableId: 'pixel_joined_table',\n      columnId: 'new_visitors',\n      relatedProvider: 'pixel',\n      aggFunction: 'SUM',\n    },\n  },\n  pixelPercentNewVisitors: {\n    id: 'pixelPercentNewVisitors',\n    title: 'New Users %',\n    chart: 'pixelPercentNewVisitorsChart',\n    color: '#7D4DFF',\n    valueToFixed: 2,\n    type: 'percent',\n    metricId: 'pixelPercentNewVisitors',\n    services: ['pixel'],\n    icon: 'pixel',\n    tip: 'Percentage of new users (New Users / Users)',\n    providerId: 'triple-whale',\n    metric: 'pixelNewVisitorPerc',\n    willyMetricId: 'pixel_joined_table_pixel_new_visitor_percent',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'pixel_joined_table_pixel_new_visitor_percent',\n      relatedProvider: 'pixel',\n      expression: [\n        {\n          title: 'New Users',\n          value: 'pixel_joined_table_new_visitors',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Users',\n          value: 'pixel_joined_table_unique_visitors',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  pixelPercentAtc: {\n    id: 'pixelPercentAtc',\n    title: 'Add to Cart %',\n    chart: 'pixelPercentAtcChart',\n    color: '#7D4DFF',\n    valueToFixed: 2,\n    type: 'percent',\n    metricId: 'pixelPercentAtc',\n    services: ['pixel'],\n    icon: 'pixel',\n    tip: 'Percentage of sessions with add to carts (Add to Carts / Sessions)',\n    providerId: 'triple-whale',\n    // metric: 'pixelPercentAtc',\n    willyMetricId: '', // ??????\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'pixel_joined_table_pixel_add_to_cart_percent',\n      relatedProvider: 'pixel',\n      expression: [\n        {\n          title: 'Add to Carts',\n          value: 'pixel_joined_table_add_to_carts',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Sessions',\n          value: 'pixel_joined_table_sessions',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  pixelCostPerSession: {\n    id: 'pixelCostPerSession',\n    title: 'Cost per Session',\n    chart: 'pixelCostPerSessionChart',\n    color: '#7D4DFF',\n    valueToFixed: 2,\n    type: 'currency',\n    metricId: 'pixelCostPerSession',\n    services: ['pixel'],\n    icon: 'pixel',\n    tip: 'Cost per session (Spend / Sessions)',\n    providerId: 'triple-whale',\n    // metric: 'pixelCostPerSession',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'pixel_joined_table_pixel_cost_per_session',\n      relatedProvider: 'pixel',\n      expression: [\n        {\n          title: 'Spend',\n          value: 'spend_without_custom',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Visitors',\n          value: 'pixel_joined_table_sessions',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  pixelCostPerAtc: {\n    id: 'pixelCostPerAtc',\n    title: 'Cost per Add to Cart',\n    chart: 'pixelCostPerAtcChart',\n    color: '#7D4DFF',\n    valueToFixed: 2,\n    type: 'currency',\n    metricId: 'pixelCostPerAtc',\n    services: ['pixel'],\n    icon: 'pixel',\n    tip: 'Cost per add to cart (Spend / Add to Carts)',\n    providerId: 'triple-whale',\n    metric: 'pixelCostPerAtc',\n    willyMetricId: 'pixel_joined_table_pixel_cost_per_add_to_cart', // ?????\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'pixel_joined_table_pixel_cost_per_add_to_cart',\n      relatedProvider: 'pixel',\n      expression: [\n        {\n          title: 'Spend',\n          value: 'spend_without_custom',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Add to Carts',\n          value: 'pixel_joined_table_add_to_carts',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  twitterAds: {\n    id: 'twitterAds',\n    title: 'Twitter Ads',\n    reportTitle: 'Twitter Ads Spend',\n    chart: 'twitterSpendChart',\n    color: '#30a808',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'twitter_spend',\n    services: ['twitter-ads'],\n    icon: 'twitter',\n    providerId: 'twitter-ads',\n    metric: 'spend',\n    willyMetricId: 'ads_table_spend_twitter_ads',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_spend_twitter_ads',\n      tableId: 'ads_table',\n      columnId: 'spend',\n      relatedProvider: 'twitter-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['twitter-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  twitterRoas: {\n    id: 'twitterRoas',\n    title: 'Twitter ROAS',\n    shortTitle: 'ROAS',\n    chart: 'twitterRoasChart',\n    valueToFixed: 2,\n    type: 'decimal',\n    color: '#90aa7f',\n    metricId: 'twitterRoas',\n    services: ['twitter-ads'],\n    tip: 'Return on Ad Spend',\n    icon: 'twitter',\n    providerId: 'twitter-ads',\n    metric: 'roas',\n    isSupportCumulative: false,\n    willyMetricId: 'ads_table_roas_twitter_ads',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_roas_twitter_ads',\n      relatedProvider: 'twitter-ads',\n      expression: [\n        {\n          title: 'Conversion Value',\n          value: 'ads_table_conversion_value_twitter_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_twitter_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  twitterImpressions: {\n    id: 'twitterImpressions',\n    title: 'Twitter Impressions',\n    shortTitle: 'Impressions',\n    chart: 'twitterImpressionsChart',\n    valueToFixed: 0,\n    type: 'decimal',\n    color: '#a975c1',\n    metricId: 'twitterImpressions',\n    services: ['twitter-ads'],\n    icon: 'twitter',\n    providerId: 'twitter-ads',\n    metric: 'impressions',\n    willyMetricId: 'ads_table_impressions_twitter_ads',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_impressions_twitter_ads',\n      tableId: 'ads_table',\n      columnId: 'impressions',\n      relatedProvider: 'twitter-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['twitter-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  twitterCpm: {\n    id: 'twitterCpm',\n    title: 'Twitter CPM',\n    shortTitle: 'CPM',\n    chart: 'twitterCpmChart',\n    valueToFixed: 0,\n    type: 'currency',\n    color: '#a69521',\n    metricId: 'twitterCpm',\n    services: ['twitter-ads'],\n    positiveComparison: -1,\n    tip: 'Cost Per 1000 Impressions',\n    icon: 'twitter',\n    providerId: 'twitter-ads',\n    metric: 'cpm',\n    willyMetricId: 'ads_table_cpm_twitter_ads',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_cpm_twitter_ads',\n      relatedProvider: 'twitter-ads',\n      expression: [\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_twitter_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Impressions',\n          value: 'ads_table_impressions_twitter_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '*',\n          value: '*',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: '1000',\n          value: '1000',\n          type: ElementTypes.INTEGER,\n        },\n      ],\n    },\n  },\n  twitterCpa: {\n    id: 'twitterCpa',\n    title: 'Twitter CPA',\n    shortTitle: 'CPA',\n    color: '#1d1a8e',\n    type: 'currency',\n    metricId: 'twitterCpa',\n    chart: 'twitterCpaChart',\n    services: ['twitter-ads'],\n    positiveComparison: -1,\n    tip: 'Cost Per Acquisition',\n    icon: 'twitter',\n    providerId: 'twitter-ads',\n    metric: 'cpa',\n    willyMetricId: 'ads_table_cpa_twitter_ads',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_cpa_twitter_ads',\n      relatedProvider: 'twitter-ads',\n      expression: [\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_twitter_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Conversions',\n          value: 'ads_table_conversions_twitter_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  twitterPurchases: {\n    id: 'twitterPurchases',\n    title: 'Twitter Purchases',\n    shortTitle: 'Purchases',\n    color: '#f2d5f4',\n    type: 'decimal',\n    valueToFixed: 0,\n    chart: 'twitterPurchasesChart',\n    metricId: 'twitterPurchases',\n    services: ['twitter-ads'],\n    icon: 'twitter',\n    providerId: 'twitter-ads',\n    metric: 'purchases',\n    willyMetricId: '', // ???????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_conversions_twitter_ads',\n      tableId: 'ads_table',\n      columnId: 'conversions',\n      relatedProvider: 'twitter-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['twitter-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  twitterConversionValue: {\n    id: 'twitterConversionValue',\n    title: 'Twitter Conversion Value',\n    shortTitle: 'Conversion Value',\n    color: '#f2d5f4',\n    type: 'currency',\n    valueToFixed: 0,\n    chart: 'twitterConversionValueChart',\n    metricId: 'twitterConversionValue',\n    services: ['twitter-ads'],\n    icon: 'twitter',\n    providerId: 'twitter-ads',\n    metric: 'conversionValue',\n    willyMetricId: 'ads_table_conversion_value_twitter_ads',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_conversion_value_twitter_ads',\n      tableId: 'ads_table',\n      columnId: 'conversion_value',\n      relatedProvider: 'twitter-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['twitter-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  twitterEngagements: {\n    id: 'twitterEngagements',\n    title: 'Twitter Engagements',\n    shortTitle: 'Engagements',\n    color: '#f2d5f4',\n    type: 'decimal',\n    valueToFixed: 0,\n    chart: 'twitterEngagementsChart',\n    metricId: 'twitterEngagements',\n    services: ['twitter-ads'],\n    icon: 'twitter',\n    providerId: 'twitter-ads',\n    // metric: 'engagements',\n    willyMetricId: '',\n  },\n  twitterFollows: {\n    id: 'twitterFollows',\n    title: 'Twitter Follows',\n    shortTitle: 'Follows',\n    color: '#f2d5f4',\n    type: 'decimal',\n    valueToFixed: 0,\n    chart: 'twitterFollowsChart',\n    metricId: 'twitterFollows',\n    services: ['twitter-ads'],\n    icon: 'twitter',\n    providerId: 'twitter-ads',\n    // metric: 'follows',\n    willyMetricId: '',\n  },\n  twitterClicks: {\n    id: 'twitterClicks',\n    title: 'Twitter Clicks',\n    shortTitle: 'Clicks',\n    color: '#7D4DFF',\n    type: 'decimal',\n    valueToFixed: 0,\n    chart: 'twitterClicksChart',\n    metricId: 'twitterClicks',\n    services: ['twitter-ads'],\n    icon: 'twitter',\n    providerId: 'twitter-ads',\n    metric: 'clicks',\n    willyMetricId: 'ads_table_clicks_twitter_ads',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_clicks_twitter_ads',\n      tableId: 'ads_table',\n      columnId: 'clicks',\n      relatedProvider: 'twitter-ads',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['twitter-ads'],\n          },\n        ],\n      ],\n    },\n  },\n  bingAdSpend: {\n    id: 'bingAdSpend',\n    title: 'Microsoft Ads',\n    reportTitle: 'Microsoft Ads Spend',\n    shortTitle: 'Spend',\n    chart: 'bingAdSpendChart',\n    color: '#9999ff',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'bingAdSpend',\n    services: ['bing'],\n    tip: 'Microsoft Ad Spend',\n    icon: 'microsoft',\n    providerId: 'bing',\n    metric: 'spend',\n    willyMetricId: 'ads_table_spend_bing',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_spend_microsoft_ads',\n      tableId: 'ads_table',\n      columnId: 'spend',\n      relatedProvider: 'bing',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['bing'],\n          },\n        ],\n      ],\n    },\n  },\n  bingImpressions: {\n    id: 'bingImpressions',\n    title: 'Microsoft Ads Impressions',\n    shortTitle: 'Impressions',\n    chart: 'bingImpressionsChart',\n    valueToFixed: 0,\n    type: 'decimal',\n    color: '#a975c1',\n    metricId: 'bingImpressions',\n    services: ['bing'],\n    icon: 'microsoft',\n    providerId: 'bing',\n    metric: 'impressions',\n    willyMetricId: 'ads_table_impressions_bing',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_impressions_bing',\n      tableId: 'ads_table',\n      columnId: 'impressions',\n      relatedProvider: 'bing',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['bing'],\n          },\n        ],\n      ],\n    },\n  },\n  bingClicks: {\n    id: 'bingClicks',\n    title: 'Microsoft Ads Clicks',\n    shortTitle: 'Clicks',\n    chart: 'bingClicksChart',\n    type: 'decimal',\n    color: '#aaffdd',\n    metricId: 'bingClicks',\n    services: ['bing'],\n    icon: 'microsoft',\n    providerId: 'bing',\n    metric: 'clicks',\n    willyMetricId: 'ads_table_clicks_bing',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_clicks_bing',\n      tableId: 'ads_table',\n      columnId: 'clicks',\n      relatedProvider: 'bing',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['bing'],\n          },\n        ],\n      ],\n    },\n  },\n  bingRoas: {\n    id: 'bingRoas',\n    title: 'Microsoft Ads ROAS',\n    shortTitle: 'ROAS',\n    chart: 'bingRoasChart',\n    color: '#3333ff',\n    type: 'decimal',\n    valueToFixed: 2,\n    metricId: 'bingRoas',\n    services: ['bing'],\n    tip: 'Return on Ad Spend',\n    icon: 'microsoft',\n    providerId: 'bing',\n    metric: 'roas',\n    isSupportCumulative: false,\n    willyMetricId: 'ads_table_roas_bing',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_roas_bing',\n      relatedProvider: 'bing',\n      expression: [\n        {\n          title: 'Conversion Value',\n          value: 'ads_table_conversion_value_bing',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_microsoft_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  bingConversions: {\n    id: 'bingConversions',\n    title: 'Microsoft Ads Conversions',\n    shortTitle: 'Conversions',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'bingConversionsChart',\n    metricId: 'bingConversions',\n    services: ['bing'],\n    icon: 'microsoft',\n    providerId: 'bing',\n    // metric: 'conversions',\n    willyMetricId: 'ads_table_conversions_bing',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_conversions_bing',\n      tableId: 'ads_table',\n      columnId: 'conversions',\n      relatedProvider: 'bing',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['bing'],\n          },\n        ],\n      ],\n    },\n  },\n  bingConversionValue: {\n    id: 'bingConversionValue',\n    title: 'Microsoft Ads Conversion Value',\n    shortTitle: 'Conversion Value',\n    color: '#f2d5f4',\n    type: 'currency',\n    valueToFixed: 0,\n    chart: 'bingConversionValueChart',\n    metricId: 'bingConversionValue',\n    services: ['bing'],\n    icon: 'microsoft',\n    providerId: 'bing',\n    metric: 'conversionValue',\n    willyMetricId: 'ads_table_conversion_value_bing',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_conversion_value_bing',\n      tableId: 'ads_table',\n      columnId: 'conversion_value',\n      relatedProvider: 'bing',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['bing'],\n          },\n        ],\n      ],\n    },\n  },\n  bingCtr: {\n    id: 'bingCtr',\n    title: 'Microsoft Ads CTR',\n    shortTitle: 'CTR',\n    valueToFixed: 2,\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'bingCtrChart',\n    metricId: 'bingCtr',\n    tip: 'Click Through Rate. Percentage of people clicking the ad',\n    services: ['bing'],\n    icon: 'microsoft',\n    providerId: 'bing',\n    metric: 'ctr',\n    willyMetricId: 'ads_table_ctr_bing',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_ctr_bing',\n      relatedProvider: 'bing',\n      expression: [\n        {\n          title: '(',\n          value: '(',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: 'Clicks',\n          value: 'ads_table_clicks_bing',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Impressions',\n          value: 'ads_table_impressions_bing',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: ')',\n          value: ')',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: '*',\n          value: '*',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: '100',\n          value: '100',\n          type: ElementTypes.INTEGER,\n        },\n      ],\n    },\n  },\n  bingCpm: {\n    id: 'bingCpm',\n    title: 'Microsoft Ads CPM',\n    shortTitle: 'CPM',\n    color: '#69af13',\n    type: 'currency',\n    valueToFixed: 0,\n    metricId: 'bingCpm',\n    chart: 'bingCpmChart',\n    services: ['bing'],\n    positiveComparison: -1,\n    tip: 'Cost Per 1000 Impressions',\n    icon: 'microsoft',\n    providerId: 'bing',\n    metric: 'cpm',\n    willyMetricId: 'ads_table_cpm_bing',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_cpm_bing',\n      relatedProvider: 'bing',\n      expression: [\n        {\n          title: '(',\n          value: '(',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_microsoft_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Impressions',\n          value: 'ads_table_impressions_bing',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: ')',\n          value: ')',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: '*',\n          value: '*',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: '1000',\n          value: '1000',\n          type: ElementTypes.INTEGER,\n        },\n      ],\n    },\n  },\n  bingCpa: {\n    id: 'bingCpa',\n    title: 'Microsoft Ads CPA',\n    shortTitle: 'CPA',\n    color: '#01e78f',\n    type: 'currency',\n    valueToFixed: 1,\n    metricId: 'bingCpa',\n    chart: 'bingCpaChart',\n    services: ['bing'],\n    positiveComparison: -1,\n    tip: 'Cost Per Acquisition',\n    icon: 'microsoft',\n    providerId: 'bing',\n    metric: 'cpa',\n    willyMetricId: 'ads_table_cpa_bing',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_cpa_bing',\n      relatedProvider: 'bing',\n      expression: [\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_microsoft_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Conversions',\n          value: 'ads_table_conversions_bing',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  //recharge\n  rechargeSubscription1stOrderSales: {\n    id: 'rechargeSubscription1stOrderSales',\n    tip: 'Gross sales + Taxes + Shipping - Discounts for Subscription 1st orders',\n    title: 'Subscription 1st Order Revenue',\n    color: '#aaffdd',\n    type: 'currency',\n    chart: 'rechargeSubscription1stOrderSalesChart',\n    metricId: 'rechargeSubscription1stOrderSales',\n    services: ['recharge'],\n    icon: 'recharge',\n    providerId: 'recharge',\n    // metric: 'subscription1stOrderSales',\n    willyMetricId: '', // ????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_subscription_first_order_revenue',\n      tableId: 'orders_table',\n      columnId: 'order_revenue',\n      relatedProvider: 'recharge',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: {\n              name: 'is_first_order_in_subscription',\n              id: 'is_first_order_in_subscription',\n            },\n            comparator: 'equal',\n            value: true,\n          },\n        ],\n      ],\n    },\n  },\n  rechargeSubscriptionRecurringOrder: {\n    id: 'rechargeSubscriptionRecurringOrder',\n    tip: 'Gross sales + Taxes + Shipping - Discounts for Subscription recurring orders',\n    title: 'Subscription Recurring Order Revenue',\n    color: '#aaffdd',\n    type: 'currency',\n    chart: 'rechargeSubscriptionRecurringOrderChart',\n    metricId: 'rechargeSubscriptionRecurringOrder',\n    services: ['recharge'],\n    icon: 'recharge',\n    providerId: 'recharge',\n    // metric: 'subscriptionRecurringOrder',\n    willyMetricId: '', // ????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_subscription_recurring_order_revenue',\n      tableId: 'orders_table',\n      columnId: 'order_revenue',\n      relatedProvider: 'recharge',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'is_subscription_order', id: 'is_subscription_order' },\n            comparator: 'equal',\n            value: true,\n          },\n          {\n            column: {\n              name: 'is_first_order_in_subscription',\n              id: 'is_first_order_in_subscription',\n            },\n            comparator: 'equal',\n            value: false,\n          },\n        ],\n      ],\n    },\n  },\n  rechargeTotalSubscriptionSales: {\n    id: 'rechargeTotalSubscriptionSales',\n    tip: 'Total Gross sales + Taxes + Shipping - Discounts for all subscription orders',\n    title: 'Total Subscription Order Revenue',\n    color: '#aaffdd',\n    type: 'currency',\n    chart: 'rechargeTotalSubscriptionSalesChart',\n    metricId: 'rechargeTotalSubscriptionSales',\n    services: ['recharge'],\n    icon: 'recharge',\n    providerId: 'recharge',\n    // metric: 'totalSubscriptionSales',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_total_subscription_order_revenue',\n      tableId: 'orders_table',\n      columnId: 'order_revenue',\n      relatedProvider: 'recharge',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'is_subscription_order', id: 'is_subscription_order' },\n            comparator: 'equal',\n            value: true,\n          },\n        ],\n      ],\n    },\n  },\n  rechargeSubscriptionSalesPercentage: {\n    id: 'rechargeSubscriptionSalesPercentage',\n    tip: '% of total order revenue (Shopify) from subscriptions',\n    title: '% Subscription Order Revenue',\n    color: '#aaffdd',\n    type: 'percent',\n    chart: 'rechargeSubscriptionSalesPercentageChart',\n    metricId: 'rechargeSubscriptionSalesPercentage',\n    services: ['recharge'],\n    icon: 'recharge',\n    providerId: 'recharge',\n    // metric: 'subscriptionSalesPercentage',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'subscription_sales_percentage_recharge',\n      relatedProvider: 'recharge',\n      expression: [\n        {\n          title: 'Order Revenue',\n          value: 'orders_table_total_subscription_order_revenue',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Order Revenue',\n          value: 'orders_table_order_revenue_shopify',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  rechargeTotalNewSubscriptions: {\n    id: 'rechargeTotalNewSubscriptions',\n    tip: 'New subscriptions created by any customers in this period',\n    title: 'Total New Subscriptions',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'rechargeTotalNewSubscriptionsChart',\n    metricId: 'rechargeTotalNewSubscriptions',\n    services: ['recharge'],\n    icon: 'recharge',\n    providerId: 'recharge',\n    // metric: 'totalNewSubscriptions',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'subscription_metrics_table_total_new_subscriptions_recharge',\n      tableId: 'subscription_metrics_table',\n      columnId: 'total_new_subscriptions',\n      relatedProvider: 'recharge',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'platform', id: 'platform' },\n            comparator: 'is_in',\n            value: ['recharge'],\n          },\n        ],\n      ],\n    },\n  },\n  rechargeTotalCancelledSubscriptions: {\n    id: 'rechargeTotalCancelledSubscriptions',\n    tip: 'Subscriptions cancelled by any customers in this period',\n    title: 'Total Cancelled Subscriptions',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'rechargeTotalCancelledSubscriptionsChart',\n    metricId: 'rechargeTotalCancelledSubscriptions',\n    services: ['recharge'],\n    positiveComparison: -1,\n    icon: 'recharge',\n    providerId: 'recharge',\n    // metric: 'totalCancelledSubscriptions',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'subscription_metrics_table_total_cancelled_subscriptions_recharge',\n      tableId: 'subscription_metrics_table',\n      columnId: 'total_cancelled_subscriptions',\n      relatedProvider: 'recharge',\n      aggFunction: 'SUM',\n    },\n  },\n  rechargeTotalChurnedSubscribers: {\n    id: 'rechargeTotalChurnedSubscribers',\n    tip: 'Total number of subscribers who have cancelled in this period',\n    title: 'Total Churned Subscribers',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'rechargeTotalChurnedSubscribersChart',\n    metricId: 'rechargeTotalChurnedSubscribers',\n    services: ['recharge'],\n    positiveComparison: -1,\n    icon: 'recharge',\n    providerId: 'recharge',\n    // metric: 'totalChurnedSubscribers',\n    willyMetricId: '', // ????\n    // willyConfig: {\n    //   isCustomMetric: false,\n    //   id: 'subscription_metrics_table_total_churned_subscribers_recharge',\n    //   tableId: 'subscription_metrics_table',\n    //   columnId: 'total_churned_subscribers',\n    //   relatedProvider: 'recharge',\n    //   aggFunction: 'SUM',\n    //   filter: [\n    //     [\n    //       {\n    //         column: { name: 'platform', id: 'platform' },\n    //         comparator: 'is_in',\n    //         value: ['recharge'],\n    //       },\n    //     ],\n    //   ],\n    // },\n  },\n  rechargeTotalActiveSubscriptions: {\n    id: 'rechargeTotalActiveSubscriptions',\n    tip: 'Total subscriptions active in this period',\n    title: 'Total Active Subscriptions',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'rechargeTotalActiveSubscriptionsChart',\n    metricId: 'rechargeTotalActiveSubscriptions',\n    services: ['recharge'],\n    icon: 'recharge',\n    showOnlyForToday: true,\n    providerId: 'recharge',\n    isCumulativeMetric: true,\n    isChartStartsWithMinValue: true,\n    // metric: 'totalActiveSubscriptions',\n    willyMetricId: '', // ?????\n    // not relevant\n  },\n  rechargeTotalActiveSubscribers: {\n    id: 'rechargeTotalActiveSubscribers',\n    tip: 'Total number of subscribers with active subscription as of the last day in this period',\n    title: 'Total Active Subscribers',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'rechargeTotalActiveSubscribersChart',\n    metricId: 'rechargeTotalActiveSubscribers',\n    services: ['recharge'],\n    icon: 'recharge',\n    showOnlyForToday: true,\n    providerId: 'recharge',\n    isCumulativeMetric: true,\n    isChartStartsWithMinValue: true,\n    // metric: 'totalActiveSubscribers',\n    willyMetricId: '', // ?????\n    // not relevant\n  },\n  rechargeAverageActiveDays: {\n    id: 'rechargeAverageActiveDays',\n    tip: 'The average length of days that a subscription is active for',\n    title: 'Average active days - active subscriptions',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'rechargeAverageActiveDaysChart',\n    metricId: 'rechargeAverageActiveDays',\n    services: ['recharge'],\n    icon: 'recharge',\n    providerId: 'recharge',\n    // metric: 'averageActiveDays',\n    willyMetricId: '',\n    // commented in defaultTileSections\n  },\n  rechargeAverageSubscriptionsPerCustomer: {\n    id: 'rechargeAverageSubscriptionsPerCustomer',\n    tip: 'The average number of active subscriptions per customer',\n    title: 'Average subscriptions per customer',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'rechargeAverageSubscriptionsPerCustomerChart',\n    metricId: 'rechargeAverageSubscriptionsPerCustomer',\n    services: ['recharge'],\n    icon: 'recharge',\n    providerId: 'recharge',\n    // metric: 'averageSubscriptionsPerCustomer',\n    willyMetricId: '',\n    // commented in defaultTileSections\n  },\n  rechargeReactivatedSubscribers: {\n    id: 'rechargeReactivatedSubscribers',\n    tip: '# of customers who had an active subscription, churned at some point and have re-activated in the specified time range',\n    title: 'Reactivated Customers',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'rechargeReactivatedSubscribersChart',\n    metricId: 'rechargeReactivatedSubscribers',\n    services: ['recharge'],\n    icon: 'recharge',\n    providerId: 'recharge',\n    // metric: 'reactivatedSubscribers',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'subscription_metrics_table_reactivated_subscribers_recharge',\n      tableId: 'subscription_metrics_table',\n      columnId: 'reactivated_subscribers',\n      relatedProvider: 'recharge',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'platform', id: 'platform' },\n            comparator: 'is_in',\n            value: ['recharge'],\n          },\n        ],\n      ],\n    },\n  },\n  //stripe subscriptions\n  stripeSubscriptionUpgradeCount: {\n    id: 'stripeSubscriptionUpgradeCount',\n    tip: '# of subscriptions that have upgraded in the specified time range',\n    title: 'Upgrade Subscriptions',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'stripeSubscriptionUpgradeCountChart',\n    metricId: 'stripeSubscriptionUpgradeCount',\n    services: ['stripe'],\n    icon: 'stripe',\n    providerId: 'stripe',\n    // metric: 'upgradeCount',\n    willyMetricId: '',\n    //commented in defaultTileSections\n  },\n  stripeSubscriptionUpgradeAmount: {\n    id: 'stripeSubscriptionUpgradeAmount',\n    tip: 'Amount of subscriptions that have upgraded in the specified time range',\n    title: 'Upgraded Subscriptions Amount',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'stripeSubscriptionUpgradeAmountChart',\n    metricId: 'stripeSubscriptionUpgradeAmount',\n    services: ['stripe'],\n    icon: 'stripe',\n    providerId: 'stripe',\n    // metric: 'upgradeAmount',\n    willyMetricId: '',\n    //commented in defaultTileSections\n  },\n  stripeSubscriptionDowngradeCount: {\n    id: 'stripeSubscriptionDowngradeCount',\n    tip: '# of subscriptions that have downgraded in the specified time range',\n    title: 'Downgrade Subscriptions',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'stripeSubscriptionDowngradeCountChart',\n    metricId: 'stripeSubscriptionDowngradeCount',\n    services: ['stripe'],\n    icon: 'stripe',\n    providerId: 'stripe',\n    // metric: 'downgradeCount',\n    willyMetricId: '',\n    //commented in defaultTileSections\n  },\n  stripeSubscriptionDowngradeAmount: {\n    id: 'stripeSubscriptionDowngradeAmount',\n    tip: 'Amount of subscriptions that have downgraded in the specified time range',\n    title: 'Downgrade Subscription Amount',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'stripeSubscriptionDowngradeAmountChart',\n    metricId: 'stripeSubscriptionDowngradeAmount',\n    services: ['stripe'],\n    icon: 'stripe',\n    providerId: 'stripe',\n    // metric: 'downgradeAmount',\n    willyMetricId: '',\n    //commented in defaultTileSections\n  },\n  stripeSubscriptionDeletedCount: {\n    id: 'stripeSubscriptionDeletedCount',\n    tip: '# of subscriptions that have deleted in the specified time range',\n    title: 'Deleted Subscriptions',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'stripeSubscriptionDeletedCountChart',\n    metricId: 'stripeSubscriptionDeletedCount',\n    services: ['stripe'],\n    icon: 'stripe',\n    providerId: 'stripe',\n    // metric: 'deletedCount',\n    willyMetricId: '',\n    //commented in defaultTileSections\n  },\n  stripeSubscriptionDeletedAmount: {\n    id: 'stripeSubscriptionDeletedAmount',\n    tip: 'Amount of subscriptions that have deleted in the specified time range',\n    title: 'Deleted Subscriptions Amount',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'stripeSubscriptionDeletedAmountChart',\n    metricId: 'stripeSubscriptionDeletedAmount',\n    services: ['stripe'],\n    icon: 'stripe',\n    providerId: 'stripe',\n    // metric: 'deletedAmount',\n    willyMetricId: '',\n    //commented in defaultTileSections\n  },\n  //MNTN\n  mountainSpend: {\n    id: 'mountainSpend',\n    tip: 'Total amount Spent',\n    title: 'Mountain Spend',\n    shortTitle: 'Spend',\n    color: '#aaffdd',\n    type: 'currency',\n    chart: 'mountainSpendChart',\n    metricId: 'mountainSpend',\n    services: ['mountain'],\n    icon: 'mountain',\n    providerId: 'mountain',\n    metric: 'spend',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_spend_mountain',\n      tableId: 'ads_table',\n      columnId: 'spend',\n      relatedProvider: 'mountain',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['mountain'],\n          },\n        ],\n      ],\n    },\n  },\n  mountainRoas: {\n    id: 'mountainRoas',\n    tip: 'Return on ad spend. Calculated by: Order Value ÷ Total Spend',\n    title: 'ROAS',\n    color: '#aaffdd',\n    type: 'decimal',\n    valueToFixed: 2,\n    chart: 'mountainRoasChart',\n    metricId: 'mountainRoas',\n    services: ['mountain'],\n    icon: 'mountain',\n    providerId: 'mountain',\n    metric: 'roas',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_roas_mountain',\n      relatedProvider: 'mountain',\n      expression: [\n        {\n          title: 'Conversion Value',\n          value: 'ads_table_conversion_value_mountain',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_mountain',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  mountainImpressions: {\n    id: 'mountainImpressions',\n    tip: 'Number of ad impressions served',\n    title: 'Impressions',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'mountainImpressionsChart',\n    metricId: 'mountainImpressions',\n    services: ['mountain'],\n    icon: 'mountain',\n    providerId: 'mountain',\n    metric: 'impressions',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_impressions_mountain',\n      tableId: 'ads_table',\n      columnId: 'impressions',\n      relatedProvider: 'mountain',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['mountain'],\n          },\n        ],\n      ],\n    },\n  },\n  mountainConversions: {\n    id: 'mountainConversions',\n    tip: 'Number of conversions that followed a verified visit',\n    title: 'Conversions',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'mountainConversionsChart',\n    metricId: 'mountainConversions',\n    services: ['mountain'],\n    icon: 'mountain',\n    providerId: 'mountain',\n    // metric: 'conversions',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_conversions_mountain',\n      tableId: 'ads_table',\n      columnId: 'conversions',\n      relatedProvider: 'mountain',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['mountain'],\n          },\n        ],\n      ],\n    },\n  },\n  mountainConversionRate: {\n    id: 'mountainConversionRate',\n    tip: 'Percentage of verified visits that resulted in a conversion',\n    title: 'Conversion Rate',\n    color: '#aaffdd',\n    type: 'percent',\n    valueToFixed: 2,\n    chart: 'mountainConversionRateChart',\n    metricId: 'mountainConversionRate',\n    services: ['mountain'],\n    icon: 'mountain',\n    providerId: 'mountain',\n    metric: 'conversionRate',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_conversion_rate_mountain',\n      relatedProvider: 'mountain',\n      expression: [\n        {\n          title: 'Conversions',\n          value: 'ads_table_conversions_mountain',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Visits',\n          value: 'ads_table_visits_mountain',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  mountainConversionValue: {\n    id: 'mountainConversionValue',\n    tip: 'Total conversion value from MNTN',\n    title: 'Conversion Value',\n    color: '#aaffdd',\n    type: 'currency',\n    valueToFixed: 2,\n    chart: 'mountainConversionValueChart',\n    metricId: 'mountainConversionValue',\n    services: ['mountain'],\n    icon: 'mountain',\n    providerId: 'mountain',\n    metric: 'conversionValue',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_conversion_value_mountain',\n      tableId: 'ads_table',\n      columnId: 'conversion_value',\n      relatedProvider: 'mountain',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['mountain'],\n          },\n        ],\n      ],\n    },\n  },\n  mountainAverageOrderValue: {\n    id: 'mountainAverageOrderValue',\n    tip: 'Average order value. Calculated by: MNTN Total Order Value ÷ MNTN Total Conversions',\n    title: 'AOV',\n    color: '#aaffdd',\n    type: 'currency',\n    valueToFixed: 2,\n    chart: 'mountainAverageOrderValueChart',\n    metricId: 'mountainAverageOrderValue',\n    services: ['mountain'],\n    icon: 'mountain',\n    providerId: 'mountain',\n    metric: 'aov',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_aov_mountain',\n      relatedProvider: 'mountain',\n      expression: [\n        {\n          title: 'Conversion Value',\n          value: 'ads_table_conversion_value_mountain',\n\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Conversions',\n          value: 'ads_table_conversions_mountain',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  mountainCostPerAcquisition: {\n    id: 'mountainCostPerAcquisition',\n    tip: 'Cost per acquisition. Calculated by: Total Spend ÷ Total Conversions',\n    title: 'CPA',\n    color: '#aaffdd',\n    valueToFixed: 2,\n    type: 'currency',\n    chart: 'mountainCostPerAcquisitionChart',\n    metricId: 'mountainCostPerAcquisition',\n    services: ['mountain'],\n    icon: 'mountain',\n    providerId: 'mountain',\n    metric: 'cpa',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_cpa_mountain',\n      relatedProvider: 'mountain',\n      expression: [\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_mountain',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Conversions',\n          value: 'ads_table_conversions_mountain',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  mountainCostPerVisit: {\n    id: 'mountainCostPerVisit',\n    tip: 'Cost per visit. Calculated by: Total Spend ÷ Total Visits',\n    title: 'CPV',\n    color: '#aaffdd',\n    valueToFixed: 2,\n    type: 'currency',\n    chart: 'mountainCostPerVisitChart',\n    metricId: 'mountainCostPerVisit',\n    services: ['mountain'],\n    icon: 'mountain',\n    providerId: 'mountain',\n    // metric: 'costPerVisit',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_cpv_mountain',\n      relatedProvider: 'mountain',\n      expression: [\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_mountain',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Visits',\n          value: 'ads_table_visits_mountain',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  mountainVisits: {\n    id: 'mountainVisits',\n    tip: 'Number of visits to the site',\n    title: 'Visits',\n    color: '#aaffdd',\n    type: 'decimal',\n    metricId: 'mountainVisits',\n    services: ['mountain'],\n    icon: 'mountain',\n    providerId: 'mountain',\n    // metric: 'visits',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_visits_mountain',\n      tableId: 'ads_table',\n      columnId: 'visits',\n      relatedProvider: 'mountain',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['mountain'],\n          },\n        ],\n      ],\n    },\n  },\n\n  //criteo\n  criteoSpend: {\n    id: 'criteoSpend',\n    tip: 'Total amount spent',\n    shortTitle: 'Spend',\n    title: 'Criteo Spend',\n    color: '#aaffdd',\n    type: 'currency',\n    chart: 'criteoSpendChart',\n    metricId: 'criteoSpend',\n    services: ['criteo'],\n    icon: 'criteo',\n    providerId: 'criteo',\n    metric: 'spend',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_spend_criteo',\n      tableId: 'ads_table',\n      columnId: 'spend',\n      relatedProvider: 'criteo',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['criteo'],\n          },\n        ],\n      ],\n    },\n  },\n  criteoRoas: {\n    id: 'criteoRoas',\n    tip: 'Return on ad spend. Calculated by: Revenue Generated ÷ Total Spend',\n    title: 'ROAS',\n    color: '#aaffdd',\n    type: 'decimal',\n    valueToFixed: 2,\n    chart: 'criteoRoasChart',\n    metricId: 'criteoRoas',\n    services: ['criteo'],\n    icon: 'criteo',\n    providerId: 'criteo',\n    metric: 'roas',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_roas_criteo',\n      relatedProvider: 'criteo',\n      expression: [\n        {\n          title: 'Conversion Value',\n          value: 'ads_table_conversion_value_criteo',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_criteo',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  criteoDisplays: {\n    id: 'criteoDisplays',\n    tip: 'The number of ad impressions served on publishers via Criteo',\n    title: 'Displays',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'criteoDisplaysChart',\n    metricId: 'criteoDisplays',\n    services: ['criteo'],\n    icon: 'criteo',\n    providerId: 'criteo',\n    // metric: 'displays',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_impressions_criteo',\n      tableId: 'ads_table',\n      columnId: 'impressions',\n      relatedProvider: 'criteo',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['criteo'],\n          },\n        ],\n      ],\n    },\n  },\n  criteoConversions: {\n    id: 'criteoConversions',\n    tip: 'Number of conversions that followed a verified visit',\n    title: 'Conversions',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'criteoConversionsChart',\n    metricId: 'criteoConversions',\n    services: ['criteo'],\n    icon: 'criteo',\n    providerId: 'criteo',\n    // metric: 'conversions',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_conversions_criteo',\n      tableId: 'ads_table',\n      columnId: 'conversions',\n      relatedProvider: 'criteo',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['criteo'],\n          },\n        ],\n      ],\n    },\n  },\n  criteoConversionRate: {\n    id: 'criteoConversionRate',\n    tip: 'Percentage of verified visits that resulted in a conversion',\n    title: 'Conversion Rate',\n    color: '#aaffdd',\n    type: 'percent',\n    valueToFixed: 2,\n    chart: 'criteoConversionRateChart',\n    metricId: 'criteoConversionRate',\n    services: ['criteo'],\n    icon: 'criteo',\n    providerId: 'criteo',\n    metric: 'conversionRate',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_conversion_rate_criteo',\n      relatedProvider: 'criteo',\n      expression: [\n        {\n          title: 'Conversions',\n          value: 'ads_table_conversions_criteo',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Visits',\n          value: 'ads_table_visits_criteo',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  criteoConversionValue: {\n    id: 'criteoConversionValue',\n    tip: 'Total conversion value from Criteo',\n    title: 'Conversion Value',\n    color: '#aaffdd',\n    type: 'currency',\n    valueToFixed: 2,\n    chart: 'criteoConversionValueChart',\n    metricId: 'criteoConversionValue',\n    services: ['criteo'],\n    icon: 'criteo',\n    providerId: 'criteo',\n    metric: 'conversionValue',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_conversion_value_criteo',\n      tableId: 'ads_table',\n      columnId: 'conversion_value',\n      relatedProvider: 'criteo',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['criteo'],\n          },\n        ],\n      ],\n    },\n  },\n  criteoClicks: {\n    id: 'criteoClicks',\n    tip: 'The number of clicks driven by Criteo ads',\n    title: 'Clicks',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'criteoClicksChart',\n    metricId: 'criteoClicks',\n    services: ['criteo'],\n    icon: 'criteo',\n    providerId: 'criteo',\n    metric: 'clicks',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_clicks_criteo',\n      tableId: 'ads_table',\n      columnId: 'clicks',\n      relatedProvider: 'criteo',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['criteo'],\n          },\n        ],\n      ],\n    },\n  },\n  criteoVisits: {\n    id: 'criteoVisits',\n    tip: 'The number of users on the target website or app for which at least one event occurred within the hour following a click',\n    title: 'Visits',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'criteoVisitsChart',\n    metricId: 'criteoVisits',\n    services: ['criteo'],\n    icon: 'criteo',\n    providerId: 'criteo',\n    // metric: 'visits',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_visits_criteo',\n      tableId: 'ads_table',\n      columnId: 'visits',\n      relatedProvider: 'criteo',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['criteo'],\n          },\n        ],\n      ],\n    },\n  },\n  criteoCostPerVisit: {\n    id: 'criteoCostPerVisit',\n    tip: 'Cost per visit',\n    title: 'CPV',\n    color: '#aaffdd',\n    valueToFixed: 2,\n    type: 'currency',\n    chart: 'criteoCostPerVisitChart',\n    metricId: 'criteoCostPerVisit',\n    services: ['criteo'],\n    icon: 'criteo',\n    providerId: 'criteo',\n    // metric: 'costPerVisit',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_cpv_criteo',\n      relatedProvider: 'criteo',\n      expression: [\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_criteo',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Visits',\n          value: 'ads_table_visits_criteo',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  criteoCostPerAcquisition: {\n    id: 'criteoCostPerAcquisition',\n    tip: 'Cost per acquisition',\n    title: 'CPA',\n    color: '#aaffdd',\n    valueToFixed: 2,\n    type: 'currency',\n    chart: 'criteoCostPerAcquisitionChart',\n    metricId: 'criteoCostPerAcquisition',\n    services: ['criteo'],\n    icon: 'criteo',\n    providerId: 'criteo',\n    metric: 'cpa',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_cpa_criteo',\n      relatedProvider: 'criteo',\n      expression: [\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_criteo',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Conversions',\n          value: 'ads_table_conversions_criteo',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  criteoAverageOrderValue: {\n    id: 'criteoAverageOrderValue',\n    tip: 'Average order value',\n    title: 'AOV',\n    color: '#aaffdd',\n    type: 'currency',\n    valueToFixed: 2,\n    chart: 'criteoAverageOrderValueChart',\n    metricId: 'criteoAverageOrderValue',\n    services: ['criteo'],\n    icon: 'criteo',\n    providerId: 'criteo',\n    metric: 'aov',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_aov_criteo',\n      relatedProvider: 'criteo',\n      expression: [\n        {\n          title: 'Conversion Value',\n          value: 'ads_table_conversion_value_criteo',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Conversions',\n          value: 'ads_table_conversions_criteo',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  pacingTotalRevenue: {\n    id: 'pacingTotalRevenue',\n    title: 'Total Revenue',\n    color: '#aaffdd',\n    type: 'string',\n    metricId: 'pacing',\n    services: ['pacing'],\n    icon: () => {},\n    isShow: () => true,\n    willyMetricId: '',\n    // no willyConfig\n  },\n  pacingReturningCustomersRevenue: {\n    id: 'pacingReturningCustomersRevenue',\n    title: 'Returning Customer Revenue',\n    color: '#aaffdd',\n    type: 'string',\n    metricId: 'pacing',\n    services: ['pacing'],\n    icon: () => {},\n    isShow: () => true,\n    willyMetricId: '',\n    // no willyConfig\n  },\n  pacingNewCustomersRevenue: {\n    id: 'pacingNewCustomersRevenue',\n    title: 'New Customer Revenue',\n    color: '#aaffdd',\n    type: 'string',\n    metricId: 'pacing',\n    services: ['pacing'],\n    icon: () => {},\n    isShow: () => true,\n    willyMetricId: '',\n    // no willyConfig\n  },\n  forwardViewTotalRevenue: {\n    id: 'forwardViewTotalRevenue',\n    title: 'Total Revenue',\n    color: '#aaffdd',\n    type: 'currency',\n    metricId: 'forwardViewTotalRevenue',\n    services: ['forwardView'],\n    icon: () => {},\n    isShow: () => true,\n    willyMetricId: '',\n    // no willyConfig\n  },\n  forwardViewProductOrdersCount: {\n    id: 'forwardViewProductOrdersCount',\n    title: 'Orders',\n    color: '#aaffdd',\n    type: 'decimal',\n    valueToFixed: 0,\n    metricId: 'forwardViewProductOrdersCount',\n    services: ['forwardView'],\n    icon: () => {},\n    isShow: () => true,\n    willyMetricId: '',\n    // no willyConfig\n  },\n  forwardViewNcCustomerCntAttribution: {\n    id: 'forwardViewNcCustomerCntAttribution',\n    title: 'New Customers',\n    color: '#aaffdd',\n    type: 'decimal',\n    valueToFixed: 0,\n    metricId: 'forwardViewNcCustomerCntAttribution',\n    services: ['forwardView'],\n    icon: () => {},\n    isShow: () => true,\n    willyMetricId: '',\n    // no willyConfig\n  },\n  // pacingTotalNetProfit: {\n  //   id: 'pacingTotalNetProfit',\n  //   title: 'Total Net Profit',\n  //   color: '#aaffdd',\n  //   type: 'string',\n  //   metricId: 'pacing',\n  //   services: ['pacing'],\n  //   icon: () => {},\n  //   isShow: () => true,\n  // no willyConfig\n  // },\n  pacingBlendedAdSpend: {\n    id: 'pacingBlendedAdSpend',\n    title: 'Blended Ad Spend',\n    color: '#aaffdd',\n    type: 'string',\n    metricId: 'pacing',\n    services: ['pacing'],\n    icon: () => {},\n    isShow: () => true,\n    willyMetricId: '',\n    // no willyConfig\n  },\n  pacingFacebookAdsConversionValue: {\n    id: 'pacingFacebookAdsConversionValue',\n    title: 'Facebook Ads Conversion Value',\n    color: '#aaffdd',\n    type: 'string',\n    metricId: 'pacing',\n    services: ['pacing'],\n    icon: () => {},\n    isShow: () => true,\n    willyMetricId: '',\n    // no willyConfig\n  },\n  pacingGoogleAdsConversionValue: {\n    id: 'pacingGoogleAdsConversionValue',\n    title: 'Google Ads Conversion Value',\n    color: '#aaffdd',\n    type: 'string',\n    metricId: 'pacing',\n    services: ['pacing'],\n    icon: () => {},\n    isShow: () => true,\n    willyMetricId: '',\n    // no willyConfig\n  },\n  pacingTiktokAdsConversionValue: {\n    id: 'pacingTiktokAdsConversionValue',\n    title: 'Tiktok Ads Conversion Value',\n    color: '#aaffdd',\n    type: 'string',\n    metricId: 'pacing',\n    services: ['pacing'],\n    icon: () => {},\n    isShow: () => true,\n    willyMetricId: '',\n    // no willyConfig\n  },\n  pacingSnapchatAdsConversionValue: {\n    id: 'pacingSnapchatAdsConversionValue',\n    title: 'Snapchat Ads Conversion Value',\n    color: '#aaffdd',\n    type: 'string',\n    metricId: 'pacing',\n    services: ['pacing'],\n    icon: () => {},\n    isShow: () => true,\n    willyMetricId: '',\n    // no willyConfig\n  },\n  pacingPinterestAdsConversionValue: {\n    id: 'pacingPinterestAdsConversionValue',\n    title: 'Pinterest Ads Conversion Value',\n    color: '#aaffdd',\n    type: 'string',\n    metricId: 'pacing',\n    services: ['pacing'],\n    icon: () => {},\n    isShow: () => true,\n    willyMetricId: '',\n    // no willyConfig\n  },\n  // Shipstation.\n  shipstationCost: {\n    id: 'shipstationCost',\n    tip: 'Total cost of shipping',\n    title: 'Shipping Cost',\n    color: '#aaffdd',\n    type: 'currency',\n    valueToFixed: 2,\n    chart: 'shipstationCostChart',\n    metricId: 'shipstationCost',\n    services: ['shipstation'],\n    icon: 'shipstation',\n    providerId: 'shipstation',\n    metric: 'spend',\n    willyMetricId: '', // ????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_shipping_costs',\n      tableId: 'orders_table',\n      columnId: 'shipping_costs',\n      relatedProvider: 'shipstation',\n      aggFunction: 'COUNT',\n    },\n  },\n  shipstationLabelCost: {\n    id: 'shipstationLabelCost',\n    tip: 'Total cost of shipping labels ',\n    title: 'Shipping Label Cost',\n    color: '#aaffdd',\n    type: 'currency',\n    valueToFixed: 2,\n    metricId: 'shipstationLabelCost',\n    services: ['shipstation'],\n    icon: 'shipstation',\n    providerId: 'shipstation',\n    // metric: 'spend',\n    willyMetricId: '', // ????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'shipping_table_shop_shipment_cost_shipstation',\n      tableId: 'shipping_table',\n      columnId: 'shop_shipment_cost',\n      relatedProvider: 'shipstation',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'shipping_platform', id: 'shipping_platform' },\n            comparator: 'is_in',\n            value: ['shipstation'],\n          },\n          {\n            column: { name: 'is_voided', id: 'is_voided' },\n            comparator: 'is',\n            value: ['false'],\n          },\n          {\n            column: { name: 'is_return', id: 'is_return' },\n            comparator: 'is',\n            value: ['false'],\n          },\n        ],\n      ],\n    },\n  },\n  shipstationShipments: {\n    id: 'shipstationShipments',\n    tip: 'Total number of shipments',\n    title: 'Shipments',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'shipstationShipmentsChart',\n    metricId: 'shipstationShipments',\n    services: ['shipstation'],\n    icon: 'shipstation',\n    providerId: 'shipstation',\n    metric: 'shipping',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'shipping_table_shipment_id_shipstation',\n      tableId: 'shipping_table',\n      columnId: 'shipment_id',\n      relatedProvider: 'shipstation',\n      aggFunction: 'COUNT',\n      filter: [\n        [\n          {\n            column: { name: 'shipping_platform', id: 'shipping_platform' },\n            comparator: 'is_in',\n            value: ['shipstation'],\n          },\n        ],\n      ],\n    },\n  },\n  shipstationOrders: {\n    id: 'shipstationOrders',\n    tip: 'Total number of orders',\n    title: 'Orders',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'shipstationOrdersChart',\n    metricId: 'shipstationOrders',\n    services: ['shipstation'],\n    icon: 'shipstation',\n    providerId: 'shipstation',\n    metric: 'orders',\n    willyMetricId: '', // ????\n    // join from shipping nd orders table\n  },\n  shipstationOrdersShipped: {\n    id: 'shipstationOrdersShipped',\n    tip: 'Total number of orders shipped',\n    title: 'Orders Shipped',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'shipstationOrdersShippedChart',\n    metricId: 'shipstationOrdersShipped',\n    services: ['shipstation'],\n    icon: 'shipstation',\n    providerId: 'shipstation',\n    metric: 'orders',\n    willyMetricId: '',\n    //join from shipping and orders table\n  },\n  shipstationOrdersUnshipped: {\n    id: 'shipstationOrdersUnshipped',\n    tip: 'Total number of orders unshipped',\n    title: 'Orders Unshipped',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'shipstationOrdersUnshippedChart',\n    metricId: 'shipstationOrdersUnshipped',\n    services: ['shipstation'],\n    icon: 'shipstation',\n    providerId: 'shipstation',\n    metric: 'orders',\n    willyMetricId: '',\n    //join from shipping and orders table\n  },\n  shipstationAvgCostPerShipment: {\n    id: 'shipstationAvgCostPerShipment',\n    tip: 'Average cost per shipment',\n    title: 'Avg Cost Per Shipment',\n    color: '#aaffdd',\n    type: 'currency',\n    valueToFixed: 2,\n    chart: 'shipstationAvgCostPerShipmentChart',\n    metricId: 'shipstationAvgCostPerShipment',\n    services: ['shipstation'],\n    icon: 'shipstation',\n    providerId: 'shipstation',\n    metric: 'shipping',\n    willyMetricId: '', // ?????\n    // willyConfig: {\n    //   isCustomMetric: false,\n    //   id: 'shipping_table_shop_shipment_cost_shipstation',\n    //   tableId: 'shipping_table',\n    //   columnId: 'shop_shipment_cost',\n    //   relatedProvider: 'shipstation',\n    //   aggFunction: 'AVG',\n    //   filter: [\n    //     [\n    //       {\n    //         column: { name: 'shipping_platform', id: 'shipping_platform' },\n    //         comparator: 'is_in',\n    //         value: ['shipstation'],\n    //       },\n    //     ],\n    //   ],\n    // },\n    //join from shipping and orders table\n  },\n  shipstationEstimation: {\n    id: 'shipstationEstimation',\n    tip: \"The estimated cost for all orders placed in the chosen timeframe, which don't have a shipping label created yet. The estimation is based on the manual costs entered in the cost settings page.\",\n    title: 'Unshipped Orders Estimated Cost',\n    color: '#aaffdd',\n    type: 'currency',\n    valueToFixed: 2,\n    chart: 'shipstationEstimationChart',\n    metricId: 'shipstationEstimation',\n    services: ['shipstation'],\n    icon: 'triple-whale-logo',\n    providerId: 'shipstation',\n    metric: 'shipping',\n    willyMetricId: '',\n    //join from shipping and orders table\n  },\n\n  // gorgiasSensory\n  gorgiasSensoryTicketsCreated: {\n    id: 'gorgiasSensoryTicketsCreated',\n    tip: 'Total number of tickets created',\n    title: 'Tickets Created',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'gorgiasSensoryTicketsCreatedChart',\n    metricId: 'gorgiasSensoryTicketsCreated',\n    valueToFixed: 0,\n    services: ['gorgias'],\n    icon: 'gorgias',\n    providerId: 'gorgias',\n    willyMetricId: '',\n  },\n\n  gorgiasSensoryTicketsReplied: {\n    id: 'gorgiasSensoryTicketsReplied',\n    tip: 'Total number of tickets replied',\n    title: 'Tickets Replied',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'gorgiasSensoryTicketsRepliedChart',\n    metricId: 'gorgiasSensoryTicketsReplied',\n    valueToFixed: 0,\n    services: ['gorgias'],\n    icon: 'gorgias',\n    providerId: 'gorgias',\n    willyMetricId: '',\n  },\n\n  gorgiasSensoryAvgResponseTime: {\n    id: 'gorgiasSensoryAvgResponseTime',\n    tip: 'Average response time',\n    title: 'Avg Response Time',\n    color: '#aaffdd',\n    type: 'duration',\n    chart: 'gorgiasSensoryAvgResponseTimeChart',\n    metricId: 'gorgiasSensoryAvgResponseTime',\n    valueToFixed: 0,\n    services: ['gorgias'],\n    icon: 'gorgias',\n    providerId: 'gorgias',\n    willyMetricId: '',\n  },\n\n  gorgiasSensoryAvgResolutionTime: {\n    id: 'gorgiasSensoryAvgResolutionTime',\n    tip: 'Average resolution time',\n    title: 'Avg Resolution Time',\n    color: '#aaffdd',\n    type: 'duration',\n    chart: 'gorgiasSensoryAvgResolutionTimeChart',\n    metricId: 'gorgiasSensoryAvgResolutionTime',\n    valueToFixed: 0,\n    services: ['gorgias'],\n    icon: 'gorgias',\n    providerId: 'gorgias',\n    willyMetricId: '',\n  },\n\n  //smsbump\n  smsbumpSpend: {\n    id: 'smsbumpSpend',\n    tip: 'Amount spent on Yotpo SMS',\n    title: 'Yotpo SMS and Email',\n    reportTitle: 'Yotpo SMS and Email Spend',\n    shortTitle: 'Spend',\n    color: '#aaffdd',\n    type: 'currency',\n    chart: 'smsbumpSpendChart',\n    metricId: 'smsbumpSpend',\n    services: ['smsbump'],\n    icon: 'smsbump',\n    providerId: 'smsbump',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'email_sms_table_spend_smsbump',\n      tableId: 'email_sms_table',\n      columnId: 'spend',\n      relatedProvider: 'smsbump',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['smsbump'],\n          },\n        ],\n      ],\n    },\n  },\n  smsbumpRevenue: {\n    id: 'smsbumpRevenue',\n    tip: 'Total revenue generated',\n    title: 'Total Revenue',\n    color: '#aaffdd',\n    type: 'currency',\n    chart: 'smsbumpRevenueChart',\n    metricId: 'smsbumpRevenue',\n    services: ['smsbump'],\n    icon: 'smsbump',\n    providerId: 'smsbump',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'email_sms_table_conversion_value_smsbump',\n      tableId: 'email_sms_table',\n      columnId: 'conversion_value',\n      relatedProvider: 'smsbump',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['smsbump'],\n          },\n        ],\n      ],\n    },\n  },\n  smsbumpCampaignRevenue: {\n    id: 'smsbumpCampaignRevenue',\n    tip: 'Total revenue generated from campaigns',\n    title: 'Campaign Revenue',\n    color: '#aaffdd',\n    type: 'currency',\n    chart: 'smsbumpCampaignRevenueChart',\n    metricId: 'smsbumpCampaignRevenue',\n    services: ['smsbump'],\n    icon: 'smsbump',\n    providerId: 'smsbump',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'email_sms_table_campaign_conversion_value_smsbump',\n      tableId: 'email_sms_table',\n      columnId: 'conversion_value',\n      relatedProvider: 'smsbump',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'report_type', id: 'report_type' },\n            comparator: 'is_in',\n            value: ['campaign'],\n          },\n        ],\n      ],\n    },\n  },\n  smsbumpFlowRevenue: {\n    id: 'smsbumpFlowRevenue',\n    tip: 'Total revenue generated from flows',\n    title: 'Flow Revenue',\n    color: '#aaffdd',\n    type: 'currency',\n    chart: 'smsbumpFlowRevenueChart',\n    metricId: 'smsbumpFlowRevenue',\n    services: ['smsbump'],\n    icon: 'smsbump',\n    providerId: 'smsbump',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'email_sms_table_flow_conversion_value_smsbump',\n      tableId: 'email_sms_table',\n      columnId: 'conversion_value',\n      relatedProvider: 'smsbump',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'report_type', id: 'report_type' },\n            comparator: 'is_in',\n            value: ['flow'],\n          },\n        ],\n      ],\n    },\n  },\n  smsbumpCtr: {\n    id: 'smsbumpCtr',\n    tip: 'Click through ratio. Calculated by: Delivered/Clicked',\n    title: 'CTR',\n    color: '#aaffdd',\n    type: 'percent',\n    valueToFixed: 2,\n    chart: 'smsbumpCtrChart',\n    metricId: 'smsbumpCtr',\n    services: ['smsbump'],\n    icon: 'smsbump',\n    providerId: 'smsbump',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'email_sms_table_ctr_smsbump',\n      relatedProvider: 'smsbump',\n      expression: [\n        {\n          title: 'Clicks',\n          value: 'email_sms_table_clicks_smsbump',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Delivered',\n          value: 'email_sms_table_received_smsbump',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  smsbumpRoas: {\n    id: 'smsbumpRoas',\n    tip: 'Return on ad spend. Calculated by: Revenue Generated/Total Spend',\n    title: 'ROAS',\n    color: '#aaffdd',\n    type: 'decimal',\n    valueToFixed: 2,\n    chart: 'smsbumpRoasChart',\n    metricId: 'smsbumpRoas',\n    services: ['smsbump'],\n    icon: 'smsbump',\n    providerId: 'smsbump',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'email_sms_table_roas_smsbump',\n      relatedProvider: 'smsbump',\n      expression: [\n        {\n          title: 'Conversion Value',\n          value: 'email_sms_table_conversion_value_smsbump',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Spend',\n          value: 'email_sms_table_spend_smsbump',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  smsbumpRoi: {\n    id: 'smsbumpRoi',\n    tip: 'Return on investment. Calculated by: (Revenue Generated - Total Spend)/Total Spend',\n    title: 'ROI',\n    color: '#aaffdd',\n    type: 'decimal',\n    valueToFixed: 2,\n    chart: 'smsbumpRoiChart',\n    metricId: 'smsbumpRoi',\n    services: ['smsbump'],\n    icon: 'smsbump',\n    providerId: 'smsbump',\n    willyMetricId: '',\n    willyConfig: {\n      //??????????????????????????\n      isCustomMetric: true,\n      id: 'email_sms_table_roi_smsbump',\n      relatedProvider: 'smsbump',\n      expression: [\n        {\n          title: '(',\n          value: '(',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: 'Conversion Value',\n          value: 'email_sms_table_conversion_value_smsbump',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '-',\n          value: '-',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Spend',\n          value: 'email_sms_table_spend_smsbump',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: ')',\n          value: ')',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Spend',\n          value: 'email_sms_table_spend_smsbump',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n  smsbumpConversions: {\n    id: 'smsbumpConversions',\n    tip: 'Number of conversions that followed a verified visit',\n    title: 'Conversions',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'smsbumpConversionsChart',\n    metricId: 'smsbumpConversions',\n    services: ['smsbump'],\n    icon: 'smsbump',\n    providerId: 'smsbump',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'email_sms_table_purchases_smsbump',\n      tableId: 'email_sms_table',\n      columnId: 'purchases',\n      relatedProvider: 'smsbump',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['smsbump'],\n          },\n        ],\n      ],\n    },\n  },\n  smsbumpSent: {\n    id: 'smsbumpSent',\n    tip: 'Total number of messages sent',\n    title: 'Sent',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'smsbumpSentChart',\n    metricId: 'smsbumpSent',\n    services: ['smsbump'],\n    icon: 'smsbump',\n    providerId: 'smsbump',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'email_sms_table_sent_smsbump',\n      tableId: 'email_sms_table',\n      columnId: 'received',\n      relatedProvider: 'smsbump',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['smsbump'],\n          },\n        ],\n      ],\n    },\n  },\n  smsbumpDelivered: {\n    id: 'smsbumpDelivered',\n    tip: 'Total number of messages delivered',\n    title: 'Delivered',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'smsbumpDeliveredChart',\n    metricId: 'smsbumpDelivered',\n    services: ['smsbump'],\n    icon: 'smsbump',\n    providerId: 'smsbump',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'email_sms_table_received_smsbump',\n      tableId: 'email_sms_table',\n      columnId: 'received',\n      relatedProvider: 'smsbump',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['smsbump'],\n          },\n        ],\n      ],\n    },\n  },\n  smsbumpClicks: {\n    id: 'smsbumpClicks',\n    tip: 'Total number of clicks',\n    title: 'Clicks',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'smsbumpClicksChart',\n    metricId: 'smsbumpClicks',\n    services: ['smsbump'],\n    icon: 'smsbump',\n    providerId: 'smsbump',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'email_sms_table_clicks_smsbump',\n      tableId: 'email_sms_table',\n      columnId: 'clicks',\n      relatedProvider: 'smsbump',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['smsbump'],\n          },\n        ],\n      ],\n    },\n  },\n  smsbumpUnsubscribed: {\n    id: 'smsbumpUnsubscribed',\n    tip: 'Total number of unsubscribed',\n    title: 'Unsubscribed',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'smsbumpUnsubscribedChart',\n    metricId: 'smsbumpUnsubscribed',\n    services: ['smsbump'],\n    icon: 'smsbump',\n    providerId: 'smsbump',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'email_sms_table_table_unsubscribed_smsbump',\n      tableId: 'email_sms_table',\n      columnId: 'unsubscribed',\n      relatedProvider: 'smsbump',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['smsbump'],\n          },\n        ],\n      ],\n    },\n  },\n  smsbumpAov: {\n    id: 'smsbumpAov',\n    tip: 'Average order value. Calculated by: Revenue Generated ÷ Total Conversions',\n    title: 'AOV',\n    color: '#aaffdd',\n    type: 'currency',\n    valueToFixed: 2,\n    chart: 'smsbumpAovChart',\n    metricId: 'smsbumpAov',\n    services: ['smsbump'],\n    icon: 'smsbump',\n    providerId: 'smsbump',\n    willyMetricId: '',\n    willyConfig: {\n      //doesnt exist in willy\n      isCustomMetric: true,\n      id: 'email_sms_table_aov_smsbump',\n      relatedProvider: 'smsbump',\n      expression: [\n        {\n          title: 'Conversion Value',\n          value: 'email_sms_table_conversion_value_smsbump',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Conversions',\n          value: 'email_sms_table_purchases_smsbump',\n          type: ElementTypes.METRIC,\n          // doesnt exist in willy\n        },\n      ],\n    },\n  },\n  // Shipbob.\n  shipbobOrders: {\n    id: 'shipbobOrders',\n    tip: 'Total number of orders',\n    title: 'Orders',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'shipbobOrdersChart',\n    metricId: 'shipbobOrders',\n    services: ['shipbob'],\n    icon: 'shipbob',\n    providerId: 'shipbob',\n    metric: 'orders',\n    willyMetricId: '',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'orders_table_orders_count_shipbob',\n      tableId: 'orders_table',\n      columnId: 'order_id',\n      relatedProvider: 'shopify',\n      aggFunction: 'COUNT',\n      filter: [\n        [{ column: { name: 'platform', id: 'platform' }, comparator: 'is_in', value: ['shipbob'] }],\n      ],\n    },\n  },\n  shipbobOrdersFulfilled: {\n    id: 'shipbobOrdersFulfilled',\n    tip: 'Total number of fulfilled orders',\n    title: 'Orders fulfilled',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'shipbobOrdersFulfilledChart',\n    metricId: 'shipbobOrdersFulfilled',\n    services: ['shipbob'],\n    icon: 'shipbob',\n    providerId: 'shipbob',\n    metric: 'orders',\n    willyMetricId: '',\n    //join from shipping and orders table\n  },\n  shipbobPercentOfOrdersFulfilledOnTime: {\n    id: 'shipbobPercentOfOrdersFulfilledOnTime',\n    tip: 'Percent of orders fulfilled on time',\n    title: 'Orders fulfilled on time',\n    color: '#aaffdd',\n    type: 'percent',\n    valueToFixed: 2,\n    chart: 'shipbobPercentOfOrdersFulfilledOnTimeChart',\n    metricId: 'shipbobPercentOfOrdersFulfilledOnTime',\n    services: ['shipbob'],\n    icon: 'shipbob',\n    providerId: 'shipbob',\n    metric: 'orders',\n    willyMetricId: '',\n    // join from shipping and orders table\n  },\n  shipbobFulfillmentCost: {\n    id: 'shipbobFulfillmentCost',\n    tip: 'Total cost of orders fulfillments',\n    title: 'Fulfillments Cost',\n    color: '#aaffdd',\n    type: 'currency',\n    valueToFixed: 2,\n    chart: 'shipbobFulfillmentCostChart',\n    metricId: 'shipbobFulfillmentCost',\n    services: ['shipbob'],\n    icon: 'shipbob',\n    providerId: 'shipbob',\n    metric: 'spend',\n    willyMetricId: '', // ?????\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'shipping_table_shop_shipment_cost_shipbob',\n      tableId: 'shipping_table',\n      columnId: 'shop_shipment_cost',\n      relatedProvider: 'shipbob',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'shipping_platform', id: 'shipping_platform' },\n            comparator: 'is_in',\n            value: ['shipbob'],\n          },\n          {\n            column: { name: 'shipment_status', id: 'shipment_status' },\n            comparator: 'not_equals',\n            value: ['Exception'],\n          },\n        ],\n      ],\n    },\n  },\n  shipbobAvgFulfillmentCost: {\n    id: 'shipbobAvgFulfillmentCost',\n    tip: 'Average cost per shipment',\n    title: 'Avg Cost Per Fulfillment',\n    color: '#aaffdd',\n    type: 'currency',\n    valueToFixed: 2,\n    chart: 'shipbobAvgFulfillmentCostChart',\n    metricId: 'shipbobAvgFulfillmentCost',\n    services: ['shipbob'],\n    icon: 'shipbob',\n    providerId: 'shipbob',\n    metric: 'shipping',\n    willyMetricId: '',\n    // join from shipping and orders table\n  },\n  shipbobEstimation: {\n    id: 'shipbobEstimation',\n    tip: \"The estimated cost for all orders placed in the chosen timeframe, which don't have a shipping label created yet. The estimation is based on the manual costs entered in the cost settings page.\",\n    title: 'Unfulfilled Orders Estimated Cost',\n    color: '#aaffdd',\n    type: 'currency',\n    valueToFixed: 2,\n    chart: 'shipbobEstimationChart',\n    metricId: 'shipbobEstimation',\n    services: ['shipbob'],\n    icon: 'triple-whale-logo',\n    providerId: 'shipbob',\n    metric: 'shipping',\n    willyMetricId: '', // ?????\n    // doesn't exist in willy\n  },\n  //postscript\n  postscriptRevenue: {\n    id: 'postscriptRevenue',\n    tip: 'Total revenue generated',\n    title: 'Total Revenue',\n    color: '#aaffdd',\n    type: 'currency',\n    chart: 'postscriptRevenueChart',\n    metricId: 'postscriptRevenue',\n    services: ['postscript'],\n    icon: 'postscript',\n    providerId: 'postscript',\n    willyMetricId: '',\n    // willyConfig: {\n    //   //doesn't exist in willy\n    //   isCustomMetric: false,\n    //   id: 'ads_table_conversion_value_postscript',\n    //   tableId: 'ads_table',\n    //   columnId: 'conversion_value',\n    //   relatedProvider: 'postscript',\n    //   aggFunction: 'SUM',\n    //   filter: [\n    //     [\n    //       {\n    //         column: { name: 'channel', id: 'channel' },\n    //         comparator: 'is_in',\n    //         value: ['postscript'],\n    //       },\n    //     ],\n    //   ],\n    // },\n    // no willyconfig\n  },\n  postscriptSent: {\n    id: 'postscriptSent',\n    tip: 'Total number of messages sent',\n    title: 'Sent',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'postscriptSentChart',\n    metricId: 'postscriptSent',\n    services: ['postscript'],\n    icon: 'postscript',\n    providerId: 'postscript',\n    willyMetricId: '',\n    // no willyconfig\n  },\n  postscriptSubscribed: {\n    id: 'postscriptSubscribed',\n    tip: 'Total number of subscribed',\n    title: 'Subscribed',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'postscriptSubscribedChart',\n    metricId: 'postscriptSubscribed',\n    services: ['postscript'],\n    icon: 'postscript',\n    providerId: 'postscript',\n    willyMetricId: '',\n    // no willyconfig\n  },\n  postscriptUnsubscribed: {\n    id: 'postscriptUnsubscribed',\n    tip: 'Total number of unsubscribed',\n    title: 'Unsubscribed',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'postscriptUnsubscribedChart',\n    metricId: 'postscriptUnsubscribed',\n    services: ['postscript'],\n    icon: 'postscript',\n    providerId: 'postscript',\n    willyMetricId: '',\n    // no willyconfig\n  },\n  postscriptConversions: {\n    id: 'postscriptConversions',\n    tip: 'Number of conversions that followed a verified visit or click',\n    title: 'Conversions',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'postscriptConversionsChart',\n    metricId: 'postscriptConversions',\n    services: ['postscript'],\n    icon: 'postscript',\n    providerId: 'postscript',\n    willyMetricId: '',\n    // no willyconfig\n  },\n  postscriptDelivered: {\n    id: 'postscriptDelivered',\n    tip: 'Total number of messages delivered',\n    title: 'Delivered',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'postscriptDeliveredChart',\n    metricId: 'postscriptDelivered',\n    services: ['postscript'],\n    icon: 'postscript',\n    providerId: 'postscript',\n    willyMetricId: '',\n    // no willyconfig\n  },\n  postscriptAov: {\n    id: 'postscriptAov',\n    tip: 'Average order value. Calculated by: Revenue Generated/Total Conversions',\n    title: 'AOV',\n    color: '#aaffdd',\n    type: 'currency',\n    valueToFixed: 2,\n    chart: 'postscriptAovChart',\n    metricId: 'postscriptAov',\n    services: ['postscript'],\n    icon: 'postscript',\n    providerId: 'postscript',\n    willyMetricId: '',\n    // no willyconfig\n  },\n  postscriptCtr: {\n    id: 'postscriptCtr',\n    tip: 'Click through ratio. Calculated by: Delivered/Clicked',\n    title: 'CTR',\n    color: '#aaffdd',\n    type: 'percent',\n    valueToFixed: 2,\n    chart: 'postscriptCtrChart',\n    metricId: 'postscriptCtr',\n    services: ['postscript'],\n    icon: 'postscript',\n    providerId: 'postscript',\n    willyMetricId: '',\n    // no willyconfig\n  },\n  postscriptClicks: {\n    id: 'postscriptClicks',\n    tip: 'Total number of clicks',\n    title: 'Clicks',\n    color: '#aaffdd',\n    type: 'decimal',\n    chart: 'postscriptClicksChart',\n    metricId: 'postscriptClicks',\n    services: ['postscript'],\n    icon: 'postscript',\n    providerId: 'postscript',\n    willyMetricId: '',\n    // no willyconfig\n  },\n\n  //outbrain\noutbrainSpend:{\n  id: 'outbrainSpend',\n  title: 'Outbrain Ads',\n  reportTitle: 'Outbrain Ads Spend',\n  color: '#ED6A20',\n  valueToFixed: 0,\n  type: 'currency',\n  tip: 'Outbrain Ad Spend',\n  services: ['outbrain'], \n  icon: 'outbrain', \n  metricId: 'outbrainSpend',\n  providerId: 'outbrain',\n  metric: 'spend',\n  willyConfig: {\n    isCustomMetric: false,\n    id: 'ads_table_spend_outbrain_ads',\n    tableId: 'ads_table',\n    columnId: 'spend',\n    relatedProvider: 'outbrain',\n    aggFunction: 'SUM',\n    filter: [\n      [\n        {\n          column: { name: 'channel', id: 'channel' },\n          comparator: 'is_in',\n          value: ['outbrain'],\n        },\n      ],\n    ],\n  },\n},\n\noutbrainImpressions: {\n  id: 'outbrainImpressions',\n  title: 'Outbrain Displays',\n  reportTitle: 'Outbrain Displays', \n  color: '#ED6A20',\n  valueToFixed: 0,\n  type: 'decimal',\n  tip: 'Total number of displays',\n  services: ['outbrain'],\n  icon: 'outbrain',\n  metricId: 'outbrainImpressions',\n  providerId: 'outbrain',\n  willyConfig: {\n    isCustomMetric: false,\n    id: 'ads_table_impressions_outbrain_ads',\n    tableId: 'ads_table',\n    columnId: 'impressions',\n    relatedProvider: 'outbrain',\n    aggFunction: 'SUM',\n    filter: [\n      [\n        {\n          column: { name: 'channel', id: 'channel' },\n          comparator: 'is_in',\n          value: ['outbrain'],\n        },\n      ],\n    ],\n  },\n},\n\noutbrainClicks: {\n  id: 'outbrainClicks',\n  title: 'Outbrain Clicks',\n  reportTitle: 'Outbrain Clicks',\n  color: '#ED6A20',\n  valueToFixed: 0,\n  type: 'decimal',\n  tip: 'Total number of clicks',\n  services: ['outbrain'],\n  icon: 'outbrain',\n  metricId: 'outbrainClicks',\n  providerId: 'outbrain',\n  willyConfig: {\n    isCustomMetric: false,\n    id: 'ads_table_clicks_outbrain_ads',\n    tableId: 'ads_table',\n    columnId: 'clicks',\n    relatedProvider: 'outbrain',  \n    aggFunction: 'SUM',\n    filter: [\n      [\n        {\n          column: { name: 'channel', id: 'channel' },\n          comparator: 'is_in',\n          value: ['outbrain'],\n        },\n      ],\n    ],\n  },\n},\n\noutbrainVCTR: {\n  id: 'outbrainVCTR',\n  title: 'Outbrain vCTR',\n  reportTitle: 'Outbrain vCTR',\n  color: '#ED6A20',\n  valueToFixed: 2,\n  type: 'percent',\n  services: ['outbrain'],\n  tip: 'Click Through Rate. Calculated by: number of Clicks / Impressions.',\n  icon: 'outbrain',\n  metricId: 'outbrainVCTR',\n  providerId: 'outbrain',\n  willyConfig: {\n    isCustomMetric: true,\n    id: 'ads_table_vctr_outbrain_ads',\n    relatedProvider: 'outbrain',\n    expression: [\n      {\n        title: '(',\n        value: '(',\n        type: ElementTypes.PARENTHESES,\n      },\n      {\n        title: 'Clicks',\n        value: 'ads_table_clicks_outbrain_ads',\n        type: ElementTypes.METRIC,\n      },\n      {\n        title: '/',\n        value: '/',\n        type: ElementTypes.OPERATOR,\n      },\n      {\n        title: 'Impressions',\n        value: 'ads_table_impressions_outbrain_ads',\n        type: ElementTypes.METRIC,\n      },\n      {\n        title: ')',\n        value: ')',\n        type: ElementTypes.PARENTHESES,\n      },\n      {\n        title: '*',\n        value: '*',\n        type: ElementTypes.OPERATOR,\n      },\n      {\n        title: '100',\n        value: '100',\n        type: ElementTypes.INTEGER,\n      }\n    ],\n  },\n},\n\noutbrainCPC: {\n  id: 'outbrainCPC',\n  title: 'Actual CPC',\n  reportTitle: 'Outbrain Actual CPC',\n  color: '#ED6A20',\n  valueToFixed: 2,\n  type: 'currency',\n  services: ['outbrain'],\n  tip: 'Cost Per Click. Calculated by: Spend / Clicks.',\n  icon: 'outbrain',\n  metricId: 'outbrainCPC',\n  providerId: 'outbrain',\n  willyConfig: {\n    isCustomMetric: true,\n    id: 'ads_table_cpc_outbrain_ads',\n    relatedProvider: 'outbrain',\n    expression: [\n      {\n        title: 'Spend',\n        value: 'ads_table_spend_outbrain_ads',\n        type: ElementTypes.METRIC,\n      },\n      {\n        title: '/',\n        value: '/',\n        type: ElementTypes.OPERATOR,\n      },\n      {\n        title: 'Clicks',\n        value: 'ads_table_clicks_outbrain_ads',\n        type: ElementTypes.METRIC,\n      },\n    ],\n  },\n},\n\noutbrainConversionRate: {\n  id: 'outbrainConversionRate',\n  title: 'Outbrain Conversion Rate',\n  reportTitle: 'Outbrain Conversion Rate',\n  color: '#ED6A20',\n  valueToFixed: 2,\n  type: 'percent',\n  services: ['outbrain'],\n  tip: 'The percentage of visitors from your Outbrain campaigns who completed a conversion. Calculated by: Conversions / Clicks',\n  icon: 'outbrain',\n  metricId: 'outbrainConversionRate',\n  providerId: 'outbrain',\n  willyConfig: {\n    isCustomMetric: true,\n    id: 'ads_table_conversion_rate_outbrain_ads',\n    relatedProvider: 'outbrain',\n    expression: [\n      {\n        title: '(',\n        value: '(',\n        type: ElementTypes.PARENTHESES,\n      },\n      {\n        title: 'Conversions',\n        value: 'ads_table_conversions_outbrain_ads',\n        type: ElementTypes.METRIC,\n      },\n      {\n        title: '/',\n        value: '/', \n        type: ElementTypes.OPERATOR,\n      },\n      {\n        title: 'Clicks',\n        value: 'ads_table_clicks_outbrain_ads',\n        type: ElementTypes.METRIC,\n      },\n      {\n        title: ')',\n        value: ')',\n        type: ElementTypes.PARENTHESES,\n      },\n      {\n        title: '*',\n        value: '*',\n        type: ElementTypes.OPERATOR,\n      },\n      {\n        title: '100',\n        value: '100',\n        type: ElementTypes.INTEGER,\n      }\n    ],\n  },\n},\n\noutbrainConversions: {\n  id: 'outbrainConversions',\n  title: 'Outbrain Conversions',\n  reportTitle: 'Outbrain Conversions',\n  color: '#ED6A20',\n  valueToFixed: 0,\n  type: 'decimal',\n  services: ['outbrain'],\n  tip: 'Number of click conversions',\n  icon: 'outbrain',\n  metricId: 'outbrainConversions',\n  providerId: 'outbrain',\n  willyConfig: {\n    isCustomMetric: false,\n    id: 'ads_table_conversions_outbrain_ads',\n    tableId: 'ads_table',\n    columnId: 'conversions',\n    relatedProvider: 'outbrain',\n    aggFunction: 'SUM',\n    filter: [\n      [\n        {\n          column: { name: 'channel', id: 'channel' },\n          comparator: 'is_in',\n          value: ['outbrain'],\n        },\n      ],\n    ],\n  },\n},\n\noutbrainAllConversions: {\n  id: 'outbrainAllConversions',\n  title: 'Outbrain All Conversions',\n  reportTitle: 'Outbrain All Conversions',\n  color: '#ED6A20',\n  valueToFixed: 0,\n  type: 'decimal',\n  services: ['outbrain'],\n  tip: 'Click conversions + View conversions',\n  icon: 'outbrain',\n  metricId: 'outbrainAllConversions',\n  providerId: 'outbrain',\n  willyConfig: {\n    isCustomMetric: false,\n    id: 'ads_table_all_conversions_outbrain_ads',\n    tableId: 'ads_table',\n    columnId: 'all_conversions',\n    relatedProvider: 'outbrain',\n    aggFunction: 'SUM',\n    filter: [\n      [\n        {\n          column: { name: 'channel', id: 'channel' },\n          comparator: 'is_in',\n          value: ['outbrain'],\n        },\n      ],\n    ],\n  },\n},\n\noutbrainCPA: {\n  id: 'outbrainCPA',\n  title: 'Outbrain CPA',\n  reportTitle: 'Outbrain CPA',\n  color: '#ED6A20',\n  valueToFixed: 2,\n  type: 'currency',\n  services: ['outbrain'],\n  tip: 'Cost Per Action. Calculated by: Spend / Conversions.',\n  icon: 'outbrain',\n  metricId: 'outbrainCPA',\n  providerId: 'outbrain',\n  willyConfig: {\n    isCustomMetric: true,\n    id: 'ads_table_cpa_outbrain_ads',\n    relatedProvider: 'outbrain',\n    expression: [\n      {\n        title: 'Spend',\n        value: 'ads_table_spend_outbrain_ads',\n        type: ElementTypes.METRIC,\n      },\n      {\n        title: '/',\n        value: '/',\n        type: ElementTypes.OPERATOR,\n      },\n      {\n        title: 'Conversions', \n        value: 'ads_table_conversions_outbrain_ads',\n        type: ElementTypes.METRIC,\n      },\n    ],\n  },\n},\n\noutbrainVCPM: {\n  id: 'outbrainVCPM',\n  title: 'Outbrain vCPM',\n  reportTitle: 'Outbrain vCPM',\n  color: '#ED6A20',\n  valueToFixed: 2,\n  type: 'currency',\n  services: ['outbrain'],\n  tip: 'Cost Per One Thousand Impressions. Calculated by: Spend / Impressions * 1000',\n  icon: 'outbrain', \n  metricId: 'outbrainVCPM',\n  providerId: 'outbrain',\n  willyConfig: {\n    isCustomMetric: true,\n    id: 'ads_table_vcpm_outbrain_ads',\n    relatedProvider: 'outbrain',\n    expression: [\n      {\n        title: '(',\n        value: '(',\n        type: ElementTypes.PARENTHESES,\n      },\n      {\n        title: 'Spend',\n        value: 'ads_table_spend_outbrain_ads',\n        type: ElementTypes.METRIC,\n      },\n      {\n        title: '/',\n        value: '/',\n        type: ElementTypes.OPERATOR,\n      },\n      {\n        title: 'Impressions',\n        value: 'ads_table_impressions_outbrain_ads',\n        type: ElementTypes.METRIC,\n      },\n      {\n        title: ')',\n        value: ')',\n        type: ElementTypes.PARENTHESES,\n      },\n      {\n        title: '*',\n        value: '*',\n        type: ElementTypes.OPERATOR,\n      },\n      {\n        title: '1000',\n        value: '1000',\n        type: ElementTypes.INTEGER,\n      },\n    ],\n  },\n},\n\noutbrainConversionValue: {\n  id: 'outbrainConversionValue',\n  title: 'Outbrain Revenue on conversions',\n  reportTitle: 'Outbrain Revenue on conversions',\n  color: '#ED6A20',\n  valueToFixed: 2,\n  type: 'currency',\n  services: ['outbrain'],\n  tip: 'Revenue generated from conversions',\n  icon: 'outbrain',\n  metricId: 'outbrainConversionValue',\n  providerId: 'outbrain',\n  willyConfig: {\n    isCustomMetric: false,\n    id: 'ads_table_conversion_value_outbrain_ads',\n    tableId: 'ads_table',\n    columnId: 'conversion_value',\n    relatedProvider: 'outbrain',\n    aggFunction: 'SUM',\n    filter: [\n      [\n        {\n          column: { name: 'channel', id: 'channel' },\n          comparator: 'is_in',\n          value: ['outbrain'],\n        },\n      ],\n    ],\n  },\n},\n\noutbrainRoas: {\n  id: 'outbrainRoas',\n  title: 'Outbrain ROAS',\n  reportTitle: 'Outbrain ROAS',\n  color: '#ED6A20',\n  valueToFixed: 2,\n  type: 'decimal',\n  services: ['outbrain'],\n  tip: 'Outbrain Return on ad spend. Calculated by: Conversion Value / Spend',\n  icon: 'outbrain',\n  metricId: 'outbrainRoas',\n  providerId: 'outbrain',\n  willyConfig: {\n    isCustomMetric: true,\n    id: 'ads_table_roas_outbrain_ads',\n    relatedProvider: 'outbrain',\n    expression: [\n      {\n        title: 'Conversion Value',\n        value: 'ads_table_conversion_value_outbrain_ads',\n        type: ElementTypes.METRIC,\n      },\n      {\n        title: '/',\n        value: '/',\n        type: ElementTypes.OPERATOR,\n      },\n      {\n        title: 'Spend',\n        value: 'ads_table_spend_outbrain_ads',\n        type: ElementTypes.METRIC,\n      },\n    ],\n  },\n},\n\noutbrainAOV: {\n  id: 'outbrainAOV',\n  title: 'Outbrain AOV',\n  reportTitle: 'Outbrain AOV',\n  color: '#ED6A20',\n  valueToFixed: 2,\n  type: 'currency',\n  services: ['outbrain'],\n  tip: 'Average order value. Calculated by: Conversion Value / Conversions',\n  icon: 'outbrain',\n  metricId: 'outbrainAOV',\n  providerId: 'outbrain',\n  willyConfig: {\n    isCustomMetric: true,\n    id: 'ads_table_aov_outbrain_ads',\n    relatedProvider: 'outbrain',\n    expression: [\n      {\n        title: 'Conversion Value',\n        value: 'ads_table_conversion_value_outbrain_ads',\n        type: ElementTypes.METRIC,\n      },\n      {\n        title: '/',\n        value: '/',\n        type: ElementTypes.OPERATOR,\n      },\n      {\n        title: 'Conversions', \n        value: 'ads_table_conversions_outbrain_ads',\n        type: ElementTypes.METRIC,\n      },\n    ],\n  },\n},\n\n//taboola\ntaboolaSpend: {\n  id: 'taboolaSpend',\n  title: 'Taboola Ads Spend',\n  shortTitle: 'Spend',\n  color: '#003366',\n  valueToFixed: 0,\n  type: 'currency',\n  services: ['taboola'],\n  tip: 'Taboola Ad Spend',\n  icon: 'taboola',\n  metricId: 'taboolaSpend',\n  providerId: 'taboola',\n  metric: 'spend',\n  willyConfig: {\n    isCustomMetric: false,\n    id: 'ads_table_spend_taboola_ads',\n    tableId: 'ads_table',\n    columnId: 'spend',\n    relatedProvider: 'taboola',\n    aggFunction: 'SUM',\n    filter: [\n      [\n        {\n          column: { name: 'channel', id: 'channel' },\n          comparator: 'is_in',\n          value: ['taboola'],\n        },\n      ],\n    ],\n  },\n},\n\ntaboolaImpressions: {\n  id: 'taboolaImpressions',\n  title: 'Taboola Displays',\n  shortTitle: 'Displays',\n  color: '#003366',\n  valueToFixed: 0,\n  type: 'decimal',\n  services: ['taboola'],\n  tip: 'Total number of displays',\n  icon: 'taboola',\n  metricId: 'taboolaImpressions',\n  providerId: 'taboola',\n  willyConfig: {\n    isCustomMetric: false,\n    id: 'ads_table_impressions_taboola_ads',\n    tableId: 'ads_table',\n    columnId: 'impressions',\n    relatedProvider: 'taboola',\n    aggFunction: 'SUM',\n    filter: [\n      [\n        {\n          column: { name: 'channel', id: 'channel' },\n          comparator: 'is_in',\n          value: ['taboola'],\n        },\n      ],\n    ],\n  },\n},\n\ntaboolaClicks: {\n  id: 'taboolaClicks',\n  title: 'Taboola Clicks',\n  shortTitle: 'Clicks',\n  color: '#003366',\n  valueToFixed: 0,\n  type: 'decimal',\n  services: ['taboola'],\n  tip: 'Total number of clicks',\n  icon: 'taboola',\n  metricId: 'taboolaClicks',\n  providerId: 'taboola',\n  willyConfig: {\n    isCustomMetric: false,\n    id: 'ads_table_clicks_taboola_ads',\n    tableId: 'ads_table',\n    columnId: 'clicks',\n    relatedProvider: 'taboola',\n    aggFunction: 'SUM',\n    filter: [\n      [\n        {\n          column: { name: 'channel', id: 'channel' },\n          comparator: 'is_in',\n          value: ['taboola'],\n        },\n      ],\n    ],\n  }\n},\n\n  taboolaVisits: {\n    id: 'taboolaVisits',\n    title: 'Taboola Visits',\n    color: '#003366',\n    valueToFixed: 0,\n    type: 'decimal',\n    services: ['taboola'],  \n    tip: 'Visits conversions for visits campaigns',\n    icon: 'taboola',  \n    metricId: 'taboolaVisits',\n    providerId: 'taboola',\n    willyConfig: {\n      isCustomMetric: false,\n      id: 'ads_table_visits_taboola_ads',\n      tableId: 'ads_table',\n      columnId: 'visits',\n      relatedProvider: 'taboola',\n      aggFunction: 'SUM',\n      filter: [\n        [\n          {\n            column: { name: 'channel', id: 'channel' },\n            comparator: 'is_in',\n            value: ['taboola'],\n          },\n        ],\n      ],\n    }\n  },\n\n  taboolaVCTR: {\n    id: 'taboolaVCTR',\n    title: 'Taboola vCTR',\n    color: '#003366',\n    valueToFixed: 2,\n    type: 'percent',\n    services: ['taboola'],\n    tip: 'Viewable Click Through Rate. Calculated by: number of (Clicks / Impressions) * 100',\n    icon: 'taboola',\n    metricId: 'taboolaVCTR',\n    providerId: 'taboola',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_vctr_taboola_ads',\n      relatedProvider: 'taboola',\n      expression: [\n        {\n          title: '(',\n          value: '(',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: 'Clicks',\n          value: 'ads_table_clicks_taboola_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Impressions',\n          value: 'ads_table_impressions_taboola_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: ')',\n          value: ')',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: '*',\n          value: '*',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: '100',\n          value: '100',\n          type: ElementTypes.INTEGER,\n        }\n      ]\n    },\n  },\n\n  taboolaCPC: {\n    id: 'taboolaCPC',\n    title: 'Actual CPC',\n    color: '#003366',\n    valueToFixed: 2,\n    type: 'currency',\n    services: ['taboola'],\n    tip: 'Cost Per Click. Calculated by: Spend / Clicks.',\n    icon: 'taboola',\n    metricId: 'taboolaCPC',\n    providerId: 'taboola',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_cpc_taboola_ads',\n      relatedProvider: 'taboola',\n      expression: [\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_taboola_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Clicks',\n          value: 'ads_table_clicks_taboola_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n\ntaboolaConversions:{\n  id: 'taboolaConversions',\n  title: 'Taboola All Conversions',\n  color: '#003366',\n  valueToFixed: 0,\n  type: 'currency',\n  services: ['taboola'],\n  tip: 'Number of click conversions',\n  icon: 'taboola',\n  metricId: 'taboolaConversions',\n  providerId: 'taboola',\n  willyConfig: {\n    isCustomMetric: false,\n    id: 'ads_table_all_conversions_taboola_ads',\n    tableId: 'ads_table',\n    columnId: 'all_conversions',\n    relatedProvider: 'taboola',\n    aggFunction: 'SUM',\n    filter: [\n      [\n        {\n          column: { name: 'channel', id: 'channel' },\n          comparator: 'is_in',\n          value: ['taboola'],\n        },\n      ],\n    ],\n  }\n},\n\n  taboolaConversionRate: {\n    id: 'taboolaConversionRate',\n    title: 'Taboola Conversion Rate',\n    color: '#003366',\n    valueToFixed: 2,\n    type: 'percent',\n    services: ['taboola'],\n    tip: 'The percentage of visitors from your Taboola campaigns who completed a conversion. Calculated by: Conversions / Clicks',\n    icon: 'taboola',\n    metricId: 'taboolaConversionRate',\n    providerId: 'taboola',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_conversion_rate_taboola_ads',  \n      relatedProvider: 'taboola', \n      expression: [\n        {\n          title: '(',\n          value: '(',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: 'All Conversions',\n          value: 'ads_table_all_conversions_taboola_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Clicks',\n          value: 'ads_table_clicks_taboola_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: ')',\n          value: ')',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: '*',\n          value: '*',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: '100',\n\n          value: '100',\n          type: ElementTypes.INTEGER, \n        }\n      ],\n    },\n  },\n\n  taboolaCPA: {\n    id: 'taboolaCPA',\n    title: 'Taboola CPA',\n    color: '#003366',\n    valueToFixed: 2,\n    type: 'currency',\n    services: ['taboola'],\n    tip: 'Cost Per Action. Calculated by: Spend / All Conversions.',\n    icon: 'taboola',\n    metricId: 'taboolaCPA',\n    providerId: 'taboola',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_cpa_taboola_ads',\n      relatedProvider: 'taboola',\n      expression: [\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_taboola_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'All Conversions',\n          value: 'ads_table_all_conversions_taboola_ads',\n          type: ElementTypes.METRIC,\n        },\n      ],\n    },\n  },\n\n  taboolaVCPM:{\n    id: 'taboolaVCPM',\n    title: 'Taboola V CPM',\n    color: '#003366',\n    valueToFixed: 2,\n    type: 'currency',\n    services: ['taboola'],\n    tip: 'Cost Per One Thousand Impressions. Calculated by: (Spend / Impressions) * 1000',\n    icon: 'taboola',\n    metricId: 'taboolaVCPM',\n    providerId: 'taboola',\n    willyConfig: {\n      isCustomMetric: true,\n      id: 'ads_table_vcpm_taboola_ads',\n      relatedProvider: 'taboola',\n      expression: [\n        {\n          title: '(',\n          value: '(',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: 'Spend',\n          value: 'ads_table_spend_taboola_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: '/',\n          value: '/',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: 'Impressions',\n          value: 'ads_table_impressions_taboola_ads',\n          type: ElementTypes.METRIC,\n        },\n        {\n          title: ')',\n          value: ')',\n          type: ElementTypes.PARENTHESES,\n        },\n        {\n          title: '*',\n          value: '*',\n          type: ElementTypes.OPERATOR,\n        },\n        {\n          title: '1000',\n          value: '1000',\n          type: ElementTypes.INTEGER,\n        },\n      ],\n  }\n},\n\ntaboolaConversionValue: {\n  id: 'taboolaConversionValue',\n  title: 'Taboola Conversion Value',\n  color: '#003366',\n  valueToFixed: 2,\n  type: 'currency',\n  services: ['taboola'],\n  tip: 'Revenue generated from conversions',\n  icon: 'taboola',\n  metricId: 'taboolaConversionValue',\n  providerId: 'taboola',\n  willyConfig: {\n    isCustomMetric: false,\n    id: 'ads_table_conversion_value_taboola_ads',\n    tableId: 'ads_table',\n    columnId: 'conversion_value',\n    relatedProvider: 'taboola',\n    aggFunction: 'SUM',\n    filter: [\n      [\n        {\n          column: { name: 'channel', id: 'channel' },\n          comparator: 'is_in',\n          value: ['taboola'],\n        },\n      ],\n    ],\n  },\n},\n\ntaboolaRoas: {\n  id: 'taboolaRoas',\n  title: 'Taboola ROAS',\n  color: '#003366',\n  valueToFixed: 2,\n  type: 'decimal',\n  services: ['taboola'],\n  tip: 'Taboola Return on ad spend. Calculated by: Conversion Value / Spend',\n  icon: 'taboola',\n  metricId: 'taboolaRoas',\n  providerId: 'taboola',\n  willyConfig: {\n    isCustomMetric: true,\n    id: 'ads_table_roas_taboola_ads',\n    relatedProvider: 'taboola',\n    expression: [\n      {\n        title: 'Conversion Value',\n        value: 'ads_table_conversion_value_taboola_ads',\n        type: ElementTypes.METRIC,\n      },\n      {\n        title: '/',\n        value: '/',\n        type: ElementTypes.OPERATOR,\n      },\n\n      {\n        title: 'Spend',\n        value: 'ads_table_spend_taboola_ads',\n        type: ElementTypes.METRIC,\n      },\n    ],\n  },\n},\n\ntaboolaAOV: {\n  id: 'taboolaAOV',\n  title: 'Taboola AOV',\n  color: '#003366',\n  valueToFixed: 2,\n  type: 'currency',\n  services: ['taboola'],\n  tip: 'Average order value. Calculated by: Conversion Value / Conversions',\n  icon: 'taboola',\n  metricId: 'taboolaAOV',\n  providerId: 'taboola',\n  willyConfig: {\n    isCustomMetric: true,\n    id: 'ads_table_aov_taboola_ads',\n    relatedProvider: 'taboola',\n    expression: [\n      {\n        title: 'Conversion Value',\n        value: 'ads_table_conversion_value_taboola_ads',\n\n        type: ElementTypes.METRIC,\n      },\n      {\n        title: '/',\n        value: '/',\n        type: ElementTypes.OPERATOR,\n      },\n      {\n        title: 'All Conversions',\n        value: 'ads_table_all_conversions_taboola_ads',\n        type: ElementTypes.METRIC,\n      },\n    ],\n  },\n},\n\ntaboolaCPV:{\n  id: 'taboolaCPV',\n  title: 'Taboola CPV',\n  color: '#003366',\n  valueToFixed: 2,\n  type: 'decimal',\n  services: ['taboola'],\n  tip: 'Cost Per Visit. Calculated by: Spend / Visits', \n  icon: 'taboola',\n  metricId: 'taboolaCPV',\n  providerId: 'taboola',\n  willyConfig: {\n    isCustomMetric: true,\n    id: 'ads_table_cpv_taboola_ads',\n    relatedProvider: 'taboola',\n    expression: [\n      {\n        title: 'Spend',\n        value: 'ads_table_spend_taboola_ads',\n        type: ElementTypes.METRIC,\n      },\n      {\n        title: '/',\n        value: '/',\n        type: ElementTypes.OPERATOR,\n      },\n      {\n        title: 'Visits',\n        value: 'ads_table_visits_taboola_ads',\n        type: ElementTypes.METRIC,\n      },\n    ],\n  },\n},\n\n\n};",
        "type": "SummaryMetricsDictionary"
      }
    ]
  },
  {
    "file": "@tw/types/SummaryMetrics/SummaryMetricsChartsSelectors.ts",
    "exports": [
      {
        "name": " SummaryMetricsChartsSelectors",
        "text": "export const SummaryMetricsChartsSelectors = [\n  'chartSales',\n  'chartNewCustomerSales',\n  'netSalesChart',\n  'chartReturningCustomerSales',\n  'totalPaymentGatewayCostsChart',\n  'chartShopifyAov',\n  'chartShopifyAovIncludeZero',\n  'chartShopifyCpa',\n  'chartGaRevenuePerTransaction',\n  'chartFacebookInsights',\n  'chartGoogleAds',\n  'googleAdsClicksChart',\n  'googleConversionValueChart',\n  'chartSnapchatAds',\n  'snapchatRoasChart',\n  'snapchat_impressions_chart',\n  'snapchat_swipes_chart',\n  'snapchatCpmChart',\n  'snapchatCpaChart',\n  'chartSnapchatConversionPurchasesValue',\n  'chartSnapchatConversionPurchases',\n  'chartGaTransactionsPerSession',\n  'chartGaUsers',\n  'chartOrders',\n  'chartOrdersWithAmount',\n  'chartNewGrossSales',\n  'chartTotalCpa',\n  'chartRefunds',\n  'chartFacebookPurchaseRoas',\n  'googleAdsRoasChart',\n  'googleAdsConversionsChart',\n  'googleCpaChart',\n  'totalGoogleAdsCpmChart',\n  'googleCpcChart',\n  'totalGoogleAdsImpressionsChart',\n  'totalCustomSpendsChart',\n  'merChart',\n  'totalReturnsChart',\n  'totalRevenuePerSessionChart',\n  'googleAllConversionValueChart',\n  'totalAllRoasChart',\n  'googleAdsAllConversionsChart',\n  'googleAllCpaChart',\n  'totalGoogleAdsCtrChart',\n  'chartFacebookCpc',\n  'chartFacebookCpm',\n  'facebookViewThroughChart',\n  'facebookViewThroughRoasChart',\n  'facebookViewThroughCpaChart',\n  'chartFacebookCtr',\n  'chartFacebookCostPerOutboundClick',\n  'facebookConversionValueChart',\n  'facebookRevenuePerClickChart',\n  'facebookCpaChart',\n  'facebookPurchasesChart',\n  'facebookMetaPurchasesChart',\n  'facebookWebPurchasesChart',\n  'facebookWebConversionValueChart',\n  'facebookMetaConversionValueChart',\n  'chartNewCustomersCpa',\n  'chartKlaviyoPlacedOrderSalesPercent',\n  'chartKlaviyoPlacedOrderSalesPercentFlows',\n  'chartKlaviyoPlacedOrderSalesPercentCampaigns',\n  'chartKlaviyoUnsubscribed',\n  'chartKlaviyoPlacedOrderTotalPriceFlows',\n  'chartKlaviyoPlacedOrderTotalPriceFlows',\n  'chartKlaviyoPlacedOrderTotalPriceCampaigns',\n  'chartKlaviyoPlacedOrderTotalPriceCampaigns',\n  'chartKlaviyoSubscribedToList',\n  'chartKlaviyoClickedEmail',\n  'chartKlaviyoReceivedEmail',\n  'chartKlaviyoClickedSms',\n  'chartKlaviyoCVR',\n  'chartKlaviyoRevenuePerEmail',\n  'chartKlaviyoNetNewSubscribers',\n  'tiktokSpendChart',\n  'tiktokRoasChart',\n  'tiktokImpressionsChart',\n  'chartTiktokCpm',\n  'chartTiktokCpc',\n  'chartTiktokCtr',\n  'tiktokCpaChart',\n  'tiktokConversionValueChart',\n  'tiktokPurchases',\n  'tiktokPurchasesChart',\n  'tiktokShopConversions',\n  'tiktokShopConversionsChart',\n  'tiktokShopConversionsValue',\n  'tiktokShopConversionsValueChart',\n  'twitterSpendChart',\n  'twitterRoasChart',\n  'twitterImpressionsChart',\n  'twitterClicksChart',\n  'twitterConversionValueChart',\n  'twitterPurchasesChart',\n  'twitterEngagementsChart',\n  'twitterFollowsChart',\n  'twitterCpmChart',\n  'twitterCpaChart',\n  'bingAdSpend',\n  'bingConversions',\n  'bingConversionValue',\n  'bingClicks',\n  'bingImpressions',\n  'bingRoas',\n  'bingCtr',\n  'bingCpa',\n  'bingCpm',\n  'bingAdSpendChart',\n  'bingConversionsChart',\n  'bingConversionValueChart',\n  'bingClicksChart',\n  'bingImpressionsChart',\n  'bingRoasChart',\n  'bingCtrChart',\n  'bingCpaChart',\n  'bingCpmChart',\n  'chartOrders',\n  'chartTaxes',\n  'chartNetTaxes',\n  'chartCogs',\n  'chartTotalVariantsSold',\n  'chartHandlingFees',\n  'chartNewCustomersPercent',\n  'chartOldCustomersPercent',\n  'chartNewCustomersOrders',\n  'totalShippingCostsChart',\n  'totalDiscountsChart',\n  'chartGaUsers',\n  'chartBlendedAds',\n  'chartRoas',\n  'totalNetProfitChart',\n  'chartNewCustomerRoas',\n  'chartBlendedAttributedRoas',\n  'chartBlendedAttributedRoas',\n  'pinterestSpendChart',\n  'pinterestRoasChart',\n  'pinterestCpcChart',\n  'pinterestCpmChart',\n  'pinterestConversionValueChart',\n  'pinterestPurchasesChart',\n  'pinterestImpressionsChart',\n  'pinterestCtrChart',\n  'chartPixelUsers',\n  'chartPixelOrders',\n  'chartPixelSales',\n  'chartPixelAddToCarts',\n  'pixelAvgPagesPerSessionChart',\n  'pixelAvgSessionDurationChart',\n  'pixelBounceRateChart',\n  'pixelNewVisitorsChart',\n  'pixelPercentNewVisitorsChart',\n  'orderTagsCharts',\n  'sourcesCharts',\n  'customMetricsCharts',\n  'willyChart',\n  'externalAppsChart',\n  'chartBenchmarksCPM',\n  'chartBenchmarksCPC',\n  'chartBenchmarksCTR',\n  'chartBenchmarksNCROAS',\n  'chartBenchmarksNCPA',\n  'chartBenchmarksBlendedROAS',\n  'chartBenchmarksTotalSpendAAvg',\n  'chartBenchmarksFBAdsNewCustomersAvg',\n  'chartBenchmarksSize',\n  'chartBenchmarksOrdersAvg',\n  'chartBenchmarksNewCustomersTotalPriceAvg',\n  'chartBenchmarksTotalPriceUSDAvg',\n  'chartBenchmarksFBAdsSpendAvg',\n  'chartBenchmarksFBAdsImpressionsAvg',\n  'chartBenchmarksFBAdsClicksAvg',\n  'chartBenchmarksFacebookRoas',\n  'chartBenchmarksGoogleRoas',\n  'chartBenchmarksCPCGoogle',\n  'chartBenchmarksCPMGoogle',\n  'chartBenchmarksCTRGoogle',\n  'chartBenchmarksGoogleAdsSpendAvg',\n  'chartBenchmarksCTRTiktok',\n  'chartBenchmarksCPCTiktok',\n  'chartBenchmarksTiktokRoas',\n  'chartBenchmarksTiktokAdsSpendAvg',\n  'chartBenchmarksBlendedCTR',\n  'chartBenchmarksBlendedCpc',\n  'chartAttentiveNewSubscribed',\n  'chartAttentiveNetNewsubscribers',\n  'chartAttentiveUnsubscribed',\n  'chartAttentivePlacedOrderSalesPercent',\n  'chartAttentivePlacedOrderTotalPriceFlows',\n  'chartAttentivePlacedOrderTotalPriceFlows',\n  'chartAttentivePlacedOrderTotalPriceCampaigns',\n  'chartAttentivePlacedOrderTotalPriceCampaigns',\n  'chartFacebookLikes',\n  'chartFacebookComments',\n  'chartFacebookShares',\n  'chartFacebookPosts',\n  'chartFacebookFollowers',\n  'chartFacebookImpressions',\n  'chartFacebookSocialAvg',\n  'chartFacebookReach',\n  'chartFacebookProfileView',\n  'chartFacebookWebsiteClicks',\n  'chartInstagramLikes',\n  'chartInstagramComments',\n  'chartInstagramShares',\n  'chartInstagramPosts',\n  'chartInstagramFollowers',\n  'chartInstagramImpressions',\n  'chartInstagramAvg',\n  'chartInstagramAvgImpressionsFollowers',\n  'chartInstagramReach',\n  'chartInstagramProfileView',\n  'chartInstagramWebsiteClicks',\n  'influencerConversionValueChart',\n  'influencerSpendChart',\n  'influencerRoasChart',\n  'influencerPurchasesChart',\n  'influencerNcPurchasesChart',\n  'influencerNcConversionValueChart',\n  'totalCustomAdSpendsChart',\n  'totalCustomNonAdSpendsChart',\n  'chartBlendedSales',\n\n  // amazon\n  'chartAmazonSales',\n  'chartAmazonProductItemPrice',\n  'chartAmazonSalesTaxes',\n  'chartAmazonOrders',\n  'chartAmazonItems',\n  'chartAmazonFees',\n  'chartAmazonSalesAFN',\n  'chartAmazonProductItemPriceAFN',\n  'chartAmazonSalesTaxesAFN',\n  'chartAmazonOrdersAFN',\n  'chartAmazonItemsAFN',\n  'chartAmazonFeesAFN',\n  'chartAmazonSalesMFN',\n  'chartAmazonProductItemPriceMFN',\n  'chartAmazonSalesTaxesMFN',\n  'chartAmazonOrdersMFN',\n  'chartAmazonItemsMFN',\n  'chartAmazonFeesMFN',\n\n  'chartCanceledAmazonSales',\n  'chartCanceledAmazonProductItemPrice',\n  'chartCanceledAmazonSalesTaxes',\n  'chartCanceledAmazonOrders',\n  'chartCanceledAmazonItems',\n  'chartCanceledAmazonFees',\n  'chartCanceledAmazonSalesAFN',\n  'chartCanceledAmazonProductItemPriceAFN',\n  'chartCanceledAmazonSalesTaxesAFN',\n  'chartCanceledAmazonOrdersAFN',\n  'chartCanceledAmazonItemsAFN',\n  'chartCanceledAmazonFeesAFN',\n  'chartCanceledAmazonSalesMFN',\n  'chartCanceledAmazonProductItemPriceMFN',\n  'chartCanceledAmazonSalesTaxesMFN',\n  'chartCanceledAmazonOrdersMFN',\n  'chartCanceledAmazonItemsMFN',\n  'chartCanceledAmazonFeesMFN',\n\n  'chartAmazonAds',\n  'chartAmazonClicks',\n  'amazonRoasChart',\n  'chartAmazonPurchases',\n  'chartAmazonCPC',\n  'amazonConversionValueChart',\n\n  'chartAmazonNetSales',\n  'cahrtAmazonNetProfit',\n  'amazonMERChart',\n  'amazonAOVChart',\n  'amazonCPAChart',\n  'amazonExpensesChart',\n\n  //kno\n  'totalFacebookKnoChart',\n  'totalGoogleKnoChart',\n  'totalSnapchatKnoChart',\n  'totalTiktokKnoChart',\n  'totalPinterestKnoChart',\n  'totalInstagramKnoChart',\n\n  //fairing\n  'responsesPrecentChart',\n  'totalFacebookEnqChart',\n  'totalGoogleEnqChart',\n  'totalSnapchatEnqChart',\n  'totalTiktokEnqChart',\n  'totalPinterestEnqChart',\n  'totalInstagramEnqChart',\n\n  // pixel\n  'pixelUniqueVisitorsChart',\n  'pixelVisitorsChart',\n  'pixelUniqueAtcChart',\n  'pixelUniqueSessionsAtcChart',\n  'pixelPurchasesChart',\n  'pixelConversionRateChart',\n  'pixelPercentAtcChart',\n  'pixelCostPerSessionChart',\n  'pixelCostPerAtcChart',\n\n  // recharge\n\n  'rechargeSubscription1stOrderSalesChart',\n  'rechargeSubscriptionRecurringOrderChart',\n  'rechargeTotalSubscriptionSalesChart',\n  'rechargeSubscriptionSalesPercentageChart',\n  'rechargeTotalNewSubscriptionsChart',\n  'rechargeTotalCancelledSubscriptionsChart',\n  'rechargeTotalChurnedSubscribersChart',\n  'rechargeTotalActiveSubscriptionsChart',\n  'rechargeTotalActiveSubscribersChart',\n  'rechargeAverageActiveDaysChart',\n  'rechargeAverageSubscriptionsPerCustomerChart',\n  'rechargeReactivatedSubscribersChart',\n\n  // stripe\n\n  'stripeSubscriptionUpgradeCountChart',\n  'stripeSubscriptionUpgradeAmountChart',\n  'stripeSubscriptionDowngradeCountChart',\n  'stripeSubscriptionDowngradeAmountChart',\n  'stripeSubscriptionDeletedCountChart',\n  'stripeSubscriptionDeletedAmountChart',\n\n  //MNTN\n  'mountainSpendChart',\n  'mountainRoasChart',\n  'mountainImpressionsChart',\n  'mountainConversionsChart',\n  'mountainConversionRateChart',\n  'mountainAverageOrderValueChart',\n  'mountainCostPerAcquisitionChart',\n  'mountainCostPerVisitChart',\n  'mountainConversionValueChart',\n\n  //criteo\n  'criteoSpendChart',\n  'criteoRoasChart',\n  'criteoDisplaysChart',\n  'criteoConversionsChart',\n  'criteoConversionRateChart',\n  'criteoAverageOrderValueChart',\n  'criteoVisitsChart',\n  'criteoClicksChart',\n  'criteoCostPerAcquisitionChart',\n  'criteoCostPerVisitChart',\n  'criteoConversionValueChart',\n\n  // shipstation\n  'shipstationCost',\n  'shipstationCostChart',\n  'shipstationShipments',\n  'shipstationShipmentsChart',\n  'shipstationOrders',\n  'shipstationOrdersChart',\n  'shipstationOrdersShipped',\n  'shipstationOrdersShippedChart',\n  'shipstationOrdersUnshipped',\n  'shipstationOrdersUnshippedChart',\n  'shipstationAvgCostPerShipment',\n  'shipstationAvgCostPerShipmentChart',\n  'shipstationEstimation',\n  'shipstationEstimationChart',\n\n  // gorgias\n  'gorgiasSensoryTicketsCreated',\n  'gorgiasSensoryTicketsCreatedChart',\n  'gorgiasSensoryTicketsReplied',\n  'gorgiasSensoryTicketsRepliedChart',\n  'gorgiasSensoryAvgResponseTime',\n  'gorgiasSensoryAvgResponseTimeChart',\n  'gorgiasSensoryAvgResolutionTime',\n  'gorgiasSensoryAvgResolutionTimeChart',\n\n  //smsbump\n  'smsbumpRevenueChart',\n  'smsbumpCampaignRevenueChart',\n  'smsbumpFlowRevenueChart',\n  'smsbumpSpendChart',\n  'smsbumpSentChart',\n  'smsbumpUnsubscribedChart',\n  'smsbumpConversionsChart',\n  'smsbumpAovChart',\n  'smsbumpCtrChart',\n  'smsbumpRoasChart',\n  'smsbumpRoiChart',\n  'smsbumpDeliveredChart',\n  'smsbumpClicksChart',\n\n  // shipbob\n  'shipbobOrders',\n  'shipbobOrdersChart',\n  'shipbobOrdersFulfilled',\n  'shipbobOrdersFulfilledChart',\n  'shipbobPercentOfOrdersFulfilledOnTime',\n  'shipbobPercentOfOrdersFulfilledOnTimeChart',\n  'shipbobFulfillmentCost',\n  'shipbobFulfillmentCostChart',\n  'shipbobAvgFulfillmentCost',\n  'shipbobAvgFulfillmentCostChart',\n  'shipbobEstimation',\n  'shipbobEstimationChart',\n\n  //postscript\n  'postscriptRevenueChart',\n  'postscriptSentChart',\n  'postscriptSubscribedChart',\n  'postscriptUnsubscribedChart',\n  'postscriptConversionsChart',\n  'postscriptDeliveredChart',\n  'postscriptAovChart',\n  'postscriptCtrChart',\n  'postscriptClicksChart',\n] as const;",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/types/SummaryMetrics/SummaryMetricsIcons.ts",
    "exports": [
      {
        "name": " SummaryMetricsIcons",
        "text": "export const SummaryMetricsIcons = [\n  'blended',\n  'tripleWhale',\n  'pixel',\n  'influencers',\n  'shopify',\n  'google',\n  'googleAds',\n  'googleAnalytics',\n  'facebook',\n  'klaviyo',\n  'attentive',\n  'tiktok',\n  'pinterest',\n  'snapchat',\n  'youtube',\n  'instagram',\n  'gorgias',\n  'enquirelabs',\n  'kno',\n  'recharge',\n  'benchmarks',\n  'amazon',\n  'twitter',\n  'microsoft',\n  'customMetrics',\n  'willy',\n  'stripe',\n  'mountain',\n  'criteo',\n  'outbrain',\n  'taboola',\n  'shipstation',\n  'smsbump',\n  'shipbob',\n  'postscript',\n  'blended-metrics',\n  'triple-whale-logo',\n  'facebook-circle',\n  'google-ads',\n  'snapchat-circle',\n] as const;",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/types/SummaryMetrics/SummaryMetricsId.ts",
    "exports": [
      {
        "name": " SummaryMetricIds",
        "text": "export const SummaryMetricIds = [\n  'sales',\n  'newCustomerSales',\n  'netSales',\n  'grossProfit',\n  'rcRevenue',\n  'paymentGateways',\n  'grossSales',\n  'cogsOrders',\n  'cogsRefunds',\n  'cogs',\n  'handlingFees',\n  'customSpends',\n  'totalCustomAdSpends',\n  'totalCustomNonAdSpends',\n  'inventoryItems',\n  'inventoryItemsMissing',\n  'totalInventoryCost',\n  'totalInventoryValue',\n  'shopifyAov',\n  'shopifyAovIncludeZero',\n  'shopifyCpa',\n  'aov',\n  'facebookAds',\n  'googleAds',\n  'googleAllCpa', // There was a reverse between googleCpa/googleAllCpa. Its too complex to fix since it requires reimport for all the shops so I just reverse here.\n  'googleBounceRate',\n  'googleConversionValue',\n  'snapchatAds',\n  'snapchatRoas',\n  'snapchatImpressions',\n  'snapchatSwipes',\n  'snapchatCpm',\n  'snapchatCpa',\n  'snapchatConversionValue',\n  'snapchatConversions',\n  'snapchatConversionPurchases',\n  'googleConversionRate',\n  'googleSessions',\n  'shopifyOrders',\n  'shopifyOrdersWithAmount',\n  'totalNetProfit',\n  'cashTurnover',\n  'totalNetMargin',\n  'totalCpa',\n  'googleRps',\n  'totalRefunds',\n  'facebookRoas',\n  'googleRoas',\n  'totalGoogleAdsCtr',\n  'totalGoogleAdsCpm',\n  'googleCpc',\n  'totalGoogleAdsClicks',\n  'totalGoogleAdsImpressions',\n  'ga_transactions_adGroup',\n  'ga_all_transactions_adGroup',\n  'ga_all_transactionsRevenue_adGroup',\n  'ga_all_transactions_adGroup',\n  'totalAllRoas',\n  'googleCpa', // There was a reverse between googleCpa/googleAllCpa. Its too complex to fix since it requires reimport for all the shops so I just reverse here.\n  'facebookCpc',\n  'facebookClicks',\n  'facebookImpressions',\n  'facebookOutboundClicks',\n  'facebookCpm',\n  'facebookCtr',\n  'facebookCpoc',\n  'facebookConversionValue',\n  'facebookRevenuePerClick',\n  'facebookCpa',\n  'facebookViewThrough',\n  'facebookViewThroughRoas',\n  'facebookViewThroughCpa',\n  'facebookPurchases',\n  'facebookWebPurchases',\n  'facebookMetaPurchases',\n  'facebookWebConversionValue',\n  'facebookMetaConversionValue',\n  'newCustomersCpa',\n  'klaviyoSalesPercent',\n  'klaviyoFlowsSalesPercent',\n  'klaviyoCampaignsSalesPercent',\n  'klaviyoEmailOpenRate',\n  'klaviyoUnsubscribed',\n  'klaviyoPlacedOrderTotalPriceFlows',\n  'klaviyoPlacedOrderTotalPriceFlowsPercent',\n  'klaviyoPlacedOrderTotalPriceCampaigns',\n  'klaviyoPlacedOrderTotalPriceCampaignsPercent',\n  'klaviyoNewSubscribed',\n  'klaviyoEmailsClicked',\n  'klaviyoReceivedEmail',\n  'klaviyoSmsClicked',\n  'klaviyoCVR',\n  'klaviyoRevenuePerEmail',\n  'klaviyoNetNewSubscribers',\n  'klaviyoPlacedOrderSales',\n  'klaviyoOpenedEmail',\n  'attentivePlacedOrderSales',\n  'totalAttentivePlacedOrder',\n  'tiktokAds',\n  'tiktokClicks',\n  'tiktokRoas',\n  'tiktokImpressions',\n  'tiktokCpm',\n  'tiktokCpc',\n  'tiktokCtr',\n  'tiktokCpa',\n  'tiktokConversionValue',\n  'tiktokConversionValueWOshops',\n  'tiktokPurchases',\n  'tiktokShopConversions',\n  'tiktokShopConversionsValue',\n  'uniqueCustomerSales',\n  'customerFrequency',\n  'ltvCpa',\n  'mer',\n  'totalReturns',\n  'orders',\n  'taxes',\n  'taxesSales',\n  'totalRefundTaxes',\n  'newCustomersPercent',\n  'oldCustomersPercent',\n  'newCustomersOrders',\n  'returningCustomerOrders',\n  'uniqueCustomers',\n  'shipping',\n  'shippingRefunds',\n  'shippingPrice',\n  'discounts',\n  'googleAnalyticsUsers',\n  'totalVariantsSold',\n  'blendedAds',\n  'adsSpend',\n  'conversionValue',\n  'roas',\n  'newCustomersRoas',\n  'blendedAttributedRoas',\n  'poas',\n  'pinterestAds',\n  'pinterestClicks',\n  'pinterestRoas',\n  'pinterestCpc',\n  'pinterestCpm',\n  'pinterestConversionValue',\n  'pinterestPurchases',\n  'pinterestImpressions',\n  'pinterestCtr',\n  'blendedSales',\n\n  // benchmarks\n  'benchmarksCPM',\n  'benchmarksCPC',\n  'benchmarksCTR',\n  'benchmarksNCROAS',\n  'benchmarksNCPA',\n  'benchmarksBlendedROAS',\n  'benchmarksTotalSpendAvg',\n  'benchmarksNewCustomersAvg',\n  'benchmarksSize',\n  'benchmarksOrdersAvg',\n  'benchmarksNewCustomersTotalPriceAvg',\n  'benchmarksBlendedSpendAvg',\n  'benchmarksFBAdsSpendAvg',\n  'benchmarksFBAdsImpressionsAvg',\n  'benchmarksFBAdsClicksAvg',\n  'benchmarksFacebookRoas',\n  'benchmarksGoogleRoas',\n\n  // benchmarks new version\n  'totalBenchmarksCPCGoogle',\n  'totalBenchmarksCPMGoogle',\n  'totalBenchmarksCTRGoogle',\n\n  'totalBenchmarksGoogleAdsSpendAvg',\n  'totalBenchmarksCTRTiktok',\n  'totalBenchmarksCPCTiktok',\n  'benchmarksTiktokRoas',\n  'totalBenchmarksTiktokAdsSpendAvg',\n  'totalBenchmarksBlendedCTR',\n  'totalBenchmarksBlendedCpc',\n\n  // attentive\n  'attentiveNewSubscribed',\n  'attentiveNetNewsubscribers',\n  'attentiveUnsubscribed',\n  'attentiveSalesPercent',\n  'attentivePlacedOrderTotalPriceFlows',\n  'attentivePlacedOrderTotalPriceFlowsPercent',\n  'attentivePlacedOrderTotalPriceCampaigns',\n  'attentivePlacedOrderTotalPriceCampaignsPercent',\n\n  // enquirelabs\n  'totalFacebookEnq',\n  'totalGoogleEnq',\n  'totalSnapchatEnq',\n  'totalTiktokEnq',\n  'totalPinterestEnq',\n  'totalInstagramEnq',\n  'responsesPrecent',\n  'enqOrders',\n  'responsesEnq',\n\n  // kno\n  'totalFacebookKno',\n  'totalGoogleKno',\n  'totalSnapchatKno',\n  'totalTiktokKno',\n  'totalPinterestKno',\n  'totalInstagramKno',\n  'responsesPrecentKno',\n  'knoOrders',\n  'responsesKno',\n\n  // social\n  'facebookLikes',\n  'facebookComments',\n  'facebookShares',\n  'facebookPosts',\n  'facebookFollowers',\n  'facebookSocialImpressions',\n  'facebookSocialAvg',\n  'facebookReach',\n  'facebookProfileView',\n  'facebookWebsiteClicks',\n  'instagramLikes',\n  'instagramComments',\n  'instagramShares',\n  'instagramPosts',\n  'instagramFollowers',\n  'instagramImpressions',\n  'instagramAvg',\n  'instagramAvgImpressionsFollowers',\n  'instagramReach',\n  'instagramProfileView',\n  'instagramWebsiteClicks',\n\n  //influencers\n  'influencerConversionValue',\n  'influencerPurchases',\n  'influencerSpend',\n  'influencerRoas',\n  'influencerNcConversionValue',\n  'influencerNcPurchases',\n\n  //amazon-sales\n  'amazonSales',\n  'amazonProductItemPrice',\n  'amazonSalesTaxes',\n  'amazonOrders',\n  'amazonOrdersWithAmount',\n  'amazonItems',\n  'amazonFees',\n  'amazonSalesAFN',\n  'amazonProductItemPriceAFN',\n  'amazonSalesTaxesAFN',\n  'amazonOrdersAFN',\n  'amazonItemsAFN',\n  'amazonFeesAFN',\n  'amazonSalesMFN',\n  'amazonProductItemPriceMFN',\n  'amazonSalesTaxesMFN',\n  'amazonOrdersMFN',\n  'amazonItemsMFN',\n  'amazonFeesMFN',\n  'totalAmazonShippingPrice',\n  'totalAmazonShippingDiscount',\n\n  'canceledAmazonSales',\n  'canceledAmazonProductItemPrice',\n  'canceledAmazonSalesTaxes',\n  'canceledAmazonOrders',\n  'canceledAmazonItems',\n  'canceledAmazonFees',\n  'canceledAmazonSalesAFN',\n  'canceledAmazonProductItemPriceAFN',\n  'canceledAmazonSalesTaxesAFN',\n  'canceledAmazonOrdersAFN',\n  'canceledAmazonItemsAFN',\n  'canceledAmazonFeesAFN',\n  'canceledAmazonSalesMFN',\n  'canceledAmazonProductItemPriceMFN',\n  'canceledAmazonSalesTaxesMFN',\n  'canceledAmazonOrdersMFN',\n  'canceledAmazonItemsMFN',\n  'canceledAmazonFeesMFN',\n\n  // amazon-ads\n  'amazonAds',\n  'amazonROAS',\n  'amazonCPC',\n  'amazonClicks',\n  'amazonPurchases',\n  'amazonTACos',\n  'amazonAdsConversionValue',\n\n  // amazon-ads\n  'amazonNetSales',\n  'amazonNetProfit',\n  // 'amazonROAS',\n  'amazonMER',\n  'amazonAOV',\n  'amazonCPA',\n  'amazonExpenses',\n  'amazonCogs',\n  'amazonHandlingFees',\n  // pixel\n  'pixelUniqueVisitors',\n  'pixelVisitors',\n  'pixelUniqueAtc',\n  'pixelUniqueSessionsAtc',\n  'pixelPurchases',\n  'pixelConversionRate',\n  'pixelAvgPagesPerSession',\n  'pixelAvgSessionDuration',\n  'pixelBounceRate',\n  'pixelNewVisitors',\n  'pixelPercentNewVisitors',\n  'pixelPercentAtc',\n  'pixelCostPerAtc',\n  'pixelCostPerSession',\n  'pixelPageViews',\n  'pixelBounces',\n  'pixelTimeOnSite',\n\n  //twitter-ads\n  'twitterAds',\n  'twitterClicks',\n  // 'twitterSpend',\n  'twitterConversionValue',\n  'twitterPurchases',\n  'twitterImpressions',\n  'twitterEngagements',\n  // twitterPurchases,\n  'twitterCpm',\n  'twitterFollows',\n  'twitterCpa',\n  'twitterRoas',\n\n  // bing\n  'bingAdSpend',\n  'bingConversions',\n  'bingConversionValue',\n  'bingClicks',\n  'bingImpressions',\n  'bingRoas',\n  'bingCtr',\n  'bingCpa',\n  'bingCpm',\n\n  //recharge\n  'rechargeSubscription1stOrderSales',\n  'rechargeSubscriptionRecurringOrder',\n  'rechargeTotalSubscriptionSales',\n  'rechargeSubscriptionSalesPercentage',\n  'rechargeTotalNewSubscriptions',\n  'rechargeTotalCancelledSubscriptions',\n  'rechargeTotalChurnedSubscribers',\n  'rechargeTotalActiveSubscriptions',\n  'rechargeTotalActiveSubscribers',\n  'rechargeAverageActiveDays',\n  'rechargeAverageSubscriptionsPerCustomer',\n  'rechargeReactivatedSubscribers',\n\n  //stripe\n\n  'stripeSubscriptionUpgradeCount',\n  'stripeSubscriptionUpgradeAmount',\n  'stripeSubscriptionDowngradeCount',\n  'stripeSubscriptionDowngradeAmount',\n  'stripeSubscriptionDeletedCount',\n  'stripeSubscriptionDeletedAmount',\n\n  //MNTN\n  'mountainSpend',\n  'mountainRoas',\n  'mountainImpressions',\n  'mountainConversions',\n  'mountainConversionRate',\n  'mountainAverageOrderValue',\n  'mountainCostPerAcquisition',\n  'mountainCostPerVisit',\n  'mountainConversionValue',\n  'mountainVisits',\n\n  //criteo\n  'criteoSpend',\n  'criteoRoas',\n  'criteoDisplays',\n  'criteoConversions',\n  'criteoConversionRate',\n  'criteoVisits',\n  'criteoClicks',\n  'criteoAverageOrderValue',\n  'criteoCostPerAcquisition',\n  'criteoCostPerVisit',\n  'criteoConversionValue',\n\n  //pacing\n  'pacingTotalRevenue',\n  'pacingReturningCustomersRevenue',\n  'pacingNewCustomersRevenue',\n  // 'pacingTotalNetProfit',\n  'pacingBlendedAdSpend',\n  'pacingFacebookAdsConversionValue',\n  'pacingGoogleAdsConversionValue',\n  'pacingSnapchatAdsConversionValue',\n  'pacingTiktokAdsConversionValue',\n  'pacingPinterestAdsConversionValue',\n\n  //forwardView\n  'forwardViewTotalRevenue',\n  'forwardViewProductOrdersCount',\n  'forwardViewNcCustomerCntAttribution',\n\n  //shipstation\n  'shipstationCost',\n  'shipstationShipments',\n  'shipstationOrders',\n  'shipstationOrdersShipped',\n  'shipstationOrdersUnshipped',\n  'shipstationAvgCostPerShipment',\n  'shipstationEstimation',\n  'shipstationLabelCost',\n\n  // gorgiasSensory\n  'gorgiasSensoryTicketsCreated',\n  'gorgiasSensoryTicketsReplied',\n  'gorgiasSensoryAvgResponseTime',\n  'gorgiasSensoryAvgResolutionTime',\n\n  //smsbump\n  'smsbumpRevenue',\n  'smsbumpCampaignRevenue',\n  'smsbumpFlowRevenue',\n  'smsbumpSpend',\n  'smsbumpSent',\n  'smsbumpUnsubscribed',\n  'smsbumpConversions',\n  'smsbumpAov',\n  'smsbumpCtr',\n  'smsbumpRoas',\n  'smsbumpRoi',\n  'smsbumpDelivered',\n  'smsbumpClicks',\n\n  //shipbob\n  'shipbobOrders',\n  'shipbobOrdersFulfilled',\n  'shipbobPercentOfOrdersFulfilledOnTime',\n  'shipbobFulfillmentCost',\n  'shipbobAvgFulfillmentCost',\n  'shipbobEstimation',\n\n  //postscript\n  'postscriptRevenue',\n  'postscriptSent',\n  'postscriptSubscribed',\n  'postscriptUnsubscribed',\n  'postscriptConversions',\n  'postscriptDelivered',\n  'postscriptAov',\n  'postscriptCtr',\n  'postscriptClicks',\n\n  //outbrain\n  'outbrainSpend',\n  'outbrainImpressions',\n  'outbrainClicks',\n  'outbrainVCTR',\n  'outbrainCPC',\n  'outbrainConversionRate',\n  'outbrainConversions',\n  'outbrainAllConversions',\n  'outbrainCPA',\n  'outbrainVCPM',\n  'outbrainConversionValue',\n  'outbrainRoas',\n  'outbrainAOV',\n\n  //taboola\n  'taboolaSpend',\n  'taboolaImpressions',\n  'taboolaClicks',\n  'taboolaVisits',\n  'taboolaVCTR',\n  'taboolaCPC',\n  'taboolaConversions',\n  'taboolaConversionRate',\n  'taboolaCPA',\n  'taboolaVCPM',\n  'taboolaConversionValue',\n  'taboolaRoas',\n  'taboolaAOV',\n  'taboolaCPV',\n] as const;",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/types/SummaryMetrics/SummaryMetricsStatsSelectors.ts",
    "exports": [
      {
        "name": " SummaryMetricsStatsSelectors",
        "text": "export const SummaryMetricsStatsSelectors = [\n  'totalSales',\n  'newCustomerSales',\n  'netSales',\n  'grossProfit',\n  'rcRevenue',\n  'totalPaymentGatewayCosts',\n  'totalProductCostsOrders',\n  'totalCostsRefunds',\n  'totalProductCosts',\n  'totalHandlingFees',\n  'totalCustomSpends',\n  'totalNewGrossSales',\n  'totalCustomAdSpends',\n  'totalCustomNonAdSpends',\n  'totalInventoryItems',\n  'totalInventoryItemsMissing',\n  'totalInventoryCost',\n  'totalInventoryValue',\n  'shopifyAov',\n  'shopifyAovIncludeZero',\n  'shopifyCpa',\n  'averageGaRevenuePerTransaction',\n  'fb_ads_spend',\n  'ga_adCost',\n  'googleAllCpa',\n  'googleBounceRate',\n  'googleConversionValue',\n  'totalSnapchatSpend',\n  'totalSnapchatRoas',\n  'snapchatImpressions',\n  'snapchat_swipes',\n  'snapchatCpm',\n  'snapchatCpa',\n  'totalSnapchatConversionPurchasesValue',\n  'snapchatConversions',\n  'totalSnapchatConversionPurchases',\n  'averageGaTransactionsPerSession',\n  'totalGoogleAnalyticsSessions',\n  'totalOrders',\n  'totalOrdersWithAmount',\n  'totalNetProfit',\n  'cashTurnover',\n  'totalNetMargin',\n  'totalCpa',\n  'totalRevenuePerSession',\n  'totalRefunds',\n  'fb_ads_purchase_roas',\n  'ga_ROAS',\n  'totalGoogleAdsCtr',\n  'totalGoogleAdsCpm',\n  'googleCpc',\n  'totalGoogleAdsClicks',\n  'totalGoogleAdsImpressions',\n  'ga_transactions_adGroup',\n  'ga_all_transactions_adGroup',\n  'ga_all_transactionsRevenue_adGroup',\n  'ga_all_transactions_adGroup',\n  'totalAllRoas',\n  'googleCpa',\n  'shippingRefunds',\n  'totalShippingPrice',\n  'averageFacebookCpc',\n  'averageFacebookCpm',\n  'facebookCtr',\n  'facebookCostPerOutboundClick',\n  'facebookConversionValue',\n  'facebookRevenuePerClick',\n  'facebookCpa',\n  'facebookClicks',\n  'facebookImpressions',\n  'facebookConversions',\n  'facebookOutboundClicks',\n  'facebookViewThrough',\n  'facebookViewThroughRoas',\n  'facebookViewThroughCpa',\n  'facebookPurchases',\n  'facebookMetaPurchases',\n  'facebookWebPurchases',\n  'facebookWebConversionValue',\n  'facebookMetaConversionValue',\n  'newCustomersCpa',\n  'totalKlaviyoPlacedOrderSalesPercent',\n  'totalKlaviyoPlacedOrderSalesPercentFlows',\n  'totalKlaviyoPlacedOrderSalesPercentCampaigns',\n  'klaviyoEmailOpenRate',\n  'totalKlaviyoUnsubscribed',\n  'totalKlaviyoPlacedOrderTotalPriceFlows',\n  'totalKlaviyoPlacedOrderSalesPercentFlows',\n  'totalKlaviyoPlacedOrderTotalPriceCampaigns',\n  'totalKlaviyoPlacedOrderSalesPercentCampaigns',\n  'totalKlaviyoSubscribedToList',\n  'totalKlaviyoClickedEmail',\n  'totalKlaviyoReceivedEmail',\n  'totalKlaviyoClickedSms',\n  'klaviyoCVR',\n  'klaviyoRevenuePerEmail',\n  'totalKlaviyoNetNewSubscribers',\n  'klaviyoPlacedOrderSales',\n  'totalKlaviyoOpenedEmail',\n  'attentivePlacedOrderSales',\n  'totalAttentivePlacedOrder',\n  'tiktok_spend',\n  'tiktok_clicks',\n  'tiktok_complete_payment_roas',\n  'tiktokImpressions',\n  'averageTiktokCpm',\n  'averageTiktokCpc',\n  'tiktokCtr',\n  'tiktokCpa',\n  'tiktokConversionValue',\n  'tiktokConversionValueWOshops',\n  'tiktokPurchases',\n  'tiktokShopConversions',\n  'tiktokShopConversionsValue',\n  'twitterCpm',\n  'twitterCpa',\n  'twitterConversionValue',\n  'twitterConversions',\n  'twitterPurchases',\n  'twitterImpressions',\n  'twitterEngagements',\n  'twitterRoas',\n  'twitter_complete_payment_roas',\n  'twitter_spend',\n  'twitterFollows',\n  'twitterClicks',\n  'uniqueCustomerLifetimeValue',\n  'customerFrequency',\n  'ltvCpa',\n  'mer',\n  'totalReturns',\n  'totalOrders',\n  'totalTaxes',\n  'totalRefundTaxes',\n  'totalNetTaxes',\n  'newCustomersPercent',\n  'oldCustomersPercent',\n  'newCustomersOrders',\n  'returningCustomerOrders',\n  'getUniqueCustomerCount',\n  'totalShippingCosts',\n  'totalDiscounts',\n  'totalGoogleAnalyticsUsers',\n  'totalVariantsSold',\n  'blendedAds',\n  'adsSpend',\n  'conversionValue',\n  'totalRoas',\n  'newCustomersRoas',\n  'blendedAttributedRoas',\n  'poas',\n  'pinterestSpend',\n  'pinterestClicks',\n  'pinterestRoas',\n  'pinterestCpc',\n  'pinterestCpm',\n  'pinterestConversionValue',\n  'pinterestPurchases',\n  'pinterestImpressions',\n  'pinterestCtr',\n  'blendedSales',\n\n  // dynamic\n  'order_tags',\n  'sources',\n  'customMetrics',\n  'willyMetric',\n  'customMetricsAttribution',\n  'externalApps',\n\n  // benchmarks\n  'totalBenchmarksCPM',\n  'totalBenchmarksCPC',\n  'totalBenchmarksCTR',\n  'totalBenchmarksNCROAS',\n  'totalBenchmarksNCPA',\n  'totalBenchmarksBlendedROAS',\n  'totalBenchmarksTotalSpendAvg',\n  'totalBenchmarksNewCustomersAvg',\n  'totalBenchmarksSize',\n  'totalBenchmarksOrdersAvg',\n  'totalBenchmarksNewCustomersTotalPriceAvg',\n  'totalBenchmarksBlendedSpendAvg',\n  'totalBenchmarksFBAdsSpendAvg',\n  'totalBenchmarksFBAdsImpressionsAvg',\n  'totalBenchmarksFBAdsClicksAvg',\n  'benchmarksFacebookRoas',\n  'benchmarksGoogleRoas',\n  'totalBenchmarksCPCGoogle',\n  'totalBenchmarksCPMGoogle',\n  'totalBenchmarksCTRGoogle',\n  'totalBenchmarksGoogleAdsSpendAvg',\n  'totalBenchmarksCTRTiktok',\n  'totalBenchmarksCPCTiktok',\n  'benchmarksTiktokRoas',\n  'totalBenchmarksTiktokAdsSpendAvg',\n  'totalBenchmarksBlendedCTR',\n  'totalBenchmarksBlendedCpc',\n\n  // attentive\n  'totalAttentiveNewSubscribed',\n  'totalAttentiveNetNewsubscribers',\n  'totalAttentiveUnsubscribed',\n  'totalAttentivePlacedOrderSalesPercent',\n  'totalAttentivePlacedOrderTotalPriceFlows',\n  'totalAttentivePlacedOrderSalesPercentFlows',\n  'totalAttentivePlacedOrderTotalPriceCampaigns',\n  'totalAttentivePlacedOrderSalesPercentCampaigns',\n\n  // enquirelabs\n  'totalFacebookEnq',\n  'totalGoogleEnq',\n  'totalSnapchatEnq',\n  'totalTiktokEnq',\n  'totalPinterestEnq',\n  'totalInstagramEnq',\n  'responsesPrecent',\n  'enqOrders',\n  'responsesEnq',\n\n  // kno\n  'totalFacebookKno',\n  'totalGoogleKno',\n  'totalSnapchatKno',\n  'totalTiktokKno',\n  'totalPinterestKno',\n  'totalInstagramKno',\n  'responsesPrecentKno',\n  'knoOrders',\n  'responsesKno',\n\n  // recharge\n  'rechargeNewSub',\n  'rechargeTotalNewSubscriptions',\n  'rechargeCanceledSub',\n  'rechargeExpiredSub',\n  'rechargeTotalActiveSubsribers',\n  'rechargeTotalNetSales',\n  'rechargeItemsCount',\n  'rechargeTransactionCount',\n  'rechargeChurnRate',\n  'rechargeMRR',\n  'rechargeTotalActiveCustomers',\n  'rechargeTotalChurnedCustomers',\n\n  // social\n  'facebookLikes',\n  'facebookComments',\n  'facebookShares',\n  'facebookPosts',\n  'facebookFollowers',\n  'facebookSocialImpressions',\n  'facebookSocialAvg',\n  'facebookReach',\n  'facebookProfileView',\n  'facebookWebsiteClicks',\n  'instagramLikes',\n  'instagramComments',\n  'instagramShares',\n  'instagramPosts',\n  'instagramFollowers',\n  'instagramImpressions',\n  'instagramAvg',\n  'instagramAvgImpressionsFollowers',\n  'instagramReach',\n  'instagramProfileView',\n  'instagramWebsiteClicks',\n\n  // influencers\n  'influencerConversionValue',\n  'influencerPurchases',\n  'influencerSpend',\n  'influencerRoas',\n  'influencerNcPurchases',\n  'influencerNcConversionValue',\n\n  // amazon-sales\n  'totalAmazonSales',\n  'totalAmazonProductItemPrice',\n  'totalAmazonSalesTaxes',\n  'totalAmazonOrders',\n  'amazonOrdersWithAmount',\n  'totalAmazonItems',\n  'totalAmazonFees',\n  'totalAmazonSalesAFN',\n  'totalAmazonProductItemPriceAFN',\n  'totalAmazonSalesTaxesAFN',\n  'totalAmazonOrdersAFN',\n  'totalAmazonItemsAFN',\n  'totalAmazonFeesAFN',\n  'totalAmazonSalesMFN',\n  'totalAmazonProductItemPriceMFN',\n  'totalAmazonSalesTaxesMFN',\n  'totalAmazonOrdersMFN',\n  'totalAmazonItemsMFN',\n  'totalAmazonFeesMFN',\n  'totalAmazonShippingPrice',\n  'totalAmazonShippingDiscount',\n\n  'totalCanceledAmazonSales',\n  'totalCanceledAmazonProductItemPrice',\n  'totalCanceledAmazonSalesTaxes',\n  'totalCanceledAmazonOrders',\n  'totalCanceledAmazonItems',\n  'totalCanceledAmazonFees',\n  'totalCanceledAmazonSalesAFN',\n  'totalCanceledAmazonProductItemPriceAFN',\n  'totalCanceledAmazonSalesTaxesAFN',\n  'totalCanceledAmazonOrdersAFN',\n  'totalCanceledAmazonItemsAFN',\n  'totalCanceledAmazonFeesAFN',\n  'totalCanceledAmazonSalesMFN',\n  'totalCanceledAmazonProductItemPriceMFN',\n  'totalCanceledAmazonSalesTaxesMFN',\n  'totalCanceledAmazonOrdersMFN',\n  'totalCanceledAmazonItemsMFN',\n  'totalCanceledAmazonFeesMFN',\n\n  // amazon-ads\n  'amazonAds',\n  'amazonROAS',\n  'amazonCPC',\n  'amazonClicks',\n  'amazonPurchases',\n  'amazonTACos',\n  'amazonAdsConversionValue',\n\n  // amazon-ads\n  'amazonNetSales',\n  'amazonNetProfit',\n  // 'amazonROAS',\n  'amazonMER',\n  'amazonAOV',\n  'amazonCPA',\n  'amazonExpenses',\n  'amazonCogs',\n  'amazonHandlingFees',\n  // pixel\n  'pixelUniqueVisitors',\n  'pixelVisitors',\n  'pixelUniqueAtc',\n  'pixelUniqueSessionsAtc',\n  'pixelPurchases',\n  'pixelConversionRate',\n  'pixelAvgPagesPerSession',\n  'pixelAvgSessionDuration',\n  'pixelBounceRate',\n  'pixelNewVisitors',\n  'pixelPercentNewVisitors',\n  'pixelPercentAtc',\n  'pixelCostPerAtc',\n  'pixelCostPerSession',\n  'pixelPageViews',\n  'pixelBounces',\n  'pixelTimeOnSite',\n\n  // bing\n  'bingAdSpend',\n  'bingConversions',\n  'bingConversionValue',\n  'bingClicks',\n  'bingImpressions',\n  'bingRoas',\n  'bingCtr',\n  'bingCpa',\n  'bingCpm',\n\n  //recharge\n  'rechargeSubscription1stOrderSales',\n  'rechargeSubscriptionRecurringOrder',\n  'rechargeTotalSubscriptionSales',\n  'rechargeSubscriptionSalesPercentage',\n  'rechargeTotalNewSubscriptions',\n  'rechargeTotalCancelledSubscriptions',\n  'rechargeTotalChurnedSubscribers',\n  'rechargeTotalActiveSubscriptions',\n  'rechargeTotalActiveSubscribers',\n  'rechargeAverageActiveDays',\n  'rechargeAverageSubscriptionsPerCustomer',\n  'rechargeReactivatedSubscribers',\n\n  //stripe\n\n  'stripeSubscriptionUpgradeCount',\n  'stripeSubscriptionUpgradeAmount',\n  'stripeSubscriptionDowngradeCount',\n  'stripeSubscriptionDowngradeAmount',\n  'stripeSubscriptionDeletedCount',\n  'stripeSubscriptionDeletedAmount',\n\n  //MNTN\n  'mountainSpend',\n  'mountainRoas',\n  'mountainImpressions',\n  'mountainConversions',\n  'mountainConversionRate',\n  'mountainAverageOrderValue',\n  'mountainCostPerAcquisition',\n  'mountainCostPerVisit',\n  'mountainConversionValue',\n  'mountainVisits',\n\n  //criteo\n  'criteoSpend',\n  'criteoRoas',\n  'criteoDisplays',\n  'criteoConversions',\n  'criteoConversionRate',\n  'criteoVisits',\n  'criteoClicks',\n  'criteoAverageOrderValue',\n  'criteoCostPerAcquisition',\n  'criteoCostPerVisit',\n  'criteoConversionValue',\n\n  //pacing\n  'pacing',\n\n  //forwardView\n  'forwardViewTotalRevenue',\n  'forwardViewProductOrdersCount',\n  'forwardViewNcCustomerCntAttribution',\n\n  // shipstation\n  'shipstationCost',\n  'shipstationShipments',\n  'shipstationOrders',\n  'shipstationOrdersShipped',\n  'shipstationOrdersUnshipped',\n  'shipstationAvgCostPerShipment',\n  'shipstationEstimation',\n  'shipstationLabelCost',\n\n  // gorgiasSensory\n  'gorgiasSensoryTicketsCreated',\n  'gorgiasSensoryTicketsReplied',\n  'gorgiasSensoryAvgResponseTime',\n  'gorgiasSensoryAvgResolutionTime',\n\n  //smsbump\n  'smsbumpRevenue',\n  'smsbumpCampaignRevenue',\n  'smsbumpFlowRevenue',\n  'smsbumpSpend',\n  'smsbumpSent',\n  'smsbumpUnsubscribed',\n  'smsbumpConversions',\n  'smsbumpAov',\n  'smsbumpCtr',\n  'smsbumpRoas',\n  'smsbumpRoi',\n  'smsbumpDelivered',\n  'smsbumpClicks',\n\n  //shipbob\n  'shipbobOrders',\n  'shipbobOrdersFulfilled',\n  'shipbobPercentOfOrdersFulfilledOnTime',\n  'shipbobFulfillmentCost',\n  'shipbobAvgFulfillmentCost',\n  'shipbobEstimation',\n\n  //postscript\n  'postscriptRevenue',\n  'postscriptSent',\n  'postscriptSubscribed',\n  'postscriptUnsubscribed',\n  'postscriptConversions',\n  'postscriptDelivered',\n  'postscriptAov',\n  'postscriptCtr',\n  'postscriptClicks',\n\n    //outbrain\n  'outbrainSpend',\n  'outbrainImpressions',\n  'outbrainClicks',\n  'outbrainVCTR',\n  'outbrainCPC',\n  'outbrainConversionRate',\n  'outbrainConversions',\n  'outbrainAllConversions',\n  'outbrainCPA',\n  'outbrainVCPM',\n  'outbrainConversionValue',\n  'outbrainRoas',\n  'outbrainAOV',\n\n  //taboola\n  'taboolaSpend',\n  'taboolaImpressions',\n  'taboolaClicks',\n  'taboolaVisits',\n  'taboolaVCTR',\n  'taboolaCPC',\n  'taboolaConversions',\n  'taboolaConversionRate',\n  'taboolaCPA',\n  'taboolaVCPM',\n  'taboolaConversionValue',\n  'taboolaRoas',\n  'taboolaAOV',\n  'taboolaCPV',\n] as const;",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/types/SummaryMetrics/index.ts",
    "exports": [
      {
        "name": " blendedServices",
        "text": "\n\nexport const blendedServices: ServicesIds[] = [\n  'shopify',\n  'facebook-ads',\n  'google-ads',\n  'snapchat-ads',\n  'tiktok-ads',\n  'pinterest-ads',\n  'bing',\n];",
        "type": "ServicesIds[]"
      },
      {
        "name": " DOLLAR_TYPE",
        "text": "\n\nexport const DOLLAR_TYPE = '$';",
        "type": "variable"
      },
      {
        "name": " PERCENT_TYPE",
        "text": "\nexport const PERCENT_TYPE = '%';",
        "type": "variable"
      },
      {
        "name": " NUMBER_TYPE",
        "text": "\nexport const NUMBER_TYPE = 'number';",
        "type": "variable"
      },
      {
        "name": " customMetric",
        "text": "\n\nexport const customMetric = <M extends SummaryMetricIdsTypes = any>(\n  x: any\n): BaseSummaryMetric<M> => ({\n  id: x.id,\n  title: x.title,\n  color: '#7D4DFF',\n  isShow: () => !x.shouldBeFiltered,\n  valueToFixed: x.metricType === NUMBER_TYPE ? 2 : 0,\n  type:\n    x.metricType === DOLLAR_TYPE\n      ? 'currency'\n      : x.metricType === PERCENT_TYPE\n      ? 'percent'\n      : 'decimal',\n  metricId: 'customMetrics',\n  tip: x.description,\n  services: [],\n  isDynamicMetric: true,\n  statObjectKey: x.id,\n  isCustomMetric: true,\n  chart: 'customMetricsCharts',\n  icon: 'customMetrics',\n});",
        "type": "variable"
      },
      {
        "name": " willyMetric",
        "text": "\n\nexport const willyMetric = <M extends SummaryMetricIdsTypes = any>(\n  x: any\n): BaseSummaryMetric<M> => ({\n  id: x.id,\n  title: x.title,\n  color: '#7D4DFF',\n  isShow: () => !x.shouldBeFiltered,\n  valueToFixed: x.valueToFixed ?? 0,\n  type: x.format ?? 'string',\n  metricId: 'willyMetric',\n  tip: x.description,\n  services: [],\n  isDynamicMetric: true,\n  statObjectKey: x.id,\n  chart: 'willyChart',\n  icon: 'willy',\n});",
        "type": "variable"
      },
      {
        "name": " orderTagsMetric",
        "text": "\n\nexport const orderTagsMetric = <M extends SummaryMetricIdsTypes = any>(\n  x: any\n): BaseSummaryMetric<M> => {\n  const id: M = String(x.original || x.id).trim() as M;\n  return {\n    id: id,\n    title: id,\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'order_tags',\n    tip: 'Order tag from Shopify',\n    services: ['SHOPIFY'],\n    specificStat: 'revenue',\n    isDynamicMetric: true,\n    statObjectKey: id,\n    chart: 'orderTagsCharts',\n    icon: 'shopify',\n  };\n};",
        "type": "variable"
      },
      {
        "name": " shopifySourcesMetric",
        "text": "\n\nexport const shopifySourcesMetric = <M extends SummaryMetricIdsTypes = any>(\n  x: any\n): BaseSummaryMetric<M> => {\n  const id: M = String(x.original || x.id).trim() as M;\n  const title = x.title ?? id;\n  return {\n    id,\n    title,\n    color: '#7D4DFF',\n    valueToFixed: 0,\n    type: 'currency',\n    metricId: 'sources',\n    tip: 'Source from Shopify',\n    services: ['SHOPIFY'],\n    specificStat: 'revenue',\n    isDynamicMetric: true,\n    statObjectKey: id,\n    chart: 'sourcesCharts',\n    icon: 'shopify',\n  };\n};",
        "type": "variable"
      },
      {
        "name": " SummaryMetricsDictionary",
        "text": "\n\nexport type SummaryMetricsDictionary = {\n  [id in SummaryMetricIdsTypes]: BaseSummaryMetric<id>;\n};",
        "type": "{\n  [id in SummaryMetricIdsTypes]: BaseSummaryMetric<id>;\n}"
      },
      {
        "name": " BaseSummaryMetric",
        "text": "\n\nexport type BaseSummaryMetric<ID extends SummaryMetricIdsTypes> = {\n  id: ID;\n  metricId: SummaryMetricsStatsSelectorsNames;\n  reportTitle?: string; // used for report header when we don't have the icon indication\n  title: string;\n  shortTitle?: string;\n  features?: FeatureFlag[];\n  chart?: SummaryMetricsChartsSelectorsNames;\n  color: string;\n  valueToFixed?: number;\n  type: valueFormats;\n  tip?: string;\n  isNotRealTime?: boolean;\n  positiveComparison?: number;\n  isShow?: (stats: any) => boolean;\n  isShowLoadWhenImport?: ServicesIds;\n  services: (ServicesIds | string)[];\n  relatedMetrics?: SummaryMetricIdsTypes[];\n  isMinutes?: boolean;\n  specificStat?: string;\n  isDynamicMetric?: boolean;\n  isCustomMetric?: boolean;\n  providerId?: ServicesIds;\n  metric?: MetricsKeys;\n  statObjectKey?: SummaryMetricIdsTypes;\n  icon: SummaryMetricsIconKeys | ((rootState?: any) => SummaryMetricsIconKeys | React.ReactNode);\n  showOnlyForToday?: boolean;\n  hasTarget?: boolean;\n  hasBackgroundByDefault?: boolean;\n  customMetricPopup?: string;\n  metricPopupWidget?: boolean;\n  additionalMarketplaceBadge?: boolean;\n  dependOnCostSettings?: boolean;\n  isCumulativeMetric?: boolean;\n  isSupportCumulative?: boolean;\n  isChartStartsWithMinValue?: boolean;\n  willyMetricId?: string;\n  willyConfig?: {\n    id: string;\n    relatedProvider?: ServicesIds;\n    aggFunction?: AggregationFunction;\n  } & (\n    | {\n        isCustomMetric: false;\n        tableId: string;\n        columnId: string;\n        filter?: FilterRow[][] | any[][];\n      }\n    | {\n        isCustomMetric: true;\n        expression: ExpressionElement[];\n      }\n  );\n};",
        "type": "{\n  id: ID;\n  metricId: SummaryMetricsStatsSelectorsNames;\n  reportTitle?: string; // used for report header when we don't have the icon indication\n  title: string;\n  shortTitle?: string;\n  features?: FeatureFlag[];\n  chart?: SummaryMetricsChartsSelectorsNames;\n  color: string;\n  valueToFixed?: number;\n  type: valueFormats;\n  tip?: string;\n  isNotRealTime?: boolean;\n  positiveComparison?: number;\n  isShow?: (stats: any) => boolean;\n  isShowLoadWhenImport?: ServicesIds;\n  services: (ServicesIds | string)[];\n  relatedMetrics?: SummaryMetricIdsTypes[];\n  isMinutes?: boolean;\n  specificStat?: string;\n  isDynamicMetric?: boolean;\n  isCustomMetric?: boolean;\n  providerId?: ServicesIds;\n  metric?: MetricsKeys;\n  statObjectKey?: SummaryMetricIdsTypes;\n  icon: SummaryMetricsIconKeys | ((rootState?: any) => SummaryMetricsIconKeys | React.ReactNode);\n  showOnlyForToday?: boolean;\n  hasTarget?: boolean;\n  hasBackgroundByDefault?: boolean;\n  customMetricPopup?: string;\n  metricPopupWidget?: boolean;\n  additionalMarketplaceBadge?: boolean;\n  dependOnCostSettings?: boolean;\n  isCumulativeMetric?: boolean;\n  isSupportCumulative?: boolean;\n  isChartStartsWithMinValue?: boolean;\n  willyMetricId?: string;\n  willyConfig?: {\n    id: string;\n    relatedProvider?: ServicesIds;\n    aggFunction?: AggregationFunction;\n  } & (\n    | {\n        isCustomMetric: false;\n        tableId: string;\n        columnId: string;\n        filter?: FilterRow[][] | any[][];\n      }\n    | {\n        isCustomMetric: true;\n        expression: ExpressionElement[];\n      }\n  );\n}"
      },
      {
        "name": " SummaryMetricsStatsSelectorsNames",
        "text": "\nexport type SummaryMetricsStatsSelectorsNames = (typeof SummaryMetricsStatsSelectors)[number];",
        "type": "(typeof SummaryMetricsStatsSelectors)[number]"
      },
      {
        "name": " SummaryMetricIdsTypes",
        "text": "\nexport type SummaryMetricIdsTypes = (typeof SummaryMetricIds)[number];",
        "type": "(typeof SummaryMetricIds)[number]"
      },
      {
        "name": " SummaryMetricsChartsSelectorsNames",
        "text": "\nexport type SummaryMetricsChartsSelectorsNames = (typeof SummaryMetricsChartsSelectors)[number];",
        "type": "(typeof SummaryMetricsChartsSelectors)[number]"
      },
      {
        "name": " SummaryMetricsIconKeys",
        "text": "\nexport type SummaryMetricsIconKeys = (typeof SummaryMetricsIcons)[number];",
        "type": "(typeof SummaryMetricsIcons)[number]"
      }
    ]
  },
  {
    "file": "@tw/types/SummaryMetrics/test.ts",
    "exports": []
  },
  {
    "file": "@tw/types/auth/CheckAuthRequest.ts",
    "exports": [
      {
        "name": " sensoryIntegrationService",
        "text": "\n\nexport const sensoryIntegrationService = 'sensory-integrations';",
        "type": "variable"
      },
      {
        "name": " sensoryCredentialService",
        "text": "\nexport const sensoryCredentialService = 'sensory-credentials';",
        "type": "variable"
      },
      {
        "name": " sensoryMaster",
        "text": "\nexport const sensoryMaster = 'sensory-master';",
        "type": "variable"
      },
      {
        "name": " CheckAuthRequest",
        "text": "\n\nexport type CheckAuthRequest = {\n  id?: string;\n  serviceId: ServicesIds | typeof sensoryIntegrationService | typeof sensoryCredentialService | typeof sensoryMaster;\n  accountIds: string | string[];\n  type?: AuthType;\n  userId?: string;\n  fromAccountId?: string;\n};",
        "type": "{\n  id?: string;\n  serviceId: ServicesIds | typeof sensoryIntegrationService | typeof sensoryCredentialService | typeof sensoryMaster;\n  accountIds: string | string[];\n  type?: AuthType;\n  userId?: string;\n  fromAccountId?: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/auth/CheckAuthResponse.ts",
    "exports": [
      {
        "name": " CheckAuthResponse",
        "text": "export type CheckAuthResponse = { result: boolean; message?: string; code?: number };",
        "type": "{ result: boolean; message?: string; code?: number }"
      }
    ]
  },
  {
    "file": "@tw/types/auth/Spice.ts",
    "exports": [
      {
        "name": " TWSpiceResources",
        "text": "export const TWSpiceResources = [\n  'user',\n  'group',\n  'account',\n  'business_unit',\n  'provider',\n  'integration',\n  'dashboard',\n] as const;",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/types/auth/index.ts",
    "exports": [
      {
        "name": " AuthType",
        "text": "\n\nexport type AuthType = 'user' | 'app' | 'key';",
        "type": "'user' | 'app' | 'key'"
      },
      {
        "name": " FirebaseClaim",
        "text": "\n\nexport type FirebaseClaim = 'admin' | 'superadmin' | 'twDev' | 'twDashboardCreator' | 'twFF' | 'twSuperAdmin';",
        "type": "'admin' | 'superadmin' | 'twDev' | 'twDashboardCreator' | 'twFF' | 'twSuperAdmin'"
      },
      {
        "name": " FirebaseUser",
        "text": "\n\nexport type FirebaseUser = {\n  admin?: boolean;\n  iss: string;\n  auth_time: number;\n  user_id: string;\n  email: string;\n  email_verified: boolean;\n  firebase: any;\n} & JwtBase;",
        "type": "{\n  admin?: boolean;\n  iss: string;\n  auth_time: number;\n  user_id: string;\n  email: string;\n  email_verified: boolean;\n  firebase: any;\n} & JwtBase"
      },
      {
        "name": " Auth0App",
        "text": "\n\nexport type Auth0App = {\n  azp: string;\n  gty: string;\n} & JwtBase;",
        "type": "{\n  azp: string;\n  gty: string;\n} & JwtBase"
      },
      {
        "name": " HydraApp",
        "text": "\n\nexport type HydraApp = {\n  client_id: string;\n  ext?: {\n    claims?: {\n      accountId?: string;\n    };\n  };\n  iss: string;\n  jti: string;\n  nbf: string;\n  scp: string[];\n} & JwtBase;",
        "type": "{\n  client_id: string;\n  ext?: {\n    claims?: {\n      accountId?: string;\n    };\n  };\n  iss: string;\n  jti: string;\n  nbf: string;\n  scp: string[];\n} & JwtBase"
      },
      {
        "name": " JwtBase",
        "text": "\n\nexport type JwtBase = {\n  sub: string;\n  aud: string | string[];\n  iat: number;\n  exp: number;\n};",
        "type": "{\n  sub: string;\n  aud: string | string[];\n  iat: number;\n  exp: number;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/customSpend/CustomSpend.ts",
    "exports": [
      {
        "name": " CustomSpendsUpdateMessage",
        "text": "export type CustomSpendsUpdateMessage = {\n  shopId: string;\n  customSpendList: any[];\n  customSpendAttributionType: string;\n};",
        "type": "{\n  shopId: string;\n  customSpendList: any[];\n  customSpendAttributionType: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/datePicker/datePicker.ts",
    "exports": [
      {
        "name": " PreviousPeriodIds",
        "text": "export type PreviousPeriodIds =\n  | 'none'\n  | 'default'\n  | 'previousPeriod'\n  | 'previousWeek'\n  | 'previousMonth'\n  | 'previousQuarter'\n  | 'previousYear'\n  | 'custom';",
        "type": "| 'none'\n  | 'default'\n  | 'previousPeriod'\n  | 'previousWeek'\n  | 'previousMonth'\n  | 'previousQuarter'\n  | 'previousYear'\n  | 'custom'"
      },
      {
        "name": " Period",
        "text": "\n\n\nexport type Period = 'week' | 'month' | 'quarter' | 'year';",
        "type": "'week' | 'month' | 'quarter' | 'year'"
      },
      {
        "name": " mapFromPeriodIdToTimeUnit",
        "text": "\n\nexport const mapFromPeriodIdToTimeUnit: Record<PreviousPeriodIds, Period | null> = {\n  previousWeek: 'week',\n  previousMonth: 'month',\n  previousQuarter: 'quarter',\n  previousYear: 'year',\n  default: null,\n  none: null,\n  previousPeriod: null,\n  custom: null,\n};",
        "type": "Record<PreviousPeriodIds, Period | null>"
      }
    ]
  },
  {
    "file": "@tw/types/devops/RateLimitConfig.ts",
    "exports": [
      {
        "name": " RateLimitConfig",
        "text": "\n\nexport type RateLimitConfig<Req extends Request = RequestWithUser> = {\n  window: number; // in seconds\n  quota: number; // per api key user\n\n  // called with req object to determine if this rate limit should be applied\n  // this function cannot rely on any other values in scope, must be expressed\n  // only in terms of the request object\n  condition?: (req: Req) => boolean;\n\n  // called with req object to determine the 'user' for this rate limit (overrides req.user or header or query)\n  // this function cannot rely on any other values in scope, must be expressed\n  // only in terms of the request object\n  user?: (req: Req) => string;\n}[];",
        "type": "{\n  window: number; // in seconds\n  quota: number; // per api key user\n\n  // called with req object to determine if this rate limit should be applied\n  // this function cannot rely on any other values in scope, must be expressed\n  // only in terms of the request object\n  condition?: (req: Req) => boolean;\n\n  // called with req object to determine the 'user' for this rate limit (overrides req.user or header or query)\n  // this function cannot rely on any other values in scope, must be expressed\n  // only in terms of the request object\n  user?: (req: Req) => string;\n}[]"
      }
    ]
  },
  {
    "file": "@tw/types/devops/ServiceConfig.ts",
    "exports": [
      {
        "name": " endpointType",
        "text": "\n\n// open: public endpoint\n// internal: internal endpoint (only accessible from within the vpc)\n// authenticated: authenticated endpoint (only accessible with a valid token)\n// cluster-local: cluster local endpoint (only accessible from within the cluster)\n\nexport type endpointType = 'open' | 'internal' | 'authenticated' | 'cluster-local';",
        "type": "'open' | 'internal' | 'authenticated' | 'cluster-local'"
      },
      {
        "name": " ServiceEntryDeployment",
        "text": "\n\nexport type ServiceEntryDeployment = {\n  name: string;\n  endpoints: {\n    [e in endpointType]?: {\n      url: string;\n      type: e;\n      audience?: string;\n      cluster?: string;\n    };\n  };\n};",
        "type": "{\n  name: string;\n  endpoints: {\n    [e in endpointType]?: {\n      url: string;\n      type: e;\n      audience?: string;\n      cluster?: string;\n    };\n  };\n}"
      },
      {
        "name": " ServiceConfig",
        "text": "\n\nexport type ServiceConfig = {\n  env?: any;\n  color: string;\n  dependencies?: string[];\n  runtime?: 'node' | 'python';\n  tags?: string[];\n  serviceId?: string;\n  maintainers: string[];\n  contacts?: string[];\n  k8s?: boolean;\n  gitRepo?: string;\n  version?: number;\n  deployments: Record<\n    string, // deployment name\n    ServiceEntryDeployment\n  >;\n  sensory?: {\n    provider: SensoryProvider;\n    policies: SensoryPolicy<PolicyJobDefinition>[];\n  };\n};",
        "type": "{\n  env?: any;\n  color: string;\n  dependencies?: string[];\n  runtime?: 'node' | 'python';\n  tags?: string[];\n  serviceId?: string;\n  maintainers: string[];\n  contacts?: string[];\n  k8s?: boolean;\n  gitRepo?: string;\n  version?: number;\n  deployments: Record<\n    string, // deployment name\n    ServiceEntryDeployment\n  >;\n  sensory?: {\n    provider: SensoryProvider;\n    policies: SensoryPolicy<PolicyJobDefinition>[];\n  };\n}"
      }
    ]
  },
  {
    "file": "@tw/types/devops/datadog.ts",
    "exports": [
      {
        "name": " TracerOptions",
        "text": "\n\nexport declare interface TracerOptions {\n  /**\n   * Whether to enable trace ID injection in log records to be able to correlate\n   * traces with logs.\n   * @default false\n   */\n  logInjection?: boolean;\n\n  /**\n   * Whether to enable startup logs.\n   * @default true\n   */\n  startupLogs?: boolean;\n\n  /**\n   * The service name to be used for this program. If not set, the service name\n   * will attempted to be inferred from package.json\n   */\n  service?: string;\n\n  /**\n   * Provide service name mappings for each plugin.\n   */\n  serviceMapping?: { [key: string]: string };\n\n  /**\n   * The url of the trace agent that the tracer will submit to.\n   * Takes priority over hostname and port, if set.\n   */\n  url?: string;\n\n  /**\n   * The address of the trace agent that the tracer will submit to.\n   * @default 'localhost'\n   */\n  hostname?: string;\n\n  /**\n   * The port of the trace agent that the tracer will submit to.\n   * @default 8126\n   */\n  port?: number | string;\n\n  /**\n   * Whether to enable profiling.\n   */\n  profiling?: boolean;\n\n  /**\n   * Options specific for the Dogstatsd agent.\n   */\n  dogstatsd?: {\n    /**\n     * The hostname of the Dogstatsd agent that the metrics will submitted to.\n     */\n    hostname?: string;\n\n    /**\n     * The port of the Dogstatsd agent that the metrics will submitted to.\n     * @default 8125\n     */\n    port?: number;\n  };\n\n  /**\n   * Set an application’s environment e.g. prod, pre-prod, stage.\n   */\n  env?: string;\n\n  /**\n   * The version number of the application. If not set, the version\n   * will attempted to be inferred from package.json.\n   */\n  version?: string;\n\n  /**\n   * Controls the ingestion sample rate (between 0 and 1) between the agent and the backend.\n   */\n  sampleRate?: number;\n\n  /**\n   * Global rate limit that is applied on the global sample rate and all rules,\n   * and controls the ingestion rate limit between the agent and the backend.\n   * Defaults to deferring the decision to the agent.\n   */\n  rateLimit?: number;\n\n  /**\n   * Sampling rules to apply to priority samplin. Each rule is a JSON,\n   * consisting of `service` and `name`, which are regexes to match against\n   * a trace's `service` and `name`, and a corresponding `sampleRate`. If not\n   * specified, will defer to global sampling rate for all spans.\n   * @default []\n   */\n  samplingRules?: SamplingRule[];\n\n  /**\n   * Span sampling rules that take effect when the enclosing trace is dropped, to ingest single spans\n   * @default []\n   */\n  spanSamplingRules?: SpanSamplingRule[];\n\n  /**\n   * Interval in milliseconds at which the tracer will submit traces to the agent.\n   * @default 2000\n   */\n  flushInterval?: number;\n\n  /**\n   *  Number of spans before partially exporting a trace. This prevents keeping all the spans in memory for very large traces.\n   * @default 1000\n   */\n  flushMinSpans?: number;\n\n  /**\n   * Whether to enable runtime metrics.\n   * @default false\n   */\n  runtimeMetrics?: boolean;\n\n  /**\n   * Custom function for DNS lookups when sending requests to the agent.\n   * @default dns.lookup()\n   */\n  lookup?: LookupFunction;\n\n  /**\n   * Protocol version to use for requests to the agent. The version configured must be supported by the agent version installed or all traces will be dropped.\n   * @default 0.4\n   */\n  protocolVersion?: string;\n\n  /**\n   * Deprecated in favor of the global versions of the variables provided under this option\n   *\n   * @deprecated\n   * @hidden\n   */\n  ingestion?: {\n    /**\n     * Controls the ingestion sample rate (between 0 and 1) between the agent and the backend.\n     */\n    sampleRate?: number;\n\n    /**\n     * Controls the ingestion rate limit between the agent and the backend. Defaults to deferring the decision to the agent.\n     */\n    rateLimit?: number;\n  };\n\n  /**\n   * Experimental features can be enabled individually using key / value pairs.\n   * @default {}\n   */\n  experimental?: {\n    b3?: boolean;\n    traceparent?: boolean;\n\n    /**\n     * Whether to add an auto-generated `runtime-id` tag to metrics.\n     * @default false\n     */\n    runtimeId?: boolean;\n\n    /**\n     * Whether to write traces to log output or agentless, rather than send to an agent\n     * @default false\n     */\n    exporter?: 'log' | 'agent' | 'datadog';\n\n    /**\n     * Whether to enable the experimental `getRumData` method.\n     * @default false\n     */\n    enableGetRumData?: boolean;\n\n    /**\n     * Configuration of the IAST. Can be a boolean as an alias to `iast.enabled`.\n     */\n    iast?:\n      | boolean\n      | {\n          /**\n           * Whether to enable IAST.\n           * @default false\n           */\n          enabled?: boolean;\n          /**\n           * Controls the percentage of requests that iast will analyze\n           * @default 30\n           */\n          requestSampling?: number;\n          /**\n           * Controls how many request can be analyzing code vulnerabilities at the same time\n           * @default 2\n           */\n          maxConcurrentRequests?: number;\n          /**\n           * Controls how many code vulnerabilities can be detected in the same request\n           * @default 2\n           */\n          maxContextOperations?: number;\n        };\n  };\n\n  /**\n   * Whether to load all built-in plugins.\n   * @default true\n   */\n  plugins?: boolean;\n\n  /**\n   * Custom logger to be used by the tracer (if debug = true),\n   * should support error(), warn(), info(), and debug() methods\n   * see https://datadog.github.io/dd-trace-js/#custom-logging\n   */\n  logger?: {\n    error: (err: Error | string) => void;\n    warn: (message: string) => void;\n    info: (message: string) => void;\n    debug: (message: string) => void;\n  };\n\n  /**\n   * Global tags that should be assigned to every span.\n   */\n  tags?: { [key: string]: any };\n\n  /**\n   * Specifies which scope implementation to use. The default is to use the best\n   * implementation for the runtime. Only change this if you know what you are\n   * doing.\n   */\n  scope?: 'async_hooks' | 'async_local_storage' | 'async_resource' | 'sync' | 'noop';\n\n  /**\n   * Whether to report the hostname of the service host. This is used when the agent is deployed on a different host and cannot determine the hostname automatically.\n   * @default false\n   */\n  reportHostname?: boolean;\n\n  /**\n   * A string representing the minimum tracer log level to use when debug logging is enabled\n   * @default 'debug'\n   */\n  logLevel?: 'error' | 'debug';\n\n  /**\n   * If false, require a parent in order to trace.\n   * @default true\n   */\n  orphanable?: boolean;\n\n  /**\n   * Enables DBM to APM link using tag injection.\n   * @default 'disabled'\n   */\n  dbmPropagationMode?: 'disabled' | 'service' | 'full';\n\n  /**\n   * Configuration of the AppSec protection. Can be a boolean as an alias to `appsec.enabled`.\n   */\n  appsec?:\n    | boolean\n    | {\n        /**\n         * Whether to enable AppSec.\n         * @default false\n         */\n        enabled?: boolean;\n\n        /**\n         * Specifies a path to a custom rules file.\n         */\n        rules?: string;\n\n        /**\n         * Controls the maximum amount of traces sampled by AppSec attacks, per second.\n         * @default 100\n         */\n        rateLimit?: number;\n\n        /**\n         * Controls the maximum amount of time in microseconds the WAF is allowed to run synchronously for.\n         * @default 5000\n         */\n        wafTimeout?: number;\n\n        /**\n         * Specifies a regex that will redact sensitive data by its key in attack reports.\n         */\n        obfuscatorKeyRegex?: string;\n\n        /**\n         * Specifies a regex that will redact sensitive data by its value in attack reports.\n         */\n        obfuscatorValueRegex?: string;\n\n        /**\n         * Specifies a path to a custom blocking template html file.\n         */\n        blockedTemplateHtml?: string;\n\n        /**\n         * Specifies a path to a custom blocking template json file.\n         */\n        blockedTemplateJson?: string;\n      };\n\n  /**\n   * Configuration of ASM Remote Configuration\n   */\n  remoteConfig?: {\n    /**\n     * Specifies the remote configuration polling interval in seconds\n     * @default 5\n     */\n    pollInterval?: number;\n  };\n\n  /**\n   * Whether to enable client IP collection from relevant IP headers\n   * @default false\n   */\n  clientIpEnabled?: boolean;\n\n  /**\n   * Custom header name to source the http.client_ip tag from.\n   */\n  clientIpHeader?: string;\n\n  /**\n   * The selection and priority order of context propagation injection and extraction mechanisms.\n   */\n  propagationStyle?: string[] | PropagationStyle;\n}",
        "type": "interface"
      },
      {
        "name": " SamplingRule",
        "text": "\n\nexport declare interface SamplingRule {\n  /**\n   * Sampling rate for this rule.\n   */\n  sampleRate: number;\n\n  /**\n   * Service on which to apply this rule. The rule will apply to all services if not provided.\n   */\n  service?: string | RegExp;\n\n  /**\n   * Operation name on which to apply this rule. The rule will apply to all operation names if not provided.\n   */\n  name?: string | RegExp;\n}",
        "type": "interface"
      },
      {
        "name": " PropagationStyle",
        "text": "\n\nexport declare interface PropagationStyle {\n  /**\n   * Selection of context propagation injection mechanisms.\n   */\n  inject: string[];\n\n  /**\n   * Selection and priority order of context propagation extraction mechanisms.\n   */\n  extract: string[];\n}",
        "type": "interface"
      },
      {
        "name": " SpanSamplingRule",
        "text": "\n\nexport declare interface SpanSamplingRule {\n  /**\n   * Sampling rate for this rule. Will default to 1.0 (always) if not provided.\n   */\n  sampleRate?: number;\n\n  /**\n   * Maximum number of spans matching a span sampling rule to be allowed per second.\n   */\n  maxPerSecond?: number;\n\n  /**\n   * Service name or pattern on which to apply this rule. The rule will apply to all services if not provided.\n   */\n  service?: string;\n\n  /**\n   * Operation name or pattern on which to apply this rule. The rule will apply to all operation names if not provided.\n   */\n  name?: string;\n}",
        "type": "interface"
      }
    ]
  },
  {
    "file": "@tw/types/devops/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/errorResponse/bad-gateway.exception.ts",
    "exports": [
      {
        "name": " BadGatewayException",
        "text": "\n\n/**\n * Defines an HTTP exception for *Bad Gateway* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nexport class BadGatewayException extends HttpException {\n  /**\n   * Instantiate a `BadGatewayException` Exception.\n   *\n   * @example\n   * `throw new BadGatewayException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 502.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 502.\n   * - `message`: the string `'Bad Gateway'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = \"Bad Gateway\"\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.BAD_GATEWAY\n      ),\n      HttpStatus.BAD_GATEWAY\n    );\n  }\n}",
        "type": " HttpException"
      }
    ]
  },
  {
    "file": "@tw/types/errorResponse/bad-request.exception.ts",
    "exports": [
      {
        "name": " BadRequestException",
        "text": "\n\n/**\n * Defines an HTTP exception for *Bad Request* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nexport class BadRequestException extends HttpException {\n  /**\n   * Instantiate a `BadRequestException` Exception.\n   *\n   * @example\n   * `throw new BadRequestException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 400.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 400.\n   * - `message`: the string `'Bad Request'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = \"Bad Request\"\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.BAD_REQUEST\n      ),\n      HttpStatus.BAD_REQUEST\n    );\n  }\n}",
        "type": " HttpException"
      }
    ]
  },
  {
    "file": "@tw/types/errorResponse/conflict.exception.ts",
    "exports": [
      {
        "name": " ConflictException",
        "text": "\n\n/**\n * Defines an HTTP exception for *Conflict* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nexport class ConflictException extends HttpException {\n  /**\n   * Instantiate a `ConflictException` Exception.\n   *\n   * @example\n   * `throw new ConflictException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 409.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 409.\n   * - `message`: the string `'Conflict'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(objectOrError?: string | object | any, description = \"Conflict\") {\n    super(\n      HttpException.createBody(objectOrError, description, HttpStatus.CONFLICT),\n      HttpStatus.CONFLICT\n    );\n  }\n}",
        "type": " HttpException"
      }
    ]
  },
  {
    "file": "@tw/types/errorResponse/forbidden.exception.ts",
    "exports": [
      {
        "name": " ForbiddenException",
        "text": "\n\n/**\n * Defines an HTTP exception for *Forbidden* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nexport class ForbiddenException extends HttpException {\n  /**\n   * Instantiate a `ForbiddenException` Exception.\n   *\n   * @example\n   * `throw new ForbiddenException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 403.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 403.\n   * - `message`: the string `'Forbidden'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = \"Forbidden\"\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.FORBIDDEN\n      ),\n      HttpStatus.FORBIDDEN\n    );\n  }\n}",
        "type": " HttpException"
      }
    ]
  },
  {
    "file": "@tw/types/errorResponse/gateway-timeout.exception.ts",
    "exports": [
      {
        "name": " GatewayTimeoutException",
        "text": "\n\n/**\n * Defines an HTTP exception for *Gateway Timeout* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nexport class GatewayTimeoutException extends HttpException {\n  /**\n   * Instantiate a `GatewayTimeoutException` Exception.\n   *\n   * @example\n   * `throw new GatewayTimeoutException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 504.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 504.\n   * - `message`: the string `'Gateway Timeout'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = \"Gateway Timeout\"\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.GATEWAY_TIMEOUT\n      ),\n      HttpStatus.GATEWAY_TIMEOUT\n    );\n  }\n}",
        "type": " HttpException"
      }
    ]
  },
  {
    "file": "@tw/types/errorResponse/gone.exception.ts",
    "exports": [
      {
        "name": " GoneException",
        "text": "\n\n/**\n * Defines an HTTP exception for *Gone* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nexport class GoneException extends HttpException {\n  /**\n   * Instantiate a `GoneException` Exception.\n   *\n   * @example\n   * `throw new GoneException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 410.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 410.\n   * - `message`: the string `'Gone'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(objectOrError?: string | object | any, description = \"Gone\") {\n    super(\n      HttpException.createBody(objectOrError, description, HttpStatus.GONE),\n      HttpStatus.GONE\n    );\n  }\n}",
        "type": " HttpException"
      }
    ]
  },
  {
    "file": "@tw/types/errorResponse/http-status.enum.ts",
    "exports": [
      {
        "type": "enum",
        "name": " HttpStatus",
        "text": "export enum HttpStatus {\n  CONTINUE = 100,\n  SWITCHING_PROTOCOLS = 101,\n  PROCESSING = 102,\n  EARLYHINTS = 103,\n  OK = 200,\n  CREATED = 201,\n  ACCEPTED = 202,\n  NON_AUTHORITATIVE_INFORMATION = 203,\n  NO_CONTENT = 204,\n  RESET_CONTENT = 205,\n  PARTIAL_CONTENT = 206,\n  AMBIGUOUS = 300,\n  MOVED_PERMANENTLY = 301,\n  FOUND = 302,\n  SEE_OTHER = 303,\n  NOT_MODIFIED = 304,\n  TEMPORARY_REDIRECT = 307,\n  PERMANENT_REDIRECT = 308,\n  BAD_REQUEST = 400,\n  UNAUTHORIZED = 401,\n  PAYMENT_REQUIRED = 402,\n  FORBIDDEN = 403,\n  NOT_FOUND = 404,\n  METHOD_NOT_ALLOWED = 405,\n  NOT_ACCEPTABLE = 406,\n  PROXY_AUTHENTICATION_REQUIRED = 407,\n  REQUEST_TIMEOUT = 408,\n  CONFLICT = 409,\n  GONE = 410,\n  LENGTH_REQUIRED = 411,\n  PRECONDITION_FAILED = 412,\n  PAYLOAD_TOO_LARGE = 413,\n  URI_TOO_LONG = 414,\n  UNSUPPORTED_MEDIA_TYPE = 415,\n  REQUESTED_RANGE_NOT_SATISFIABLE = 416,\n  EXPECTATION_FAILED = 417,\n  I_AM_A_TEAPOT = 418,\n  MISDIRECTED = 421,\n  UNPROCESSABLE_ENTITY = 422,\n  FAILED_DEPENDENCY = 424,\n  PRECONDITION_REQUIRED = 428,\n  TOO_MANY_REQUESTS = 429,\n  INTERNAL_SERVER_ERROR = 500,\n  NOT_IMPLEMENTED = 501,\n  BAD_GATEWAY = 502,\n  SERVICE_UNAVAILABLE = 503,\n  GATEWAY_TIMEOUT = 504,\n  HTTP_VERSION_NOT_SUPPORTED = 505,\n}"
      }
    ]
  },
  {
    "file": "@tw/types/errorResponse/http-version-not-supported.exception.ts",
    "exports": [
      {
        "name": " HttpVersionNotSupportedException",
        "text": "\n\n/**\n * Defines an HTTP exception for *Http Version Not Supported* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nexport class HttpVersionNotSupportedException extends HttpException {\n  /**\n   * Instantiate a `HttpVersionNotSupportedException` Exception.\n   *\n   * @example\n   * `throw new HttpVersionNotSupportedException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 505.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 505.\n   * - `message`: the string `'HTTP Version Not Supported'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = \"HTTP Version Not Supported\"\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.HTTP_VERSION_NOT_SUPPORTED\n      ),\n      HttpStatus.HTTP_VERSION_NOT_SUPPORTED\n    );\n  }\n}",
        "type": " HttpException"
      }
    ]
  },
  {
    "file": "@tw/types/errorResponse/http.exception.ts",
    "exports": [
      {
        "name": " HttpException",
        "text": "\n\n/**\n * Defines the base Nest HTTP exception, which is handled by the default\n * Exceptions Handler.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nexport class HttpException extends Error {\n  /**\n   * Instantiate a plain HTTP Exception.\n   *\n   * @example\n   * `throw new HttpException()`\n   *\n   * @usageNotes\n   * The constructor arguments define the response and the HTTP response status code.\n   * - The `response` argument (required) defines the JSON response body.\n   * - The `status` argument (required) defines the HTTP Status Code.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: the Http Status Code.\n   * - `message`: a short description of the HTTP error by default; override this\n   * by supplying a string in the `response` parameter.\n   *\n   * To override the entire JSON response body, pass an object to the `createBody`\n   * method. Nest will serialize the object and return it as the JSON response body.\n   *\n   * The `status` argument is required, and should be a valid HTTP status code.\n   * Best practice is to use the `HttpStatus` enum imported from `nestjs/common`.\n   *\n   * @param response string or object describing the error condition.\n   * @param status HTTP response status code.\n   */\n  constructor(\n    private readonly response: string | Record<string, any>,\n    private readonly status: number\n  ) {\n    super();\n    this.initMessage();\n    this.initName();\n  }\n\n  public initMessage() {\n    if (isString(this.response)) {\n      this.message = this.response;\n    } else if (\n      isObject(this.response) &&\n      isString((this.response as Record<string, any>).message)\n    ) {\n      this.message = (this.response as Record<string, any>).message;\n    } else if (this.constructor) {\n      this.message = this.constructor.name\n        .match(/[A-Z][a-z]+|[0-9]+/g)\n        .join(\" \");\n    }\n  }\n\n  public initName(): void {\n    this.name = this.constructor.name;\n  }\n\n  public getResponse(): string | object {\n    return this.response;\n  }\n\n  public getStatus(): number {\n    return this.status;\n  }\n\n  public static createBody(\n    objectOrError: object | string,\n    description?: string,\n    statusCode?: number\n  ) {\n    if (!objectOrError) {\n      return { statusCode, message: description };\n    }\n    return isObject(objectOrError) && !Array.isArray(objectOrError)\n      ? objectOrError\n      : { statusCode, message: objectOrError, error: description };\n  }\n}",
        "type": " Error"
      }
    ]
  },
  {
    "file": "@tw/types/errorResponse/im-a-teapot.exception.ts",
    "exports": [
      {
        "name": " ImATeapotException",
        "text": "\n\n/**\n * Defines an HTTP exception for *ImATeapotException* type errors.\n *\n * Any attempt to brew coffee with a teapot should result in the error code\n * \"418 I'm a teapot\". The resulting entity body MAY be short and stout.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nexport class ImATeapotException extends HttpException {\n  /**\n   * Instantiate an `ImATeapotException` Exception.\n   *\n   * @example\n   * `throw new ImATeapotException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 418.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 418.\n   * - `message`: the string `\"I'm a Teapot\"` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = `I'm a teapot`\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.I_AM_A_TEAPOT\n      ),\n      HttpStatus.I_AM_A_TEAPOT\n    );\n  }\n}",
        "type": " HttpException"
      }
    ]
  },
  {
    "file": "@tw/types/errorResponse/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/errorResponse/internal-server-error.exception.ts",
    "exports": [
      {
        "name": " InternalServerErrorException",
        "text": "\n\n/**\n * Defines an HTTP exception for *Internal Server Error* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nexport class InternalServerErrorException extends HttpException {\n  /**\n   * Instantiate an `InternalServerErrorException` Exception.\n   *\n   * @example\n   * `throw new InternalServerErrorException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 500.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 500.\n   * - `message`: the string `'Internal Server Error'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = \"Internal Server Error\"\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.INTERNAL_SERVER_ERROR\n      ),\n      HttpStatus.INTERNAL_SERVER_ERROR\n    );\n  }\n}",
        "type": " HttpException"
      }
    ]
  },
  {
    "file": "@tw/types/errorResponse/method-not-allowed.exception.ts",
    "exports": [
      {
        "name": " MethodNotAllowedException",
        "text": "\n\n/**\n * Defines an HTTP exception for *Method Not Allowed* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nexport class MethodNotAllowedException extends HttpException {\n  /**\n   * Instantiate a `MethodNotAllowedException` Exception.\n   *\n   * @example\n   * `throw new MethodNotAllowedException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 405.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 405.\n   * - `message`: the string `'Method Not Allowed'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = \"Method Not Allowed\"\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.METHOD_NOT_ALLOWED\n      ),\n      HttpStatus.METHOD_NOT_ALLOWED\n    );\n  }\n}",
        "type": " HttpException"
      }
    ]
  },
  {
    "file": "@tw/types/errorResponse/misdirected.exception.ts",
    "exports": [
      {
        "name": " MisdirectedException",
        "text": "\n\n/**\n * Defines an HTTP exception for *Misdirected* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nexport class MisdirectedException extends HttpException {\n  /**\n   * Instantiate a `MisdirectedException` Exception.\n   *\n   * @example\n   * `throw new MisdirectedException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 421.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 421.\n   * - `message`: the string `'Bad Gateway'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = \"Misdirected\"\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.MISDIRECTED\n      ),\n      HttpStatus.MISDIRECTED\n    );\n  }\n}",
        "type": " HttpException"
      }
    ]
  },
  {
    "file": "@tw/types/errorResponse/not-acceptable.exception.ts",
    "exports": [
      {
        "name": " NotAcceptableException",
        "text": "\n\n/**\n * Defines an HTTP exception for *Not Acceptable* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nexport class NotAcceptableException extends HttpException {\n  /**\n   * Instantiate a `NotAcceptableException` Exception.\n   *\n   * @example\n   * `throw new NotAcceptableException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 406.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 406.\n   * - `error`: the string `'Not Acceptable'` by default; override this by supplying\n   * a string in the `error` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = \"Not Acceptable\"\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.NOT_ACCEPTABLE\n      ),\n      HttpStatus.NOT_ACCEPTABLE\n    );\n  }\n}",
        "type": " HttpException"
      }
    ]
  },
  {
    "file": "@tw/types/errorResponse/not-found.exception.ts",
    "exports": [
      {
        "name": " NotFoundException",
        "text": "\n\n/**\n * Defines an HTTP exception for *Not Found* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nexport class NotFoundException extends HttpException {\n  /**\n   * Instantiate a `NotFoundException` Exception.\n   *\n   * @example\n   * `throw new NotFoundException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 404.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 404.\n   * - `message`: the string `'Not Found'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = \"Not Found\"\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.NOT_FOUND\n      ),\n      HttpStatus.NOT_FOUND\n    );\n  }\n}",
        "type": " HttpException"
      }
    ]
  },
  {
    "file": "@tw/types/errorResponse/not-implemented.exception.ts",
    "exports": [
      {
        "name": " NotImplementedException",
        "text": "\n\n/**\n * Defines an HTTP exception for *Not Implemented* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nexport class NotImplementedException extends HttpException {\n  /**\n   * Instantiate a `NotImplementedException` Exception.\n   *\n   * @example\n   * `throw new NotImplementedException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 501.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 501.\n   * - `message`: the string `'Not Implemented'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param description string or object describing the error condition.\n   * @param error a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = \"Not Implemented\"\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.NOT_IMPLEMENTED\n      ),\n      HttpStatus.NOT_IMPLEMENTED\n    );\n  }\n}",
        "type": " HttpException"
      }
    ]
  },
  {
    "file": "@tw/types/errorResponse/payload-too-large.exception.ts",
    "exports": [
      {
        "name": " PayloadTooLargeException",
        "text": "\n\n/**\n * Defines an HTTP exception for *Payload Too Large* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nexport class PayloadTooLargeException extends HttpException {\n  /**\n   * Instantiate a `PayloadTooLargeException` Exception.\n   *\n   * @example\n   * `throw new PayloadTooLargeException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 413.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 413.\n   * - `message`: the string `'Payload Too Large'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = \"Payload Too Large\"\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.PAYLOAD_TOO_LARGE\n      ),\n      HttpStatus.PAYLOAD_TOO_LARGE\n    );\n  }\n}",
        "type": " HttpException"
      }
    ]
  },
  {
    "file": "@tw/types/errorResponse/precondition-failed.exception.ts",
    "exports": [
      {
        "name": " PreconditionFailedException",
        "text": "\n\n/**\n * Defines an HTTP exception for *Precondition Failed* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nexport class PreconditionFailedException extends HttpException {\n  /**\n   * Instantiate a `PreconditionFailedException` Exception.\n   *\n   * @example\n   * `throw new PreconditionFailedException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 412.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 412.\n   * - `message`: the string `'Precondition Failed'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = \"Precondition Failed\"\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.PRECONDITION_FAILED\n      ),\n      HttpStatus.PRECONDITION_FAILED\n    );\n  }\n}",
        "type": " HttpException"
      }
    ]
  },
  {
    "file": "@tw/types/errorResponse/request-timeout.exception.ts",
    "exports": [
      {
        "name": " RequestTimeoutException",
        "text": "\n\n/**\n * Defines an HTTP exception for *Request Timeout* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nexport class RequestTimeoutException extends HttpException {\n  /**\n   * Instantiate a `RequestTimeoutException` Exception.\n   *\n   * @example\n   * `throw new RequestTimeoutException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 408.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 408.\n   * - `message`: the string `'Request Timeout'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = \"Request Timeout\"\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.REQUEST_TIMEOUT\n      ),\n      HttpStatus.REQUEST_TIMEOUT\n    );\n  }\n}",
        "type": " HttpException"
      }
    ]
  },
  {
    "file": "@tw/types/errorResponse/service-unavailable.exception.ts",
    "exports": [
      {
        "name": " ServiceUnavailableException",
        "text": "\n\n/**\n * Defines an HTTP exception for *Service Unavailable* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nexport class ServiceUnavailableException extends HttpException {\n  /**\n   * Instantiate a `ServiceUnavailableException` Exception.\n   *\n   * @example\n   * `throw new ServiceUnavailableException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 503.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 503.\n   * - `message`: the string `'Service Unavailable'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = \"Service Unavailable\"\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.SERVICE_UNAVAILABLE\n      ),\n      HttpStatus.SERVICE_UNAVAILABLE\n    );\n  }\n}",
        "type": " HttpException"
      }
    ]
  },
  {
    "file": "@tw/types/errorResponse/shared.utils.ts",
    "exports": [
      {
        "name": " isUndefined",
        "text": "/* eslint-disable @typescript-eslint/no-use-before-define */\nexport const isUndefined = (obj: any): obj is undefined =>\n  typeof obj === 'undefined';",
        "type": "variable"
      },
      {
        "name": " isObject",
        "text": "\n\nexport const isObject = (fn: any): fn is object =>\n  !isNil(fn) && typeof fn === 'object';",
        "type": "variable"
      },
      {
        "name": " isPlainObject",
        "text": "\n\nexport const isPlainObject = (fn: any): fn is object => {\n  if (!isObject(fn)) {\n    return false;\n  }\n  const proto = Object.getPrototypeOf(fn);\n  if (proto === null) {\n    return true;\n  }\n  const ctor =\n    Object.prototype.hasOwnProperty.call(proto, 'constructor') &&\n    proto.constructor;\n  return (\n    typeof ctor === 'function' &&\n    ctor instanceof ctor &&\n    Function.prototype.toString.call(ctor) ===\n      Function.prototype.toString.call(Object)\n  );\n};",
        "type": "variable"
      },
      {
        "name": " addLeadingSlash",
        "text": "\n\nexport const addLeadingSlash = (path?: string): string =>\n  path && typeof path === 'string'\n    ? path.charAt(0) !== '/'\n      ? '/' + path\n      : path\n    : '';",
        "type": "variable"
      },
      {
        "name": " validatePath",
        "text": "\n\n/**\n * Deprecated. Use the \"addLeadingSlash\" function instead.\n * @deprecated\n */\nexport const validatePath = addLeadingSlash;",
        "type": "variable"
      },
      {
        "name": " normalizePath",
        "text": "\n\nexport const normalizePath = (path?: string): string =>\n  path\n    ? path.startsWith('/')\n      ? ('/' + path.replace(/\\/+$/, '')).replace(/\\/+/g, '/')\n      : '/' + path.replace(/\\/+$/, '')\n    : '/';",
        "type": "variable"
      },
      {
        "name": " stripEndSlash",
        "text": "\n\nexport const stripEndSlash = (path: string) =>\n  path[path.length - 1] === '/' ? path.slice(0, path.length - 1) : path;",
        "type": "variable"
      },
      {
        "name": " isFunction",
        "text": "\n\nexport const isFunction = (val: any): boolean => typeof val === 'function';",
        "type": "variable"
      },
      {
        "name": " isString",
        "text": "\nexport const isString = (val: any): val is string => typeof val === 'string';",
        "type": "variable"
      },
      {
        "name": " isNumber",
        "text": "\nexport const isNumber = (val: any): val is number => typeof val === 'number';",
        "type": "variable"
      },
      {
        "name": " isConstructor",
        "text": "\nexport const isConstructor = (val: any): boolean => val === 'constructor';",
        "type": "variable"
      },
      {
        "name": " isNil",
        "text": "\nexport const isNil = (val: any): val is null | undefined =>\n  isUndefined(val) || val === null;",
        "type": "variable"
      },
      {
        "name": " isEmpty",
        "text": "\nexport const isEmpty = (array: any): boolean => !(array && array.length > 0);",
        "type": "variable"
      },
      {
        "name": " isSymbol",
        "text": "\nexport const isSymbol = (val: any): val is symbol => typeof val === 'symbol';",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/types/errorResponse/unauthorized.exception.ts",
    "exports": [
      {
        "name": " UnauthorizedException",
        "text": "\n\n/**\n * Defines an HTTP exception for *Unauthorized* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nexport class UnauthorizedException extends HttpException {\n  /**\n   * Instantiate an `UnauthorizedException` Exception.\n   *\n   * @example\n   * `throw new UnauthorizedException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 401.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 401.\n   * - `message`: the string `'Unauthorized'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = \"Unauthorized\"\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.UNAUTHORIZED\n      ),\n      HttpStatus.UNAUTHORIZED\n    );\n  }\n}",
        "type": " HttpException"
      }
    ]
  },
  {
    "file": "@tw/types/errorResponse/unprocessable-entity.exception.ts",
    "exports": [
      {
        "name": " UnprocessableEntityException",
        "text": "\n\n/**\n * Defines an HTTP exception for *Unprocessable Entity* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nexport class UnprocessableEntityException extends HttpException {\n  /**\n   * Instantiate an `UnprocessableEntityException` Exception.\n   *\n   * @example\n   * `throw new UnprocessableEntityException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 422.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 422.\n   * - `message`: the string `'Unprocessable Entity'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = \"Unprocessable Entity\"\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.UNPROCESSABLE_ENTITY\n      ),\n      HttpStatus.UNPROCESSABLE_ENTITY\n    );\n  }\n}",
        "type": " HttpException"
      }
    ]
  },
  {
    "file": "@tw/types/errorResponse/unsupported-media-type.exception.ts",
    "exports": [
      {
        "name": " UnsupportedMediaTypeException",
        "text": "\n\n/**\n * Defines an HTTP exception for *Unsupported Media Type* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nexport class UnsupportedMediaTypeException extends HttpException {\n  /**\n   * Instantiate an `UnsupportedMediaTypeException` Exception.\n   *\n   * @example\n   * `throw new UnsupportedMediaTypeException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 415.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 415.\n   * - `message`: the string `'Unsupported Media Type'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = \"Unsupported Media Type\"\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.UNSUPPORTED_MEDIA_TYPE\n      ),\n      HttpStatus.UNSUPPORTED_MEDIA_TYPE\n    );\n  }\n}",
        "type": " HttpException"
      }
    ]
  },
  {
    "file": "@tw/types/fetchers/RawFileMetadata.ts",
    "exports": [
      {
        "name": " RawFileMetadata",
        "text": "\n\nexport declare type RawFileMetadata = {\n  shopId: string;\n  serviceId: ServicesIds;\n  dataType: DataTypesIds;\n  jobType: JobType;\n  accountId?: string;\n  jobHour?: string;\n  jobDate?: string;\n  shopTimezone: string;\n  jobSlot?: number;\n  jobUTCDate: string;\n  reportDate?: string;\n  resourcesRequested?: string;\n  paginationIndex?: number;\n  paginationTotal?: number;\n  jobID?: string;\n  shopCurrency?: string;\n};",
        "type": "{\n  shopId: string;\n  serviceId: ServicesIds;\n  dataType: DataTypesIds;\n  jobType: JobType;\n  accountId?: string;\n  jobHour?: string;\n  jobDate?: string;\n  shopTimezone: string;\n  jobSlot?: number;\n  jobUTCDate: string;\n  reportDate?: string;\n  resourcesRequested?: string;\n  paginationIndex?: number;\n  paginationTotal?: number;\n  jobID?: string;\n  shopCurrency?: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/fetchers/fetchChunkData.ts",
    "exports": [
      {
        "type": "enum",
        "name": " CHECK_STATUS",
        "text": "\n\nexport enum CHECK_STATUS {\n  GOOD = 'GOOD',\n  INTERNAL_ZERO = 'INTERNAL_ZERO',\n  DELTA = 'DELTA',\n  INTERNAL_DELTA = 'INTERNAL_DELTA',\n  UNKNOWN = 'UNKNOWN',\n}"
      },
      {
        "name": " importDay",
        "text": "\nexport type importDay = { day: string; status?: CHECK_STATUS };",
        "type": "{ day: string; status?: CHECK_STATUS }"
      },
      {
        "name": " FetchChunkData",
        "text": "\n\nexport type FetchChunkData = {\n  jobType: JobType;\n  shopData: Shop;\n  shopDomain: string;\n  jobDate: string;\n  jobHour: string;\n  jobSlot: number;\n  accountIds?: string[];\n  dataType?: DataTypesIds;\n  chunkSize?: number;\n  day?: string;\n  days?: importDay[]; // relevant if we are optimized initial before starting\n  index?: number;\n  total?: number;\n  jobID?: string;\n  forceExternalFetch?: boolean;\n  resetDataBefore?: boolean;\n  checkBefore?: boolean;\n  healthCheckType?: HealthCheckType;\n};",
        "type": "{\n  jobType: JobType;\n  shopData: Shop;\n  shopDomain: string;\n  jobDate: string;\n  jobHour: string;\n  jobSlot: number;\n  accountIds?: string[];\n  dataType?: DataTypesIds;\n  chunkSize?: number;\n  day?: string;\n  days?: importDay[]; // relevant if we are optimized initial before starting\n  index?: number;\n  total?: number;\n  jobID?: string;\n  forceExternalFetch?: boolean;\n  resetDataBefore?: boolean;\n  checkBefore?: boolean;\n  healthCheckType?: HealthCheckType;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/fetchers/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/fetchers/startJob.ts",
    "exports": [
      {
        "name": " alternateEndpoint",
        "text": "\n\nexport type alternateEndpoint = {\n  endpoint: string;\n  conditionField: string;\n  conditionString: string;\n};",
        "type": "{\n  endpoint: string;\n  conditionField: string;\n  conditionString: string;\n}"
      },
      {
        "name": " startJobOptions",
        "text": "\n\nexport type startJobOptions = {\n  req: Request;\n  defaultEndpoint?: string;\n  queueName?: string;\n  endpoints?: alternateEndpoint[];\n};",
        "type": "{\n  req: Request;\n  defaultEndpoint?: string;\n  queueName?: string;\n  endpoints?: alternateEndpoint[];\n}"
      },
      {
        "name": " startJobResponse",
        "text": "\n\nexport type startJobResponse = {\n  data: FetchChunkData;\n  queueName?: string;\n  endpoint?: string;\n};",
        "type": "{\n  data: FetchChunkData;\n  queueName?: string;\n  endpoint?: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/forecasting/Forecasting.ts",
    "exports": [
      {
        "name": " ForecastingGroupByOption",
        "text": "\n\nexport type ForecastingGroupByOption = {\n  id: string;\n  definition: 'month' | 'quarter' | 'year' | 'week' | 'isoWeek';\n  transformFrom: 'month' | 'day';\n  name: string;\n};",
        "type": "{\n  id: string;\n  definition: 'month' | 'quarter' | 'year' | 'week' | 'isoWeek';\n  transformFrom: 'month' | 'day';\n  name: string;\n}"
      },
      {
        "name": " ForecastingOptions",
        "text": "\n\nexport type ForecastingOptions = ForecastingGroupByOption[];",
        "type": "ForecastingGroupByOption[]"
      },
      {
        "name": " ForecastingRow",
        "text": "\n\nexport type ForecastingRow = {\n  name: string;\n  collapsable?: boolean;\n  level: number;\n  key: string;\n  type: 'money' | 'ratio' | 'count';\n  children?: ForecastingRow[];\n  customKey?: boolean;\n  customKeyFunction?: 'divide' | 'sum' | 'average' | 'subtract';\n  customKeyData?: any;\n  hidden?: boolean;\n  isParentProductRow?: boolean;\n  isAdServiceParentRow?: boolean;\n  adService?: string;\n  chartLabel?: string;\n};",
        "type": "{\n  name: string;\n  collapsable?: boolean;\n  level: number;\n  key: string;\n  type: 'money' | 'ratio' | 'count';\n  children?: ForecastingRow[];\n  customKey?: boolean;\n  customKeyFunction?: 'divide' | 'sum' | 'average' | 'subtract';\n  customKeyData?: any;\n  hidden?: boolean;\n  isParentProductRow?: boolean;\n  isAdServiceParentRow?: boolean;\n  adService?: string;\n  chartLabel?: string;\n}"
      },
      {
        "type": "enum",
        "name": " ForecastingMetric",
        "text": "\n\nexport enum ForecastingMetric {\n  InventoryRevenueScale = 'product_total_revenue_scale',\n  InventoryRevenue = 'product_total_revenue',\n  InventoryUnits = 'product_total_quantity',\n  InventoryDaysOfStock = 'stock_level_days',\n}"
      },
      {
        "name": " ForecastingDataType",
        "text": "\n\nexport type ForecastingDataType = 'actual' | 'predicted';",
        "type": "'actual' | 'predicted'"
      },
      {
        "name": " ForecastingSort",
        "text": "\n\nexport type ForecastingSort = {\n  direction: SortDirection;\n  period: string;\n  dataType: ForecastingDataType;\n  metric: ForecastingMetric;\n};",
        "type": "{\n  direction: SortDirection;\n  period: string;\n  dataType: ForecastingDataType;\n  metric: ForecastingMetric;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/idGraph/idGraphType.ts",
    "exports": [
      {
        "name": " idSource",
        "text": "export type idSource = {\n  source: string;\n  receivedAt: string;\n};",
        "type": "{\n  source: string;\n  receivedAt: string;\n}"
      },
      {
        "name": " idValue",
        "text": "\n\nexport type idValue = {\n  value: string;\n  sources: idSource[];\n};",
        "type": "{\n  value: string;\n  sources: idSource[];\n}"
      },
      {
        "name": " idGraphType",
        "text": "\n\nexport type idGraphType = {\n  _id?: string;\n  shop: string;\n  tripleIds?: idValue[];\n  thids?: idValue[];\n  emails?: idValue[];\n  phones?: idValue[];\n  customerIds?: idValue[];\n  klaviyoIds?: idValue[];\n  postscriptIds?: idValue[];\n  attentiveIds?: idValue[];\n  gid?: string;\n  createdAt?: string;\n};",
        "type": "{\n  _id?: string;\n  shop: string;\n  tripleIds?: idValue[];\n  thids?: idValue[];\n  emails?: idValue[];\n  phones?: idValue[];\n  customerIds?: idValue[];\n  klaviyoIds?: idValue[];\n  postscriptIds?: idValue[];\n  attentiveIds?: idValue[];\n  gid?: string;\n  createdAt?: string;\n}"
      },
      {
        "name": " IdGraphEmails",
        "text": "\n\nexport type IdGraphEmails = {\n  _id?: string;\n  value?: string;\n  sources?: idSource[];\n};",
        "type": "{\n  _id?: string;\n  value?: string;\n  sources?: idSource[];\n}"
      },
      {
        "name": " IdGraphEmail",
        "text": "\nexport type IdGraphEmail = {\n  shop: string;\n  email?: string;\n};",
        "type": "{\n  shop: string;\n  email?: string;\n}"
      },
      {
        "name": " ResolvedIdValue",
        "text": "\n\nexport type ResolvedIdValue = {\n  key: string;\n  id: string;\n};",
        "type": "{\n  key: string;\n  id: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/idGraph/index.ts",
    "exports": [
      {
        "name": " Source",
        "text": "\n\nexport type Source = 'klaviyo' | 'postscript' | 'attentive' | 'order' | 'page-load' | 'nip';",
        "type": "'klaviyo' | 'postscript' | 'attentive' | 'order' | 'page-load' | 'nip'"
      },
      {
        "name": " AddExternalEmailsPayload",
        "text": "\n\nexport type AddExternalEmailsPayload = Pick<idGraphType, '_id' | 'shop'> & {\n  source: Source;\n  sourceIds: string[];\n};",
        "type": "Pick<idGraphType, '_id' | 'shop'> & {\n  source: Source;\n  sourceIds: string[];\n}"
      }
    ]
  },
  {
    "file": "@tw/types/idGraph/requests.ts",
    "exports": [
      {
        "name": " mapIdsRequest",
        "text": "\n\nexport type mapIdsRequest = {\n  shop: string;\n  tripleIds?: idValue[];\n  thids?: idValue[];\n  emails?: idValue[];\n  phones?: idValue[];\n  customerIds?: idValue[];\n  klaviyoIds?: idValue[];\n  postscriptIds?: idValue[];\n  attentiveIds?: idValue[];\n  hasKlaviyoError?: number;\n  isBackfill?: boolean;\n  gid?: string;\n};",
        "type": "{\n  shop: string;\n  tripleIds?: idValue[];\n  thids?: idValue[];\n  emails?: idValue[];\n  phones?: idValue[];\n  customerIds?: idValue[];\n  klaviyoIds?: idValue[];\n  postscriptIds?: idValue[];\n  attentiveIds?: idValue[];\n  hasKlaviyoError?: number;\n  isBackfill?: boolean;\n  gid?: string;\n}"
      },
      {
        "name": " klaviyoTestRequest",
        "text": "\n\nexport type klaviyoTestRequest = {\n  shop: string;\n  tripleId: string;\n};",
        "type": "{\n  shop: string;\n  tripleId: string;\n}"
      },
      {
        "name": " orderBackfillRequest",
        "text": "\n\nexport type orderBackfillRequest = {\n  shop: string;\n  orderId: string;\n  tripleId?: string;\n  email?: string;\n  phone?: string;\n  customerId: string;\n  orderDate: string;\n};",
        "type": "{\n  shop: string;\n  orderId: string;\n  tripleId?: string;\n  email?: string;\n  phone?: string;\n  customerId: string;\n  orderDate: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/integrationFetchers/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/integrationFetchers/integrationFetchChunkData.ts",
    "exports": [
      {
        "name": " IntegrationFetchChunkData",
        "text": "\n\nexport type IntegrationFetchChunkData = {\n  jobType: JobType;\n  accountData: IntegrationAccountData;\n  serviceId: ServicesIds;\n  accountId: string;\n  jobDate: string;\n  jobHour: string;\n  jobSlot: number;\n  subAccountIds?: string[];\n  dataType?: DataTypesIds;\n  chunkSize?: number;\n  day?: string;\n  days?: importDay[]; // relevant if we are optimized initial before starting\n  index?: number;\n  total?: number;\n  jobID?: string;\n  forceExternalFetch?: boolean;\n  resetDataBefore?: boolean;\n  checkBefore?: boolean;\n};",
        "type": "{\n  jobType: JobType;\n  accountData: IntegrationAccountData;\n  serviceId: ServicesIds;\n  accountId: string;\n  jobDate: string;\n  jobHour: string;\n  jobSlot: number;\n  subAccountIds?: string[];\n  dataType?: DataTypesIds;\n  chunkSize?: number;\n  day?: string;\n  days?: importDay[]; // relevant if we are optimized initial before starting\n  index?: number;\n  total?: number;\n  jobID?: string;\n  forceExternalFetch?: boolean;\n  resetDataBefore?: boolean;\n  checkBefore?: boolean;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/integrationFetchers/integrationRawFileMetadata.ts",
    "exports": [
      {
        "name": " IntegrationRawFileMetadata",
        "text": "\n\nexport declare type IntegrationRawFileMetadata = {\n  serviceId: ServicesIds;\n  accountId: string;\n  dataType: DataTypesIds;\n  jobType: JobType;\n  jobHour?: string;\n  jobDate?: string;\n  timezone: string;\n  currency?: string;\n  jobSlot?: number;\n  jobUTCDate: string;\n  reportDate?: string;\n  resourcesRequested?: string;\n  paginationIndex?: number;\n  paginationTotal?: number;\n  jobID?: string;\n};",
        "type": "{\n  serviceId: ServicesIds;\n  accountId: string;\n  dataType: DataTypesIds;\n  jobType: JobType;\n  jobHour?: string;\n  jobDate?: string;\n  timezone: string;\n  currency?: string;\n  jobSlot?: number;\n  jobUTCDate: string;\n  reportDate?: string;\n  resourcesRequested?: string;\n  paginationIndex?: number;\n  paginationTotal?: number;\n  jobID?: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/integrationFetchers/integrationStartJob.ts",
    "exports": [
      {
        "name": " IntegrationStartJobResponse",
        "text": "\n\nexport type IntegrationStartJobResponse = {\n  data: IntegrationFetchChunkData;\n  queueName?: string;\n  endpoint?: string;\n};",
        "type": "{\n  data: IntegrationFetchChunkData;\n  queueName?: string;\n  endpoint?: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/metrics/benchmarkMetrics.ts",
    "exports": [
      {
        "name": " Provider",
        "text": "\n\nexport type Provider = \"facebook-ads\" | \"google-ads\" | \"tiktok-ads\" | \"triple-whale\";",
        "type": "\"facebook-ads\" | \"google-ads\" | \"tiktok-ads\" | \"triple-whale\""
      },
      {
        "name": " MetricSelector",
        "text": "\n\nexport type MetricSelector =\n  | 'totalShopCount'\n  | 'totalBenchmarksCPC'\n  | 'totalBenchmarksCTR'\n  | 'benchmarksFacebookRoas'\n  | 'totalBenchmarksFBAdsSpendAvg'\n  | 'totalBenchmarksCTRGoogle'\n  | 'totalBenchmarksCPCGoogle'\n  | 'benchmarksGoogleRoas'\n  | 'totalBenchmarksGoogleAdsSpendAvg'\n  | 'totalBenchmarksCTRTiktok'\n  | 'totalBenchmarksCPCTiktok'\n  | 'benchmarksTiktokRoas'\n  | 'totalBenchmarksTiktokAdsSpendAvg'\n  | 'totalBenchmarksBlendedCTR'\n  | 'totalBenchmarksBlendedROAS'\n  | 'totalBenchmarksBlendedSpendAvg'\n  | 'totalBenchmarksBlendedCpc'\n  | 'blendedCpaBenchmarksTotal'\n  | 'blendedCpcBenchmarksTotal'\n  | 'blendedCpmBenchmarksTotal'\n  | 'blendedRoasBenchmarksTotal'\n  | 'facebookCpaBenchmarksTotal'\n  | 'facebookCpcBenchmarksTotal'\n  | 'facebookCpmBenchmarksTotal'\n  | 'facebookRoasBenchmarksTotal'\n  | 'googleCpaBenchmarksTotal'\n  | 'googleCpcBenchmarksTotal'\n  | 'googleCpmBenchmarksTotal'\n  | 'googleRoasBenchmarksTotal'\n  | 'tiktokCpaBenchmarksTotal'\n  | 'tiktokCpcBenchmarksTotal'\n  | 'tiktokCpmBenchmarksTotal'\n  | 'tiktokRoasBenchmarksTotal'\n   ;",
        "type": "| 'totalShopCount'\n  | 'totalBenchmarksCPC'\n  | 'totalBenchmarksCTR'\n  | 'benchmarksFacebookRoas'\n  | 'totalBenchmarksFBAdsSpendAvg'\n  | 'totalBenchmarksCTRGoogle'\n  | 'totalBenchmarksCPCGoogle'\n  | 'benchmarksGoogleRoas'\n  | 'totalBenchmarksGoogleAdsSpendAvg'\n  | 'totalBenchmarksCTRTiktok'\n  | 'totalBenchmarksCPCTiktok'\n  | 'benchmarksTiktokRoas'\n  | 'totalBenchmarksTiktokAdsSpendAvg'\n  | 'totalBenchmarksBlendedCTR'\n  | 'totalBenchmarksBlendedROAS'\n  | 'totalBenchmarksBlendedSpendAvg'\n  | 'totalBenchmarksBlendedCpc'\n  | 'blendedCpaBenchmarksTotal'\n  | 'blendedCpcBenchmarksTotal'\n  | 'blendedCpmBenchmarksTotal'\n  | 'blendedRoasBenchmarksTotal'\n  | 'facebookCpaBenchmarksTotal'\n  | 'facebookCpcBenchmarksTotal'\n  | 'facebookCpmBenchmarksTotal'\n  | 'facebookRoasBenchmarksTotal'\n  | 'googleCpaBenchmarksTotal'\n  | 'googleCpcBenchmarksTotal'\n  | 'googleCpmBenchmarksTotal'\n  | 'googleRoasBenchmarksTotal'\n  | 'tiktokCpaBenchmarksTotal'\n  | 'tiktokCpcBenchmarksTotal'\n  | 'tiktokCpmBenchmarksTotal'\n  | 'tiktokRoasBenchmarksTotal'"
      },
      {
        "name": " MetricChart",
        "text": "\n\n\nexport type MetricChart =\n  | 'chartBenchmarksCPC'\n  | 'chartBenchmarksCTR'\n  | 'chartBenchmarksFacebookRoas'\n  | 'chartBenchmarksFBAdsSpendAvg'\n  | 'chartBenchmarksCPCGoogle'\n  | 'chartBenchmarksCTRGoogle'\n  | 'chartBenchmarksGoogleRoas'\n  | 'chartBenchmarksGoogleAdsSpendAvg'\n  | 'chartBenchmarksCPCTiktok'\n  | 'chartBenchmarksCTRTiktok'\n  | 'chartBenchmarksTiktokRoas'\n  | 'chartBenchmarksTiktokAdsSpendAvg'\n  | 'chartBenchmarksBlendedCTR'\n  | 'chartBenchmarksBlendedROAS'\n  | 'chartBenchmarksTotalPriceUSDAvg'\n  | 'chartBenchmarksBlendedCpc'\n  | 'chartFacebookInsights'\n  | 'chartFacebookPurchaseRoas'\n  | 'chartFacebookCpc'\n  | 'chartFacebookCtr'\n  | 'totalGoogleAdsCtrChart'\n  | 'googleCpcChart'\n  | 'googleAdsRoasChart'\n  | 'chartGoogleAds'\n  | 'chartTiktokCtr'\n  | 'chartTiktokCpc'\n  | 'tiktokRoasChart'\n  | 'tiktokSpendChart'\n  | 'blendedCpaBenchmarksChart'\n  | 'blendedCpcBenchmarksChart'\n  | 'blendedCpmBenchmarksChart'\n  | 'blendedRoasBenchmarksChart'\n  | 'facebookCpaBenchmarksChart'\n  | 'facebookCpcBenchmarksChart'\n  | 'facebookCpmBenchmarksChart'\n  | 'facebookRoasBenchmarksChart'\n  | 'googleCpaBenchmarksChart'\n  | 'googleCpcBenchmarksChart'\n  | 'googleCpmBenchmarksChart'\n  | 'googleRoasBenchmarksChart'\n  | 'tiktokCpaBenchmarksChart'\n  | 'tiktokCpcBenchmarksChart'\n  | 'tiktokCpmBenchmarksChart'\n  | 'tiktokRoasBenchmarksChart';",
        "type": "| 'chartBenchmarksCPC'\n  | 'chartBenchmarksCTR'\n  | 'chartBenchmarksFacebookRoas'\n  | 'chartBenchmarksFBAdsSpendAvg'\n  | 'chartBenchmarksCPCGoogle'\n  | 'chartBenchmarksCTRGoogle'\n  | 'chartBenchmarksGoogleRoas'\n  | 'chartBenchmarksGoogleAdsSpendAvg'\n  | 'chartBenchmarksCPCTiktok'\n  | 'chartBenchmarksCTRTiktok'\n  | 'chartBenchmarksTiktokRoas'\n  | 'chartBenchmarksTiktokAdsSpendAvg'\n  | 'chartBenchmarksBlendedCTR'\n  | 'chartBenchmarksBlendedROAS'\n  | 'chartBenchmarksTotalPriceUSDAvg'\n  | 'chartBenchmarksBlendedCpc'\n  | 'chartFacebookInsights'\n  | 'chartFacebookPurchaseRoas'\n  | 'chartFacebookCpc'\n  | 'chartFacebookCtr'\n  | 'totalGoogleAdsCtrChart'\n  | 'googleCpcChart'\n  | 'googleAdsRoasChart'\n  | 'chartGoogleAds'\n  | 'chartTiktokCtr'\n  | 'chartTiktokCpc'\n  | 'tiktokRoasChart'\n  | 'tiktokSpendChart'\n  | 'blendedCpaBenchmarksChart'\n  | 'blendedCpcBenchmarksChart'\n  | 'blendedCpmBenchmarksChart'\n  | 'blendedRoasBenchmarksChart'\n  | 'facebookCpaBenchmarksChart'\n  | 'facebookCpcBenchmarksChart'\n  | 'facebookCpmBenchmarksChart'\n  | 'facebookRoasBenchmarksChart'\n  | 'googleCpaBenchmarksChart'\n  | 'googleCpcBenchmarksChart'\n  | 'googleCpmBenchmarksChart'\n  | 'googleRoasBenchmarksChart'\n  | 'tiktokCpaBenchmarksChart'\n  | 'tiktokCpcBenchmarksChart'\n  | 'tiktokCpmBenchmarksChart'\n  | 'tiktokRoasBenchmarksChart'"
      },
      {
        "name": " MetricsWithSelector",
        "text": "\n\n\n  export type MetricsWithSelector<M extends MetricsKeys> = {\n    selector: MetricSelector;\n    chart: MetricChart;\n    provider: Provider;\n    tip: string\n    color?: string;\n    userSelector?: string;\n    userChart?: SummaryMetricsChartsSelectorsNames;\n  } & MetricData<M>;",
        "type": "{\n    selector: MetricSelector;\n    chart: MetricChart;\n    provider: Provider;\n    tip: string\n    color?: string;\n    userSelector?: string;\n    userChart?: SummaryMetricsChartsSelectorsNames;\n  } & MetricData<M>"
      },
      {
        "name": " MetricsDictionaryWithSelector",
        "text": "\n  \n  export type MetricsDictionaryWithSelector = {\n    [provider in ServicesIds]?: {\n      [metric in MetricsKeys]?: MetricsWithSelector<metric>;\n    };\n  };",
        "type": "{\n    [provider in ServicesIds]?: {\n      [metric in MetricsKeys]?: MetricsWithSelector<metric>;\n    };\n  }"
      }
    ]
  },
  {
    "file": "@tw/types/metrics/metrics.ts",
    "exports": [
      {
        "name": " MetricsKeys",
        "text": "\n\n// this export statement is just to avoid breaking changes in the module that imports this file\n// it should be removed in the future\n// if you want to add more metrics keys, add them to the MetricsKeys type\nexport type MetricsKeys = keys;",
        "type": "keys"
      },
      {
        "name": " MetricData",
        "text": "\n\nexport type MetricData<M extends MetricsKeys> = {\n  key: M;\n  label: string;\n  shortLabel: string;\n  showInServices?: ServicesIds[];\n  showInCreativeCard: (CreativeTypes | 'all')[];\n  showInCreativeTable: (CreativeTypes | 'all')[];\n  showInInfluencersHub?: boolean;\n  format: valueFormats;\n  toFixed: number;\n  minimumFractionDigits?: number;\n  type: 'ads' | 'pixel' | 'shop' | 'analytics' | 'lifetimeValue' | 'postPurchaseSurvey' | 'budget';\n  showInCreativeByDefault: boolean;\n  showInPixelByDefault: boolean;\n  showInReport?: boolean;\n  showInRules?: string[];\n  allowOrderBy: boolean;\n  pixelIndex?: number;\n  valueIsNegative?: boolean;\n  hideInPixel?: boolean;\n  dependOnServices?: ServicesIds[];\n  dependOnActiveIntegrations?: ServicesIds[]; // Must Have At Least One Service\n  chart?: string;\n  icon?: string;\n  hideInActivities?: boolean;\n  calculateSum?: (itemsWithMetric: any[]) => number;\n};",
        "type": "{\n  key: M;\n  label: string;\n  shortLabel: string;\n  showInServices?: ServicesIds[];\n  showInCreativeCard: (CreativeTypes | 'all')[];\n  showInCreativeTable: (CreativeTypes | 'all')[];\n  showInInfluencersHub?: boolean;\n  format: valueFormats;\n  toFixed: number;\n  minimumFractionDigits?: number;\n  type: 'ads' | 'pixel' | 'shop' | 'analytics' | 'lifetimeValue' | 'postPurchaseSurvey' | 'budget';\n  showInCreativeByDefault: boolean;\n  showInPixelByDefault: boolean;\n  showInReport?: boolean;\n  showInRules?: string[];\n  allowOrderBy: boolean;\n  pixelIndex?: number;\n  valueIsNegative?: boolean;\n  hideInPixel?: boolean;\n  dependOnServices?: ServicesIds[];\n  dependOnActiveIntegrations?: ServicesIds[]; // Must Have At Least One Service\n  chart?: string;\n  icon?: string;\n  hideInActivities?: boolean;\n  calculateSum?: (itemsWithMetric: any[]) => number;\n}"
      },
      {
        "name": " MetricsDictionary",
        "text": "\n\nexport type MetricsDictionary = {\n  [metric in MetricsKeys]?: MetricData<metric>;\n};",
        "type": "{\n  [metric in MetricsKeys]?: MetricData<metric>;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/pixel/CapiSettings.ts",
    "exports": [
      {
        "name": " _capiSources",
        "text": "\n\nexport const _capiSources = ['meta', 'klaviyo', 'tiktok'] as const;",
        "type": "variable"
      },
      {
        "name": " CapiSources",
        "text": "\nexport type CapiSources = typeof _capiSources[number];",
        "type": "typeof _capiSources[number]"
      },
      {
        "name": " _capiEvents",
        "text": "\n\nexport const _capiEvents = ['pageLoad', 'newSession', 'addToCart', 'purchase', 'viewContent', 'initiateCheckout', 'addPaymentInfo', 'search', 'signup', 'custom'] as const;",
        "type": "variable"
      },
      {
        "name": " CapiEvents",
        "text": "\nexport type CapiEvents = typeof _capiEvents[number];",
        "type": "typeof _capiEvents[number]"
      },
      {
        "name": " CapiEventsConfig",
        "text": "\n\nexport type CapiEventsConfig = {\n  [key in PixelEventType]: { type: CapiEvents, condition: (e: PixelBaseEvent<any, any>) => boolean, sources: CapiSources[] }[]\n}",
        "type": "{\n  [key in PixelEventType]: { type: CapiEvents, condition: (e: PixelBaseEvent<any, any>) => boolean, sources: CapiSources[] }[]\n}"
      },
      {
        "name": " CapiSettings",
        "text": "\n\nexport type CapiSettings = Partial<{\n  [key in CapiSources]: SourceCapiSettings\n}>",
        "type": "Partial<{\n  [key in CapiSources]: SourceCapiSettings\n}>"
      },
      {
        "name": " SourceCapiSettings",
        "text": "\n\nexport interface SourceCapiSettings {\n  isEnabled: boolean;\n  pixelId: string;\n  accessToken: string;\n  credentialsId?: string;\n  events?: Partial<{ [key in CapiEvents]: boolean }>\n  initialSubscriptionTags?: string[]\n  recurringSubscriptionTags?: string[]\n  exclusionTags?: string[]\n  channelExclusionMethod?: string;\n  customExclusionChannels?: { name: string, code: string }[];\n  defaultExclusionChannels?: { name: string, code: string }[];\n}",
        "type": "interface"
      },
      {
        "name": " CapiEvent",
        "text": "\n\nexport type CapiEvent = {\n  source: CapiSources,\n  type: CapiEvents,\n  event: PixelBaseEvent<any, any>\n}",
        "type": "{\n  source: CapiSources,\n  type: CapiEvents,\n  event: PixelBaseEvent<any, any>\n}"
      }
    ]
  },
  {
    "file": "@tw/types/pixel/PixelBaseEvent.ts",
    "exports": [
      {
        "name": " PixelBaseEvent",
        "text": "export type PixelBaseEvent<T, U extends PixelEventType> = {\n  shopDomain: string;\n  __eid: string;\n  signalId?: string;\n  monkeyId: string;\n  timestamp: Date;\n  version: string;\n  source?: PixelEventSource,\n  type: U,\n  info: T\n};",
        "type": "{\n  shopDomain: string;\n  __eid: string;\n  signalId?: string;\n  monkeyId: string;\n  timestamp: Date;\n  version: string;\n  source?: PixelEventSource,\n  type: U,\n  info: T\n}"
      },
      {
        "name": " PixelEventAttributes",
        "text": "\n\nexport type PixelEventAttributes = {\n  shopDomain: string;\n  version: string;\n  __eid?: string;\n  monkeyId: string;\n  type: PixelEventType,\n}",
        "type": "{\n  shopDomain: string;\n  version: string;\n  __eid?: string;\n  monkeyId: string;\n  type: PixelEventType,\n}"
      },
      {
        "type": "enum",
        "name": " PixelEventType",
        "text": "\n\nexport enum PixelEventType {\n  PAGE_LOAD = 'page load',\n  CONTACT_DETAILS = 'contact details',\n  CART_CHANGES = 'cart changes',\n  CUSTOM = 'custom',\n  IDENTIFY = 'identify',\n  CHECKOUT = 'checkout',\n  PUBLISH_ORDER = 'publish order',\n  PURCHASE = 'purchase',\n}"
      },
      {
        "type": "enum",
        "name": " PixelEventSource",
        "text": "\n\nexport enum PixelEventSource {\n  PIXEL = 'pixel',\n  KLAVIYO = 'klaviyo',\n  ATTENTIVE = 'attentive',\n  WISEPOPS = 'wisepops',\n  PIXEL_API = 'pixel api',\n  MISSED_URLS = 'missed urls',\n  SHOPIFY_WEBHOOK = 'shopify webhook'\n}"
      }
    ]
  },
  {
    "file": "@tw/types/pixel/PixelCartChangesEvent.ts",
    "exports": [
      {
        "name": " PixelCartChangesEvent",
        "text": "\n\nexport type PixelCartChangesEvent = PixelBaseEvent<CartChangesEvent, PixelEventType.CART_CHANGES>;",
        "type": "PixelBaseEvent<CartChangesEvent, PixelEventType.CART_CHANGES>"
      },
      {
        "name": " SimpleCartItem",
        "text": "\n\nexport type SimpleCartItem = {\n    id: string;\n    q: number;\n    v?: string;\n};",
        "type": "{\n    id: string;\n    q: number;\n    v?: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/pixel/PixelCheckoutEvent.ts",
    "exports": [
      {
        "name": " PixelCheckoutEvent",
        "text": "\n\nexport type PixelCheckoutEvent = PixelBaseEvent<CheckoutEvent, PixelEventType.CHECKOUT>;",
        "type": "PixelBaseEvent<CheckoutEvent, PixelEventType.CHECKOUT>"
      },
      {
        "name": " CheckoutEventSubType",
        "text": "\n\nexport type CheckoutEventSubType = 'checkout_started' | 'payment_info_submitted' | 'checkout_completed';",
        "type": "'checkout_started' | 'payment_info_submitted' | 'checkout_completed'"
      }
    ]
  },
  {
    "file": "@tw/types/pixel/PixelCustomEvent.ts",
    "exports": [
      {
        "name": " PixelCustomEvent",
        "text": "\n\nexport type PixelCustomEvent = PixelBaseEvent<CustomEvent, PixelEventType.CUSTOM>;",
        "type": "PixelBaseEvent<CustomEvent, PixelEventType.CUSTOM>"
      }
    ]
  },
  {
    "file": "@tw/types/pixel/PixelCustomerDetailsEvent.ts",
    "exports": [
      {
        "name": " PixelCustomerDetailsEvent",
        "text": "\n\nexport type PixelCustomerDetailsEvent = PixelBaseEvent<CustomerDetailsEvent, PixelEventType.CONTACT_DETAILS>;",
        "type": "PixelBaseEvent<CustomerDetailsEvent, PixelEventType.CONTACT_DETAILS>"
      }
    ]
  },
  {
    "file": "@tw/types/pixel/PixelIdentifyEvent.ts",
    "exports": [
      {
        "name": " PixelIdentifyEvent",
        "text": "\n\nexport type PixelIdentifyEvent = PixelBaseEvent<IdentifyEvent, PixelEventType.IDENTIFY>;",
        "type": "PixelBaseEvent<IdentifyEvent, PixelEventType.IDENTIFY>"
      }
    ]
  },
  {
    "file": "@tw/types/pixel/PixelPageLoadEvent.ts",
    "exports": [
      {
        "name": " PixelPageLoadEvent",
        "text": "\n\nexport type PixelPageLoadEvent = PixelBaseEvent<PageLoadEvent, PixelEventType.PAGE_LOAD>;",
        "type": "PixelBaseEvent<PageLoadEvent, PixelEventType.PAGE_LOAD>"
      },
      {
        "name": " CartActionDetails",
        "text": "\n\nexport type CartActionDetails = { timestamp: Date, a: string, p: string, q: string };",
        "type": "{ timestamp: Date, a: string, p: string, q: string }"
      },
      {
        "name": " ParsedURL",
        "text": "\n\nexport type ParsedURL = {\n  path: string;\n  query?: { [key: string]: string };\n};",
        "type": "{\n  path: string;\n  query?: { [key: string]: string };\n}"
      }
    ]
  },
  {
    "file": "@tw/types/pixel/PixelPublishOrderEvent.ts",
    "exports": [
      {
        "name": " PixelPublishOrderEvent",
        "text": "\n\nexport type PixelPublishOrderEvent = PixelBaseEvent<PublishOrderEvent, PixelEventType.PUBLISH_ORDER> & {providerId: Platforms};",
        "type": "PixelBaseEvent<PublishOrderEvent, PixelEventType.PUBLISH_ORDER> & {providerId: Platforms}"
      },
      {
        "type": "enum",
        "name": " Platforms",
        "text": "\n\nexport enum Platforms {\n    SHOPIFY = 'SHOPIFY',\n    woocommerce = 'woocommerce',\n    bigcommerce = 'bigcommerce',\n    STRIPE = 'STRIPE'\n}"
      }
    ]
  },
  {
    "file": "@tw/types/pixel/PixelPurchaseEvent.ts",
    "exports": [
      {
        "name": " PixelPurchaseEvent",
        "text": "\n\nexport type PixelPurchaseEvent = PixelBaseEvent<PurchaseDetailsEvent, PixelEventType.PURCHASE>;",
        "type": "PixelBaseEvent<PurchaseDetailsEvent, PixelEventType.PURCHASE>"
      }
    ]
  },
  {
    "file": "@tw/types/pixel/PixelTypes.ts",
    "exports": [
      {
        "name": " TouchKind",
        "text": "\n\nexport type TouchKind = `start` | `move` | `end` | `cancel`;",
        "type": "`start` | `move` | `end` | `cancel`"
      },
      {
        "name": " Vec2",
        "text": "\nexport type Vec2 = { x: number, y: number };",
        "type": "{ x: number, y: number }"
      },
      {
        "name": " Size",
        "text": "\nexport type Size = { w: number, h: number };",
        "type": "{ w: number, h: number }"
      },
      {
        "name": " AuxAlive",
        "text": "\nexport type AuxAlive = Deed[];",
        "type": "Deed[]"
      },
      {
        "name": " BrowserScreenSize",
        "text": "\nexport type BrowserScreenSize = {\n    w: number;\n    h: number;\n};",
        "type": "{\n    w: number;\n    h: number;\n}"
      },
      {
        "name": " BrowserAuxT",
        "text": "\n\n// \nexport type BrowserAuxT = {\n    \"clr\": string,\n    \"cpuN\": string,\n    \"lang\": string,\n    \"mem\": string,\n    \"os\": string,\n    \"screen\": BrowserScreenSize,\n    sys: string,\n    \"tz\": string,\n    \"vendor\": string,\n    \"ua\": string,\n    mob?: 1,// mobile or not\n\n}",
        "type": "{\n    \"clr\": string,\n    \"cpuN\": string,\n    \"lang\": string,\n    \"mem\": string,\n    \"os\": string,\n    \"screen\": BrowserScreenSize,\n    sys: string,\n    \"tz\": string,\n    \"vendor\": string,\n    \"ua\": string,\n    mob?: 1,// mobile or not\n\n}"
      },
      {
        "name": " TrekGeo",
        "text": "\nexport type TrekGeo = {\n    ip: string,\n    at: string,// 36 encoded timestamp\n    cont?: string,\n    cntr?: string,\n    cc: string,\n    city?: string,\n    lat?: number,\n    lon?: number\n}",
        "type": "{\n    ip: string,\n    at: string,// 36 encoded timestamp\n    cont?: string,\n    cntr?: string,\n    cc: string,\n    city?: string,\n    lat?: number,\n    lon?: number\n}"
      },
      {
        "name": " AuxPageURL",
        "text": "\n// \nexport type AuxPageURL = {\n    \"path\": string,\n    \"query\"?: { [varName: string]: string }\n};",
        "type": "{\n    \"path\": string,\n    \"query\"?: { [varName: string]: string }\n}"
      },
      {
        "name": " AuxPgBuzz",
        "text": "\n\nexport type AuxPgBuzz = {\n    sec: number,/// the length of the session\n    deeds?: AuxPgLdHidden_deeds;\n}",
        "type": "{\n    sec: number,/// the length of the session\n    deeds?: AuxPgLdHidden_deeds;\n}"
      },
      {
        "name": " AuxPgLdHidden",
        "text": "\n\nexport type AuxPgLdHidden = AuxPgBuzz & {\n    m: number,/// original events \"m\"\n    eid: string,/// original events \"a\"\n}",
        "type": "AuxPgBuzz & {\n    m: number,/// original events \"m\"\n    eid: string,/// original events \"a\"\n}"
      },
      {
        "name": " AuxPgLdHidden_deeds",
        "text": "\nexport type AuxPgLdHidden_deeds = {\n    stir: { [key: string]: number },\n    mouse: number\n}",
        "type": "{\n    stir: { [key: string]: number },\n    mouse: number\n}"
      },
      {
        "name": " AuxPageLoaded",
        "text": "\n\nexport type AuxPageLoaded = {\n    \"br\": BrowserAuxT,\n    \"ref\": AuxPageURL,\n    \"url\": AuxPageURL,\n    \"urr\": string,\n    prev?: AuxPgLdHidden,// means \"previous hidden\" - contains session length info about previous session\n};",
        "type": "{\n    \"br\": BrowserAuxT,\n    \"ref\": AuxPageURL,\n    \"url\": AuxPageURL,\n    \"urr\": string,\n    prev?: AuxPgLdHidden,// means \"previous hidden\" - contains session length info about previous session\n}"
      },
      {
        "name": " AuxThankYou",
        "text": "\nexport type AuxThankYou = AuxPageLoaded & {\n    cart?: string,\n    checkout?: string,\n    thanks?: 1,\n};",
        "type": "AuxPageLoaded & {\n    cart?: string,\n    checkout?: string,\n    thanks?: 1,\n}"
      },
      {
        "name": " AuxAddToCart",
        "text": "\nexport type AuxAddToCart = {\n    prod: string; /// id of the product added\n    q: number;\n};",
        "type": "{\n    prod: string; /// id of the product added\n    q: number;\n}"
      },
      {
        "name": " AuxCapToken",
        "text": "\nexport type AuxCapToken = {\n    t: `p` | `e`;// phone or email\n    v: string;\n};",
        "type": "{\n    t: `p` | `e`;// phone or email\n    v: string;\n}"
      },
      {
        "name": " AuxClosed",
        "text": "\nexport type AuxClosed = { sec: number };",
        "type": "{ sec: number }"
      },
      {
        "name": " AuxPurchase",
        "text": "\nexport type AuxPurchase = {\n    price: number,\n    currency: string,\n    email: string,\n    cart: AuxPurchaseProduct[];\n};",
        "type": "{\n    price: number,\n    currency: string,\n    email: string,\n    cart: AuxPurchaseProduct[];\n}"
      },
      {
        "name": " AuxPurchaseProduct",
        "text": "\nexport type AuxPurchaseProduct = {\n    id: number;\n    name: string;\n    price: number;\n}",
        "type": "{\n    id: number;\n    name: string;\n    price: number;\n}"
      },
      {
        "name": " TrekAux",
        "text": "\nexport type TrekAux = AuxAlive | AuxPageLoaded | AuxThankYou | AuxCapToken | AuxAddToCart | AuxClosed | AuxPurchase | {};",
        "type": "AuxAlive | AuxPageLoaded | AuxThankYou | AuxCapToken | AuxAddToCart | AuxClosed | AuxPurchase | {}"
      },
      {
        "name": " Act",
        "text": "\nexport type Act =\n    `page loaded`\n    | `add2c`\n    | `cart`\n    | `checkout`\n    | `nip` /// this happens when we capture candidates for email or phone, when people enter something, but never submit\n    | 'purchase'\n    ;",
        "type": "`page loaded`\n    | `add2c`\n    | `cart`\n    | `checkout`\n    | `nip` /// this happens when we capture candidates for email or phone, when people enter something, but never submit\n    | 'purchase'"
      },
      {
        "name": " TrekParam",
        "text": "\nexport type TrekParam = {\n    a: string,/// event id\n    extra?: any,/// some additional data that might be sent by any third party, like FB\n    act: Act,\n    aux: TrekAux,\n}",
        "type": "{\n    a: string,/// event id\n    extra?: any,/// some additional data that might be sent by any third party, like FB\n    act: Act,\n    aux: TrekAux,\n}"
      },
      {
        "name": " ThirdPartiesAPI",
        "text": "\n\nexport type ThirdPartiesAPI = {\n    fbp?: string,\n    fbc?: string,\n}",
        "type": "{\n    fbp?: string,\n    fbc?: string,\n}"
      },
      {
        "name": " TrekUserData",
        "text": "\n\nexport type TrekUserData = {\n    shop: string, /// shop name\n    front: string, /// current shop front domain\n    shopDomain?: string,\n    loc?: string,\n    loc2?: string,\n    coo: string,\n    et: string,// etag cache id, taken from sound.txt\n    thid?: string,// thumb id, taken from FingerprintJs, if needed\n    usr?: ThidData | undefined,// thumb data, saved only on page loaded and only when thid is fetched \n}",
        "type": "{\n    shop: string, /// shop name\n    front: string, /// current shop front domain\n    shopDomain?: string,\n    loc?: string,\n    loc2?: string,\n    coo: string,\n    et: string,// etag cache id, taken from sound.txt\n    thid?: string,// thumb id, taken from FingerprintJs, if needed\n    usr?: ThidData | undefined,// thumb data, saved only on page loaded and only when thid is fetched \n}"
      },
      {
        "name": " TrekParamSrv",
        "text": "\n\nexport type TrekParamSrv = TrekParamExt & {\n    serverTimestamp: number,\n    frameStamp: number,// the timestamp rounded by frame size\n}",
        "type": "TrekParamExt & {\n    serverTimestamp: number,\n    frameStamp: number,// the timestamp rounded by frame size\n}"
      },
      {
        "name": " TrekTraceObj",
        "text": "\n\nexport type TrekTraceObj = {\n    title: string,\n    log: string[],\n}",
        "type": "{\n    title: string,\n    log: string[],\n}"
      },
      {
        "name": " TrekParamExt",
        "text": "\n\n\nexport type TrekParamExt =\n    TrekParam &\n    TrekUserData &\n    {\n        traces?: TrekTraceObj[],\n        restoredWith?: string,/// debug info for frontend\n        m: number,\n        mm?: number,// server time, set ONCE - this timestamp won't change on every PubSub!!!\n        finger: string,/// our main (not anymore!)\n        shopifyUser?: string,\n        tab: string,/// this one is refreshed after each\n        s: string,/// this one is refreshed after each fingerprintJS\n        sessAt?: string,// 36 encoded time. if set - it means we created a new session at this point\n        foo?: 1,// if the cookie was not set before this load - the \"foo\" is 1 then\n        d?: 1,// is debug\n        bo?: 1,// is bot\n        nst?: 1,/// if 1 - means there is no local storage allowed in this browser,\n        crt: string,// jenkins(crtCont)\n        crtCont?: string,// cart contents encoded as string\n        ctkn: string,/// latest cart token, from /cart.js or /cart/update.js\n        diag?: { [metric: string]: number },/// diagnostics values\n        cAPI?: ThirdPartiesAPI,\n        missedURLs?: string[],/// list of missed urls\n        geo?: TrekGeo,\n        stg?: 1,/// if 1 - means we are in staging mode\n    };",
        "type": "TrekParam &\n    TrekUserData &\n    {\n        traces?: TrekTraceObj[],\n        restoredWith?: string,/// debug info for frontend\n        m: number,\n        mm?: number,// server time, set ONCE - this timestamp won't change on every PubSub!!!\n        finger: string,/// our main (not anymore!)\n        shopifyUser?: string,\n        tab: string,/// this one is refreshed after each\n        s: string,/// this one is refreshed after each fingerprintJS\n        sessAt?: string,// 36 encoded time. if set - it means we created a new session at this point\n        foo?: 1,// if the cookie was not set before this load - the \"foo\" is 1 then\n        d?: 1,// is debug\n        bo?: 1,// is bot\n        nst?: 1,/// if 1 - means there is no local storage allowed in this browser,\n        crt: string,// jenkins(crtCont)\n        crtCont?: string,// cart contents encoded as string\n        ctkn: string,/// latest cart token, from /cart.js or /cart/update.js\n        diag?: { [metric: string]: number },/// diagnostics values\n        cAPI?: ThirdPartiesAPI,\n        missedURLs?: string[],/// list of missed urls\n        geo?: TrekGeo,\n        stg?: 1,/// if 1 - means we are in staging mode\n    }"
      },
      {
        "name": " DeedKey",
        "text": "\nexport type DeedKey = `travel` | `click` | `scroll` | `touch`;",
        "type": "`travel` | `click` | `scroll` | `touch`"
      },
      {
        "name": " Deed",
        "text": "\nexport type Deed = { sec?: number, k: DeedKey, v: DeedValue };",
        "type": "{ sec?: number, k: DeedKey, v: DeedValue }"
      },
      {
        "name": " DeedValue",
        "text": "\nexport type DeedValue =\n    Deed_travelAndScroll\n    | Deed_clickAndTouch;",
        "type": "Deed_travelAndScroll\n    | Deed_clickAndTouch"
      },
      {
        "name": " Deed_travelAndScroll",
        "text": "\nexport type Deed_travelAndScroll = number;",
        "type": "number"
      },
      {
        "name": " Deed_clickAndTouch",
        "text": "\nexport type Deed_clickAndTouch =\n    Vec2\n    & { _: string/* contains HTML obj info, like so: \"{TAG}#{ID}.{classes list}\"*/ };",
        "type": "Vec2\n    & { _: string/* contains HTML obj info, like so: \"{TAG}#{ID}.{classes list}\"*/ }"
      },
      {
        "name": " TrekSoundTxt",
        "text": "\n\nexport type TrekSoundTxt = {\n    \"channels\": 2,// yes, only 2 are allowed\n    \"sampleRate\": 44100, //yes, only 44100 are allowed\n    \"type\": \"loop\", //yes, only \"loop\" allowed\n    \"data\": number[]\n};",
        "type": "{\n    \"channels\": 2,// yes, only 2 are allowed\n    \"sampleRate\": 44100, //yes, only 44100 are allowed\n    \"type\": \"loop\", //yes, only \"loop\" allowed\n    \"data\": number[]\n}"
      },
      {
        "name": " BeaconNode",
        "text": "\n\nexport type BeaconNode = { id: string, url: string, data: { info: TrekParamExt } };",
        "type": "{ id: string, url: string, data: { info: TrekParamExt } }"
      },
      {
        "name": " ShopConfigData",
        "text": "\n\n\nexport type ShopConfigData = {\n    capi: boolean,\n    staging: boolean\n    useNodeAttr: boolean,\n}",
        "type": "{\n    capi: boolean,\n    staging: boolean\n    useNodeAttr: boolean,\n}"
      }
    ]
  },
  {
    "file": "@tw/types/pixel/PixelUtmEvent.ts",
    "exports": [
      {
        "name": " PixelUtmEvent",
        "text": "\n\nexport type PixelUtmEvent = {\n    shopDomain: string;\n    __eid: string;\n    monkeyId: string;\n    timestamp: Date;\n    version: string;\n    type: 'utm',\n    info: {\n        ref: ParsedURL,\n        url: ParsedURL\n    }\n};",
        "type": "{\n    shopDomain: string;\n    __eid: string;\n    monkeyId: string;\n    timestamp: Date;\n    version: string;\n    type: 'utm',\n    info: {\n        ref: ParsedURL,\n        url: ParsedURL\n    }\n}"
      }
    ]
  },
  {
    "file": "@tw/types/pixel/ShopifyOrderForAttribution.ts",
    "exports": [
      {
        "name": " ShopifyOrderForAttribution",
        "text": "export interface ShopifyOrderForAttribution {\n  id: number;\n  shopCode: string;\n  shopDomain: string;\n  app_id: number;\n  client_details: ClientDetails;\n  created_at: string;\n  cogs: number;\n  currency: string;\n  customer: Customer;\n  discount_codes?: any[] | any;\n  landing_site: string;\n  landing_site_ref: string;\n  line_items?: LineItemsEntity[] | null;\n  order_status_url: string;\n  name: string;\n  payment_gateway_names?: string[] | null;\n  referring_site: string;\n  shipping_address: ShopifyBillingAddress;\n  source_name: string;\n  tags: string;\n  total_price: string;\n}",
        "type": "interface"
      }
    ]
  },
  {
    "file": "@tw/types/pixel/ThidTypes.ts",
    "exports": [
      {
        "name": " Window",
        "text": "export interface Window {\n    FingerprintJS: {\n        load: (arg: { token: string }) => any,\n    }\n}",
        "type": "interface"
      },
      {
        "name": " ThidData",
        "text": "\n\nexport type ThidData = undefined | {\n    \"requestId\": string,\n    \"visitorId\": string,\n    \"visitorFound\"?: boolean,\n    \"meta\"?: {\n        \"version\": string\n    },\n    \"confidence\"?: number | {\n        \"score\": number\n    },\n    \"incognito\": boolean,\n    \"browserName\": string,\n    \"browserVersion\": string,\n    \"device\": string,\n    \"ip\": string,\n    \"ipLocation\": {\n        \"accuracyRadius\": number,\n        \"latitude\": number,\n        \"longitude\": number,\n        \"postalCode\": string,\n        \"timezone\": string,\n        \"city\": {\n            \"name\": string\n        },\n        \"country\": {\n            \"code\": string,\n            \"name\": string\n        },\n        \"continent\": {\n            \"code\": string,\n            \"name\": string\n        },\n        \"subdivisions\": [\n            {\n                \"isoCode\": string,\n                \"name\": string\n            }\n        ]\n    },\n    firstSeenAt?: any,\n    lastSeenAt?: any,\n    browser?: string,\n    \"os\": string,\n    \"osVersion\": string\n}",
        "type": "undefined | {\n    \"requestId\": string,\n    \"visitorId\": string,\n    \"visitorFound\"?: boolean,\n    \"meta\"?: {\n        \"version\": string\n    },\n    \"confidence\"?: number | {\n        \"score\": number\n    },\n    \"incognito\": boolean,\n    \"browserName\": string,\n    \"browserVersion\": string,\n    \"device\": string,\n    \"ip\": string,\n    \"ipLocation\": {\n        \"accuracyRadius\": number,\n        \"latitude\": number,\n        \"longitude\": number,\n        \"postalCode\": string,\n        \"timezone\": string,\n        \"city\": {\n            \"name\": string\n        },\n        \"country\": {\n            \"code\": string,\n            \"name\": string\n        },\n        \"continent\": {\n            \"code\": string,\n            \"name\": string\n        },\n        \"subdivisions\": [\n            {\n                \"isoCode\": string,\n                \"name\": string\n            }\n        ]\n    },\n    firstSeenAt?: any,\n    lastSeenAt?: any,\n    browser?: string,\n    \"os\": string,\n    \"osVersion\": string\n}"
      }
    ]
  },
  {
    "file": "@tw/types/pixel/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/rawFiles/amazon.ts",
    "exports": [
      {
        "name": " AmazonAdsEntityProps",
        "text": "export type AmazonAdsEntityProps = {\n  id: number;\n  name: string;\n  resource_name: string;\n  status?: number;\n  tracking_url_template?: string;\n  final_url_suffix?: string;\n};",
        "type": "{\n  id: number;\n  name: string;\n  resource_name: string;\n  status?: number;\n  tracking_url_template?: string;\n  final_url_suffix?: string;\n}"
      },
      {
        "name": " AmazonAdsRawFile",
        "text": "\n\nexport type AmazonAdsRawFile = {\n  report: AmazonAdsSpReportEntry[] | AmazonAdsSbReportEntry[] | AmazonAdsSdReportEntry[];\n  adAccount: AmazonAdAccount;\n};",
        "type": "{\n  report: AmazonAdsSpReportEntry[] | AmazonAdsSbReportEntry[] | AmazonAdsSdReportEntry[];\n  adAccount: AmazonAdAccount;\n}"
      },
      {
        "name": " AmazonAdsReportType",
        "text": "\nexport type AmazonAdsReportType = 'sp' | 'sb' | 'sd';",
        "type": "'sp' | 'sb' | 'sd'"
      },
      {
        "name": " AmazonAdAccount",
        "text": "\nexport type AmazonAdAccount = {\n  id: number;\n  marketplaceId: string;\n  sellerId: string;\n  reportType: AmazonAdsReportType;\n  timezone: string;\n  // name: string;\n  // currency: string;\n};",
        "type": "{\n  id: number;\n  marketplaceId: string;\n  sellerId: string;\n  reportType: AmazonAdsReportType;\n  timezone: string;\n  // name: string;\n  // currency: string;\n}"
      },
      {
        "name": " AmazonAdsSpReportEntry",
        "text": "\n\nexport interface AmazonAdsSpReportEntry {\n  adGroupId: number;\n  adGroupName: string;\n  campaignBudgetAmount?: number;\n  campaignBudgetCurrencyCode: string;\n  campaignBudgetType?: string;\n  campaignId: number;\n  campaignName: string;\n  campaignStatus: string;\n  clicks: number;\n  clickThroughRate: number;\n  cost: number;\n  costPerClick: number;\n  date: string;\n  impressions: number;\n  spend: number;\n  purchases1d: number;\n  purchasesSameSku1d: number;\n  sales1d: number;\n  unitsSoldClicks1d: number;\n  unitsSoldSameSku1d: number;\n  attributedSalesSameSku1d: number;\n  purchases7d: number;\n  purchasesSameSku7d: number;\n  sales7d: number;\n  unitsSoldClicks7d: number;\n  unitsSoldSameSku7d: number;\n  attributedSalesSameSku7d: number;\n  purchases14d: number;\n  purchasesSameSku14d: number;\n  sales14d: number;\n  unitsSoldClicks14d: number;\n  unitsSoldSameSku14d: number;\n  attributedSalesSameSku14d: number;\n  purchases30d: number;\n  purchasesSameSku30d: number;\n  sales30d: number;\n  unitsSoldClicks30d: number;\n  unitsSoldSameSku30d: number;\n  attributedSalesSameSku30d: number;\n  adId: number;\n  advertisedAsin: string;\n  advertisedSku: string;\n  acosClicks7d: number;\n  acosClicks14d: number;\n  roasClicks7d: number;\n  roasClicks14d: number;\n}",
        "type": "interface"
      },
      {
        "name": " AmazonAdsSbReportEntry",
        "text": "\n\nexport interface AmazonAdsSbReportEntry {\n  date: string;\n  adGroupId: number;\n  adGroupName: string;\n  adId: number;\n  applicableBudgetRuleId: number;\n  applicableBudgetRuleName: string;\n  attributedConversions14d: number;\n  attributedConversions14dSameSKU: number;\n  attributedDetailPageViewsClicks14d: number;\n  attributedOrderRateNewToBrand14d: number;\n  attributedOrdersNewToBrand14d: number;\n  attributedOrdersNewToBrandPercentage14d: number;\n  attributedSales14d: number;\n  attributedSales14dSameSKU: number;\n  attributedSalesNewToBrand14d: number;\n  attributedSalesNewToBrandPercentage14d: number;\n  attributedUnitsOrderedNewToBrand14d: number;\n  attributedUnitsOrderedNewToBrandPercentage14d: number;\n  campaignBudget: number;\n  campaignBudgetType?: string;\n  campaignId: number;\n  campaignName: string;\n  campaignRuleBasedBudget?: string;\n  campaignStatus: string;\n  clicks: number;\n  cost: number;\n  dpv14d: number;\n  impressions: number;\n  vctr: number;\n  video5SecondViewRate: number;\n  video5SecondViews: number;\n  videoCompleteViews: number;\n  videoFirstQuartileViews: number;\n  videoMidpointViews: number;\n  videoThirdQuartileViews: number;\n  videoUnmutes: number;\n  viewableImpressions: number;\n  vtr: number;\n  attributedBrandedSearches14d: number;\n  currency: string;\n}",
        "type": "interface"
      },
      {
        "name": " AmazonAdsSdReportEntry",
        "text": "\n\nexport interface AmazonAdsSdReportEntry {\n  date: string;\n  adGroupId: number;\n  adGroupName: string;\n  adId: number;\n  asin: string;\n  attributedConversions14d: number;\n  attributedConversions14dSameSKU: number;\n  attributedConversions1d: number;\n  attributedConversions1dSameSKU: number;\n  attributedConversions30d: number;\n  attributedConversions30dSameSKU: number;\n  attributedConversions7d: number;\n  attributedConversions7dSameSKU: number;\n  attributedDetailPageView14d: number;\n  attributedOrdersNewToBrand14d: number;\n  attributedSales14d: number;\n  attributedSales14dSameSKU: number;\n  attributedSales1d: number;\n  attributedSales1dSameSKU: number;\n  attributedSales30d: number;\n  attributedSales30dSameSKU: number;\n  attributedSales7d: number;\n  attributedSales7dSameSKU: number;\n  attributedSalesNewToBrand14d: number;\n  attributedUnitsOrdered14d: number;\n  attributedUnitsOrdered1d: number;\n  attributedUnitsOrdered30d: number;\n  attributedUnitsOrdered7d: number;\n  attributedUnitsOrderedNewToBrand14d: number;\n  campaignId: number;\n  campaignName: string;\n  clicks: number;\n  cost: number;\n  currency: string;\n  impressions: number;\n  sku: string;\n  viewAttributedConversions14d: number;\n  viewImpressions: number;\n  viewAttributedDetailPageView14d: number;\n  viewAttributedSales14d: number;\n  viewAttributedUnitsOrdered14d: number;\n  viewAttributedOrdersNewToBrand14d: number;\n  viewAttributedSalesNewToBrand14d: number;\n  viewAttributedUnitsOrderedNewToBrand14d: number;\n  attributedBrandedSearches14d: number;\n  viewAttributedBrandedSearches14d: number;\n  videoCompleteViews: number;\n  videoFirstQuartileViews: number;\n  videoMidpointViews: number;\n  videoThirdQuartileViews: number;\n  videoUnmutes: number;\n  vtr: number;\n  vctr: number;\n}",
        "type": "interface"
      }
    ]
  },
  {
    "file": "@tw/types/rawFiles/bing.ts",
    "exports": [
      {
        "name": " BingReport",
        "text": "export type BingReport = {\n  AdId: string;\n  AdStatus: string;\n  AccountId: string;\n  AdGroupId: string;\n  AdGroupName: string;\n  AdGroupStatus: string;\n  CampaignId: string;\n  CampaignName: string;\n  CampaignStatus: string;\n  TimePeriod: string;\n  Conversions: string;\n  Impressions: string;\n  Spend: string;\n  AllRevenue: string;\n  Clicks: string;\n  date?: string;\n};",
        "type": "{\n  AdId: string;\n  AdStatus: string;\n  AccountId: string;\n  AdGroupId: string;\n  AdGroupName: string;\n  AdGroupStatus: string;\n  CampaignId: string;\n  CampaignName: string;\n  CampaignStatus: string;\n  TimePeriod: string;\n  Conversions: string;\n  Impressions: string;\n  Spend: string;\n  AllRevenue: string;\n  Clicks: string;\n  date?: string;\n}"
      },
      {
        "name": " BingRawFile",
        "text": "\n\nexport type BingRawFile = {\n  report: { report_results: BingReport[] };\n  adAccount: {\n    accountId: string;\n    name: string;\n    currency: string;\n    timezone: string;\n  };\n};",
        "type": "{\n  report: { report_results: BingReport[] };\n  adAccount: {\n    accountId: string;\n    name: string;\n    currency: string;\n    timezone: string;\n  };\n}"
      },
      {
        "name": " BingAdMetrics",
        "text": "\n\nexport type BingAdMetrics = {\n  spend: number;\n  impressions: number;\n  clicks: number;\n  conversions: number;\n  conversionValue: number;\n  purchases: number;\n};",
        "type": "{\n  spend: number;\n  impressions: number;\n  clicks: number;\n  conversions: number;\n  conversionValue: number;\n  purchases: number;\n}"
      },
      {
        "name": " BingAdData",
        "text": "\n\nexport type BingAdData = {\n  adData: any;\n  dates: {\n    [date: string]: {\n      [hour: string]: BingAdMetrics;\n    };\n  };\n};",
        "type": "{\n  adData: any;\n  dates: {\n    [date: string]: {\n      [hour: string]: BingAdMetrics;\n    };\n  };\n}"
      },
      {
        "name": " BingAds",
        "text": "\n\nexport type BingAds = {\n  [adId: string]: BingAdData;\n};",
        "type": "{\n  [adId: string]: BingAdData;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/rawFiles/facebook-ads.ts",
    "exports": [
      {
        "name": " FacebookActionStat",
        "text": "\n\nexport type FacebookActionStat = {\n  action_type: string;\n  value?: string;\n  ['1d_view']?: string;\n  ['7d_click']?: string;\n  ['1d_click']?: string;\n  ['28d_click']?: string;\n  ['28d_view']?: string;\n};",
        "type": "{\n  action_type: string;\n  value?: string;\n  ['1d_view']?: string;\n  ['7d_click']?: string;\n  ['1d_click']?: string;\n  ['28d_click']?: string;\n  ['28d_view']?: string;\n}"
      },
      {
        "name": " FacebookReportDay",
        "text": "\n\nexport type FacebookReportDay = {\n  spend: string;\n  ad_id: string;\n  purchase_roas?: FacebookActionStat[];\n  actions?: FacebookActionStat[];\n  video_play_actions?: FacebookActionStat[];\n  clicks: string;\n  three_second_video_view?: number; // this will be calculated by day\n  total_video_view?: number; // this will be calculated by day\n  purchases?: number; // this will be calculated by day\n  impressions: string;\n  outbound_clicks?: FacebookActionStat[];\n  action_values?: FacebookActionStat[];\n  reach?: number;\n  frequency_value?: number;\n  inline_post_engagement?: number;\n  shops_assisted_purchases?: number;\n  cost_per_thruplay?: FacebookActionStat[];\n  ad_name: string;\n  adset_id: string;\n  adset_name: string;\n  campaign_id: string;\n  campaign_name: string;\n  date_start: string;\n  date_stop: string;\n};",
        "type": "{\n  spend: string;\n  ad_id: string;\n  purchase_roas?: FacebookActionStat[];\n  actions?: FacebookActionStat[];\n  video_play_actions?: FacebookActionStat[];\n  clicks: string;\n  three_second_video_view?: number; // this will be calculated by day\n  total_video_view?: number; // this will be calculated by day\n  purchases?: number; // this will be calculated by day\n  impressions: string;\n  outbound_clicks?: FacebookActionStat[];\n  action_values?: FacebookActionStat[];\n  reach?: number;\n  frequency_value?: number;\n  inline_post_engagement?: number;\n  shops_assisted_purchases?: number;\n  cost_per_thruplay?: FacebookActionStat[];\n  ad_name: string;\n  adset_id: string;\n  adset_name: string;\n  campaign_id: string;\n  campaign_name: string;\n  date_start: string;\n  date_stop: string;\n}"
      },
      {
        "name": " FacebookReportHour",
        "text": "\n\nexport type FacebookReportHour = FacebookReportDay & {\n  hourly_stats_aggregated_by_advertiser_time_zone: string;\n};",
        "type": "FacebookReportDay & {\n  hourly_stats_aggregated_by_advertiser_time_zone: string;\n}"
      },
      {
        "name": " FacebookReportCountry",
        "text": "\n\nexport type FacebookReportCountry = FacebookReportDay & {\n  country: string;\n};",
        "type": "FacebookReportDay & {\n  country: string;\n}"
      },
      {
        "name": " FacebookReportPublisherPlatformPosition",
        "text": "\n\nexport type FacebookReportPublisherPlatformPosition = FacebookReportDay & {\n  publisher_platform: string;\n  platform_position: string;\n};",
        "type": "FacebookReportDay & {\n  publisher_platform: string;\n  platform_position: string;\n}"
      },
      {
        "name": " FacebookReportAgeGender",
        "text": "\n\nexport type FacebookReportAgeGender = FacebookReportDay & {\n  age: string;\n  gender: string;\n};",
        "type": "FacebookReportDay & {\n  age: string;\n  gender: string;\n}"
      },
      {
        "name": " FacebookReportAge",
        "text": "\n\nexport type FacebookReportAge = FacebookReportDay & {\n  age: string;\n};",
        "type": "FacebookReportDay & {\n  age: string;\n}"
      },
      {
        "name": " FacebookReportGender",
        "text": "\n\nexport type FacebookReportGender = FacebookReportDay & {\n  gender: string;\n};",
        "type": "FacebookReportDay & {\n  gender: string;\n}"
      },
      {
        "name": " FacebookReportFrequency",
        "text": "\n\nexport type FacebookReportFrequency = FacebookReportDay & {\n  frequency_value: string;\n};",
        "type": "FacebookReportDay & {\n  frequency_value: string;\n}"
      },
      {
        "name": " FacebookAdCampaign",
        "text": "\n\nexport type FacebookAdCampaign = {\n  id: string;\n  name: string;\n  effective_status: AttributeStatus;\n  created_time: string;\n  objective?: string;\n};",
        "type": "{\n  id: string;\n  name: string;\n  effective_status: AttributeStatus;\n  created_time: string;\n  objective?: string;\n}"
      },
      {
        "name": " FacebookAdset",
        "text": "\n\nexport type FacebookAdset = {\n  id: string;\n  name: string;\n  effective_status: AttributeStatus;\n  is_dynamic_creative: boolean;\n};",
        "type": "{\n  id: string;\n  name: string;\n  effective_status: AttributeStatus;\n  is_dynamic_creative: boolean;\n}"
      },
      {
        "name": " FacebookDynamicCreative",
        "text": "\n\nexport type FacebookDynamicCreative = {\n  [dynamic in FacebookDynamicTypes]?: FacebookDynamicTypesMapper[dynamic][];\n};",
        "type": "{\n  [dynamic in FacebookDynamicTypes]?: FacebookDynamicTypesMapper[dynamic][];\n}"
      },
      {
        "name": " FacebookCreative",
        "text": "\n\nexport type FacebookCreative = {\n  id: string;\n  name: string;\n  thumbnail_url: string;\n  object_id: string;\n  actor_id: string;\n  object_type: string;\n  status: AttributeStatus;\n  title?: string;\n  body?: string;\n  image_hash?: string;\n  image_url?: string;\n  adlabels?: string;\n  asset_feed_spec?: FacebookDynamicCreative;\n  applink_treatment?: string;\n  playable_asset_id?: string;\n  link_og_id?: string;\n  link_url?: string;\n  link_destination_display_url?: string;\n  image_crops?: string;\n  call_to_action_type?: string;\n  video_id?: string;\n  url_tags?: string;\n  object_story_spec?: any;\n};",
        "type": "{\n  id: string;\n  name: string;\n  thumbnail_url: string;\n  object_id: string;\n  actor_id: string;\n  object_type: string;\n  status: AttributeStatus;\n  title?: string;\n  body?: string;\n  image_hash?: string;\n  image_url?: string;\n  adlabels?: string;\n  asset_feed_spec?: FacebookDynamicCreative;\n  applink_treatment?: string;\n  playable_asset_id?: string;\n  link_og_id?: string;\n  link_url?: string;\n  link_destination_display_url?: string;\n  image_crops?: string;\n  call_to_action_type?: string;\n  video_id?: string;\n  url_tags?: string;\n  object_story_spec?: any;\n}"
      },
      {
        "name": " FacebookAdData",
        "text": "\n\nexport type FacebookAdData = {\n  campaign: FacebookAdCampaign;\n  adset: FacebookAdset;\n  creative: FacebookCreative;\n  effective_status: AttributeStatus;\n  name: string;\n  id: string;\n};",
        "type": "{\n  campaign: FacebookAdCampaign;\n  adset: FacebookAdset;\n  creative: FacebookCreative;\n  effective_status: AttributeStatus;\n  name: string;\n  id: string;\n}"
      },
      {
        "name": " Thumbnail",
        "text": "\n\nexport type Thumbnail = {\n  thumbnail: string;\n  adId: string;\n  filename: string;\n  hostingUrl: string;\n  videoId?: string;\n  imageHash?: string;\n};",
        "type": "{\n  thumbnail: string;\n  adId: string;\n  filename: string;\n  hostingUrl: string;\n  videoId?: string;\n  imageHash?: string;\n}"
      },
      {
        "name": " FacebookMainReportEntry",
        "text": "\n\nexport type FacebookMainReportEntry = {\n  hour: FacebookReportHour[];\n  day: FacebookReportDay[];\n  adsData: FacebookAdData[];\n  creativeBreakdowns: CreativeBreakdown[];\n  breakdowns: {\n    country: FacebookReportCountry[];\n    publisherPlatformPosition: FacebookReportPublisherPlatformPosition[];\n    ageGender: FacebookReportAgeGender[];\n    frequency: FacebookReportFrequency[];\n    age: FacebookReportAge[];\n    gender: FacebookReportGender[];\n  };\n  thumbnails: Thumbnail[];\n};",
        "type": "{\n  hour: FacebookReportHour[];\n  day: FacebookReportDay[];\n  adsData: FacebookAdData[];\n  creativeBreakdowns: CreativeBreakdown[];\n  breakdowns: {\n    country: FacebookReportCountry[];\n    publisherPlatformPosition: FacebookReportPublisherPlatformPosition[];\n    ageGender: FacebookReportAgeGender[];\n    frequency: FacebookReportFrequency[];\n    age: FacebookReportAge[];\n    gender: FacebookReportGender[];\n  };\n  thumbnails: Thumbnail[];\n}"
      },
      {
        "name": " FBAdAccount",
        "text": "\n\nexport type FBAdAccount = {\n  id: string;\n  name: string;\n  currency: string;\n  timezone: string;\n  attributionWindow: string[];\n};",
        "type": "{\n  id: string;\n  name: string;\n  currency: string;\n  timezone: string;\n  attributionWindow: string[];\n}"
      },
      {
        "name": " FacebookRawFile",
        "text": "\n\nexport type FacebookRawFile = {\n  report: FacebookMainReportEntry;\n  adAccount: FBAdAccount;\n};",
        "type": "{\n  report: FacebookMainReportEntry;\n  adAccount: FBAdAccount;\n}"
      },
      {
        "name": " BreakdownType",
        "text": "\n\nexport type BreakdownType = 'video_asset' | 'image_asset' | 'body_asset';",
        "type": "'video_asset' | 'image_asset' | 'body_asset'"
      },
      {
        "name": " CreativeBreakdown",
        "text": "\n\nexport interface CreativeBreakdown {\n  breakdown: BreakdownType;\n  insights: Insight[];\n}",
        "type": "interface"
      },
      {
        "name": " Insight",
        "text": "\n\nexport interface Insight {\n  spend: string;\n  ad_id: string;\n  actions?: Action[];\n  video_play_actions?: VideoPlayAction[];\n  clicks: string;\n  impressions: string;\n  date_start: string;\n  date_stop: string;\n  video_asset?: Videoasset;\n  account_id: string;\n  action_values?: Action[];\n  image_asset?: Imageasset;\n  purchase_roas?: Action[];\n  body_asset?: Bodyasset;\n  outbound_clicks?: OutboundClick[];\n}",
        "type": "interface"
      }
    ]
  },
  {
    "file": "@tw/types/rawFiles/google-ads.ts",
    "exports": [
      {
        "name": " GoogleAdsEntityProps",
        "text": "export type GoogleAdsEntityProps = {\n  id: number;\n  name: string;\n  resource_name: string;\n  status?: number;\n  tracking_url_template?: string;\n  final_url_suffix?: string;\n  advertising_channel_type?: number;\n};",
        "type": "{\n  id: number;\n  name: string;\n  resource_name: string;\n  status?: number;\n  tracking_url_template?: string;\n  final_url_suffix?: string;\n  advertising_channel_type?: number;\n}"
      },
      {
        "name": " GoogleAdProps",
        "text": "\n\nexport type GoogleAdProps = {\n  id: number;\n  name?: any;\n  type: number;\n  text_ad?: any;\n  expanded_text_ad?: any;\n  expanded_dynamic_search_ad?: any;\n  shopping_smart_ad?: any;\n  shopping_product_ad?: any;\n  video_ad?: any;\n  image_ad?: any;\n  responsive_search_ad: ResponsiveSearchAd;\n  responsive_display_ad?: any;\n  video_responsive_ad?: any;\n  resource_name: string;\n  tracking_url_template?: string;\n  final_url_suffix?: string;\n  final_urls?: string[];\n};",
        "type": "{\n  id: number;\n  name?: any;\n  type: number;\n  text_ad?: any;\n  expanded_text_ad?: any;\n  expanded_dynamic_search_ad?: any;\n  shopping_smart_ad?: any;\n  shopping_product_ad?: any;\n  video_ad?: any;\n  image_ad?: any;\n  responsive_search_ad: ResponsiveSearchAd;\n  responsive_display_ad?: any;\n  video_responsive_ad?: any;\n  resource_name: string;\n  tracking_url_template?: string;\n  final_url_suffix?: string;\n  final_urls?: string[];\n}"
      },
      {
        "name": " GoogleAdsRawFile",
        "text": "\n\nexport type GoogleAdsRawFile = {\n  report: GoogleAdsReportEntry[];\n  adAccount: {\n    id: string;\n    name: string;\n    currency: string;\n  };\n  breakdowns: {\n    gender: GoogleAdsReportEntry[];\n    geographic: GoogleAdsReportEntry[];\n    age_range: GoogleAdsReportEntry[];\n    device: GoogleAdsReportEntry[];\n    ad_network_type: GoogleAdsReportEntry[];\n    click_type: GoogleAdsReportEntry[];\n    slot: GoogleAdsReportEntry[];\n  };\n};",
        "type": "{\n  report: GoogleAdsReportEntry[];\n  adAccount: {\n    id: string;\n    name: string;\n    currency: string;\n  };\n  breakdowns: {\n    gender: GoogleAdsReportEntry[];\n    geographic: GoogleAdsReportEntry[];\n    age_range: GoogleAdsReportEntry[];\n    device: GoogleAdsReportEntry[];\n    ad_network_type: GoogleAdsReportEntry[];\n    click_type: GoogleAdsReportEntry[];\n    slot: GoogleAdsReportEntry[];\n  };\n}"
      },
      {
        "name": " GoogleAdsReportEntry",
        "text": "\n\nexport type GoogleAdsReportEntry = {\n  campaign: GoogleAdsEntityProps;\n  ad_group: GoogleAdsEntityProps;\n  ad_group_ad: {\n    ad: GoogleAdProps;\n    status: number;\n    labels: any[];\n    resource_name: string;\n  };\n  metrics: {\n    cost_micros: number;\n    conversions_value: number;\n    all_conversions: number;\n    conversions: number;\n    clicks: number;\n    ctr: number;\n    all_conversions_value: number;\n    impressions: number;\n    video_quartile_p25_rate?: number;\n  };\n  segments: {\n    date: string;\n    device?: number; //relevant to breakdowns device\n    ad_network_type?: number; //relevant to breakdowns ad_network_type\n    click_type?: number; //relevant to breakdowns click_type\n    slot?: number; //relevant to breakdowns slot\n  };\n  customer?: {\n    resource_name: string;\n    tracking_url_template?: string;\n  };\n  video?: {\n    id: string;\n    channel_id: string;\n    title: string;\n    duration_millis: number;\n    resource_name: string;\n  };\n  asset?: {\n    id: string;\n    youtube_video_asset: {\n      youtube_video_id: string;\n    };\n    resource_name: string;\n  };\n  ad_group_criterion?: {\n    gender?: { type: number };\n    age_range?: { type: number };\n  }; // relevant to gender breakdown\n  geographic_view?: { country_criterion_id: number }; // relevant to geographic breakdown\n};",
        "type": "{\n  campaign: GoogleAdsEntityProps;\n  ad_group: GoogleAdsEntityProps;\n  ad_group_ad: {\n    ad: GoogleAdProps;\n    status: number;\n    labels: any[];\n    resource_name: string;\n  };\n  metrics: {\n    cost_micros: number;\n    conversions_value: number;\n    all_conversions: number;\n    conversions: number;\n    clicks: number;\n    ctr: number;\n    all_conversions_value: number;\n    impressions: number;\n    video_quartile_p25_rate?: number;\n  };\n  segments: {\n    date: string;\n    device?: number; //relevant to breakdowns device\n    ad_network_type?: number; //relevant to breakdowns ad_network_type\n    click_type?: number; //relevant to breakdowns click_type\n    slot?: number; //relevant to breakdowns slot\n  };\n  customer?: {\n    resource_name: string;\n    tracking_url_template?: string;\n  };\n  video?: {\n    id: string;\n    channel_id: string;\n    title: string;\n    duration_millis: number;\n    resource_name: string;\n  };\n  asset?: {\n    id: string;\n    youtube_video_asset: {\n      youtube_video_id: string;\n    };\n    resource_name: string;\n  };\n  ad_group_criterion?: {\n    gender?: { type: number };\n    age_range?: { type: number };\n  }; // relevant to gender breakdown\n  geographic_view?: { country_criterion_id: number }; // relevant to geographic breakdown\n}"
      }
    ]
  },
  {
    "file": "@tw/types/rawFiles/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/rawFiles/pinterest.ts",
    "exports": [
      {
        "type": "enum",
        "name": " PinterestEntityStatus",
        "text": "export enum PinterestEntityStatus {\n  ACTIVE = 1,\n  PAUSED = 2,\n  ARCHIVED = 3,\n}"
      },
      {
        "name": " PinterestReportEntry",
        "text": "\n\nexport type PinterestReportEntry = {\n  CAMPAIGN_ID: number;\n  CAMPAIGN_NAME: string;\n  CAMPAIGN_ENTITY_STATUS: PinterestEntityStatus;\n  AD_GROUP_ID: number;\n  AD_GROUP_NAME: string;\n  AD_GROUP_ENTITY_STATUS: PinterestEntityStatus;\n  AD_ID: number;\n  NAME: string;\n  STATUS: 'ACTIVE' | 'PAUSED' | 'CANCELED';\n  DATE: string;\n  IMPRESSION_1: number;\n  IMPRESSION_2: number;\n  TOTAL_CLICKTHROUGH: number;\n  SPEND_IN_DOLLAR: number;\n  TOTAL_CHECKOUT: number; // purchases\n  TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR: number; // conversion value\n  URL_PARAMS: string;\n};",
        "type": "{\n  CAMPAIGN_ID: number;\n  CAMPAIGN_NAME: string;\n  CAMPAIGN_ENTITY_STATUS: PinterestEntityStatus;\n  AD_GROUP_ID: number;\n  AD_GROUP_NAME: string;\n  AD_GROUP_ENTITY_STATUS: PinterestEntityStatus;\n  AD_ID: number;\n  NAME: string;\n  STATUS: 'ACTIVE' | 'PAUSED' | 'CANCELED';\n  DATE: string;\n  IMPRESSION_1: number;\n  IMPRESSION_2: number;\n  TOTAL_CLICKTHROUGH: number;\n  SPEND_IN_DOLLAR: number;\n  TOTAL_CHECKOUT: number; // purchases\n  TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR: number; // conversion value\n  URL_PARAMS: string;\n}"
      },
      {
        "name": " PinterestRawFile",
        "text": "\n\nexport type PinterestRawFile = {\n  report: PinterestReportEntry[];\n  adAccount: {\n    id: string;\n    name: string;\n    currency: string;\n  };\n};",
        "type": "{\n  report: PinterestReportEntry[];\n  adAccount: {\n    id: string;\n    name: string;\n    currency: string;\n  };\n}"
      }
    ]
  },
  {
    "file": "@tw/types/rawFiles/snapchat.ts",
    "exports": [
      {
        "name": " SnapchatStatsPerHour",
        "text": "export type SnapchatStatsPerHour = {\n  impressions: number;\n  swipes: number;\n  spend: number;\n  conversion_purchases: number;\n  conversion_purchases_value: number;\n};",
        "type": "{\n  impressions: number;\n  swipes: number;\n  spend: number;\n  conversion_purchases: number;\n  conversion_purchases_value: number;\n}"
      },
      {
        "name": " SnapchatStatsPerDay",
        "text": "\n\nexport type SnapchatStatsPerDay = {\n  conversion_purchases: number;\n  conversion_purchases_value: number;\n};",
        "type": "{\n  conversion_purchases: number;\n  conversion_purchases_value: number;\n}"
      },
      {
        "name": " SnapchatTimeSeries",
        "text": "\n\nexport type SnapchatTimeSeries = {\n  start_time: string;\n  end_time: string;\n  stats: SnapchatStatsPerDay | SnapchatStatsPerHour;\n};",
        "type": "{\n  start_time: string;\n  end_time: string;\n  stats: SnapchatStatsPerDay | SnapchatStatsPerHour;\n}"
      },
      {
        "name": " SnapchatMetricsSeries",
        "text": "\n\nexport type SnapchatMetricsSeries = {\n  id: string;\n  granularity: 'DAY' | 'HOUR';\n  start_time: string;\n  end_time: string;\n  timeseries: SnapchatTimeSeries[];\n};",
        "type": "{\n  id: string;\n  granularity: 'DAY' | 'HOUR';\n  start_time: string;\n  end_time: string;\n  timeseries: SnapchatTimeSeries[];\n}"
      },
      {
        "name": " SnapchatAdsReportAds",
        "text": "\n\nexport type SnapchatAdsReportAds = {\n  ad: {\n    campaign_id: string;\n    campaign_name: string;\n    campaign_status: string;\n\n    ad_squad_id: string;\n    ad_squad_name: string;\n    ad_squad_status: string;\n\n    id: string;\n    name: string;\n    status: string;\n\n    creative_id: string;\n  };\n  hourlyMetrics: SnapchatMetricsSeries;\n  dailyMetrics: SnapchatMetricsSeries;\n};",
        "type": "{\n  ad: {\n    campaign_id: string;\n    campaign_name: string;\n    campaign_status: string;\n\n    ad_squad_id: string;\n    ad_squad_name: string;\n    ad_squad_status: string;\n\n    id: string;\n    name: string;\n    status: string;\n\n    creative_id: string;\n  };\n  hourlyMetrics: SnapchatMetricsSeries;\n  dailyMetrics: SnapchatMetricsSeries;\n}"
      },
      {
        "name": " SnapchatAdsReport",
        "text": "\n\nexport type SnapchatAdsReport = {\n  ads: SnapchatAdsReportAds[];\n};",
        "type": "{\n  ads: SnapchatAdsReportAds[];\n}"
      },
      {
        "name": " SnapchatAdsRawFile",
        "text": "\n\nexport type SnapchatAdsRawFile = {\n  report: SnapchatAdsReport;\n  adAccount: {\n    id: string;\n    name: string;\n    timezone: string;\n    currency: string;\n  };\n};",
        "type": "{\n  report: SnapchatAdsReport;\n  adAccount: {\n    id: string;\n    name: string;\n    timezone: string;\n    currency: string;\n  };\n}"
      }
    ]
  },
  {
    "file": "@tw/types/rawFiles/tiktok.ts",
    "exports": [
      {
        "name": " TiktokReportEntry",
        "text": "\n\nexport type TiktokReportEntry = {\n  metrics: {\n    ad_format: TiktokAdFormat;\n    ad_id: number;\n    ad_name: string;\n    ad_text: string;\n    adgroup_id: number;\n    adgroup_name: string;\n    adgroup_status: string;\n    campaign_id: number;\n    campaign_name: string;\n    campaign_status: string;\n    clicks: string;\n    cpc: string;\n    cpm: string;\n    total_complete_payment_rate: string;\n    total_on_web_order_value: string;\n    complete_payment?: string;\n    on_web_order?: string;\n    video_watched_6s: string;\n    video_play_actions: string;\n    cta_conversion: string;\n    ctr: string;\n    image_ids: string[];\n    impressions: string;\n    purchase: string;\n    conversion: string;\n    spend: string;\n    video_id: string;\n    assetId: string | null;\n    assetUrl: string | null;\n  };\n  dimensions: {\n    stat_time_hour: string;\n    ad_id: number;\n  };\n};",
        "type": "{\n  metrics: {\n    ad_format: TiktokAdFormat;\n    ad_id: number;\n    ad_name: string;\n    ad_text: string;\n    adgroup_id: number;\n    adgroup_name: string;\n    adgroup_status: string;\n    campaign_id: number;\n    campaign_name: string;\n    campaign_status: string;\n    clicks: string;\n    cpc: string;\n    cpm: string;\n    total_complete_payment_rate: string;\n    total_on_web_order_value: string;\n    complete_payment?: string;\n    on_web_order?: string;\n    video_watched_6s: string;\n    video_play_actions: string;\n    cta_conversion: string;\n    ctr: string;\n    image_ids: string[];\n    impressions: string;\n    purchase: string;\n    conversion: string;\n    spend: string;\n    video_id: string;\n    assetId: string | null;\n    assetUrl: string | null;\n  };\n  dimensions: {\n    stat_time_hour: string;\n    ad_id: number;\n  };\n}"
      },
      {
        "name": " TiktokRawFile",
        "text": "\n\nexport type TiktokRawFile = {\n  report: TiktokReportEntry[];\n  adAccount: {\n    id: string;\n    currency: string;\n  };\n};",
        "type": "{\n  report: TiktokReportEntry[];\n  adAccount: {\n    id: string;\n    currency: string;\n  };\n}"
      }
    ]
  },
  {
    "file": "@tw/types/rawFiles/twitter.ts",
    "exports": [
      {
        "name": " conversionPurchases",
        "text": "export type conversionPurchases = {\n  order_quantity: number[],\n  sale_amount: number[],\n  metric:number[]\n}",
        "type": "{\n  order_quantity: number[],\n  sale_amount: number[],\n  metric:number[]\n}"
      },
      {
        "name": " TwitterAdsMetrics",
        "text": "\n\nexport type TwitterAdsMetrics = {\n  video_views_50: number[],\n  impressions: number[],\n  engagements: number[],\n  tweets_send: number[],\n  conversion_purchases: conversionPurchases,\n  billed_charge_local_micro: number[],\n  qualified_impressions: number[],\n  video_views_75: number[],\n  conversion_sign_ups: any,\n  media_engagements: number[],\n  follows: number[],\n  video_3s100pct_views: number[],\n  app_clicks: number[],\n  retweets: number[],\n  video_cta_clicks: number[],\n  unfollows: number[],\n  auto_created_conversion_session: any,\n  likes: number[],\n  video_content_starts: number[],\n  video_views_25: number[],\n  video_views_100: number[],\n  clicks: number[],\n  auto_created_conversion_landing_page_view: number[],\n  media_views: number[],\n  card_engagements: number[],\n  video_6s_views: number[],\n  poll_card_vote: number[],\n  replies: number[],\n  video_15s_views: number[],\n  url_clicks: number[],\n  video_total_views: number[][],\n  carousel_swipes: number[]\n}",
        "type": "{\n  video_views_50: number[],\n  impressions: number[],\n  engagements: number[],\n  tweets_send: number[],\n  conversion_purchases: conversionPurchases,\n  billed_charge_local_micro: number[],\n  qualified_impressions: number[],\n  video_views_75: number[],\n  conversion_sign_ups: any,\n  media_engagements: number[],\n  follows: number[],\n  video_3s100pct_views: number[],\n  app_clicks: number[],\n  retweets: number[],\n  video_cta_clicks: number[],\n  unfollows: number[],\n  auto_created_conversion_session: any,\n  likes: number[],\n  video_content_starts: number[],\n  video_views_25: number[],\n  video_views_100: number[],\n  clicks: number[],\n  auto_created_conversion_landing_page_view: number[],\n  media_views: number[],\n  card_engagements: number[],\n  video_6s_views: number[],\n  poll_card_vote: number[],\n  replies: number[],\n  video_15s_views: number[],\n  url_clicks: number[],\n  video_total_views: number[][],\n  carousel_swipes: number[]\n}"
      },
      {
        "name": " TwitterAdsReport",
        "text": "\n\n\n\nexport type TwitterAdsReport =\n  {\n    ad_id: string,\n    ad_name: string,\n    ad_status: string,\n    line_item_id: string,\n    line_item_name: string,\n    line_item_status: string,\n    campaign_id: string,\n    campaign_name: string,\n    campaign_status: string,\n    segment: any,\n    metrics: TwitterAdsMetrics\n    date: string,\n  }\n  ;",
        "type": "{\n    ad_id: string,\n    ad_name: string,\n    ad_status: string,\n    line_item_id: string,\n    line_item_name: string,\n    line_item_status: string,\n    campaign_id: string,\n    campaign_name: string,\n    campaign_status: string,\n    segment: any,\n    metrics: TwitterAdsMetrics\n    date: string,\n  }"
      },
      {
        "name": " TwitterRawFile",
        "text": "\n\nexport type TwitterRawFile = {\n  report: TwitterAdsReport[];\n  adAccount: {\n    accountId: string;\n    name: string;\n    currency: string;\n    timezone: string;\n  };\n};",
        "type": "{\n  report: TwitterAdsReport[];\n  adAccount: {\n    accountId: string;\n    name: string;\n    currency: string;\n    timezone: string;\n  };\n}"
      }
    ]
  },
  {
    "file": "@tw/types/sensory/activityTypes.ts",
    "exports": [
      {
        "name": " ReportImportType",
        "text": "\n\nexport type ReportImportType = 'recurring' | 'backfill';",
        "type": "'recurring' | 'backfill'"
      },
      {
        "name": " ReportType",
        "text": "\nexport type ReportType = 'snapshots' | 'incremental' | 'singleCopy';",
        "type": "'snapshots' | 'incremental' | 'singleCopy'"
      },
      {
        "name": " ActivityJobDefinition",
        "text": "\nexport type ActivityJobDefinition<T extends Filter> = {\n  fetchDate: string;\n  level: JobDefinitionLevel;\n  integrationId: string;\n  assetType: string;\n  filter: T;\n  reportType: ReportType;\n  reportProcTimestamp: number;\n  importType: ReportImportType;\n  currentIndex?: number;\n  total?: number;\n};",
        "type": "{\n  fetchDate: string;\n  level: JobDefinitionLevel;\n  integrationId: string;\n  assetType: string;\n  filter: T;\n  reportType: ReportType;\n  reportProcTimestamp: number;\n  importType: ReportImportType;\n  currentIndex?: number;\n  total?: number;\n}"
      },
      {
        "name": " Filter",
        "text": "\n\nexport type Filter = ActivityDateRangeFilter | ActivityStateFilter | ActivityGeneralFilter;",
        "type": "ActivityDateRangeFilter | ActivityStateFilter | ActivityGeneralFilter"
      },
      {
        "name": " ActivityFilterBase",
        "text": "\n\nexport type ActivityFilterBase = {\n  filterParams?: any;\n};",
        "type": "{\n  filterParams?: any;\n}"
      },
      {
        "name": " ActivityGeneralFilter",
        "text": "\nexport type ActivityGeneralFilter = ActivityFilterBase & {\n  workflowState?: object | null;\n};",
        "type": "ActivityFilterBase & {\n  workflowState?: object | null;\n}"
      },
      {
        "name": " ActivityStateFilter",
        "text": "\n\nexport type ActivityStateFilter = ActivityGeneralFilter & {\n  scheduleState?: object | null;\n};",
        "type": "ActivityGeneralFilter & {\n  scheduleState?: object | null;\n}"
      },
      {
        "name": " ActivityDateRangeFilter",
        "text": "\n\nexport type ActivityDateRangeFilter = ActivityFilterBase & {\n  start: string;\n  end: string;\n};",
        "type": "ActivityFilterBase & {\n  start: string;\n  end: string;\n}"
      },
      {
        "name": " ActivityMetadata",
        "text": "\n\nexport type ActivityMetadata = {\n  report_meta_data: ReportMetaData;\n  file_path: string;\n  file_size_bytes: number;\n  records_count: number;\n};",
        "type": "{\n  report_meta_data: ReportMetaData;\n  file_path: string;\n  file_size_bytes: number;\n  records_count: number;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/sensory/app.ts",
    "exports": [
      {
        "name": " SENSORY_SUPPORTED_PROVIDERS",
        "text": "\n\nexport const SENSORY_SUPPORTED_PROVIDERS: ServicesIds[] = [\n  'recharge',\n  'shipstation',\n  'shipbob',\n  'smsbump',\n  'criteo',\n  'bing',\n  'taboola',\n  'outbrain',\n  'mountain',\n  'gorgias',\n  'klaviyo',\n  'okendo',\n];",
        "type": "ServicesIds[]"
      },
      {
        "name": " SENSORY_IGNORE_PROVIDERS",
        "text": "\nexport const SENSORY_IGNORE_PROVIDERS: ServicesIds[] = ['shopify', 'klaviyo', 'bing'];",
        "type": "ServicesIds[]"
      },
      {
        "name": " SensorySummaryRequest",
        "text": "\n\nexport type SensorySummaryRequest = {\n  providerId: ServicesIds;\n  start: string;\n  end: string;\n  integrations: ShopIntegrationProperties[];\n};",
        "type": "{\n  providerId: ServicesIds;\n  start: string;\n  end: string;\n  integrations: ShopIntegrationProperties[];\n}"
      }
    ]
  },
  {
    "file": "@tw/types/sensory/bucket.ts",
    "exports": [
      {
        "name": " SaveReportToBucketArgs",
        "text": "\n\nexport type SaveReportToBucketArgs = {\n  report: any;\n  reportMetaData: ReportMetaData & {\n    jobDefinition: ActivityJobDefinition<Filter>;\n    integration: FetcherIntegrationDetails;\n    workflowId: string;\n  };\n};",
        "type": "{\n  report: any;\n  reportMetaData: ReportMetaData & {\n    jobDefinition: ActivityJobDefinition<Filter>;\n    integration: FetcherIntegrationDetails;\n    workflowId: string;\n  };\n}"
      },
      {
        "name": " SaveReportToBucketMetadata",
        "text": "\n\nexport type SaveReportToBucketMetadata = {\n  sensoryVersion: string;\n  reportVersion: string;\n  providerId: string;\n  integrationId: string;\n  providerAccountId: string;\n  dataType: string; // To maintain compatibility with old versions, you need to delete in the future\n  assetType: string;\n  procTs: string;\n  eventDate?: string;\n  startEventDate?: string;\n  endEventDate?: string;\n  timezone: string;\n  currency: string;\n  granularity?: ReportGranularity;\n  workflowId: string;\n  importType: ReportImportType;\n  reportType: ReportType;\n  msp?: ReportMsp;\n  tw_account_id?: string;\n};",
        "type": "{\n  sensoryVersion: string;\n  reportVersion: string;\n  providerId: string;\n  integrationId: string;\n  providerAccountId: string;\n  dataType: string; // To maintain compatibility with old versions, you need to delete in the future\n  assetType: string;\n  procTs: string;\n  eventDate?: string;\n  startEventDate?: string;\n  endEventDate?: string;\n  timezone: string;\n  currency: string;\n  granularity?: ReportGranularity;\n  workflowId: string;\n  importType: ReportImportType;\n  reportType: ReportType;\n  msp?: ReportMsp;\n  tw_account_id?: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/sensory/dataHealthTypes.ts",
    "exports": [
      {
        "name": " DataHealthParams",
        "text": "\n\nexport type DataHealthParams = {\n  integrationId: string;\n  assetType: string;\n  start: string;\n  end: string;\n};",
        "type": "{\n  integrationId: string;\n  assetType: string;\n  start: string;\n  end: string;\n}"
      },
      {
        "name": " DataHealthResponse",
        "text": "\n\nexport type DataHealthResponse = {\n  fieldsComparison: DataHealthFieldsDiff;\n  integrationId: string;\n  assetType?: string;\n  providerId: string;\n  currency: string;\n  startDate: string;\n  endDate: string;\n  status: HealthCheckStatus;\n};",
        "type": "{\n  fieldsComparison: DataHealthFieldsDiff;\n  integrationId: string;\n  assetType?: string;\n  providerId: string;\n  currency: string;\n  startDate: string;\n  endDate: string;\n  status: HealthCheckStatus;\n}"
      },
      {
        "name": " DataHealthSetting",
        "text": "\n\nexport type DataHealthSetting = {\n  fields: DataHealthSettingFields;\n};",
        "type": "{\n  fields: DataHealthSettingFields;\n}"
      },
      {
        "name": " DataHealthSettingFields",
        "text": "\n\nexport type DataHealthSettingFields = {\n  [key in MetricsKeys]?: {\n    isCritical?: boolean;\n    factor?: number;\n    minDelta?: number;\n  };\n};",
        "type": "{\n  [key in MetricsKeys]?: {\n    isCritical?: boolean;\n    factor?: number;\n    minDelta?: number;\n  };\n}"
      },
      {
        "name": " DataHealthFieldsDiff",
        "text": "\n\nexport type DataHealthFieldsDiff = {\n  [Property in MetricsKeys]?: {\n    internal: number;\n    external: number;\n    delta: number;\n    status: HealthCheckStatus;\n  };\n};",
        "type": "{\n  [Property in MetricsKeys]?: {\n    internal: number;\n    external: number;\n    delta: number;\n    status: HealthCheckStatus;\n  };\n}"
      },
      {
        "type": "enum",
        "name": " HealthCheckStatus",
        "text": "\n\nexport enum HealthCheckStatus {\n  OK = 'ok',\n  WARNING = 'warning',\n  ERROR = 'error',\n}"
      },
      {
        "name": " MetricsHealthQueryParams",
        "text": "\n\nexport type MetricsHealthQueryParams = {\n  start: string;\n  end: string;\n  integrationIds?: string[];\n  metrics: string[];\n};",
        "type": "{\n  start: string;\n  end: string;\n  integrationIds?: string[];\n  metrics: string[];\n}"
      }
    ]
  },
  {
    "file": "@tw/types/sensory/endpointTypes.ts",
    "exports": [
      {
        "name": " AuthFunc",
        "text": "\n\nexport type AuthFunc = ({}: AuthParams) => Promise<any>;",
        "type": "({}: AuthParams) => Promise<any>"
      },
      {
        "name": " DisconnectFunc",
        "text": "\nexport type DisconnectFunc = ({}: DisconnectParams) => Promise<any>;",
        "type": "({}: DisconnectParams) => Promise<any>"
      },
      {
        "name": " AccountsFunc",
        "text": "\nexport type AccountsFunc = ({}: GetAccountParams) => Promise<ProviderAccount[]>;",
        "type": "({}: GetAccountParams) => Promise<ProviderAccount[]>"
      },
      {
        "name": " GetDefaultBackfillRangeCountFunc",
        "text": "\nexport type GetDefaultBackfillRangeCountFunc =\n  ({}: GetDefaultBackfillRangeCount) => Promise<number>;",
        "type": "({}: GetDefaultBackfillRangeCount) => Promise<number>"
      },
      {
        "name": " GetDynamicFieldValueFunc",
        "text": "\nexport type GetDynamicFieldValueFunc = ({}: GetDynamicFieldValueParams) => Promise<DynamicFieldValue[]>;",
        "type": "({}: GetDynamicFieldValueParams) => Promise<DynamicFieldValue[]>"
      },
      {
        "name": " GetDataFunc",
        "text": "\nexport type GetDataFunc = ({}: GetDataParams) => Promise<ReportData>;",
        "type": "({}: GetDataParams) => Promise<ReportData>"
      },
      {
        "name": " HandleIncomingWebhookFunc",
        "text": "\nexport type HandleIncomingWebhookFunc = ({}: any) => Promise<any>;",
        "type": "({}: any) => Promise<any>"
      },
      {
        "name": " ValidateCredentials",
        "text": "\nexport type ValidateCredentials =\n  ({}: ValidateCredentialsParams) => Promise<ValidateCredentialsResponse>;",
        "type": "({}: ValidateCredentialsParams) => Promise<ValidateCredentialsResponse>"
      },
      {
        "name": " dataHealthFunc",
        "text": "\nexport type dataHealthFunc = ({}: DataHealthParams) => Promise<RawMetrics>;",
        "type": "({}: DataHealthParams) => Promise<RawMetrics>"
      },
      {
        "name": " CreateSegmentFunc",
        "text": "\n\nexport type CreateSegmentFunc = ({}: CreateSegmentParams) => Promise<{ segmentId: string }>;",
        "type": "({}: CreateSegmentParams) => Promise<{ segmentId: string }>"
      },
      {
        "name": " UpdateSegmentFunc",
        "text": "\nexport type UpdateSegmentFunc = ({}: UpdateListParams) => Promise<{ success: boolean; deleted: number; added: number; }>;",
        "type": "({}: UpdateListParams) => Promise<{ success: boolean; deleted: number; added: number; }>"
      },
      {
        "name": " WebhookFuncs",
        "text": "\n\nexport type WebhookFuncs = {\n  get?: ({}: WebhooksDefaultRequestParams) => Promise<any>;\n  post: ({}: WebhooksPostParams) => Promise<boolean>;\n  delete: ({}: WebhooksDefaultRequestParams) => Promise<boolean>;\n};",
        "type": "{\n  get?: ({}: WebhooksDefaultRequestParams) => Promise<any>;\n  post: ({}: WebhooksPostParams) => Promise<boolean>;\n  delete: ({}: WebhooksDefaultRequestParams) => Promise<boolean>;\n}"
      },
      {
        "name": " WebhooksDefaultRequestParams",
        "text": "\n\nexport type WebhooksDefaultRequestParams = {\n  integrationId: string;\n};",
        "type": "{\n  integrationId: string;\n}"
      },
      {
        "name": " WebhooksPostParams",
        "text": "\n\nexport type WebhooksPostParams = WebhooksDefaultRequestParams & {\n  assetTypes?: string[];\n  topics?: string[];\n};",
        "type": "WebhooksDefaultRequestParams & {\n  assetTypes?: string[];\n  topics?: string[];\n}"
      },
      {
        "name": " GetAccountParams",
        "text": "\n\nexport type GetAccountParams = {\n  credentialsId: string;\n  params?: object;\n};",
        "type": "{\n  credentialsId: string;\n  params?: object;\n}"
      },
      {
        "name": " AuthParams",
        "text": "\n\nexport type AuthParams = {\n  redirectUri: string;\n  query: any;\n  stateObj?: any;\n};",
        "type": "{\n  redirectUri: string;\n  query: any;\n  stateObj?: any;\n}"
      },
      {
        "name": " DisconnectParams",
        "text": "\n\nexport type DisconnectParams = {\n  credentialsId: string;\n};",
        "type": "{\n  credentialsId: string;\n}"
      },
      {
        "name": " GetDefaultBackfillRangeCount",
        "text": "\n\nexport type GetDefaultBackfillRangeCount = {\n  credentialsId: string;\n  providerAccountId: string;\n  assetType: string;\n};",
        "type": "{\n  credentialsId: string;\n  providerAccountId: string;\n  assetType: string;\n}"
      },
      {
        "name": " GetDynamicFieldValueParams",
        "text": "\n\nexport type GetDynamicFieldValueParams = {\n  collectionName: string;\n  credentialsId: string;\n};",
        "type": "{\n  collectionName: string;\n  credentialsId: string;\n}"
      },
      {
        "name": " ReportMsp",
        "text": "\n\nexport type ReportMsp = {\n  provider: string;\n  id: string;\n};",
        "type": "{\n  provider: string;\n  id: string;\n}"
      },
      {
        "name": " ReportGranularity",
        "text": "\n\nexport type ReportGranularity = 'hourly' | 'daily' | 'monthly' | 'yearly';",
        "type": "'hourly' | 'daily' | 'monthly' | 'yearly'"
      },
      {
        "name": " ReportMetaDataRequired",
        "text": "\nexport type ReportMetaDataRequired = {\n  timezone: string;\n  currency: string;\n  granularity?: ReportGranularity;\n  msp?: ReportMsp;\n  fetcherSchemaVersion: `${number}.${number}`; //allowing only major and minor and patch version x.x.x Or x.x\n};",
        "type": "{\n  timezone: string;\n  currency: string;\n  granularity?: ReportGranularity;\n  msp?: ReportMsp;\n  fetcherSchemaVersion: `${number}.${number}`; //allowing only major and minor and patch version x.x.x Or x.x\n}"
      },
      {
        "name": " ReportCustomMetaData",
        "text": "\n\nexport type ReportCustomMetaData = Partial<ActivityStateFilter> & {\n  [key: string]: any;\n};",
        "type": "Partial<ActivityStateFilter> & {\n  [key: string]: any;\n}"
      },
      {
        "name": " StorageCustomSettings",
        "text": "\n\nexport type StorageCustomSettings = {\n  fileName: string;\n};",
        "type": "{\n  fileName: string;\n}"
      },
      {
        "name": " ReportMetaData",
        "text": "\n\nexport type ReportMetaData = ReportMetaDataRequired & {\n  customMetaData?: ReportCustomMetaData;\n  storageCustomSettings?: StorageCustomSettings;\n};",
        "type": "ReportMetaDataRequired & {\n  customMetaData?: ReportCustomMetaData;\n  storageCustomSettings?: StorageCustomSettings;\n}"
      },
      {
        "name": " ReportData",
        "text": "\nexport type ReportData = {\n  report: Array<any>;\n  reportMetaData: ReportMetaData;\n};",
        "type": "{\n  report: Array<any>;\n  reportMetaData: ReportMetaData;\n}"
      },
      {
        "name": " GetDataParams",
        "text": "\n\nexport type GetDataParams = FetcherParams;",
        "type": "FetcherParams"
      },
      {
        "name": " ValidateCredentialsParams",
        "text": "\n\nexport type ValidateCredentialsParams = {\n  credentials: object;\n};",
        "type": "{\n  credentials: object;\n}"
      },
      {
        "name": " ValidateCredentialsResponse",
        "text": "\nexport type ValidateCredentialsResponse = {\n  isValid: boolean;\n  credentials: object;\n  errorMessage?: string;\n};",
        "type": "{\n  isValid: boolean;\n  credentials: object;\n  errorMessage?: string;\n}"
      },
      {
        "name": " DynamicFieldValue",
        "text": "\n\nexport type DynamicFieldValue = {\n  id: string;\n  label?: string;\n  description?: string;\n};",
        "type": "{\n  id: string;\n  label?: string;\n  description?: string;\n}"
      },
      {
        "name": " SegmentCustomer",
        "text": "\n\n// Segments\nexport type SegmentCustomer = {\n  email?: string;\n  phone?: string ;\n};",
        "type": "{\n  email?: string;\n  phone?: string ;\n}"
      },
      {
        "name": " CreateSegmentParams",
        "text": "\nexport type CreateSegmentParams = {\n  credentialsId: string;\n  shopId: string;\n  segmentName: string;\n}",
        "type": "{\n  credentialsId: string;\n  shopId: string;\n  segmentName: string;\n}"
      },
      {
        "name": " UpdateListParams",
        "text": "\nexport type UpdateListParams = {\n  credentialsId: string;\n  shopId: string;\n  segmentId: string;\n  newCustomers: SegmentCustomer[];\n}",
        "type": "{\n  credentialsId: string;\n  shopId: string;\n  segmentId: string;\n  newCustomers: SegmentCustomer[];\n}"
      }
    ]
  },
  {
    "file": "@tw/types/sensory/fetcherTypes.ts",
    "exports": [
      {
        "name": " ProviderAccount",
        "text": "\n\nexport type ProviderAccount = {\n  provider_id: string;\n  provider_account_id: string;\n  provider_account_name: string;\n  timezone: string;\n  currency: string;\n  extra_params?: object;\n};",
        "type": "{\n  provider_id: string;\n  provider_account_id: string;\n  provider_account_name: string;\n  timezone: string;\n  currency: string;\n  extra_params?: object;\n}"
      },
      {
        "name": " FetcherIntegrationDetails",
        "text": "\nexport type FetcherIntegrationDetails = Pick<\n  WorkflowArgs<WorkflowJobDefinition>,\n  | 'providerId'\n  | 'providerAccountId'\n  | 'providerAccountName'\n  | 'currency'\n  | 'timezone'\n  | 'integrationId'\n  | 'customArgs'\n  | 'credentialsId'\n  | 'scheduleId'\n  | 'settings'\n  | 'tw_account_id'\n>;",
        "type": "Pick<\n  WorkflowArgs<WorkflowJobDefinition>,\n  | 'providerId'\n  | 'providerAccountId'\n  | 'providerAccountName'\n  | 'currency'\n  | 'timezone'\n  | 'integrationId'\n  | 'customArgs'\n  | 'credentialsId'\n  | 'scheduleId'\n  | 'settings'\n  | 'tw_account_id'\n>"
      },
      {
        "name": " FetcherParams",
        "text": "\n\nexport type FetcherParams = {\n  jobDefinition: ActivityJobDefinition<Filter>;\n  integrationDetails: FetcherIntegrationDetails;\n};",
        "type": "{\n  jobDefinition: ActivityJobDefinition<Filter>;\n  integrationDetails: FetcherIntegrationDetails;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/sensory/index.ts",
    "exports": [
      {
        "name": " Overwrite",
        "text": "\nexport type Overwrite<T, U> = Pick<T, Exclude<keyof T, keyof U>> & U;",
        "type": "Pick<T, Exclude<keyof T, keyof U>> & U"
      }
    ]
  },
  {
    "file": "@tw/types/sensory/integration/generalTypes.ts",
    "exports": [
      {
        "type": "enum",
        "name": " providerAuthMethodEnum",
        "text": "\n\nexport enum providerAuthMethodEnum {\n  oauth = 'oauth',\n  basic_auth = 'basic_auth',\n}"
      },
      {
        "name": " ProviderAuthMethod",
        "text": "\nexport type ProviderAuthMethod = keyof typeof providerAuthMethodEnum;",
        "type": "keyof typeof providerAuthMethodEnum"
      },
      {
        "type": "enum",
        "name": " providerDomainEnum",
        "text": "\n\nexport enum providerDomainEnum {\n  sales = 'sales',\n  ads = 'ads',\n  sms = 'sms',\n  ctv = 'ctv',\n  shipping = 'shipping',\n  subscription = 'subscription',\n  crm = 'crm',\n  content = 'content',\n  reviews = 'reviews',\n}"
      },
      {
        "name": " ProviderDomain",
        "text": "\nexport type ProviderDomain = keyof typeof providerDomainEnum;",
        "type": "keyof typeof providerDomainEnum"
      },
      {
        "type": "enum",
        "name": " jobDefinitionUnitEnum",
        "text": "\n\nexport enum jobDefinitionUnitEnum {\n  day = 'day',\n  week = 'week',\n  month = 'month',\n}"
      },
      {
        "name": " JobDefinitionUnit",
        "text": "\nexport type JobDefinitionUnit = keyof typeof jobDefinitionUnitEnum;",
        "type": "keyof typeof jobDefinitionUnitEnum"
      },
      {
        "name": " JobDefinitionLevel",
        "text": "\n\nexport type JobDefinitionLevel = 'full' | 'light';",
        "type": "'full' | 'light'"
      },
      {
        "name": " ProviderAuth",
        "text": "\n\nexport type ProviderAuth = (ProviderAuth_oAuth | ProviderAuth_basicAuth) & {\n  generatedParams?: {\n    param: string;\n    generateUrl: string;\n  }[];\n};",
        "type": "(ProviderAuth_oAuth | ProviderAuth_basicAuth) & {\n  generatedParams?: {\n    param: string;\n    generateUrl: string;\n  }[];\n}"
      },
      {
        "name": " ProviderAuthFields",
        "text": "\n\nexport type ProviderAuthFields = {\n  field: string;\n  label?: string;\n  valueType: (typeof basicAuth_valueType)[number];\n  note?: string;\n  validate?: {\n    regex?: string;\n    errorMessage?: string;\n  }\n};",
        "type": "{\n  field: string;\n  label?: string;\n  valueType: (typeof basicAuth_valueType)[number];\n  note?: string;\n  validate?: {\n    regex?: string;\n    errorMessage?: string;\n  }\n}"
      },
      {
        "name": " ProviderAuth_oAuth",
        "text": "\n\nexport type ProviderAuth_oAuth = {\n  url: string;\n  params?: ProviderAuthFields[];\n};",
        "type": "{\n  url: string;\n  params?: ProviderAuthFields[];\n}"
      },
      {
        "name": " ProviderAuth_basicAuth",
        "text": "\nexport type ProviderAuth_basicAuth = {\n  fields: ProviderAuthFields[];\n  note?: string;\n};",
        "type": "{\n  fields: ProviderAuthFields[];\n  note?: string;\n}"
      },
      {
        "name": " ProviderSetting",
        "text": "\n\nexport type ProviderSetting = {\n  field: string;\n  label?: string;\n  settingType: (typeof providerSettings_valueType)[number];\n  scope: 'fetcher' | 'nexus' | 'capi';\n  values?: string[];\n  defaultValue?: string | number | boolean;\n  mappingFields?: collectionInfo[];\n};",
        "type": "{\n  field: string;\n  label?: string;\n  settingType: (typeof providerSettings_valueType)[number];\n  scope: 'fetcher' | 'nexus' | 'capi';\n  values?: string[];\n  defaultValue?: string | number | boolean;\n  mappingFields?: collectionInfo[];\n}"
      },
      {
        "name": " collectionInfo",
        "text": "\n\nexport type collectionInfo = {\n  collectionName: string;\n  fields: collectionField[];\n};",
        "type": "{\n  collectionName: string;\n  fields: collectionField[];\n}"
      },
      {
        "name": " collectionField",
        "text": "\n\nexport type collectionField = {\n  fieldName: string;\n  default?: string;\n  hidden?: boolean;\n}",
        "type": "{\n  fieldName: string;\n  default?: string;\n  hidden?: boolean;\n}"
      },
      {
        "name": " basicAuth_valueType",
        "text": "\n\nexport const basicAuth_valueType = ['string', 'number', 'boolean', 'approval', 'password'] as const;",
        "type": "variable"
      },
      {
        "name": " providerSettings_valueType",
        "text": "\n\nexport const providerSettings_valueType = [\n  'list',\n  'string',\n  'number',\n  'boolean',\n  'dynamicMapping',\n] as const;",
        "type": "variable"
      },
      {
        "type": "enum",
        "name": " integrationStatusEnum",
        "text": "\n\nexport enum integrationStatusEnum {\n  pending = 'pending', // default status for integration when created\n  ready = 'ready', // ready to run after backfill is complete\n  paused = 'paused', // paused by sensory system\n  backfill = 'backfill', // any backfill is running\n  error = 'error', // any error\n  retryableError = 'retryableError', // any retryable error\n  deleted = 'deleted', // deleted (also credentials are deleted)\n  disconnected = 'disconnected', // disconnected but not deleted\n  unknown = 'unknown',\n}"
      },
      {
        "name": " IntegrationStatus",
        "text": "\nexport type IntegrationStatus = keyof typeof integrationStatusEnum;",
        "type": "keyof typeof integrationStatusEnum"
      },
      {
        "type": "enum",
        "name": " policyEnum",
        "text": "\n\nexport enum policyEnum {\n  default = 'default',\n  paidCustomer = 'paidCustomer',\n  free = 'free',\n  trial = 'trial',\n  basic = 'basic',\n}"
      },
      {
        "name": " Policy",
        "text": "\nexport type Policy = keyof typeof policyEnum;",
        "type": "keyof typeof policyEnum"
      },
      {
        "name": " PolicyJobType",
        "text": "\n\nexport type PolicyJobType = 'dateRange' | 'scheduleState' | 'general';",
        "type": "'dateRange' | 'scheduleState' | 'general'"
      },
      {
        "name": " PolicyJobDefinition",
        "text": "\nexport type PolicyJobDefinition =\n  | PolicyJobDefinitionGeneral\n  | PolicyJobDefinitionDateRange\n  | PolicyJobDefinitionState;",
        "type": "| PolicyJobDefinitionGeneral\n  | PolicyJobDefinitionDateRange\n  | PolicyJobDefinitionState"
      },
      {
        "name": " PolicyJobDefinitionBase",
        "text": "\n\nexport type PolicyJobDefinitionBase = {\n  jobType: PolicyJobType;\n  level: JobDefinitionLevel;\n  filterParams?: any;\n};",
        "type": "{\n  jobType: PolicyJobType;\n  level: JobDefinitionLevel;\n  filterParams?: any;\n}"
      },
      {
        "name": " PolicyJobDefinitionGeneral",
        "text": "\nexport type PolicyJobDefinitionGeneral = Overwrite<\n  PolicyJobDefinitionBase,\n  {\n    jobType: 'general';\n    reportType?: 'snapshots' | 'incremental' | 'singleCopy';\n  }\n>;",
        "type": "Overwrite<\n  PolicyJobDefinitionBase,\n  {\n    jobType: 'general';\n    reportType?: 'snapshots' | 'incremental' | 'singleCopy';\n  }\n>"
      },
      {
        "name": " PolicyJobDefinitionDateRange",
        "text": "\nexport type PolicyJobDefinitionDateRange = Overwrite<\n  PolicyJobDefinitionGeneral,\n  {\n    jobType: 'dateRange';\n    unit: JobDefinitionUnit;\n    count: number | null;\n  }\n>;",
        "type": "Overwrite<\n  PolicyJobDefinitionGeneral,\n  {\n    jobType: 'dateRange';\n    unit: JobDefinitionUnit;\n    count: number | null;\n  }\n>"
      },
      {
        "name": " PolicyJobDefinitionState",
        "text": "\n\nexport type PolicyJobDefinitionState = Overwrite<\n  PolicyJobDefinitionBase,\n  {\n    jobType: 'scheduleState';\n    scheduleState?: { [key in string]: any }; // ['last_updated_at', 'orderId', 'filename', ...]\n  }\n>;",
        "type": "Overwrite<\n  PolicyJobDefinitionBase,\n  {\n    jobType: 'scheduleState';\n    scheduleState?: { [key in string]: any }; // ['last_updated_at', 'orderId', 'filename', ...]\n  }\n>"
      },
      {
        "name": " SensoryProviderGetAccountsParams",
        "text": "\n\nexport type SensoryProviderGetAccountsParams = {\n  dependent_provider_id: string;\n  fields: ProviderParam[];\n};",
        "type": "{\n  dependent_provider_id: string;\n  fields: ProviderParam[];\n}"
      },
      {
        "name": " ProviderParam",
        "text": "\n\nexport type ProviderParam = {\n  name: string;\n  source: string;\n};",
        "type": "{\n  name: string;\n  source: string;\n}"
      },
      {
        "name": " PolicyAllowedFilter",
        "text": "\n\nexport type PolicyAllowedFilter = {\n  type: 'date' | 'string' | 'number' | 'boolean';\n  field: string;\n  description: string;\n  maxHistoricalDays?: number;\n};",
        "type": "{\n  type: 'date' | 'string' | 'number' | 'boolean';\n  field: string;\n  description: string;\n  maxHistoricalDays?: number;\n}"
      },
      {
        "name": " WorkflowJobType",
        "text": "\n\nexport type WorkflowJobType = PolicyJobType | 'dateList';",
        "type": "PolicyJobType | 'dateList'"
      },
      {
        "name": " ProviderAssetType",
        "text": "\nexport type ProviderAssetType = {\n  id: string;\n  name: string;\n  description: string;\n  allowedJobTypes: WorkflowJobType[];\n  allowedFilters?: PolicyAllowedFilter[];\n  maxHistoricalDays?: number;\n  defaultLevel?: JobDefinitionLevel;\n  defaultFilterParams?: any;\n  defaultUnit?: JobDefinitionUnit;\n  dataHealth?: DataHealthSetting;\n};",
        "type": "{\n  id: string;\n  name: string;\n  description: string;\n  allowedJobTypes: WorkflowJobType[];\n  allowedFilters?: PolicyAllowedFilter[];\n  maxHistoricalDays?: number;\n  defaultLevel?: JobDefinitionLevel;\n  defaultFilterParams?: any;\n  defaultUnit?: JobDefinitionUnit;\n  dataHealth?: DataHealthSetting;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/sensory/integration/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/sensory/integration/tables.ts",
    "exports": [
      {
        "name": " BaseTableProps",
        "text": "\n\nexport interface BaseTableProps {\n  created_at?: string;\n  updated_at?: string;\n}",
        "type": "interface"
      },
      {
        "name": " credential",
        "text": "\nexport interface credential extends BaseTableProps {\n  id: string;\n  provider_id: string;\n  credentials: object;\n  allowed_scopes: string[];\n  deleted_at: string;\n}",
        "type": "interface"
      },
      {
        "name": " SensoryProvider",
        "text": "\nexport interface SensoryProvider extends BaseTableProps {\n  id: string;\n  name: string;\n  domain: ProviderDomain;\n  asset_types: ProviderAssetType[];\n  auth_method: ProviderAuthMethod;\n  auth_config: ProviderAuth;\n  has_local_redirect_url: boolean;\n  has_stg_redirect_url: boolean;\n  is_disconnect_required?: boolean;\n  get_accounts_params?: SensoryProviderGetAccountsParams[];\n  has_webhook?: boolean;\n  has_approval_flow?: boolean;\n  settings?: ProviderSetting[];\n  capi_settings?: ProviderSetting[];\n  is_paused?: boolean;\n}",
        "type": "interface"
      },
      {
        "name": " Schedule",
        "text": "\nexport type Schedule = number | string;",
        "type": "number | string"
      },
      {
        "name": " SensoryPolicy",
        "text": " // if number, if hourly the each hour with offset, if string = cron expression\nexport interface SensoryPolicy<T extends PolicyJobDefinition> extends BaseTableProps {\n  provider_id: string;\n  policy_id: policyEnum;\n  asset_types: string[];\n  schedule: Schedule;\n  job_definition: T;\n}",
        "type": "interface"
      },
      {
        "name": " SensoryIntegration",
        "text": "\nexport interface SensoryIntegration extends BaseTableProps {\n  id?: string;\n  provider_id: string;\n  policy_id: string;\n  provider_account_id: string;\n  provider_account_name: string;\n  credentials_id: string;\n  active?: boolean;\n  status?: IntegrationStatus;\n  currency?: string;\n  timezone?: string;\n  extra_params?: object;\n  settings?: object[];\n  capi_settings?: object[];\n  filters?: object;\n  deleted_at?: string;\n  tw_account_id?: string; // Will be required in the future (for backward compatibility, it is optional for now)\n}",
        "type": "interface"
      },
      {
        "name": " WorkflowStatus",
        "text": "\n\nexport interface WorkflowStatus extends BaseTableProps {\n  workflow_id: string;\n  integration_id: string;\n  asset_type: string;\n  total?: number;\n  current_index?: number;\n  done_date?: string;\n  activity_job_definition?: object;\n  integration_details?: object;\n  report_meta_data?: object;\n  status?: string;\n  errors?: object;\n}",
        "type": "interface"
      },
      {
        "name": " integration_db",
        "text": "\n\nexport interface integration_db {\n  credential: credential;\n  provider: SensoryProvider;\n  policy: SensoryPolicy<PolicyJobDefinition>;\n  integration: SensoryIntegration;\n  workflow_status: WorkflowStatus;\n}",
        "type": "interface"
      }
    ]
  },
  {
    "file": "@tw/types/sensory/temporal.ts",
    "exports": [
      {
        "name": " IntegrationSearchAttributes",
        "text": "\n\n/*\nkubectl -n temporal exec deployment/temporal-admin-tools -i -- tctl admin cluster add-search-attributes --name provider_id --type Keyword\nkubectl -n temporal exec deployment/temporal-admin-tools -i -- tctl admin cluster add-search-attributes --name integration_id --type Keyword\nkubectl -n temporal exec deployment/temporal-admin-tools -i -- tctl admin cluster add-search-attributes --name integration_domain --type Keyword\nkubectl -n temporal exec deployment/temporal-admin-tools -i -- tctl admin cluster add-search-attributes --name integration_status --type Keyword\nkubectl -n temporal exec deployment/temporal-admin-tools -i -- tctl admin cluster add-search-attributes --name asset_type --type Keyword\nkubectl -n temporal exec deployment/temporal-admin-tools -i -- tctl admin cluster add-search-attributes --name provider_account_id --type Keyword\nkubectl -n temporal exec deployment/temporal-admin-tools -i -- tctl admin cluster add-search-attributes --name credentials_id --type Keyword\nkubectl -n temporal exec deployment/temporal-admin-tools -i -- tctl admin cluster add-search-attributes --name policy_id --type Keyword\nkubectl -n temporal exec deployment/temporal-admin-tools -i -- tctl admin cluster add-search-attributes --name schedule --type Keyword\nkubectl -n temporal exec deployment/temporal-admin-tools -i -- tctl admin cluster add-search-attributes --name schedule_id --type Keyword\n\nkubectl -n temporal exec deployment/temporal-admin-tools -i -- tctl admin cluster remove-search-attributes --name provider_id\nkubectl -n temporal exec deployment/temporal-admin-tools -i -- tctl admin cluster remove-search-attributes --name integration_id\nkubectl -n temporal exec deployment/temporal-admin-tools -i -- tctl admin cluster remove-search-attributes --name integration_domain\nkubectl -n temporal exec deployment/temporal-admin-tools -i -- tctl admin cluster remove-search-attributes --name integration_status\nkubectl -n temporal exec deployment/temporal-admin-tools -i -- tctl admin cluster remove-search-attributes --name asset_type\nkubectl -n temporal exec deployment/temporal-admin-tools -i -- tctl admin cluster remove-search-attributes --name provider_account_id\nkubectl -n temporal exec deployment/temporal-admin-tools -i -- tctl admin cluster remove-search-attributes --name credentials_id\nkubectl -n temporal exec deployment/temporal-admin-tools -i -- tctl admin cluster remove-search-attributes --name policy_id\nkubectl -n temporal exec deployment/temporal-admin-tools -i -- tctl admin cluster remove-search-attributes --name schedule\nkubectl -n temporal exec deployment/temporal-admin-tools -i -- tctl admin cluster remove-search-attributes --name schedule_id\n*/\nexport type IntegrationSearchAttributes = {\n  provider_id: string[];\n  integration_id: string[];\n  integration_domain: ProviderDomain[];\n  integration_status: IntegrationStatus[];\n  asset_type: string[];\n  provider_account_id: string[];\n  credentials_id: string[];\n  policy_id: Policy[];\n  schedule: string[];\n  schedule_id: string[];\n};",
        "type": "{\n  provider_id: string[];\n  integration_id: string[];\n  integration_domain: ProviderDomain[];\n  integration_status: IntegrationStatus[];\n  asset_type: string[];\n  provider_account_id: string[];\n  credentials_id: string[];\n  policy_id: Policy[];\n  schedule: string[];\n  schedule_id: string[];\n}"
      },
      {
        "name": " IntegrationSearchAttributesKeys",
        "text": "\nexport type IntegrationSearchAttributesKeys = keyof IntegrationSearchAttributes;",
        "type": "keyof IntegrationSearchAttributes"
      },
      {
        "name": " StartIntegrationWorkflow",
        "text": "\n\nexport type StartIntegrationWorkflow = (args: WorkflowArgs<WorkflowJobDefinition>) => Promise<any>;",
        "type": "(args: WorkflowArgs<WorkflowJobDefinition>) => Promise<any>"
      },
      {
        "type": "enum",
        "name": " workflowExecutionStatusEnum",
        "text": "\n\nexport enum workflowExecutionStatusEnum {\n  Running = 'Running',\n  Completed = 'Completed',\n  Failed = 'Failed',\n  Canceled = 'Canceled',\n  Terminated = 'Terminated',\n  ContinuedAsNew = 'ContinuedAsNew',\n  TimedOut = 'TimedOut',\n}"
      },
      {
        "name": " WorkflowExecutionStatus",
        "text": "\nexport type WorkflowExecutionStatus = keyof typeof workflowExecutionStatusEnum;",
        "type": "keyof typeof workflowExecutionStatusEnum"
      }
    ]
  },
  {
    "file": "@tw/types/sensory/workflowTypes.ts",
    "exports": [
      {
        "name": " WorkflowArgs",
        "text": "\n\nexport type WorkflowArgs<T extends WorkflowJobDefinition> = {\n  providerId: string;\n  integrationId: string;\n  providerAccountId: string;\n  currency: string;\n  timezone: string;\n  jobDefinition: T;\n  credentialsId: string;\n  providerAccountName: string;\n  assetType: string;\n  scheduleId?: string;\n  customArgs?: object;\n  settings?: object[];\n  tw_account_id?: string;\n};",
        "type": "{\n  providerId: string;\n  integrationId: string;\n  providerAccountId: string;\n  currency: string;\n  timezone: string;\n  jobDefinition: T;\n  credentialsId: string;\n  providerAccountName: string;\n  assetType: string;\n  scheduleId?: string;\n  customArgs?: object;\n  settings?: object[];\n  tw_account_id?: string;\n}"
      },
      {
        "name": " WorkflowJobDefinition",
        "text": "\n\nexport type WorkflowJobDefinition =\n  | WorkflowJobDefinitionGeneral\n  | WorkflowJobDefinitionDateRange\n  | WorkflowJobDefinitionDateList\n  | WorkflowJobDefinitionState;",
        "type": "| WorkflowJobDefinitionGeneral\n  | WorkflowJobDefinitionDateRange\n  | WorkflowJobDefinitionDateList\n  | WorkflowJobDefinitionState"
      },
      {
        "name": " WorkflowJobDefinitionGeneral",
        "text": "\n\nexport type WorkflowJobDefinitionGeneral = PolicyJobDefinitionGeneral;",
        "type": "PolicyJobDefinitionGeneral"
      },
      {
        "name": " WorkflowJobDefinitionDateList",
        "text": "\n\nexport type WorkflowJobDefinitionDateList = Overwrite<\n  PolicyJobDefinitionBase,\n  {\n    jobType: 'dateList';\n    dates: [string, ...string[]];\n  }\n>;",
        "type": "Overwrite<\n  PolicyJobDefinitionBase,\n  {\n    jobType: 'dateList';\n    dates: [string, ...string[]];\n  }\n>"
      },
      {
        "name": " WorkflowJobDefinitionDateRange",
        "text": "\n\nexport type WorkflowJobDefinitionDateRange = Overwrite<\n  PolicyJobDefinitionDateRange,\n  {\n    count: number;\n    endDate?: string;\n  }\n>;",
        "type": "Overwrite<\n  PolicyJobDefinitionDateRange,\n  {\n    count: number;\n    endDate?: string;\n  }\n>"
      },
      {
        "name": " WorkflowJobDefinitionState",
        "text": "\n\nexport type WorkflowJobDefinitionState = PolicyJobDefinitionState;",
        "type": "PolicyJobDefinitionState"
      },
      {
        "name": " WorkflowStatusPayload",
        "text": "\n\nexport type WorkflowStatusPayload = {\n  workflowId: string;\n  integrationId?: string;\n  assetType?: string;\n  total?: number;\n  currentIndex?: number;\n  activityJobDefinition?: any;\n  integrationDetails?: any;\n  workflowMetadata?: any;\n  errors?: any;\n  status?: 'running' | 'completed' | 'terminated' | 'completedWithError';\n  doneDate?: string;\n};",
        "type": "{\n  workflowId: string;\n  integrationId?: string;\n  assetType?: string;\n  total?: number;\n  currentIndex?: number;\n  activityJobDefinition?: any;\n  integrationDetails?: any;\n  workflowMetadata?: any;\n  errors?: any;\n  status?: 'running' | 'completed' | 'terminated' | 'completedWithError';\n  doneDate?: string;\n}"
      },
      {
        "name": " WorkflowIntegrationStatus",
        "text": "\n\nexport type WorkflowIntegrationStatus =\n  | Omit<\n      WorkflowStatusPayload,\n      'activityJobDefinition' | 'integrationDetails' | 'workflowMetadata'\n    > & { integrationStatus?: IntegrationStatus };",
        "type": "| Omit<\n      WorkflowStatusPayload,\n      'activityJobDefinition' | 'integrationDetails' | 'workflowMetadata'\n    > & { integrationStatus?: IntegrationStatus }"
      }
    ]
  },
  {
    "file": "@tw/types/services/IntegrationAccountData.ts",
    "exports": [
      {
        "name": " IntegrationAccountData",
        "text": "\n\nexport type IntegrationAccountData = {\n  serviceId: ServicesIds;\n  accountId: string;\n  token: any;\n  timezone: string;\n  currency: string;\n  shopifyShopIds: {\n    [key in string]: {\n      shopId: string;\n      subAccountIds?: {\n        [key in string]: { subAccountId: string; [prop: string]: any };\n      };\n      [prop: string]: any;\n    };\n  };\n  lastFetchTime?: string;\n  createdAt?: string;\n  [prop: string]: any;\n  accountName?: string;\n  status?: IntegrationAccountStatusEnum;\n  statusMessage?: string;\n};",
        "type": "{\n  serviceId: ServicesIds;\n  accountId: string;\n  token: any;\n  timezone: string;\n  currency: string;\n  shopifyShopIds: {\n    [key in string]: {\n      shopId: string;\n      subAccountIds?: {\n        [key in string]: { subAccountId: string; [prop: string]: any };\n      };\n      [prop: string]: any;\n    };\n  };\n  lastFetchTime?: string;\n  createdAt?: string;\n  [prop: string]: any;\n  accountName?: string;\n  status?: IntegrationAccountStatusEnum;\n  statusMessage?: string;\n}"
      },
      {
        "type": "enum",
        "name": " IntegrationAccountStatusEnum",
        "text": "\n\nexport enum IntegrationAccountStatusEnum {\n  error = 'error',\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/account-manager/EmailContext.ts",
    "exports": [
      {
        "type": "enum",
        "name": " EmailContext",
        "text": "export enum EmailContext {\n  CONNECT_SHOPIFY = 'connect_shopify',\n  CONNECT_AD_ACCOUNT = 'connect_ad_account',\n  INSTALL_PIXEL = 'install_pixel',\n  UTM_INSTRTUCTIONS = 'utm_instructions',\n}"
      },
      {
        "type": "enum",
        "name": " OnboardingEmailContext",
        "text": "\n\nexport enum OnboardingEmailContext {\n  CONNECT_SHOPIFY_INVITATION = 'connect_shopify_invitation',\n  CONNECT_SHOPIFY_INVITATION_REMINDER = 'connect_shopify_invitation_reminder',\n  CONNECT_SHOPIFY_REMINDER = 'connect_shopify_reminder',\n  CONNECT_SALES_PLATFORM_INVITATION_REMINDER = 'connect_sales_platform_invitation_reminder',\n  CONNECT_SALES_PLATFORM_REMINDER = 'connect_sales_platform_reminder',\n  CONNECT_SALES_PLATFORM_INVITATION = 'connect_sales_platform_invitation',\n  CONNECT_AD_ACCOUNT_INVITATION = 'connect_ad_account_invitation',\n  INSTALL_PIXEL_INSTRUCTIONS = 'install_pixel_instructions',\n  UTM_INSTRTUCTIONS = 'utm_instructions',\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/account-manager/Integration.ts",
    "exports": [
      {
        "name": " Integration",
        "text": "\n\nexport interface Integration {\n  id: string;\n  name: string;\n  version: number;\n  status: ShopIntegrationStatusEnum;\n  extra_params: { currency?: string; timezone?: string } & object;\n  provider_id: ServicesIds;\n  provider_account: string;\n  tw_account_id: string;\n  credentials_id: string;\n  settings: object;\n  workflowStatus: WorkflowIntegrationStatus[];\n  errorMessage?: string;\n}",
        "type": "interface"
      }
    ]
  },
  {
    "file": "@tw/types/services/account-manager/InvitationRequest.ts",
    "exports": [
      {
        "type": "enum",
        "name": " InvitationType",
        "text": "export enum InvitationType {\n  SHOP = 'SHOP',\n  WORKSPACE = 'WORKSPACE'\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/account-manager/Provider.ts",
    "exports": [
      {
        "name": " Provider",
        "text": "\n\nexport interface Provider extends SensoryProvider {\n  id: string;\n  name: string;\n  version: number;\n  choose_account: boolean;\n  msp: boolean;\n  integrations?: Integration[];\n  credentials?: ProviderCredential[];\n}",
        "type": "interface"
      }
    ]
  },
  {
    "file": "@tw/types/services/account-manager/ProviderCredential.ts",
    "exports": [
      {
        "name": " ProviderCredential",
        "text": "export interface ProviderCredential {\n  id: string;\n  status: string; // TODO enum\n  provider_id: string;\n  tw_account_id: string;\n}",
        "type": "interface"
      }
    ]
  },
  {
    "file": "@tw/types/services/account-manager/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/services/account-manager/integrations/events.ts",
    "exports": [
      {
        "type": "enum",
        "name": " events",
        "text": "export enum events {\n  CREDENTIALS_ADD = 'CREDENTIALS_ADD',\n  CREDENTIALS_UPDATE = 'CREDENTIALS_UPDATE',\n  CREDENTIALS_DELETE = 'CREDENTIALS_DELETE',\n  INTEGRATION_ADD = 'INTEGRATION_ADD',\n  INTEGRATION_DELETE = 'INTEGRATION_DELETE',\n  INTEGRATION_STATUS_UPDATE = 'INTEGRATION_STATUS_UPDATE',\n  INTEGRATIONS_CHANGE = 'INTEGRATIONS_CHANGE',\n  BU_ADD = 'BU_ADD',\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/amazon/AmazonAccount.ts",
    "exports": [
      {
        "name": " AmazonAccount",
        "text": "\n\nexport type AmazonAccount = {\n  selling_partner_id: string;\n  refresh_token: string;\n  region: AmazonRegions;\n  ads_refresh_token: string;\n  // tw_account_ids: string[];\n  marketplace_ids: AmazonAccountMarketplaceIds;\n  marketplace_ids_to_import: string[];\n  tw_account_ids: {\n    [key in string]: {\n      tw_account_id: string;\n      marketplace_ids: string[];\n    };\n  };\n};",
        "type": "{\n  selling_partner_id: string;\n  refresh_token: string;\n  region: AmazonRegions;\n  ads_refresh_token: string;\n  // tw_account_ids: string[];\n  marketplace_ids: AmazonAccountMarketplaceIds;\n  marketplace_ids_to_import: string[];\n  tw_account_ids: {\n    [key in string]: {\n      tw_account_id: string;\n      marketplace_ids: string[];\n    };\n  };\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/amazon/AmazonMarketplace.ts",
    "exports": [
      {
        "name": " AmazonMarketplace",
        "text": "\n\nexport type AmazonMarketplace = {\n  id: string;\n  region: AmazonRegions;\n  marketplace?: {\n    countryCode: string;\n    defaultCurrencyCode: string;\n    defaultLanguageCode: string;\n    domainName: string;\n    id: string;\n    name: string;\n  } & any;\n  participation?: any;\n  profiles?: {\n    region: AmazonRegions;\n    countryCode: string;\n    currencyCode: string;\n    dailyBudget: number;\n    profileId: string;\n    timezone: string;\n  }[];\n};",
        "type": "{\n  id: string;\n  region: AmazonRegions;\n  marketplace?: {\n    countryCode: string;\n    defaultCurrencyCode: string;\n    defaultLanguageCode: string;\n    domainName: string;\n    id: string;\n    name: string;\n  } & any;\n  participation?: any;\n  profiles?: {\n    region: AmazonRegions;\n    countryCode: string;\n    currencyCode: string;\n    dailyBudget: number;\n    profileId: string;\n    timezone: string;\n  }[];\n}"
      },
      {
        "name": " AmazonAccountMarketplaceIds",
        "text": "\n\nexport type AmazonAccountMarketplaceIds = {\n  [key in string]: AmazonMarketplace;\n};",
        "type": "{\n  [key in string]: AmazonMarketplace;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/amazon/AmazonMarketplaces.ts",
    "exports": [
      {
        "name": " AmazonRegions",
        "text": "export type AmazonRegions = 'na' | 'eu' | 'fe';",
        "type": "'na' | 'eu' | 'fe'"
      },
      {
        "type": "enum",
        "name": " AMAZON_REGIONS_ADS_URLS",
        "text": "\n\nexport enum AMAZON_REGIONS_ADS_URLS {\n  na = 'https://advertising-api.amazon.com',\n  eu = 'https://advertising-api-eu.amazon.com',\n  fe = 'https://advertising-api-fe.amazon.com',\n}"
      },
      {
        "type": "enum",
        "name": " AMAZON_REGIONS_LABELS",
        "text": "\nexport enum AMAZON_REGIONS_LABELS {\n  na = 'North America',\n  eu = 'Europe',\n  fe = 'Far East',\n}"
      },
      {
        "type": "enum",
        "name": " AMAZON_MARKETPLACE_IDS",
        "text": "\n\nexport enum AMAZON_MARKETPLACE_IDS {\n  'A2EUQ1WTGCTBG2' = 'Canada',\n  'ATVPDKIKX0DER' = 'United States of America',\n  'A1AM78C64UM0Y8' = 'Mexico',\n  'A2Q3Y263D00KWC' = 'Brazil',\n  'A1RKKUPIHCS9HS' = 'Spain',\n  'A1F83G8C2ARO7P' = 'United Kingdom',\n  'A13V1IB3VIYZZH' = 'France',\n  'AMEN7PMS3EDWL' = 'Belgium',\n  'A1805IZSGTT6HS' = 'Netherlands',\n  'A1PA6795UKMFR9' = 'Germany',\n  'APJ6JRA9NG5V4' = 'Italy',\n  'A2NODRKZP88ZB9' = 'Sweden',\n  'AE08WJ6YKNBMC' = 'South Africa',\n  'A1C3SOZRARQ6R3' = 'Poland',\n  'ARBP9OOSHTCHU' = 'Egypt',\n  'A33AVAJ2PDY3EV' = 'Turkey',\n  'A17E79C6D8DWNP' = 'Saudi Arabia',\n  'A2VIGQ35RCS4UG' = 'United Arab Emirates',\n  'A21TJRUUN4KGV' = 'India',\n  'A19VAU5U5O7RUS' = 'Singapore',\n  'A39IBJ37TRP1C6' = 'Australia',\n  'A1VC38T7YXB528' = 'Japan',\n}"
      },
      {
        "type": "enum",
        "name": " AMAZON_MARKETPLACE_SELLER_TIMEZONES",
        "text": "\n\nexport enum AMAZON_MARKETPLACE_SELLER_TIMEZONES {\n  'A2EUQ1WTGCTBG2' = 'America/Los_Angeles',\n  'ATVPDKIKX0DER' = 'America/Los_Angeles',\n  'A1AM78C64UM0Y8' = 'America/Bahia_Banderas',\n  'A2Q3Y263D00KWC' = 'America/Los_Angeles',\n  'A1RKKUPIHCS9HS' = 'CET',\n  'A1F83G8C2ARO7P' = 'UTC',\n  'A13V1IB3VIYZZH' = 'CET',\n  'AMEN7PMS3EDWL' = 'CET',\n  'A1805IZSGTT6HS' = 'CET',\n  'A1PA6795UKMFR9' = 'CET',\n  'APJ6JRA9NG5V4' = 'CET',\n  'A2NODRKZP88ZB9' = 'CET',\n  'AE08WJ6YKNBMC' = 'Africa/Johannesburg',\n  'A1C3SOZRARQ6R3' = 'CET',\n  'ARBP9OOSHTCHU' = 'Africa/Cairo',\n  'A33AVAJ2PDY3EV' = 'Europe/Istanbul',\n  'A17E79C6D8DWNP' = 'Asia/Riyadh',\n  'A2VIGQ35RCS4UG' = 'Asia/Dubai',\n  'A21TJRUUN4KGV' = 'Asia/Kolkata',\n  'A19VAU5U5O7RUS' = 'Asia/Singapore',\n  'A39IBJ37TRP1C6' = 'Australia/Sydney',\n  'A1VC38T7YXB528' = 'Asia/Tokyo',\n}"
      },
      {
        "name": " AmazonMarketplaces",
        "text": "\nexport type AmazonMarketplaces = keyof typeof AMAZON_MARKETPLACE_IDS;",
        "type": "keyof typeof AMAZON_MARKETPLACE_IDS"
      }
    ]
  },
  {
    "file": "@tw/types/services/amazon/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/services/business-intelligence/benchmarksMetrics.ts",
    "exports": [
      {
        "name": " benchmarksMetricsRoles",
        "text": "export const benchmarksMetricsRoles = [\n  'size',\n  'fb_ads_clicks_sum',\n  'fb_ads_clicks_avg',\n  'fb_ads_impressions_sum',\n  'fb_ads_impressions_avg',\n  'fb_ads_spend_sum',\n  'fb_ads_spend_avg',\n  'total_price_usd_sum',\n  'total_price_usd_avg',\n  'new_customer_total_price_sum',\n  'new_customer_total_price_avg',\n  'orders_sum',\n  'orders_avg',\n  'new_customers_sum',\n  'new_customers_avg',\n  'total_spend_usd',\n  'total_spend_usd_avg',\n] as const;",
        "type": "variable"
      },
      {
        "name": " BenchmarksMetricsKeys",
        "text": "\n\nexport type BenchmarksMetricsKeys = typeof benchmarksMetricsRoles[number];",
        "type": "typeof benchmarksMetricsRoles[number]"
      },
      {
        "name": " BenchmarksMetrics",
        "text": "\n\nexport type BenchmarksMetrics = {\n  [metric in BenchmarksMetricsKeys]: number;\n};",
        "type": "{\n  [metric in BenchmarksMetricsKeys]: number;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/business-intelligence/benchmarksRequests.ts",
    "exports": [
      {
        "name": " AOV_SEGMENTS",
        "text": "\n\nexport const AOV_SEGMENTS = [\">$100\", \"$100+\"] as const;",
        "type": "variable"
      },
      {
        "name": " REVENUE_SEGMENTS",
        "text": "\nexport const REVENUE_SEGMENTS = [\n  '<$1M',\n  '$1M-$10M',\n  '$10M+',\n] as const;",
        "type": "variable"
      },
      {
        "name": " SPEND_SEGMENTS",
        "text": "\nexport const SPEND_SEGMENTS = [\n  \"<10K\",\n  \"10K-20K\",\n  \"20K-50K\",\n  \"50K-100K\",\n  \"100K-250K\",\n  \">250K+\",\n] as const;",
        "type": "variable"
      },
      {
        "name": " aovSegmentTypes",
        "text": "\n\nexport type aovSegmentTypes = (typeof AOV_SEGMENTS)[number];",
        "type": "(typeof AOV_SEGMENTS)[number]"
      },
      {
        "name": " revenueSegmentTypes",
        "text": "\nexport type revenueSegmentTypes = (typeof REVENUE_SEGMENTS)[number];",
        "type": "(typeof REVENUE_SEGMENTS)[number]"
      },
      {
        "name": " spendSegmentTypes",
        "text": "\nexport type spendSegmentTypes = (typeof SPEND_SEGMENTS)[number];",
        "type": "(typeof SPEND_SEGMENTS)[number]"
      },
      {
        "name": " BenchmarksRequest",
        "text": "\n\nexport type BenchmarksRequest = {\n  shop_domain: string;\n  category: IndustryTypes;\n  aov_segment?: aovSegmentTypes;\n  revenue_segment?: revenueSegmentTypes;\n  spend_segment?: spendSegmentTypes;\n  start: string;\n  end: string;\n  user?: string;\n  compare_start?: string;\n  compare_end?: string;\n};",
        "type": "{\n  shop_domain: string;\n  category: IndustryTypes;\n  aov_segment?: aovSegmentTypes;\n  revenue_segment?: revenueSegmentTypes;\n  spend_segment?: spendSegmentTypes;\n  start: string;\n  end: string;\n  user?: string;\n  compare_start?: string;\n  compare_end?: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/business-intelligence/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/services/cdp/CdpCustomer.ts",
    "exports": [
      {
        "name": " CDPCustomer",
        "text": "export declare type CDPCustomer = {\n  shopifyCustomerId: number;\n  createdAt: string;\n  email: string;\n  name: string;\n  phone: string;\n  location: string;\n  totalOrders: number;\n  totalSpend: number;\n  AOV: number;\n};",
        "type": "{\n  shopifyCustomerId: number;\n  createdAt: string;\n  email: string;\n  name: string;\n  phone: string;\n  location: string;\n  totalOrders: number;\n  totalSpend: number;\n  AOV: number;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/cdp/SegmentInstance.ts",
    "exports": [
      {
        "type": "enum",
        "name": " CDPSegmentInstanceStatus",
        "text": "export enum CDPSegmentInstanceStatus {\n  SUCCESS = 'SUCCESS',\n  FAILED = 'FAILED',\n  UNDEFINED = 'UNDEFINED',\n}"
      },
      {
        "type": "enum",
        "name": " SegmentMetric",
        "text": "\n\nexport enum SegmentMetric {\n  CUSTOMERS_COUNT = \"customersCount\",\n  LOYALTY = \"loyalty\",\n  ORDERS_COUNT = \"ordersCount\",\n  REVENUE = \"revenue\",\n  HISTORICAL_LTV_30_DAYS = \"historicalLTV30Days\",\n  HISTORICAL_LTV_60_DAYS = \"historicalLTV60Days\",\n  HISTORICAL_LTV_90_DAYS = \"historicalLTV90Days\",\n  HISTORICAL_LTV_180_DAYS = \"historicalLTV180Days\",\n  HISTORICAL_LTV_365_DAYS = \"historicalLTV365Days\",\n}"
      },
      {
        "name": " SegmentInstance",
        "text": "\n\nexport declare type SegmentInstance = {\n  id: string;\n  segmentId: string;\n  createdAt: Date;\n} & {\n  [metric in SegmentMetric]: number\n};",
        "type": "{\n  id: string;\n  segmentId: string;\n  createdAt: Date;\n} & {\n  [metric in SegmentMetric]: number\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/cdp/SegmentReq.ts",
    "exports": [
      {
        "type": "enum",
        "name": " SegmentScheduler",
        "text": "\n\nexport enum SegmentScheduler {\n  EVERY_HOUR = 'every_hour',\n  TWICE_A_DAY = 'twice_a_day',\n  ONCE_A_DAY = 'once_a_day',\n  ONCE_EVERY_OTHER_DAY = 'once_every_other_day',\n  ONCE_A_WEEK = 'once_a_week',\n  ONCE_A_MONTH = 'once_a_month',\n}"
      },
      {
        "name": " CreateSegmentReq",
        "text": "\n\nexport declare type CreateSegmentReq = {\n  schedule?: SegmentScheduler;\n  query: CDPSegmentQuery;\n  type?: SegmentType;\n  name: string;\n  description?: string;\n};",
        "type": "{\n  schedule?: SegmentScheduler;\n  query: CDPSegmentQuery;\n  type?: SegmentType;\n  name: string;\n  description?: string;\n}"
      },
      {
        "name": " EditSegmentReq",
        "text": "\n\nexport declare type EditSegmentReq = {\n  schedule?: SegmentScheduler;\n  query?: CDPSegmentQuery;\n  type?: SegmentType;\n  name?: string;\n};",
        "type": "{\n  schedule?: SegmentScheduler;\n  query?: CDPSegmentQuery;\n  type?: SegmentType;\n  name?: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/cdp/SegmentRes.ts",
    "exports": [
      {
        "name": " SegmentSync",
        "text": "\n\nexport declare type SegmentSync = {\n  providerId: ServicesIds;\n  accountId: string;\n  isSynced: boolean;\n  providerAudienceId: string;\n  lastUpdatedAt: Date;\n  error?: {\n    errorDetail: string;\n    errorMessage: string;\n    createdAt: Date;\n  }\n};",
        "type": "{\n  providerId: ServicesIds;\n  accountId: string;\n  isSynced: boolean;\n  providerAudienceId: string;\n  lastUpdatedAt: Date;\n  error?: {\n    errorDetail: string;\n    errorMessage: string;\n    createdAt: Date;\n  }\n}"
      },
      {
        "name": " Segment",
        "text": "\n\nexport declare type Segment = {\n  id: string;\n  createdAt: Date;\n  updatedAt: Date;\n  name: string;\n  description?: string;\n  shopDomain: string;\n  query: CDPSegmentQuery;\n  schedule: SegmentScheduler;\n  type: SegmentType;\n  FBAudienceId?: string;\n  FBAdAccountId?:string;\n  isFacebookSyncOn?: boolean;\n  lastRunAt?: Date;\n  lastInstance?: SegmentInstance;\n  isPaused?: boolean;\n  integrationsSyncDetails?: SegmentSync[];\n  predefinedSegment?: {\n    name: string;\n    description?: string;\n    schedule: SegmentScheduler;\n    type: SegmentType;\n    query: CDPSegmentQuery;\n  };\n};",
        "type": "{\n  id: string;\n  createdAt: Date;\n  updatedAt: Date;\n  name: string;\n  description?: string;\n  shopDomain: string;\n  query: CDPSegmentQuery;\n  schedule: SegmentScheduler;\n  type: SegmentType;\n  FBAudienceId?: string;\n  FBAdAccountId?:string;\n  isFacebookSyncOn?: boolean;\n  lastRunAt?: Date;\n  lastInstance?: SegmentInstance;\n  isPaused?: boolean;\n  integrationsSyncDetails?: SegmentSync[];\n  predefinedSegment?: {\n    name: string;\n    description?: string;\n    schedule: SegmentScheduler;\n    type: SegmentType;\n    query: CDPSegmentQuery;\n  };\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/cdp/SegmentSync.ts",
    "exports": [
      {
        "name": " SegmentSyncReq",
        "text": "\n\nexport declare type SegmentSyncReq = {\n  shopDomain: string;\n  segmentId: string;\n  providerId: ServicesIds;\n  accountId?: string;\n  market?: string;\n  providerAudienceId?: string;\n};",
        "type": "{\n  shopDomain: string;\n  segmentId: string;\n  providerId: ServicesIds;\n  accountId?: string;\n  market?: string;\n  providerAudienceId?: string;\n}"
      },
      {
        "name": " SegmentSyncRes",
        "text": "\n\nexport declare type SegmentSyncRes = {\n  err: boolean;\n  msg: string;\n};",
        "type": "{\n  err: boolean;\n  msg: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/cdp/SegmentType.ts",
    "exports": [
      {
        "type": "enum",
        "name": " SegmentType",
        "text": "export enum SegmentType {\n  DYNAMIC = 'dynamic',\n  STATIC = 'static',\n  MANUAL = 'manual',\n  RFM = 'rfm',\n  LOOKALIKE = 'lookalike',\n  WHALE_GPT = 'whale_gpt',\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/cdp/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/services/cdp/queryBuilder/ActionFilter.ts",
    "exports": [
      {
        "type": "enum",
        "name": " CDPActionFilterActions",
        "text": "\n\nexport enum CDPActionFilterActions {\n  MADE_PURCHASE = 'made_purchase',\n  CLICKED_AD = 'clicked_ad',\n  VISITED_URL = 'visited_url',\n  STARTED_SUBSCRIPTION = 'started_subscription',\n  UPDATED_SUBSCRIPTION = 'updated_subscription',\n  CANCELLED_SUBSCRIPTION = 'cancelled_subscription',\n}"
      },
      {
        "name": " CDPActionProperty",
        "text": "\n\nexport type CDPActionProperty = (typeof ACTION_PROPERTIES)[number];",
        "type": "(typeof ACTION_PROPERTIES)[number]"
      },
      {
        "type": "enum",
        "name": " CDPActionPrsoperty",
        "text": "\n\nexport enum CDPActionPrsoperty {\n  AD_GROUP_NAME = 'ad_group_name',\n  AD_GROUP_ID = 'ad_group_id',\n  AD_NAME = 'ad_name',\n  AD_ID = 'ad_id',\n  SOURCE = 'source',\n  URL_PATH = 'url_path',\n  DISCOUNT_CODE = 'discount_code',\n}"
      },
      {
        "name": " CDPActionFilter",
        "text": "\n\nexport type CDPActionFilter = {\n  type: CDPSegmentFilterType.ACTION;\n  definition: {\n    action: {\n      type: CDPActionFilterActions;\n      comparator: NumberComparator;\n      value: number;\n    };\n    time: TimeFilter;\n    property?: QueryFilterProperty<CDPActionProperty>;\n  };\n};",
        "type": "{\n  type: CDPSegmentFilterType.ACTION;\n  definition: {\n    action: {\n      type: CDPActionFilterActions;\n      comparator: NumberComparator;\n      value: number;\n    };\n    time: TimeFilter;\n    property?: QueryFilterProperty<CDPActionProperty>;\n  };\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/cdp/queryBuilder/LookalikeFilter.ts",
    "exports": [
      {
        "name": " CDPLookalikeFilter",
        "text": "\n\nexport type CDPLookalikeFilter = {\n  type: CDPSegmentFilterType.LOOKALIKE;\n  definition: {\n    property: {\n      value: string;\n    };\n  };\n};",
        "type": "{\n  type: CDPSegmentFilterType.LOOKALIKE;\n  definition: {\n    property: {\n      value: string;\n    };\n  };\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/cdp/queryBuilder/PredictiveAnalyticsFilter.ts",
    "exports": [
      {
        "name": " CDPPredictiveAnalyticsFilter",
        "text": "\n\nexport type CDPPredictiveAnalyticsFilter = {\n  type: CDPSegmentFilterType.PREDICTIVE_ANALYTICS,\n  definition: {\n    property: {} // TODO\n  }\n}",
        "type": "{\n  type: CDPSegmentFilterType.PREDICTIVE_ANALYTICS,\n  definition: {\n    property: {} // TODO\n  }\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/cdp/queryBuilder/RFMFilter.ts",
    "exports": [
      {
        "name": " RFM_PROPERTIES",
        "text": "\n\nexport const RFM_PROPERTIES = [\n  FilterProperty.CUSTOMER_RFM_RECENCY,\n  FilterProperty.CUSTOMER_RFM_FREQUENCY,\n  FilterProperty.CUSTOMER_RFM_MONETARY,\n] as const;",
        "type": "variable"
      },
      {
        "name": " CDPRFMProperty",
        "text": "\n\nexport type CDPRFMProperty = (typeof RFM_PROPERTIES)[number];",
        "type": "(typeof RFM_PROPERTIES)[number]"
      },
      {
        "name": " CDPRFMFilter",
        "text": "\n\nexport type CDPRFMFilter = {\n  type: CDPSegmentFilterType.RFM_SEGMENT;\n  definition: {\n    properties: FilterListProperty<CDPRFMProperty>[];\n  };\n};",
        "type": "{\n  type: CDPSegmentFilterType.RFM_SEGMENT;\n  definition: {\n    properties: FilterListProperty<CDPRFMProperty>[];\n  };\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/cdp/queryBuilder/SegmentFilter.ts",
    "exports": [
      {
        "type": "enum",
        "name": " CDPSegmentFilterType",
        "text": "\n\nexport enum CDPSegmentFilterType {\n  ACTION = 'user_action',\n  USER_PROPERTY = 'user_property',\n  PREDICTIVE_ANALYTICS = 'predictive_analytics',\n  SEGMENT_RELATION = 'segment_relation',\n  RFM_SEGMENT = 'rfm_segment',\n  LOOKALIKE = 'lookalike_segment',\n  WHALE_GPT = 'whale_gpt',\n}"
      },
      {
        "name": " FilterStringProperty",
        "text": "\n\nexport type FilterStringProperty<T> = {\n  property: T;\n  comparator: StringComparator;\n  value: string | string[];\n};",
        "type": "{\n  property: T;\n  comparator: StringComparator;\n  value: string | string[];\n}"
      },
      {
        "name": " FilterNumberProperty",
        "text": "\n\nexport type FilterNumberProperty<T> = {\n  property: T;\n  comparator: NumberComparator;\n  value: number;\n};",
        "type": "{\n  property: T;\n  comparator: NumberComparator;\n  value: number;\n}"
      },
      {
        "name": " FilterListProperty",
        "text": "\n\nexport type FilterListProperty<T> = {\n  property: T;\n  comparator: ListComparator;\n  value: (string | number)[];\n};",
        "type": "{\n  property: T;\n  comparator: ListComparator;\n  value: (string | number)[];\n}"
      },
      {
        "name": " FilterBooleanProperty",
        "text": "\n\nexport type FilterBooleanProperty<T> = {\n  property: T;\n  comparator: BooleanComparator;\n  value: string;\n};",
        "type": "{\n  property: T;\n  comparator: BooleanComparator;\n  value: string;\n}"
      },
      {
        "name": " QueryFilterProperty",
        "text": "\n\nexport type QueryFilterProperty<T> = FilterStringProperty<T> | FilterNumberProperty<T> | FilterListProperty<T> | FilterBooleanProperty<T>;",
        "type": "FilterStringProperty<T> | FilterNumberProperty<T> | FilterListProperty<T> | FilterBooleanProperty<T>"
      },
      {
        "name": " CDPSegmentFilter",
        "text": "\n\nexport type CDPSegmentFilter =\n  | CDPUserPropertyFilter\n  | CDPActionFilter\n  | CDPSegmentRelationFilter\n  | CDPPredictiveAnalyticsFilter\n  | CDPRFMFilter\n  | CDPLookalikeFilter\n  | CDPWhaleGPTFilter;",
        "type": "| CDPUserPropertyFilter\n  | CDPActionFilter\n  | CDPSegmentRelationFilter\n  | CDPPredictiveAnalyticsFilter\n  | CDPRFMFilter\n  | CDPLookalikeFilter\n  | CDPWhaleGPTFilter"
      }
    ]
  },
  {
    "file": "@tw/types/services/cdp/queryBuilder/SegmentQuery.ts",
    "exports": [
      {
        "name": " CDPSegmentQuery",
        "text": "\n\nexport type CDPSegmentQuery = {\n  type: 'AND'\n  filters: CDPSegmentQueryBlock[];\n}",
        "type": "{\n  type: 'AND'\n  filters: CDPSegmentQueryBlock[];\n}"
      },
      {
        "name": " CDPSegmentQueryBlock",
        "text": "\n\nexport type CDPSegmentQueryBlock = {\n  type: 'OR',\n  filters: CDPSegmentFilter[]\n}",
        "type": "{\n  type: 'OR',\n  filters: CDPSegmentFilter[]\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/cdp/queryBuilder/SegmentRelationFilter.ts",
    "exports": [
      {
        "name": " CDPSegmentRelationFilter",
        "text": "\n\nexport type CDPSegmentRelationFilter = {\n  type: CDPSegmentFilterType.SEGMENT_RELATION,\n  definition: {\n    property: {\n      value: string,\n      comparator: FilterComparator.IS | FilterComparator.IS_NOT,\n    } \n  }\n}",
        "type": "{\n  type: CDPSegmentFilterType.SEGMENT_RELATION,\n  definition: {\n    property: {\n      value: string,\n      comparator: FilterComparator.IS | FilterComparator.IS_NOT,\n    } \n  }\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/cdp/queryBuilder/TimeFilter.ts",
    "exports": [
      {
        "name": " OverAllTimeFilter",
        "text": "\n\nexport type OverAllTimeFilter = {\n  comparator: FilterComparator.OVER_ALL_TIME\n}",
        "type": "{\n  comparator: FilterComparator.OVER_ALL_TIME\n}"
      },
      {
        "name": " AbsoluteTimeFilter",
        "text": "\n\nexport type AbsoluteTimeFilter = {\n  comparator: FilterComparator.BEFORE | FilterComparator.AFTER,\n  value: Date,\n}",
        "type": "{\n  comparator: FilterComparator.BEFORE | FilterComparator.AFTER,\n  value: Date,\n}"
      },
      {
        "name": " RelativeUnitTimeFilter",
        "text": "\n\nexport type RelativeUnitTimeFilter = {\n  comparator: FilterComparator.UNDER | FilterComparator.OVER,\n  value: number,\n  unit: FilterTimeUnit\n}",
        "type": "{\n  comparator: FilterComparator.UNDER | FilterComparator.OVER,\n  value: number,\n  unit: FilterTimeUnit\n}"
      },
      {
        "name": " BetweenTimeFilter",
        "text": "\n\nexport type BetweenTimeFilter = {\n  comparator: FilterComparator.BETWEEN,\n  value1: Date,\n  value2: Date\n}",
        "type": "{\n  comparator: FilterComparator.BETWEEN,\n  value1: Date,\n  value2: Date\n}"
      },
      {
        "name": " WithinTimeFilter",
        "text": "\n\nexport type WithinTimeFilter = {\n  comparator: FilterComparator.WITHIN,\n  value1: number,\n  value2: number,\n  unit: FilterTimeUnit\n}",
        "type": "{\n  comparator: FilterComparator.WITHIN,\n  value1: number,\n  value2: number,\n  unit: FilterTimeUnit\n}"
      },
      {
        "name": " TimeFilter",
        "text": "\n\nexport type TimeFilter = OverAllTimeFilter | RelativeUnitTimeFilter | BetweenTimeFilter | WithinTimeFilter;",
        "type": "OverAllTimeFilter | RelativeUnitTimeFilter | BetweenTimeFilter | WithinTimeFilter"
      }
    ]
  },
  {
    "file": "@tw/types/services/cdp/queryBuilder/UserProperyFilter.ts",
    "exports": [
      {
        "name": " USER_PROPERTIES",
        "text": "\n\n\nexport const USER_PROPERTIES = [\n  FilterProperty.CUSTOMER_NAME,\n  FilterProperty.CUSTOMER_ADDRESS_CITY,\n  FilterProperty.CUSTOMER_ADDRESS_STATE,\n  FilterProperty.CUSTOMER_ADDRESS_COUNTRY,\n  FilterProperty.CUSTOMER_EMAIL,\n  FilterProperty.CUSTOMER_TOTAL_ORDERS_NUMBER,\n  FilterProperty.CUSTOMER_TAG,\n  FilterProperty.CUSTOMER_ACTIVE_SUBSCRIPTIONS_NUMBER,\n];",
        "type": "variable"
      },
      {
        "name": " CDPUserProperty",
        "text": "\n\nexport type CDPUserProperty = (typeof USER_PROPERTIES)[number];",
        "type": "(typeof USER_PROPERTIES)[number]"
      },
      {
        "name": " CDPUserPropertyFilter",
        "text": "\n\nexport type CDPUserPropertyFilter = {\n  type: CDPSegmentFilterType.USER_PROPERTY,\n  definition: {\n    property: QueryFilterProperty<CDPUserProperty>,\n  }\n}",
        "type": "{\n  type: CDPSegmentFilterType.USER_PROPERTY,\n  definition: {\n    property: QueryFilterProperty<CDPUserProperty>,\n  }\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/cdp/queryBuilder/WhaleGPTFilter.ts",
    "exports": [
      {
        "name": " CDPWhaleGPTFilter",
        "text": "\n\nexport type CDPWhaleGPTFilter = {\n  type: CDPSegmentFilterType.WHALE_GPT;\n  definition: {\n    id: string;\n    question: string;\n    query: string;\n  };\n};",
        "type": "{\n  type: CDPSegmentFilterType.WHALE_GPT;\n  definition: {\n    id: string;\n    question: string;\n    query: string;\n  };\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/cdp/queryBuilder/_examples.ts",
    "exports": []
  },
  {
    "file": "@tw/types/services/cdp/queryBuilder/constants.ts",
    "exports": [
      {
        "name": " ACTION_FILTER_RELATED_PROPERTIES",
        "text": "\n\n// Identifies which properties to display for each action\nexport const ACTION_FILTER_RELATED_PROPERTIES: {\n  [key in CDPActionFilterActions]: CDPActionProperty[];\n} = {\n  [CDPActionFilterActions.MADE_PURCHASE]: [\n    FilterProperty.PRODUCT_NAME,\n    FilterProperty.PRODUCT_ID,\n    FilterProperty.ORDER_TAG,\n    FilterProperty.ORDER_PRICE,\n    FilterProperty.ORDER_ITEMS,\n    FilterProperty.ORDER_DISCOUNT_CODE,\n    FilterProperty.ATTRIBUTION_SOURCE,\n    FilterProperty.ORDER_SUBSCRIPTION_TYPE,\n  ],\n  [CDPActionFilterActions.CLICKED_AD]: [\n    FilterProperty.ATTRIBUTION_ADS_CAMPAIGN_ID,\n    FilterProperty.ATTRIBUTION_ADS_CAMPAIGN_NAME,\n    FilterProperty.ATTRIBUTION_ADS_ADSET_ID,\n    FilterProperty.ATTRIBUTION_ADS_ADSET_NAME,\n    FilterProperty.ATTRIBUTION_ADS_AD_ID,\n    FilterProperty.ATTRIBUTION_ADS_AD_NAME,\n    FilterProperty.ATTRIBUTION_SOURCE,\n  ],\n  [CDPActionFilterActions.VISITED_URL]: [FilterProperty.ATTRIBUTION_URL_PATH],\n  [CDPActionFilterActions.STARTED_SUBSCRIPTION]: [\n    FilterProperty.SUBSCRIPTION_STATUS,\n  ],\n  [CDPActionFilterActions.UPDATED_SUBSCRIPTION]: [],\n  [CDPActionFilterActions.CANCELLED_SUBSCRIPTION]: []\n};",
        "type": "{\n  [key in CDPActionFilterActions]: CDPActionProperty[];\n}"
      },
      {
        "name": " FEATURES_RELATED_ACTIONS",
        "text": "\n\n// Identifies which actions depend on a specific feature\nexport const FEATURES_RELATED_ACTIONS: { [key in CDPActionFilterActions]?: SubscriptionFeature[] } = {\n  [CDPActionFilterActions.CLICKED_AD]: [SubscriptionFeature.PIXEL],\n  [CDPActionFilterActions.VISITED_URL]: [SubscriptionFeature.PIXEL],\n};",
        "type": "{ [key in CDPActionFilterActions]?: SubscriptionFeature[] }"
      },
      {
        "name": " UN_SUPPORTED_PROPERTIES",
        "text": "\n\nexport const UN_SUPPORTED_PROPERTIES = [\n  FilterProperty.SUBSCRIPTION_STATUS,\n  FilterProperty.CUSTOMER_ACTIVE_SUBSCRIPTIONS_NUMBER,\n  FilterProperty.ORDER_SUBSCRIPTION_TYPE,\n];",
        "type": "variable"
      },
      {
        "name": " UN_SUPPORTED_ACTIONS",
        "text": "\n\nexport const UN_SUPPORTED_ACTIONS = [\n  CDPActionFilterActions.STARTED_SUBSCRIPTION,\n  CDPActionFilterActions.UPDATED_SUBSCRIPTION,\n  CDPActionFilterActions.CANCELLED_SUBSCRIPTION,\n];",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/types/services/cdp/segmentMembersMetrics.ts",
    "exports": [
      {
        "type": "enum",
        "name": " SegmentMembersMetrics",
        "text": "export enum SegmentMembersMetrics {\n  NAME = \"name\",\n  EMAIL = \"email\",\n  LOCATION = \"location\",\n  TOTAL_SPENT = \"total_spent\",\n  TOTAL_ORDERS = \"total_orders\",\n  AOV = \"AOV\",\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/dal/dto/customerRequest.ts",
    "exports": [
      {
        "name": " customerByIdRequest",
        "text": "export declare type customerByIdRequest = {\n  shopDomain: string;\n  customerId: string;\n};",
        "type": "{\n  shopDomain: string;\n  customerId: string;\n}"
      },
      {
        "name": " customersCollectionRequest",
        "text": "\n\nexport declare type customersCollectionRequest = {\n  shopDomain: string;\n};",
        "type": "{\n  shopDomain: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/dal/dto/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/services/dal/dto/orderRequest.ts",
    "exports": [
      {
        "name": " orderByIdRequest",
        "text": "export declare type orderByIdRequest = {\n  shopDomain: string;\n  orderId: string;\n};",
        "type": "{\n  shopDomain: string;\n  orderId: string;\n}"
      },
      {
        "name": " ordersByDateRequest",
        "text": "\n\nexport declare type ordersByDateRequest = {\n  shopDomain: string;\n  dateStart: string;\n  dateEnd: string;\n};",
        "type": "{\n  shopDomain: string;\n  dateStart: string;\n  dateEnd: string;\n}"
      },
      {
        "name": " ordersByDayRequest",
        "text": "\n\nexport declare type ordersByDayRequest = {\n  shopDomain: string;\n  dayDate: string;\n};",
        "type": "{\n  shopDomain: string;\n  dayDate: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/dal/dto/productRequest.ts",
    "exports": [
      {
        "name": " productByIdRequest",
        "text": "export declare type productByIdRequest = {\n  shopDomain: string;\n  productId: string;\n};",
        "type": "{\n  shopDomain: string;\n  productId: string;\n}"
      },
      {
        "name": " productCollectionRequest",
        "text": "\n\nexport declare type productCollectionRequest = {\n  shopDomain: string;\n};",
        "type": "{\n  shopDomain: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/dal/dto/shopRequest.ts",
    "exports": [
      {
        "name": " shopRequest",
        "text": "export declare type shopRequest = {\n  shopDomain: string;\n};",
        "type": "{\n  shopDomain: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/dal/entities/base.ts",
    "exports": [
      {
        "name": " Base",
        "text": "export declare type Base = {\n  json_object?: Object;\n  tw_last_updated_at?: Date;\n  tw_deleted_at?: Date;\n};",
        "type": "{\n  json_object?: Object;\n  tw_last_updated_at?: Date;\n  tw_deleted_at?: Date;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/dal/entities/customer.ts",
    "exports": []
  },
  {
    "file": "@tw/types/services/dal/entities/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/services/dal/entities/order.ts",
    "exports": []
  },
  {
    "file": "@tw/types/services/dal/entities/product.ts",
    "exports": [
      {
        "name": " Product",
        "text": "\n\nexport declare type Product = {\n  id: number;\n  shop_id: number;\n  body_html: string;\n  title: string;\n  handle: string;\n  product_type: string;\n  created_at: Date;\n  updated_at: Date;\n  published_at: Date;\n  published_scope: string;\n  status: string;\n  template_suffix: string;\n  // tags: string;\n  vendor: string;\n} & Base;",
        "type": "{\n  id: number;\n  shop_id: number;\n  body_html: string;\n  title: string;\n  handle: string;\n  product_type: string;\n  created_at: Date;\n  updated_at: Date;\n  published_at: Date;\n  published_scope: string;\n  status: string;\n  template_suffix: string;\n  // tags: string;\n  vendor: string;\n} & Base"
      },
      {
        "name": " Image",
        "text": "\n\nexport declare type Image = {\n  id: number;\n  shop_id: number;\n  product_id: number;\n  position: number;\n  created_at: string;\n  updated_at: string;\n  width: number;\n  height: number;\n  src: string;\n} & Base;",
        "type": "{\n  id: number;\n  shop_id: number;\n  product_id: number;\n  position: number;\n  created_at: string;\n  updated_at: string;\n  width: number;\n  height: number;\n  src: string;\n} & Base"
      },
      {
        "name": " Options",
        "text": "\n\nexport declare type Options = {\n  id: number;\n  product_id: number;\n  name: string;\n  position: number;\n  values: string[];\n};",
        "type": "{\n  id: number;\n  product_id: number;\n  name: string;\n  position: number;\n  values: string[];\n}"
      },
      {
        "name": " Variant",
        "text": "\n\nexport declare type Variant = {\n  id: number;\n  title: string;\n  price: number;\n  product_id: number;\n  sku: string;\n  requires_shipping: boolean;\n  barcode: string;\n  compare_at_price: any;\n  created_at: string;\n  fulfillment_service: string;\n  grams: number;\n  weight: number;\n  weight_unit: string;\n  inventory_item_id: number;\n  inventory_management: string;\n  inventory_policy: string;\n  inventory_quantity: number;\n  // option1: string;\n  position: number;\n  taxable: boolean;\n  updated_at: string;\n} & Base;",
        "type": "{\n  id: number;\n  title: string;\n  price: number;\n  product_id: number;\n  sku: string;\n  requires_shipping: boolean;\n  barcode: string;\n  compare_at_price: any;\n  created_at: string;\n  fulfillment_service: string;\n  grams: number;\n  weight: number;\n  weight_unit: string;\n  inventory_item_id: number;\n  inventory_management: string;\n  inventory_policy: string;\n  inventory_quantity: number;\n  // option1: string;\n  position: number;\n  taxable: boolean;\n  updated_at: string;\n} & Base"
      }
    ]
  },
  {
    "file": "@tw/types/services/dal/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/services/general/AppVersion.ts",
    "exports": [
      {
        "name": " AppVersion",
        "text": "export type AppVersion = '2.0' | '3.0';",
        "type": "'2.0' | '3.0'"
      }
    ]
  },
  {
    "file": "@tw/types/services/general/ChannelsCategory.ts",
    "exports": [
      {
        "name": " ChannelsCategory",
        "text": "export type ChannelsCategory =\n  | 'ads'\n  | 'email_ads'\n  | 'social'\n  | 'creatives'\n  | 'commerce'\n  | 'surveys'\n  | 'customer_success'\n  | 'analytics';",
        "type": "| 'ads'\n  | 'email_ads'\n  | 'social'\n  | 'creatives'\n  | 'commerce'\n  | 'surveys'\n  | 'customer_success'\n  | 'analytics'"
      }
    ]
  },
  {
    "file": "@tw/types/services/general/ChannelsIds.ts",
    "exports": []
  },
  {
    "file": "@tw/types/services/general/DataTypes.ts",
    "exports": [
      {
        "name": " DataTypesIds",
        "text": "export type DataTypesIds =\n  | 'ads-metrics'\n  | 'ads-settings'\n  | 'assets-settings'\n  | 'creatives-metrics'\n  | 'videos-metrics'\n  | 'orders'\n  | 'inventory_items'\n  | 'products'\n  | 'prices'\n  | 'subscriptions'\n  | 'customers'\n  | 'webhook'\n  | 'refunds'\n  | 'issues'\n  | 'surveys'\n  | 'payments'\n  | 'product-fees'\n  | 'listings-items'\n  | 'balanceTransactions'\n  | 'events'\n  | 'contacts'\n  | 'companies'\n  | 'shipping'\n  | 'conversations';",
        "type": "| 'ads-metrics'\n  | 'ads-settings'\n  | 'assets-settings'\n  | 'creatives-metrics'\n  | 'videos-metrics'\n  | 'orders'\n  | 'inventory_items'\n  | 'products'\n  | 'prices'\n  | 'subscriptions'\n  | 'customers'\n  | 'webhook'\n  | 'refunds'\n  | 'issues'\n  | 'surveys'\n  | 'payments'\n  | 'product-fees'\n  | 'listings-items'\n  | 'balanceTransactions'\n  | 'events'\n  | 'contacts'\n  | 'companies'\n  | 'shipping'\n  | 'conversations'"
      },
      {
        "name": " DataTypesMap",
        "text": "\n\nexport type DataTypesMap = {\n  [type in DataTypesIds]: type;\n};",
        "type": "{\n  [type in DataTypesIds]: type;\n}"
      },
      {
        "name": " DataTypesRoles",
        "text": "\n\nexport const DataTypesRoles: DataTypesMap = {\n  'ads-metrics': 'ads-metrics',\n  issues: 'issues',\n  'ads-settings': 'ads-settings',\n  'assets-settings': 'assets-settings',\n  'creatives-metrics': 'creatives-metrics',\n  'videos-metrics': 'videos-metrics',\n  inventory_items: 'inventory_items',\n  orders: 'orders',\n  products: 'products',\n  prices: 'prices',\n  customers: 'customers',\n  subscriptions: 'subscriptions',\n  webhook: 'webhook',\n  refunds: 'refunds',\n  surveys: 'surveys',\n  payments: 'payments',\n  'product-fees': 'product-fees',\n  'listings-items': 'listings-items',\n  balanceTransactions: 'balanceTransactions',\n  events: 'events',\n  contacts: 'contacts',\n  companies: 'companies',\n  shipping: 'shipping',\n  conversations: 'conversations',\n};",
        "type": "DataTypesMap"
      },
      {
        "name": " BaseDataType",
        "text": "\n\nexport type BaseDataType = {\n  importQueueName: string;\n  importUrl: string;\n  importUrlLight?: string;\n};",
        "type": "{\n  importQueueName: string;\n  importUrl: string;\n  importUrlLight?: string;\n}"
      },
      {
        "name": " DataTypesRecord",
        "text": "\n\nexport type DataTypesRecord = {\n  [dataType in DataTypesIds]: BaseDataType;\n};",
        "type": "{\n  [dataType in DataTypesIds]: BaseDataType;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/general/SalesPlatform.ts",
    "exports": [
      {
        "name": " SalesPlatform",
        "text": "export type SalesPlatform = 'shopify' | 'bigcommerce' | 'woocommerce' | 'stripe';",
        "type": "'shopify' | 'bigcommerce' | 'woocommerce' | 'stripe'"
      },
      {
        "name": " salesPlatformDisplayName",
        "text": "\n\nexport const salesPlatformDisplayName: { [key in SalesPlatform]: string } = {\n  shopify: 'Shopify',\n  bigcommerce: 'BigCommerce',\n  woocommerce: 'WooCommerce',\n  stripe: 'Stripe'\n}",
        "type": "{ [key in SalesPlatform]: string }"
      }
    ]
  },
  {
    "file": "@tw/types/services/general/Services.ts",
    "exports": [
      {
        "name": " BaseChannel",
        "text": "\n\nexport type BaseChannel<T extends ServicesIds | string> = {\n  id: T;\n  name: string;\n  smallIcon?: string;\n  attributionName?: string;\n  isSensory?: boolean | ((shop: Shop | ShopWithSensory) => boolean);\n  forceOldFetch?: boolean; // temp flag to force old data fetch even it's sensory\n  internalUrl: string;\n  getAccounts: (shop: Shop | ShopWithSensory) => ShopIntegrationProperties[];\n  getAccessToken?: (shop: Shop | ShopWithSensory) => string;\n  getIsConnected?: (shop: Shop | ShopWithSensory) => boolean;\n  getShopProviderStatus?: (shop: Shop | ShopWithSensory) => ShopProviderStatus;\n  dataTypes: Partial<DataTypesRecord>;\n  // which datatype to use to determine queue and URL\n  // if data type was not specified.\n  defaultDataType?: DataTypesIds;\n  saveToCreativecockpit?: boolean;\n  dateRangeLimit?: number;\n\n  healthCheckSupported?: boolean;\n  healthCheckSlackChannel?: string;\n  healthCheckConf?: DataHealthConf;\n  isBeta?: boolean;\n  providerType?: 'none' | 'connector' | 'data';\n  isNotInBQ?: boolean;\n  twVersion?: string;\n};",
        "type": "{\n  id: T;\n  name: string;\n  smallIcon?: string;\n  attributionName?: string;\n  isSensory?: boolean | ((shop: Shop | ShopWithSensory) => boolean);\n  forceOldFetch?: boolean; // temp flag to force old data fetch even it's sensory\n  internalUrl: string;\n  getAccounts: (shop: Shop | ShopWithSensory) => ShopIntegrationProperties[];\n  getAccessToken?: (shop: Shop | ShopWithSensory) => string;\n  getIsConnected?: (shop: Shop | ShopWithSensory) => boolean;\n  getShopProviderStatus?: (shop: Shop | ShopWithSensory) => ShopProviderStatus;\n  dataTypes: Partial<DataTypesRecord>;\n  // which datatype to use to determine queue and URL\n  // if data type was not specified.\n  defaultDataType?: DataTypesIds;\n  saveToCreativecockpit?: boolean;\n  dateRangeLimit?: number;\n\n  healthCheckSupported?: boolean;\n  healthCheckSlackChannel?: string;\n  healthCheckConf?: DataHealthConf;\n  isBeta?: boolean;\n  providerType?: 'none' | 'connector' | 'data';\n  isNotInBQ?: boolean;\n  twVersion?: string;\n}"
      },
      {
        "name": " ServicesRecordInternal",
        "text": "\n\nexport type ServicesRecordInternal = {\n  [channel in ServicesIds]: BaseChannel<channel>;\n};",
        "type": "{\n  [channel in ServicesIds]: BaseChannel<channel>;\n}"
      },
      {
        "name": " ServicesRecord",
        "text": "\n\nexport type ServicesRecord = {\n  [channel in ServicesIds]: BaseChannel<channel> & {\n    providerType: 'none' | 'connector' | 'data';\n  };\n};",
        "type": "{\n  [channel in ServicesIds]: BaseChannel<channel> & {\n    providerType: 'none' | 'connector' | 'data';\n  };\n}"
      },
      {
        "name": " extractSensoryAccounts",
        "text": "\n\nexport const extractSensoryAccounts = (\n  shop: ShopWithSensory,\n  providerId: ServicesIds\n): ShopIntegrationProperties[] => {\n  return (shop.sensory?.[providerId]?.integrations\n    ?.map((x) => {\n      return {\n        id: x.id,\n        providerAccount: x.provider_account,\n        integrationId: x.id,\n        name: x.name,\n        currency: x.extra_params?.currency,\n        timezone: x.extra_params?.timezone,\n        settings: x.settings,\n        status: x.status as ShopIntegrationStatusEnum,\n        workflowStatus: x.workflowStatus as WorkflowIntegrationStatus[],\n        errorMessage: x.errorMessage,\n      };\n    })\n    ?.filter((int) => int.status != ShopIntegrationStatusEnum.deleted) ??\n    []) as ShopIntegrationProperties[];\n};",
        "type": "variable"
      },
      {
        "name": " extractSensoryIsConnected",
        "text": "\n\nexport const extractSensoryIsConnected = (shop: ShopWithSensory, providerId: ServicesIds) => {\n  return shop.sensory?.[providerId]?.credentials?.length > 0;\n};",
        "type": "variable"
      },
      {
        "name": " extractSensoryProviderStatus",
        "text": "\n\nexport const extractSensoryProviderStatus = (\n  shop: ShopWithSensory,\n  providerId: ServicesIds\n): ShopProviderStatus => {\n  const isConnected = extractSensoryIsConnected(shop, providerId);\n  //TODO: get error\n  if (!isConnected) return { status: ShopProviderStatusEnum.disconnected };\n  const integrations = services[providerId]\n    .getAccounts(shop)\n    ?.filter(\n      (acc) =>\n        ![ShopIntegrationStatusEnum.deleted, ShopIntegrationStatusEnum.disconnected].includes(\n          acc.status\n        )\n    );\n  if (!integrations?.length) {\n    return { status: ShopProviderStatusEnum.pending };\n  }\n  const errorIntegration: ShopIntegrationProperties = integrations.find(\n    (x: ShopIntegrationProperties) => x?.status == ShopIntegrationStatusEnum.error\n  );\n  if (errorIntegration) {\n    return {\n      status: ShopProviderStatusEnum.connected,\n      errorMessage: errorIntegration.errorMessage ?? 'Connection Error',\n    };\n  }\n\n  const backfillIntegration: ShopIntegrationProperties = integrations.find(\n    (x: ShopIntegrationProperties) => x?.status == ShopIntegrationStatusEnum.backfill\n  );\n  if (backfillIntegration) {\n    return {\n      status: ShopProviderStatusEnum.backfill,\n    };\n  }\n\n  return { status: ShopProviderStatusEnum.connected };\n};",
        "type": "variable"
      },
      {
        "name": " extractShopProviderStatus",
        "text": "\nexport const extractShopProviderStatus = (\n  shop: Shop,\n  providerId: ServicesIds\n): ShopProviderStatus => {\n  const accessToken = services[providerId].getAccessToken(shop);\n  if (!accessToken) return { status: ShopProviderStatusEnum.disconnected };\n  const providerState = shop.providers?.[providerId] as ShopProviderState;\n  const integrations = services[providerId].getAccounts(shop);\n  if (!integrations?.length) {\n    return providerState?.error\n      ? {\n          status: ShopProviderStatusEnum.connected,\n          errorMessage: providerState?.error?.errorMessage,\n        }\n      : {\n          //for bing,twitter\n          status: accessToken?.toLowerCase().includes('go to')\n            ? ShopProviderStatusEnum.disconnected\n            : ShopProviderStatusEnum.pending,\n        };\n  }\n  if (providerState?.integrations) {\n    const errorIntegration: ShopIntegrationState = Object.values(providerState?.integrations).find(\n      (x: ShopIntegrationState) => x?.status == ShopIntegrationStatusEnum.error\n    );\n    if (errorIntegration) {\n      return {\n        status: ShopProviderStatusEnum.connected,\n        errorMessage: errorIntegration?.error?.errorMessage,\n      };\n    }\n  }\n  return { status: ShopProviderStatusEnum.connected };\n};",
        "type": "variable"
      },
      {
        "name": " extractAccounts",
        "text": "\n\nexport const extractAccounts = (\n  integrations: { id: string; name?: string; timezone?: string; currency?: string }[],\n  integrationsState: { [key in string]?: ShopIntegrationState }\n): ShopIntegrationProperties[] => {\n  return (integrations || []).map((x) => {\n    const integrationState = integrationsState?.[x.id];\n    return {\n      id: x.id,\n      providerAccount: x.id,\n      name: x.name || x.id,\n      currency: x.currency,\n      timezone: x.timezone,\n      status: integrationState?.status ?? ShopIntegrationStatusEnum.ready,\n      errorMessage: integrationState?.error?.errorMessage,\n    };\n  });\n};",
        "type": "variable"
      },
      {
        "name": " services",
        "text": "\n\nexport const services: ServicesRecord = Object.keys(_services).reduce((acc, key) => {\n  const service = _services[key];\n  acc[key] = {\n    ...service,\n    providerType: service.providerType ?? 'data',\n    getIsConnected: (shop: ShopWithSensory) =>\n      getIsConnected(service.getShopProviderStatus, shop) && service.providerType !== 'none',\n  };\n  return acc;\n}, {} as ServicesRecord);",
        "type": "ServicesRecord"
      }
    ]
  },
  {
    "file": "@tw/types/services/general/ServicesIds.ts",
    "exports": [
      {
        "name": " ServicesIdsArray",
        "text": "export const ServicesIdsArray = [\n  'facebook-ads',\n  'google-ads',\n  'tiktok-ads',\n  'snapchat-ads',\n  'pinterest-ads',\n  'shopify',\n  'shopify-segment',\n  'google-analytics',\n  'enquirelabs',\n  'kno',\n  'okendo',\n  'benchmarks',\n  'influencers',\n  'stripe',\n  'atlassian',\n  'amazon',\n  'pixel',\n  'triple-whale',\n  'twitter-ads',\n  'bing',\n  'skio',\n  'recharge',\n  'hubspot',\n  'gorgias',\n  'slack',\n  'google-sheets',\n  'mountain',\n  'tatari',\n  'criteo',\n  'shipstation',\n  'smsbump',\n  'intercom',\n  'shipbob',\n  'postscript',\n  'taboola',\n  'adroll',\n  'outbrain',\n  'gcp',\n  'posthog',\n  'klaviyo',\n  'woocommerce',\n  'bigcommerce',\n  'linkedin',\n  'website-content',\n  'pps',\n  'tiktok-shops',\n] as const;",
        "type": "variable"
      },
      {
        "name": " ServicesIds",
        "text": "\n\nexport type ServicesIds = (typeof ServicesIdsArray)[number];",
        "type": "(typeof ServicesIdsArray)[number]"
      },
      {
        "name": " allServices",
        "text": "\n\nexport type allServices = {\n  [t in ServicesIds]?: t;\n};",
        "type": "{\n  [t in ServicesIds]?: t;\n}"
      },
      {
        "name": " servicesRoles",
        "text": "\n\nexport const servicesRoles: allServices = {\n  'facebook-ads': 'facebook-ads',\n  'google-ads': 'google-ads',\n  'tiktok-ads': 'tiktok-ads',\n  'snapchat-ads': 'snapchat-ads',\n  'pinterest-ads': 'pinterest-ads',\n  'twitter-ads': 'twitter-ads',\n  shopify: 'shopify',\n  enquirelabs: 'enquirelabs',\n  kno: 'kno',\n  benchmarks: 'benchmarks',\n  'google-analytics': 'google-analytics',\n  influencers: 'influencers',\n  stripe: 'stripe',\n  'shopify-segment': 'shopify-segment',\n  amazon: 'amazon',\n  pixel: 'pixel',\n  'triple-whale': 'triple-whale',\n  bing: 'bing',\n  recharge: 'recharge',\n  hubspot: 'hubspot',\n  gorgias: 'gorgias',\n  slack: 'slack',\n  'google-sheets': 'google-sheets',\n  intercom: 'intercom',\n  gcp: 'gcp',\n  posthog: 'posthog',\n  klaviyo: 'klaviyo',\n  pps: 'pps',\n  smsbump: 'smsbump',\n};",
        "type": "allServices"
      },
      {
        "name": " supportedByNexus",
        "text": "\n\nexport const supportedByNexus: ServicesIds[] = [\n  'bing',\n  // 'criteo',\n  'twitter-ads',\n  //'pinterest-ads',\n  'tiktok-ads',\n  'snapchat-ads',\n  'google-ads',\n  'facebook-ads',\n];",
        "type": "ServicesIds[]"
      }
    ]
  },
  {
    "file": "@tw/types/services/general/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/services/hubspot/dto/NewPartnerRequest.ts",
    "exports": [
      {
        "name": " NewPartnerRequest",
        "text": "export declare type NewPartnerRequest = {\n  partner_name: string;\n  partner_type: string;\n  website?: string;\n  pod_id: string;\n  pod_created_date: string;\n  primary_contact_email: string;\n  primary_contact_name: string;\n  associatedCompanyIds: string[];\n  associatedContactIds: string[];\n  count_of_managed_stores: number;\n  count_of_managed_users: number;\n};",
        "type": "{\n  partner_name: string;\n  partner_type: string;\n  website?: string;\n  pod_id: string;\n  pod_created_date: string;\n  primary_contact_email: string;\n  primary_contact_name: string;\n  associatedCompanyIds: string[];\n  associatedContactIds: string[];\n  count_of_managed_stores: number;\n  count_of_managed_users: number;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/hubspot/dto/UpdatePartnerRequest.ts",
    "exports": [
      {
        "name": " updatePartnerRequest",
        "text": "export declare type updatePartnerRequest = {\n  partner_name: string;\n  partner_type: string;\n  website?: string;\n  primary_contact_email: string;\n  primary_contact_name: string;\n  companiesToMarkAsRemoved: string[];\n  contactsToMarkAsRemoved: string[];\n  companiesToAdd: string[];\n  contactsToAdd: string[];\n  count_of_managed_stores: number;\n  count_of_managed_users: number;\n};",
        "type": "{\n  partner_name: string;\n  partner_type: string;\n  website?: string;\n  primary_contact_email: string;\n  primary_contact_name: string;\n  companiesToMarkAsRemoved: string[];\n  contactsToMarkAsRemoved: string[];\n  companiesToAdd: string[];\n  contactsToAdd: string[];\n  count_of_managed_stores: number;\n  count_of_managed_users: number;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/hubspot/dto/hubspotRequestFromInvitation.ts",
    "exports": [
      {
        "name": " hubspotRequestFromInvitation",
        "text": "export declare type hubspotRequestFromInvitation = {\n  email?: string;\n  shopDomain?: string;\n  accountType?: 'AGENCY' | 'BRAND';\n  firstname?: string;\n  lastname?: string;\n  phone?: string;\n  role?: string;\n  source?: 'INVITATION';\n};",
        "type": "{\n  email?: string;\n  shopDomain?: string;\n  accountType?: 'AGENCY' | 'BRAND';\n  firstname?: string;\n  lastname?: string;\n  phone?: string;\n  role?: string;\n  source?: 'INVITATION';\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/hubspot/dto/hubspotRequestFromPause.ts",
    "exports": [
      {
        "name": " hubspotRequestFromPause",
        "text": "export declare type hubspotRequestFromPause = {\n  source?: 'PAUSE_SUBSCRIPTION';\n  shop_domain?: string;\n  subscription_id?: string;\n  subscription_pause_end?: Date;\n  subscription_pause_reason?: string;\n};",
        "type": "{\n  source?: 'PAUSE_SUBSCRIPTION';\n  shop_domain?: string;\n  subscription_id?: string;\n  subscription_pause_end?: Date;\n  subscription_pause_reason?: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/hubspot/dto/hubspotRequestFromSignup.ts",
    "exports": [
      {
        "name": " hubspotRequestFromSignup",
        "text": "\n\nexport declare type hubspotRequestFromSignup = {\n  step?: number;\n  email?: string;\n  shopDomain?: string;\n  plans?: string[];\n  agencyUrl?: string;\n  agencyName?: string;\n  revenue?: string;\n  accountType?: 'AGENCY' | 'BRAND';\n  firstname?: string;\n  lastname?: string;\n  phone?: string;\n  shopCount?: number;\n  referrer?: string;\n  payer?: 'Brand' | 'Agency';\n  source?: 'SIGNUP' | 'SIGNUP-FREE';\n  hs_contact_id?: string;\n  hs_company_id?: string;\n  utm_source?: string;\n  utm_medium?: string;\n  utm_campaign?: string;\n  utm_content?: string;\n  utm_keyword?: string;\n  fw_key?: string;\n  isFW?: boolean;\n  industry?: string;\n  role?: string;\n  company_source?: string;\n  contact_source?: string;\n  installed_via_shopify_app_store?: boolean;\n  shopify_uninstalled_date?: string;\n  shopify_connection_status?: string;\n  subscription_type?: subscriptionType;\n  ip__shopify__accepts_marketing?: boolean;\n  login_method?: 'google' | 'facebook' | 'Username';\n  agency_sign_up_link?: string;\n  triple_whale_platform?: number;\n};",
        "type": "{\n  step?: number;\n  email?: string;\n  shopDomain?: string;\n  plans?: string[];\n  agencyUrl?: string;\n  agencyName?: string;\n  revenue?: string;\n  accountType?: 'AGENCY' | 'BRAND';\n  firstname?: string;\n  lastname?: string;\n  phone?: string;\n  shopCount?: number;\n  referrer?: string;\n  payer?: 'Brand' | 'Agency';\n  source?: 'SIGNUP' | 'SIGNUP-FREE';\n  hs_contact_id?: string;\n  hs_company_id?: string;\n  utm_source?: string;\n  utm_medium?: string;\n  utm_campaign?: string;\n  utm_content?: string;\n  utm_keyword?: string;\n  fw_key?: string;\n  isFW?: boolean;\n  industry?: string;\n  role?: string;\n  company_source?: string;\n  contact_source?: string;\n  installed_via_shopify_app_store?: boolean;\n  shopify_uninstalled_date?: string;\n  shopify_connection_status?: string;\n  subscription_type?: subscriptionType;\n  ip__shopify__accepts_marketing?: boolean;\n  login_method?: 'google' | 'facebook' | 'Username';\n  agency_sign_up_link?: string;\n  triple_whale_platform?: number;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/hubspot/dto/hubspotRequestFromStripe.ts",
    "exports": [
      {
        "name": " hubspotRequestFromStripe",
        "text": "\n\nexport declare type hubspotRequestFromStripe = {\n  source?: 'STRIPE';\n  subscription_id?: string;\n  subscription_status?: string;\n  shopDomain: string;\n  discount?: string;\n  features?: string[];\n  items?: any[];\n  total_price?: number;\n  event_type?: string;\n  email?: string;\n  origin?: string;\n  revenue_selected?: number;\n  current_revenue?: number;\n  subscription_canceled_date?: string;\n  customer_id?: string;\n  coupon_name?: string;\n  subscription_start_date?: string;\n  subscription_pause_start_date?: string | null;\n  promo_code?: string;\n  subscription_cancellation_requested_date?: string;\n  subscription_canceled_by?: string;\n  subscription_type?: subscriptionType;\n  subscription_contract_end_date?: string;\n  collection_method?: 'charge_automatically' | 'send_invoice';\n};",
        "type": "{\n  source?: 'STRIPE';\n  subscription_id?: string;\n  subscription_status?: string;\n  shopDomain: string;\n  discount?: string;\n  features?: string[];\n  items?: any[];\n  total_price?: number;\n  event_type?: string;\n  email?: string;\n  origin?: string;\n  revenue_selected?: number;\n  current_revenue?: number;\n  subscription_canceled_date?: string;\n  customer_id?: string;\n  coupon_name?: string;\n  subscription_start_date?: string;\n  subscription_pause_start_date?: string | null;\n  promo_code?: string;\n  subscription_cancellation_requested_date?: string;\n  subscription_canceled_by?: string;\n  subscription_type?: subscriptionType;\n  subscription_contract_end_date?: string;\n  collection_method?: 'charge_automatically' | 'send_invoice';\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/hubspot/dto/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/services/hubspot/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/services/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/services/insights/AOV.ts",
    "exports": [
      {
        "name": " AOVRequestParams",
        "text": "\n\nexport type AOVRequestParams = {\n  shopId: string;\n  startDate: string;\n  endDate: string;\n  filters?: InsightsFilterQuery[];\n  CDPSegmentId?: string;\n};",
        "type": "{\n  shopId: string;\n  startDate: string;\n  endDate: string;\n  filters?: InsightsFilterQuery[];\n  CDPSegmentId?: string;\n}"
      },
      {
        "name": " AOVItem",
        "text": "\n\nexport type AOVItem = {\n  orderValue: number;\n  totalOrders: number;\n};",
        "type": "{\n  orderValue: number;\n  totalOrders: number;\n}"
      },
      {
        "name": " AOVResponse",
        "text": "\n\nexport type AOVResponse = {\n  items: AOVItem[];\n};",
        "type": "{\n  items: AOVItem[];\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/insights/LTV.ts",
    "exports": [
      {
        "name": " LTVRequestParams",
        "text": "\n\nexport type LTVRequestParams = {\n  shopId: string;\n  startDate: string;\n  endDate: string;\n  filters?: InsightsFilterQuery[];\n  limit?: number;\n  groupBy: FilterProperty.PRODUCT_ID | FilterProperty.ORDER_DISCOUNT_CODE;\n  CDPSegmentId?: string;\n  searchTerm?: string;\n};",
        "type": "{\n  shopId: string;\n  startDate: string;\n  endDate: string;\n  filters?: InsightsFilterQuery[];\n  limit?: number;\n  groupBy: FilterProperty.PRODUCT_ID | FilterProperty.ORDER_DISCOUNT_CODE;\n  CDPSegmentId?: string;\n  searchTerm?: string;\n}"
      },
      {
        "name": " LTVItem",
        "text": "\n\nexport type LTVItem = {\n  id: string;\n  name?: string;\n  aov: number;\n  ltv60days: number;\n  ltv90days: number;\n};",
        "type": "{\n  id: string;\n  name?: string;\n  aov: number;\n  ltv60days: number;\n  ltv90days: number;\n}"
      },
      {
        "name": " LTVResponse",
        "text": "\n\nexport type LTVResponse = {\n  items: LTVItem[];\n  total: LTVItem;\n};",
        "type": "{\n  items: LTVItem[];\n  total: LTVItem;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/insights/cartAnalysis.ts",
    "exports": [
      {
        "name": " BoughtTogetherParams",
        "text": "\n\nexport type BoughtTogetherParams = {\n  shopId: string;\n  startDate: string;\n  endDate: string;\n  minNumberOfProducts: number;\n  includeFreeProducts: boolean;\n  viewBy:\n    | FilterProperty.PRODUCT_ID\n    | FilterProperty.PRODUCT_SKU\n    | FilterProperty.PRODUCT_VARIANT_ID;\n  filters?: InsightsFilterQuery[];\n  CDPSegmentId?: string;\n  sortBy: BoughtTogetherMetric;\n  sortDirection: 'asc' | 'desc';\n  limit: number;\n};",
        "type": "{\n  shopId: string;\n  startDate: string;\n  endDate: string;\n  minNumberOfProducts: number;\n  includeFreeProducts: boolean;\n  viewBy:\n    | FilterProperty.PRODUCT_ID\n    | FilterProperty.PRODUCT_SKU\n    | FilterProperty.PRODUCT_VARIANT_ID;\n  filters?: InsightsFilterQuery[];\n  CDPSegmentId?: string;\n  sortBy: BoughtTogetherMetric;\n  sortDirection: 'asc' | 'desc';\n  limit: number;\n}"
      },
      {
        "type": "enum",
        "name": " BoughtTogetherMetric",
        "text": "\n\nexport enum BoughtTogetherMetric {\n  AOV = 'AOV',\n  TOTAL_ORDERS = 'totalOrders',\n  TOTAL_SALES = 'totalSales',\n  ORDERS_PERCENTAGE = 'ordersPercentage',\n  NEW_ORDERS = 'newOrders',\n  NEW_SALES = 'newSales',\n  RETURNING_ORDERS = 'returningOrders',\n  RETURNING_SALES = 'returningSales',\n}"
      },
      {
        "name": " BoughtTogetherProduct",
        "text": "\n\nexport type BoughtTogetherProduct = {\n  prodcutId: string;\n  productTitle: string;\n  variantId?: string;\n  variantTitle?: string;\n  sku?: string;\n  imgSrc: string;\n  productTotalOrders: number;\n  productBundlesPercentage: number;\n};",
        "type": "{\n  prodcutId: string;\n  productTitle: string;\n  variantId?: string;\n  variantTitle?: string;\n  sku?: string;\n  imgSrc: string;\n  productTotalOrders: number;\n  productBundlesPercentage: number;\n}"
      },
      {
        "name": " BoughtTogetherGroup",
        "text": "\n\nexport type BoughtTogetherGroup = {\n  key: string;\n  metrics: { [key in BoughtTogetherMetric]: number };\n  products: BoughtTogetherProduct[];\n};",
        "type": "{\n  key: string;\n  metrics: { [key in BoughtTogetherMetric]: number };\n  products: BoughtTogetherProduct[];\n}"
      },
      {
        "name": " BoughtTogetherData",
        "text": "\n\nexport type BoughtTogetherData = BoughtTogetherGroup[];",
        "type": "BoughtTogetherGroup[]"
      }
    ]
  },
  {
    "file": "@tw/types/services/insights/cohorts.ts",
    "exports": [
      {
        "type": "enum",
        "name": " TimeFrame",
        "text": "\n\nexport enum TimeFrame {\n  YEAR = 'year',\n  MONTH = 'month',\n  WEEK = 'week',\n  DAY = 'day',\n}"
      },
      {
        "name": " CohortsParams",
        "text": "\n\nexport type CohortsParams = {\n  shopId: string;\n  timeFrame: TimeFrame;\n  filters: InsightsFilterQuery[];\n  startDate: string;\n  endDate: string;\n  CDPSegmentId?: string;\n};",
        "type": "{\n  shopId: string;\n  timeFrame: TimeFrame;\n  filters: InsightsFilterQuery[];\n  startDate: string;\n  endDate: string;\n  CDPSegmentId?: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/insights/customerActivities.ts",
    "exports": [
      {
        "type": "enum",
        "name": " CustomerActivityType",
        "text": "\n\nexport enum CustomerActivityType {\n  PlacedOrder = 'placed_order',\n  AddedToCart = 'added_to_cart',\n  RemovedFromCart = 'removed_from_cart',\n  ClickedOnAd = 'clicked_on_ad',\n  ClickedEmailSMSCampaign = 'clicked_email_sms_campaign',\n  ViewedPage = 'viewed_page',\n  PostPurchaseSurveySubmitted = 'post_purchase_survey_submitted',\n  StartedSubscription = 'started_subscription',\n}"
      },
      {
        "name": " OrderProps",
        "text": "\n\nexport type OrderProps = {\n  providerId: ServicesIds;\n  orderId: string;\n  orderName: string;\n  orderPrice: number;\n  discount: number;\n  discountCode: string[];\n  itemsPurchased: (ProductProps & { quantity: number })[];\n  orderTags: string[];\n  fulfillmentStatus: 'fulfilled' | 'partial' | 'unfulfilled';\n}",
        "type": "{\n  providerId: ServicesIds;\n  orderId: string;\n  orderName: string;\n  orderPrice: number;\n  discount: number;\n  discountCode: string[];\n  itemsPurchased: (ProductProps & { quantity: number })[];\n  orderTags: string[];\n  fulfillmentStatus: 'fulfilled' | 'partial' | 'unfulfilled';\n}"
      },
      {
        "name": " ProductProps",
        "text": "\n\nexport type ProductProps = {\n  productTitle: string;\n  variantTitle: string;\n  sku: string;\n  imgUrl: string;\n  price: number;\n}",
        "type": "{\n  productTitle: string;\n  variantTitle: string;\n  sku: string;\n  imgUrl: string;\n  price: number;\n}"
      },
      {
        "name": " CartActionProps",
        "text": "\n\nexport type CartActionProps = ProductProps & {\n  providerId: ServicesIds;\n  quantity: number;\n}",
        "type": "ProductProps & {\n  providerId: ServicesIds;\n  quantity: number;\n}"
      },
      {
        "name": " AdProps",
        "text": "\n\nexport type AdProps = {\n  source: ServicesIds;\n  campaignName: string;\n  adSetName: string;\n  adName: string;\n  adImgUrl?: string;\n}",
        "type": "{\n  source: ServicesIds;\n  campaignName: string;\n  adSetName: string;\n  adName: string;\n  adImgUrl?: string;\n}"
      },
      {
        "name": " ViewdPageProps",
        "text": "\n\nexport type ViewdPageProps = {\n  pageType?: 'collection' | 'product' | 'cart' | 'confirmation',\n  url: string;\n  fullUrl?: string;\n  title?: string;\n  referrer?: string;\n} & Partial<AdProps> & Partial<ProductProps>",
        "type": "{\n  pageType?: 'collection' | 'product' | 'cart' | 'confirmation',\n  url: string;\n  fullUrl?: string;\n  title?: string;\n  referrer?: string;\n} & Partial<AdProps> & Partial<ProductProps>"
      },
      {
        "name": " PPSProps",
        "text": "\n\nexport type PPSProps = {\n  questions: {\n    question: string;\n    answer: string;\n  }[];\n}",
        "type": "{\n  questions: {\n    question: string;\n    answer: string;\n  }[];\n}"
      },
      {
        "name": " SubscriptionProps",
        "text": "\n\nexport type SubscriptionProps = {\n  providerId: ServicesIds;\n  productName: string;\n  orderPrice: number;\n  orderIntervalUntis: 'week' | 'month' | 'day';\n  orderIntervalValue: number;\n}",
        "type": "{\n  providerId: ServicesIds;\n  productName: string;\n  orderPrice: number;\n  orderIntervalUntis: 'week' | 'month' | 'day';\n  orderIntervalValue: number;\n}"
      },
      {
        "name": " EmailSMSCampaignProps",
        "text": "\n\nexport type EmailSMSCampaignProps = {\n  source: ServicesIds;\n  campaignName: string;\n};",
        "type": "{\n  source: ServicesIds;\n  campaignName: string;\n}"
      },
      {
        "name": " ActivityProperties",
        "text": "\n\nexport type ActivityProperties = {\n  [CustomerActivityType.PlacedOrder]: OrderProps;\n  [CustomerActivityType.AddedToCart]: CartActionProps;\n  [CustomerActivityType.RemovedFromCart]: CartActionProps;\n  [CustomerActivityType.ClickedOnAd]: AdProps;\n  [CustomerActivityType.ClickedEmailSMSCampaign]: EmailSMSCampaignProps;\n  [CustomerActivityType.ViewedPage]: ViewdPageProps;\n  [CustomerActivityType.PostPurchaseSurveySubmitted]: PPSProps;\n  [CustomerActivityType.StartedSubscription]: SubscriptionProps;\n};",
        "type": "{\n  [CustomerActivityType.PlacedOrder]: OrderProps;\n  [CustomerActivityType.AddedToCart]: CartActionProps;\n  [CustomerActivityType.RemovedFromCart]: CartActionProps;\n  [CustomerActivityType.ClickedOnAd]: AdProps;\n  [CustomerActivityType.ClickedEmailSMSCampaign]: EmailSMSCampaignProps;\n  [CustomerActivityType.ViewedPage]: ViewdPageProps;\n  [CustomerActivityType.PostPurchaseSurveySubmitted]: PPSProps;\n  [CustomerActivityType.StartedSubscription]: SubscriptionProps;\n}"
      },
      {
        "name": " CustomerActivity",
        "text": "\n\nexport type CustomerActivity = {\n  eventDate: string;\n} & { [key in CustomerActivityType]: { type: key; properties: ActivityProperties[key] } }[CustomerActivityType]",
        "type": "{\n  eventDate: string;\n} & { [key in CustomerActivityType]: { type: key; properties: ActivityProperties[key] } }[CustomerActivityType]"
      },
      {
        "name": " CustomerActivityParams",
        "text": "\n\nexport type CustomerActivityParams = {\n  shopId: string;\n  shopifyCustomerId: string;\n  tripleIds?: string[];\n  startDate: string;\n  endDate: string;\n}",
        "type": "{\n  shopId: string;\n  shopifyCustomerId: string;\n  tripleIds?: string[];\n  startDate: string;\n  endDate: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/insights/filters/FilterComparator.ts",
    "exports": [
      {
        "type": "enum",
        "name": " FilterComparator",
        "text": "\n\nexport enum FilterComparator {\n  GREATER_THAN = 'greater_than',\n  LESS_THAN = 'less_than',\n  EQUAL = 'equal',\n  NOT_EQUAL = 'not_equal',\n  CONTAIN = 'contain',\n  NOT_CONTAIN = 'not_contain',\n  IS_IN = 'is_in',\n  IS_NOT_IN = 'is_not_in',\n  START_WITH = 'start_with',\n  NOT_START_WITH = 'not_start_with',\n  END_WITH = 'end_with',\n  NOT_END_WITH = 'not_end_with',\n  IS_SET = 'is_set',\n  IS_NOT_SET = 'is_not_set',\n  IS = 'is',\n  IS_NOT = 'is_not',\n  // Time Comparators\n  OVER_ALL_TIME = 'over_all_time',\n  WITHIN = 'within',\n  BETWEEN = 'between',\n  BEFORE = 'before',\n  AFTER = 'after',\n  UNDER = 'under',\n  OVER = 'over',\n  // AI\n  TOP = 'top',\n  ARRAY_CONTAINS = 'array_contains',\n  ARRAY_NOT_CONTAINS = 'array_not_contains',\n}"
      },
      {
        "name": " STRING_COMPARATORS",
        "text": "\n\nexport const STRING_COMPARATORS: readonly FilterComparator[] = [\n  FilterComparator.EQUAL,\n  FilterComparator.NOT_EQUAL,\n  FilterComparator.CONTAIN,\n  FilterComparator.NOT_CONTAIN,\n  FilterComparator.IS_IN,\n  FilterComparator.IS_NOT_IN,\n  FilterComparator.START_WITH,\n  FilterComparator.NOT_START_WITH,\n  FilterComparator.END_WITH,\n  FilterComparator.NOT_END_WITH,\n  FilterComparator.IS_SET,\n  FilterComparator.IS_NOT_SET,\n] as const;",
        "type": "readonly FilterComparator[]"
      },
      {
        "name": " NUMBER_COMPARATORS",
        "text": "\n\nexport const NUMBER_COMPARATORS: readonly FilterComparator[] = [\n  FilterComparator.GREATER_THAN,\n  FilterComparator.LESS_THAN,\n  FilterComparator.EQUAL,\n  FilterComparator.NOT_EQUAL,\n] as const;",
        "type": "readonly FilterComparator[]"
      },
      {
        "name": " TIME_COMPARATORS",
        "text": "\n\nexport const TIME_COMPARATORS: readonly FilterComparator[] = [\n  FilterComparator.OVER_ALL_TIME,\n  FilterComparator.UNDER,\n  FilterComparator.OVER,\n  FilterComparator.WITHIN,\n  FilterComparator.BETWEEN,\n  FilterComparator.BEFORE,\n  FilterComparator.AFTER,\n] as const;",
        "type": "readonly FilterComparator[]"
      },
      {
        "name": " BOOLEAN_COMPARATOR",
        "text": "\n\nexport const BOOLEAN_COMPARATOR: readonly FilterComparator[] = [FilterComparator.EQUAL] as const;",
        "type": "readonly FilterComparator[]"
      },
      {
        "name": " LIST_COMPARATORS",
        "text": "\n\nexport const LIST_COMPARATORS: readonly FilterComparator[] = [\n  FilterComparator.IS_IN,\n  FilterComparator.IS_NOT_IN,\n] as const;",
        "type": "readonly FilterComparator[]"
      },
      {
        "name": " FIELD_ARRAY_COMPARATORS",
        "text": "\n\nexport const FIELD_ARRAY_COMPARATORS: readonly FilterComparator[] = [\n  FilterComparator.ARRAY_CONTAINS,\n  FilterComparator.ARRAY_NOT_CONTAINS,\n] as const;",
        "type": "readonly FilterComparator[]"
      },
      {
        "name": " COMPARATOR_BY_TYPE",
        "text": "\n\nexport const COMPARATOR_BY_TYPE: { [key in FilterPropertyType]: readonly FilterComparator[] } = {\n  [FilterPropertyType.STRING]: STRING_COMPARATORS,\n  [FilterPropertyType.NUMBER]: NUMBER_COMPARATORS,\n  [FilterPropertyType.TIME]: TIME_COMPARATORS,\n  [FilterPropertyType.BOOLEAN]: BOOLEAN_COMPARATOR,\n  [FilterPropertyType.LIST]: LIST_COMPARATORS,\n  [FilterPropertyType.REPEATED_STRING]: FIELD_ARRAY_COMPARATORS,\n};",
        "type": "{ [key in FilterPropertyType]: readonly FilterComparator[] }"
      },
      {
        "name": " StringComparator",
        "text": "\n\nexport type StringComparator = (typeof STRING_COMPARATORS)[number];",
        "type": "(typeof STRING_COMPARATORS)[number]"
      },
      {
        "name": " BooleanComparator",
        "text": "\nexport type BooleanComparator = (typeof BOOLEAN_COMPARATOR)[number];",
        "type": "(typeof BOOLEAN_COMPARATOR)[number]"
      },
      {
        "name": " NumberComparator",
        "text": "\nexport type NumberComparator = (typeof NUMBER_COMPARATORS)[number];",
        "type": "(typeof NUMBER_COMPARATORS)[number]"
      },
      {
        "name": " ListComparator",
        "text": "\nexport type ListComparator = (typeof LIST_COMPARATORS)[number];",
        "type": "(typeof LIST_COMPARATORS)[number]"
      },
      {
        "name": " ArrayComparator",
        "text": "\nexport type ArrayComparator = (typeof FIELD_ARRAY_COMPARATORS)[number];",
        "type": "(typeof FIELD_ARRAY_COMPARATORS)[number]"
      }
    ]
  },
  {
    "file": "@tw/types/services/insights/filters/FilterProperty.ts",
    "exports": [
      {
        "type": "enum",
        "name": " FilterPropertyType",
        "text": "export enum FilterPropertyType {\n  STRING = 'string',\n  NUMBER = 'number',\n  TIME = 'time',\n  BOOLEAN = 'boolean',\n  LIST = 'list',\n  REPEATED_STRING = 'repeated string',\n}"
      },
      {
        "type": "enum",
        "name": " FilterPropertyCategory",
        "text": "\n\nexport enum FilterPropertyCategory {\n  ORDERS = 'orders',\n  SUBSCRIPTIONS = 'subscriptions',\n  PRODUCTS = 'products',\n  CUSTOMERS = 'customers',\n  ATTRIBUTION = 'attribution',\n}"
      },
      {
        "type": "enum",
        "name": " FilterProperty",
        "text": "\n\nexport enum FilterProperty {\n  //  ORDER\n  ORDER_SOURCE_NAME = 'order_source_name',\n  ORDER_TAG = 'order_tag',\n  ORDER_PRICE = 'order_value',\n  ORDER_DISCOUNT_CODE = 'discount_code',\n  ORDER_DESTINATION = 'order_destination',\n  ORDER_ITEMS = 'items_number',\n  ORDER_SUBSCRIPTION_TYPE = 'order_subscription_type',\n  ORDER_PAYMENT_STATUS = 'order_payment_status',\n  IS_FIRST_ORDER = 'is_first_order',\n  PAYMENT_GATEWAY_NAME = 'payment_gateway_name',\n\n  // SUBSCRIPTION\n  SUBSCRIPTION_STATUS = 'subscription_status',\n\n  // PRODUCT\n  PRODUCT_NAME = 'product_name',\n  PRODUCT_ID = 'product_id',\n  PRODUCT_SKU = 'product_sku',\n  PRODUCT_VARIANT_NAME = 'product_variant_name',\n  PRODUCT_VARIANT_ID = 'product_variant_id',\n  PRODUCT_TYPE = 'product_type',\n  PRODUCT_CATEGORY = 'product_category',\n  PRODUCT_VENDOR = 'product_vendor',\n  PRODUCT_TAG = 'product_tag',\n  PRODUCT_QUANTITY = 'product_quantity',\n  PRODUCT_COLLECTION = 'product_collection',\n\n  // CUSTOMER\n  CUSTOMER_NAME = 'name',\n  CUSTOMER_EMAIL = 'email',\n  CUSTOMER_PHONE = 'phone',\n  CUSTOMER_HAS_STORE_ACCOUNT = 'customer_has_store_account',\n  CUSTOMER_STORE_ACCOUNT_CREATED_AT = 'customer_store_account_created_at',\n  CUSTOMER_STORE_ACCOUNT_STATUS = 'customer_store_account_status',\n  CUSTOMER_TAG = 'customer_tag',\n  CUSTOMER_ADDRESS_COUNTRY = 'country',\n  CUSTOMER_ADDRESS_STATE = 'state',\n  CUSTOMER_ADDRESS_CITY = 'city',\n  CUSTOMER_PART_OF_SEGMENT = 'customer_part_of_segment',\n  CUSTOMER_TOTAL_ORDERS_NUMBER = 'total_orders_number',\n  CUSTOMER_TOTAL_SPEND = 'customer_total_spend',\n  CUSTOMER_AOV = 'customer_aov',\n  CUSTOMER_EMAIL_MARKETING_CONSENT = 'customer_email_marketing_consent',\n  CUSTOMER_SMS_MARKETING_CONSENT = 'customer_sms_marketing_consent',\n  CUSTOMER_PREDICTED_LTV = 'customer_predicted_ltv',\n  CUSTOMER_IS_LIKELY_TO_CHURN = 'customer_is_likely_to_churn',\n  CUSTOMER_ACTIVE_SUBSCRIPTIONS_NUMBER = 'customer_active_subscriptions_number',\n\n  // RFM\n  CUSTOMER_RFM_RECENCY = 'customer_rfm_recency',\n  CUSTOMER_RFM_FREQUENCY = 'customer_rfm_frequency',\n  CUSTOMER_RFM_MONETARY = 'customer_rfm_monetary',\n\n  // ATTRIBUTION\n  ATTRIBUTION_SOURCE = 'source',\n  ATTRIBUTION_CHANNEL = 'attribution_channel',\n  ATTRIBUTION_REFERRING_SITE = 'attribution_referring_site',\n  ATTRIBUTION_AD_ACCOUNT = 'attribution_ad_account',\n  ATTRIBUTION_ADS_CAMPAIGN_NAME = 'campaign_name',\n  ATTRIBUTION_ADS_CAMPAIGN_ID = 'campaign_id',\n  ATTRIBUTION_ADS_ADSET_NAME = 'ad_group_name',\n  ATTRIBUTION_ADS_ADSET_ID = 'ad_group_id',\n  ATTRIBUTION_ADS_AD_NAME = 'ad_name',\n  ATTRIBUTION_ADS_AD_ID = 'ad_id',\n  ATTRIBUTION_EMAIL_SMS_CAMPAIGN_NAME = 'attribution_email_sms_campaign_name',\n  ATTRIBUTION_ROAS = 'attribution_roas',\n  ATTRIBUTION_PIXEL_ROAS = 'attribution_pixel_roas',\n  ATTRIBUTION_CPC = 'attribution_cpc',\n  ATTRIBUTION_CPM = 'attribution_cpm',\n  ATTRIBUTION_AD_SPEND = 'attribution_ad_spend',\n  ATTRIBUTION_IMPRESSIONS = 'attribution_impressions',\n  ATTRIBUTION_URL_PATH = 'url_path',\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/insights/filters/InsightFilter.ts",
    "exports": [
      {
        "type": "enum",
        "name": " FilterTimeUnit",
        "text": "\n\nexport enum FilterTimeUnit {\n  DAY = 'day',\n  WEEK = 'week',\n  MONTH = 'month',\n  YEAR = 'year',\n}"
      },
      {
        "name": " InsightsFilterCondition",
        "text": "\n\nexport type InsightsFilterCondition = {\n  comparator: FilterComparator;\n  value?: any;\n  value1?: any;\n  value2?: any;\n  unit?: FilterTimeUnit;\n  property: FilterProperty;\n};",
        "type": "{\n  comparator: FilterComparator;\n  value?: any;\n  value1?: any;\n  value2?: any;\n  unit?: FilterTimeUnit;\n  property: FilterProperty;\n}"
      },
      {
        "name": " InsightsFilterQuery",
        "text": "\n\nexport type InsightsFilterQuery = InsightsFilterCondition[];",
        "type": "InsightsFilterCondition[]"
      },
      {
        "name": " InsightsFilter",
        "text": "\n\nexport type InsightsFilter = {\n  id: string;\n  name: string;\n  query: InsightsFilterQuery;\n  relationOperator: 'AND' | 'OR';\n};",
        "type": "{\n  id: string;\n  name: string;\n  query: InsightsFilterQuery;\n  relationOperator: 'AND' | 'OR';\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/insights/filters/constants.ts",
    "exports": [
      {
        "name": " FILTER_PROPERTY_METADATA",
        "text": "\n\nexport const FILTER_PROPERTY_METADATA: Record<FilterProperty, { \n  type: FilterPropertyType,\n  category: FilterPropertyCategory,\n  isAutoComplete?: boolean\n  options?: (string | number)[]\n}> = {\n  [FilterProperty.ORDER_SOURCE_NAME]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.ORDERS,\n    isAutoComplete: true\n  },\n  [FilterProperty.ORDER_TAG]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.ORDERS,\n    isAutoComplete: true\n  },\n  [FilterProperty.ORDER_PRICE]: {\n    type: FilterPropertyType.NUMBER,\n    category: FilterPropertyCategory.ORDERS,\n  },\n  [FilterProperty.ORDER_DISCOUNT_CODE]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.ORDERS,\n    isAutoComplete: true\n  },\n  [FilterProperty.ORDER_DESTINATION]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.ORDERS,\n  },\n  [FilterProperty.ORDER_ITEMS]: {\n    type: FilterPropertyType.NUMBER,\n    category: FilterPropertyCategory.ORDERS,\n  },\n  [FilterProperty.ORDER_PAYMENT_STATUS]: {\n    type: FilterPropertyType.LIST,\n    // https://shopify.dev/docs/api/admin-graphql/unstable/enums/OrderDisplayFinancialStatus\n    options: ['authorized', 'expired', 'paid', 'partially_paid', 'partially_refunded', 'pending', 'refunded', 'voided'],\n    category: FilterPropertyCategory.ORDERS,\n  },\n  [FilterProperty.ORDER_SUBSCRIPTION_TYPE]: {\n    type: FilterPropertyType.LIST,\n    options: ['single_purchase', 'subscription_first_purchase', 'subscription_recurring_purchase'],\n    category: FilterPropertyCategory.ORDERS,\n  },\n  [FilterProperty.IS_FIRST_ORDER]: {\n    type: FilterPropertyType.BOOLEAN,\n    category: FilterPropertyCategory.ORDERS,\n  },\n  [FilterProperty.PAYMENT_GATEWAY_NAME]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.ORDERS,\n    isAutoComplete: true\n  },\n  [FilterProperty.PRODUCT_NAME]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.PRODUCTS,\n    isAutoComplete: true\n  },\n  [FilterProperty.PRODUCT_ID]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.PRODUCTS,\n    isAutoComplete: true\n  },\n  [FilterProperty.PRODUCT_SKU]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.PRODUCTS,\n    isAutoComplete: true\n  },\n  [FilterProperty.PRODUCT_VARIANT_NAME]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.PRODUCTS,\n    isAutoComplete: true\n  },\n  [FilterProperty.PRODUCT_VARIANT_ID]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.PRODUCTS,\n    isAutoComplete: true\n  },\n  [FilterProperty.PRODUCT_TYPE]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.PRODUCTS,\n    isAutoComplete: true\n  },\n  [FilterProperty.PRODUCT_CATEGORY]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.PRODUCTS,\n    isAutoComplete: true\n  },\n  [FilterProperty.PRODUCT_VENDOR]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.PRODUCTS,\n    isAutoComplete: true\n  },\n  [FilterProperty.PRODUCT_TAG]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.PRODUCTS,\n    isAutoComplete: true\n  },\n  [FilterProperty.PRODUCT_QUANTITY]: {\n    type: FilterPropertyType.NUMBER,\n    category: FilterPropertyCategory.PRODUCTS,\n  },\n  [FilterProperty.PRODUCT_COLLECTION]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.PRODUCTS,\n  },\n  [FilterProperty.CUSTOMER_NAME]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.CUSTOMERS,\n  },\n  [FilterProperty.CUSTOMER_EMAIL]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.CUSTOMERS,\n  },\n  [FilterProperty.CUSTOMER_PHONE]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.CUSTOMERS,\n  },\n  [FilterProperty.CUSTOMER_HAS_STORE_ACCOUNT]: {\n    type: FilterPropertyType.BOOLEAN,\n    category: FilterPropertyCategory.CUSTOMERS,\n  },\n  [FilterProperty.CUSTOMER_STORE_ACCOUNT_CREATED_AT]: {\n    type: FilterPropertyType.TIME,\n    category: FilterPropertyCategory.CUSTOMERS,\n  },\n  [FilterProperty.CUSTOMER_STORE_ACCOUNT_STATUS]: {\n    type: FilterPropertyType.LIST,\n    category: FilterPropertyCategory.CUSTOMERS,\n    options: ['ENABLED', 'DISABLED', 'INVITED', 'DECLINED']\n  },\n  [FilterProperty.CUSTOMER_TAG]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.CUSTOMERS,\n    isAutoComplete: true\n  },\n  [FilterProperty.CUSTOMER_ADDRESS_COUNTRY]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.CUSTOMERS,\n  },\n  [FilterProperty.CUSTOMER_ADDRESS_STATE]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.CUSTOMERS,\n    isAutoComplete: true\n  },\n  [FilterProperty.CUSTOMER_ADDRESS_CITY]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.CUSTOMERS,\n  },\n  [FilterProperty.CUSTOMER_PART_OF_SEGMENT]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.CUSTOMERS,\n  },\n  [FilterProperty.CUSTOMER_TOTAL_ORDERS_NUMBER]: {\n    type: FilterPropertyType.NUMBER,\n    category: FilterPropertyCategory.CUSTOMERS,\n  },\n  [FilterProperty.CUSTOMER_TOTAL_SPEND]: {\n    type: FilterPropertyType.NUMBER,\n    category: FilterPropertyCategory.CUSTOMERS,\n  },\n  [FilterProperty.CUSTOMER_AOV]: {\n    type: FilterPropertyType.NUMBER,\n    category: FilterPropertyCategory.CUSTOMERS,\n  },\n  [FilterProperty.CUSTOMER_PREDICTED_LTV]: {\n    type: FilterPropertyType.NUMBER,\n    category: FilterPropertyCategory.CUSTOMERS,\n  },\n  [FilterProperty.CUSTOMER_ACTIVE_SUBSCRIPTIONS_NUMBER]: {\n    type: FilterPropertyType.NUMBER,\n    category: FilterPropertyCategory.CUSTOMERS,\n  },\n  [FilterProperty.CUSTOMER_IS_LIKELY_TO_CHURN]: {\n    type: FilterPropertyType.BOOLEAN,\n    category: FilterPropertyCategory.CUSTOMERS,\n  },\n  [FilterProperty.CUSTOMER_EMAIL_MARKETING_CONSENT]: {\n    type: FilterPropertyType.LIST,\n    category: FilterPropertyCategory.CUSTOMERS,\n    options: ['SUBSCRIBED', 'UNSUBSCRIBED', 'NOT_SUBSCRIBED', 'PENDING', 'INVALID']\n  },\n  [FilterProperty.CUSTOMER_SMS_MARKETING_CONSENT]: {\n    type: FilterPropertyType.LIST,\n    category: FilterPropertyCategory.CUSTOMERS,\n    options: ['SUBSCRIBED', 'UNSUBSCRIBED', 'NOT_SUBSCRIBED', 'PENDING', 'REDACTED']\n  },\n  [FilterProperty.CUSTOMER_RFM_RECENCY]: {\n    type: FilterPropertyType.LIST,\n    category: FilterPropertyCategory.CUSTOMERS,\n    options: [1, 2, 3, 4, 5]\n  },\n  [FilterProperty.CUSTOMER_RFM_FREQUENCY]: {\n    type: FilterPropertyType.LIST,\n    category: FilterPropertyCategory.CUSTOMERS,\n    options: [1, 2, 3, 4, 5]\n  },\n  [FilterProperty.CUSTOMER_RFM_MONETARY]: {\n    type: FilterPropertyType.LIST,\n    category: FilterPropertyCategory.CUSTOMERS,\n    options: [1, 2, 3, 4, 5]\n  },\n  [FilterProperty.ATTRIBUTION_SOURCE]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.ATTRIBUTION,\n    isAutoComplete: true,\n  },\n  [FilterProperty.ATTRIBUTION_CHANNEL]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.ATTRIBUTION,\n  },\n  [FilterProperty.ATTRIBUTION_REFERRING_SITE]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.ATTRIBUTION,\n    isAutoComplete: true,\n  },\n  [FilterProperty.ATTRIBUTION_AD_ACCOUNT]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.ATTRIBUTION,\n    isAutoComplete: true,\n  },\n  [FilterProperty.ATTRIBUTION_ADS_CAMPAIGN_NAME]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.ATTRIBUTION,\n    isAutoComplete: true,\n  },\n  [FilterProperty.ATTRIBUTION_ADS_CAMPAIGN_ID]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.ATTRIBUTION,\n    isAutoComplete: true,\n  },\n  [FilterProperty.ATTRIBUTION_ADS_ADSET_NAME]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.ATTRIBUTION,\n    isAutoComplete: true,\n  },\n  [FilterProperty.ATTRIBUTION_ADS_ADSET_ID]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.ATTRIBUTION,\n    isAutoComplete: true,\n  },\n  [FilterProperty.ATTRIBUTION_ADS_AD_NAME]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.ATTRIBUTION,\n    isAutoComplete: true,\n  },\n  [FilterProperty.ATTRIBUTION_ADS_AD_ID]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.ATTRIBUTION,\n    isAutoComplete: true,\n  },\n  [FilterProperty.ATTRIBUTION_EMAIL_SMS_CAMPAIGN_NAME]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.ATTRIBUTION,\n  },\n  [FilterProperty.ATTRIBUTION_ROAS]: {\n    type: FilterPropertyType.NUMBER,\n    category: FilterPropertyCategory.ATTRIBUTION,\n  },\n  [FilterProperty.ATTRIBUTION_PIXEL_ROAS]: {\n    type: FilterPropertyType.NUMBER,\n    category: FilterPropertyCategory.ATTRIBUTION,\n  },\n  [FilterProperty.ATTRIBUTION_CPC]: {\n    type: FilterPropertyType.NUMBER,\n    category: FilterPropertyCategory.ATTRIBUTION,\n  },\n  [FilterProperty.ATTRIBUTION_CPM]: {\n    type: FilterPropertyType.NUMBER,\n    category: FilterPropertyCategory.ATTRIBUTION,\n  },\n  [FilterProperty.ATTRIBUTION_AD_SPEND]: {\n    type: FilterPropertyType.NUMBER,\n    category: FilterPropertyCategory.ATTRIBUTION,\n  },\n  [FilterProperty.ATTRIBUTION_IMPRESSIONS]: {\n    type: FilterPropertyType.NUMBER,\n    category: FilterPropertyCategory.ATTRIBUTION,\n  },\n  [FilterProperty.ATTRIBUTION_URL_PATH]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.ATTRIBUTION,\n  },\n  [FilterProperty.SUBSCRIPTION_STATUS]: {\n    type: FilterPropertyType.STRING,\n    category: FilterPropertyCategory.SUBSCRIPTIONS,\n  },\n}",
        "type": "Record<FilterProperty, { \n  type: FilterPropertyType,\n  category: FilterPropertyCategory,\n  isAutoComplete?: boolean\n  options?: (string | number)[]\n}>"
      }
    ]
  },
  {
    "file": "@tw/types/services/insights/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/services/insights/productAnalytics.ts",
    "exports": [
      {
        "name": " ProductAnalyticsParams",
        "text": "\n\nexport type ProductAnalyticsParams = {\n  shopId: string;\n  startDate: string;\n  endDate: string;\n  includeFreeProducts: boolean;\n  includeOnlyActiveProducts: boolean;\n  page: number;\n  limit?: number;\n  sortBy: string;\n  sortDirection: 'asc' | 'desc';\n  groupBy:\n  | FilterProperty.PRODUCT_ID\n  | FilterProperty.PRODUCT_VARIANT_ID\n  granularity: 'month' | 'week' | 'day' | 'hour';\n  searchTerm?: string;\n  productId?: string;\n  filters: InsightsFilterQuery[];\n}",
        "type": "{\n  shopId: string;\n  startDate: string;\n  endDate: string;\n  includeFreeProducts: boolean;\n  includeOnlyActiveProducts: boolean;\n  page: number;\n  limit?: number;\n  sortBy: string;\n  sortDirection: 'asc' | 'desc';\n  groupBy:\n  | FilterProperty.PRODUCT_ID\n  | FilterProperty.PRODUCT_VARIANT_ID\n  granularity: 'month' | 'week' | 'day' | 'hour';\n  searchTerm?: string;\n  productId?: string;\n  filters: InsightsFilterQuery[];\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/insights/productJourney.ts",
    "exports": [
      {
        "name": " ProductJourneyParans",
        "text": "\n\nexport type ProductJourneyParans = {\n  shopId: string;\n  startDate: string;\n  endDate: string;\n  filters?: InsightsFilterQuery[];\n  CDPSegmentId?: string;\n  top: number;\n  limit?: number;\n  searchTerm?: string;\n};",
        "type": "{\n  shopId: string;\n  startDate: string;\n  endDate: string;\n  filters?: InsightsFilterQuery[];\n  CDPSegmentId?: string;\n  top: number;\n  limit?: number;\n  searchTerm?: string;\n}"
      },
      {
        "name": " ProductJourneyItem",
        "text": "\n\nexport type ProductJourneyItem = {\n  id: string;\n  name: string;\n  topItems: ProductJourneyItem[];\n  totalOrders: number;\n  totalNextOrders: number;\n};",
        "type": "{\n  id: string;\n  name: string;\n  topItems: ProductJourneyItem[];\n  totalOrders: number;\n  totalNextOrders: number;\n}"
      },
      {
        "name": " ProductJourneyData",
        "text": "\n\nexport type ProductJourneyData = {\n  products: ProductJourneyItem[]\n};",
        "type": "{\n  products: ProductJourneyItem[]\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/insights/salesCycle.ts",
    "exports": [
      {
        "name": " TimeBetweenPurchasesParams",
        "text": "\n\nexport type TimeBetweenPurchasesParams = {\n  shopId: string;\n  startDate: string;\n  endDate: string;\n  filters?: InsightsFilterQuery[];\n  includeReturns?: boolean;\n  limit?: number;\n  CDPSegmentId?: string;\n};",
        "type": "{\n  shopId: string;\n  startDate: string;\n  endDate: string;\n  filters?: InsightsFilterQuery[];\n  includeReturns?: boolean;\n  limit?: number;\n  CDPSegmentId?: string;\n}"
      },
      {
        "name": " TimeBetweenPurchases",
        "text": "\n\nexport type TimeBetweenPurchases = {\n  days: number;\n  totalOrders: number;\n};",
        "type": "{\n  days: number;\n  totalOrders: number;\n}"
      },
      {
        "name": " TimeBetweenPurchasesResponse",
        "text": "\n\nexport type TimeBetweenPurchasesResponse = {\n  secondOrder: TimeBetweenPurchases[],\n  thirdOrder: TimeBetweenPurchases[],\n  fourthOrder: TimeBetweenPurchases[]\n};",
        "type": "{\n  secondOrder: TimeBetweenPurchases[],\n  thirdOrder: TimeBetweenPurchases[],\n  fourthOrder: TimeBetweenPurchases[]\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/job-manager/dto/CreateJobRequest.ts",
    "exports": [
      {
        "name": " CreateJobRequest",
        "text": "\n\nexport declare type CreateJobRequest = {\n  shopDomain: string;\n  serviceId: ServicesIds;\n  jobType: JobType;\n  dataType?: DataTypesIds;\n  day?: string;\n  total?: number;\n  forceExternalFetch?: boolean;\n  checkBefore?: boolean;\n  resetDataBefore?: boolean;\n  force?: boolean;\n  accountIds?: string[];\n  resetShopServices?: boolean;\n  healthCheckType?: HealthCheckType;\n  fromTrends?: boolean;\n};",
        "type": "{\n  shopDomain: string;\n  serviceId: ServicesIds;\n  jobType: JobType;\n  dataType?: DataTypesIds;\n  day?: string;\n  total?: number;\n  forceExternalFetch?: boolean;\n  checkBefore?: boolean;\n  resetDataBefore?: boolean;\n  force?: boolean;\n  accountIds?: string[];\n  resetShopServices?: boolean;\n  healthCheckType?: HealthCheckType;\n  fromTrends?: boolean;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/job-manager/dto/IntegrationCreateJobRequest.ts",
    "exports": [
      {
        "name": " IntegrationCreateJobRequest",
        "text": "\n\nexport declare type IntegrationCreateJobRequest = Partial<SingleIntegrationJob> & {\n  day?: string;\n  checkBefore?: boolean;\n  resetDataBefore?: boolean;\n  force?: boolean;\n};",
        "type": "Partial<SingleIntegrationJob> & {\n  day?: string;\n  checkBefore?: boolean;\n  resetDataBefore?: boolean;\n  force?: boolean;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/job-manager/dto/IntegrationUpdateTodayRequest.ts",
    "exports": [
      {
        "name": " IntegrationUpdateTodayRequest",
        "text": "\n\nexport declare type IntegrationUpdateTodayRequest = {\n  serviceId: ServicesIds;\n  accountId: string;\n  subAccountIds?: string[];\n};",
        "type": "{\n  serviceId: ServicesIds;\n  accountId: string;\n  subAccountIds?: string[];\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/job-manager/dto/RestartJobRequest.ts",
    "exports": [
      {
        "name": " RestartJobRequest",
        "text": "export declare type RestartJobRequest = {\n  jobID: string;\n};",
        "type": "{\n  jobID: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/job-manager/dto/UpdateTodayRequest.ts",
    "exports": [
      {
        "name": " UpdateTodayRequest",
        "text": "\n\nexport declare type UpdateTodayRequest = {\n  shopDomain: string;\n  serviceId: ServicesIds;\n  accountIds?: string[];\n};",
        "type": "{\n  shopDomain: string;\n  serviceId: ServicesIds;\n  accountIds?: string[];\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/job-manager/dto/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/services/job-manager/entities/IntegrationJob.ts",
    "exports": [
      {
        "name": " IntegrationJob",
        "text": "\n\nexport type IntegrationJob = {\n  serviceId: ServicesIds;\n  accountId: string;\n  type: JobType;\n  status: JobStatus;\n};",
        "type": "{\n  serviceId: ServicesIds;\n  accountId: string;\n  type: JobType;\n  status: JobStatus;\n}"
      },
      {
        "name": " SingleIntegrationJob",
        "text": "\n\nexport type SingleIntegrationJob = {\n  id: string;\n  serviceId: ServicesIds;\n  dataType: DataTypesIds;\n  jobType: JobType;\n  accountId: string;\n  subAccountIds: string[];\n  currentIndex: number;\n  total: number;\n  status: JobStatus;\n  startDay: string;\n  successful: boolean;\n  createdAt: string;\n  updatedAt: string;\n  finishedAt: string;\n  requestCancel: boolean;\n  forceExternalFetch?: boolean;\n};",
        "type": "{\n  id: string;\n  serviceId: ServicesIds;\n  dataType: DataTypesIds;\n  jobType: JobType;\n  accountId: string;\n  subAccountIds: string[];\n  currentIndex: number;\n  total: number;\n  status: JobStatus;\n  startDay: string;\n  successful: boolean;\n  createdAt: string;\n  updatedAt: string;\n  finishedAt: string;\n  requestCancel: boolean;\n  forceExternalFetch?: boolean;\n}"
      },
      {
        "name": " IntegrationJobResponse",
        "text": "\n\nexport type IntegrationJobResponse = SingleIntegrationJob[];",
        "type": "SingleIntegrationJob[]"
      }
    ]
  },
  {
    "file": "@tw/types/services/job-manager/entities/Job.ts",
    "exports": [
      {
        "name": " JobStatus",
        "text": "\n\nexport type JobStatus = 'in_progress' | 'done' | 'queued';",
        "type": "'in_progress' | 'done' | 'queued'"
      },
      {
        "name": " AllJobsStatus",
        "text": "\n// export declare type JobType = 'initial' | 'updateToday' | 'updateWeek';\n\n// export type AllJobTypes = {\n//   [type in JobType]: type;\n// };\n\n// export const JobTypes: AllJobTypes = {\n//   initial: 'initial',\n//   updateToday: 'updateToday',\n//   updateWeek: 'updateWeek',\n// };\n\nexport type AllJobsStatus = {\n  [status in JobStatus]: status;\n};",
        "type": "{\n  [status in JobStatus]: status;\n}"
      },
      {
        "name": " JobStatuses",
        "text": "\n\nexport const JobStatuses: AllJobsStatus = {\n  in_progress: 'in_progress',\n  done: 'done',\n  queued: 'queued',\n};",
        "type": "AllJobsStatus"
      },
      {
        "name": " Job",
        "text": "\n\nexport type Job = {\n  service_id: ServicesIds;\n  type: JobType;\n  status: JobStatus;\n};",
        "type": "{\n  service_id: ServicesIds;\n  type: JobType;\n  status: JobStatus;\n}"
      },
      {
        "name": " SingleJob",
        "text": "\n\nexport type SingleJob = {\n  id: string;\n  serviceId: ServicesIds;\n  dataType: DataTypesIds;\n  jobType: JobType;\n  shopDomain: string;\n  currentIndex: number;\n  total: number;\n  status: JobStatus;\n  startDay: string;\n  successful: boolean;\n  createdAt: string;\n  updatedAt: string;\n  finishedAt: string;\n  requestCancel: boolean;\n  forceExternalFetch?: boolean;\n};",
        "type": "{\n  id: string;\n  serviceId: ServicesIds;\n  dataType: DataTypesIds;\n  jobType: JobType;\n  shopDomain: string;\n  currentIndex: number;\n  total: number;\n  status: JobStatus;\n  startDay: string;\n  successful: boolean;\n  createdAt: string;\n  updatedAt: string;\n  finishedAt: string;\n  requestCancel: boolean;\n  forceExternalFetch?: boolean;\n}"
      },
      {
        "name": " JobResponse",
        "text": "\n\nexport type JobResponse = SingleJob[];",
        "type": "SingleJob[]"
      }
    ]
  },
  {
    "file": "@tw/types/services/job-manager/entities/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/services/job-manager/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/services/queue-manager/cancelTaskRequest.ts",
    "exports": [
      {
        "name": " QMCancelTaskRequest",
        "text": "\n\nexport type QMCancelTaskRequest = {\n  accountId?: string;\n  endpoints?: string[];\n  jobType?: JobType;\n  jobId?: string;\n  groupId?: string;\n  pendingRedisKeys?: string[];\n  pendingRedisKeyPrefix?: string;\n};",
        "type": "{\n  accountId?: string;\n  endpoints?: string[];\n  jobType?: JobType;\n  jobId?: string;\n  groupId?: string;\n  pendingRedisKeys?: string[];\n  pendingRedisKeyPrefix?: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/queue-manager/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/services/subscription-manager/dto/cancelSubscriptionRequest.ts",
    "exports": [
      {
        "name": " cancelSubscriptionRequest",
        "text": "export declare type cancelSubscriptionRequest = {\n  primaryCancelReason?: string; //reason selected from primary dropdown list for cancel\n  secondaryCancelReason?: string; //reason selected secondary from dropdown list for cancel\n  shopNotes?: string; //whatever additional notes CS wants to add\n  numInvoiceRefund?: number; //number of invoices to refund - this is not implemented yet, maybe needs a separate endpoint\n  isCancelNow?:boolean; //cancel now, if not - cancel at the end of the period (billing cycle)\n};",
        "type": "{\n  primaryCancelReason?: string; //reason selected from primary dropdown list for cancel\n  secondaryCancelReason?: string; //reason selected secondary from dropdown list for cancel\n  shopNotes?: string; //whatever additional notes CS wants to add\n  numInvoiceRefund?: number; //number of invoices to refund - this is not implemented yet, maybe needs a separate endpoint\n  isCancelNow?:boolean; //cancel now, if not - cancel at the end of the period (billing cycle)\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/subscription-manager/dto/createHubSpotRequest.ts",
    "exports": [
      {
        "name": " createHubSpotRequest",
        "text": "\n\nexport declare type createHubSpotRequest = {\n  email: string;\n  shopDomain?: string;\n  firstName?: string;\n  lastName?: string;\n  referrer?: string;\n  phone?: string;\n  accountType?: 'AGENCY' | 'BRAND';\n  plans?: string[];\n  revenue?: string;\n  agencyUrl?: string;\n  shopCount?: number;\n  source?: 'INVITATION' | 'SIGNUP';\n  agencyName?: string;\n  contractType?: subscriptionType;\n};",
        "type": "{\n  email: string;\n  shopDomain?: string;\n  firstName?: string;\n  lastName?: string;\n  referrer?: string;\n  phone?: string;\n  accountType?: 'AGENCY' | 'BRAND';\n  plans?: string[];\n  revenue?: string;\n  agencyUrl?: string;\n  shopCount?: number;\n  source?: 'INVITATION' | 'SIGNUP';\n  agencyName?: string;\n  contractType?: subscriptionType;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/subscription-manager/dto/createSubscriptionRequest.ts",
    "exports": [
      {
        "name": " KeyValueObj",
        "text": "\n\nexport declare type KeyValueObj = { key: string; value: string };",
        "type": "{ key: string; value: string }"
      },
      {
        "name": " createSubscriptionRequest",
        "text": "\n\nexport declare type createSubscriptionRequest = {\n  email?: string;\n  firstName?: string;\n  lastName?: string;\n  accountType?: string;\n  shopDomain: string;\n  metadata?: KeyValueObj[];\n  prices?: string[];\n  paymentMethodId?: string | Stripe.PaymentMethod;\n  customerId?: string;\n  promotionId?: string;\n  revenueId?: Number;\n  shopNotes?: string;\n  contractEndDate?: string | Date;\n  contractType?: subscriptionType;\n  collectionMethod?: 'charge_automatically' | 'send_invoice';\n  _3_0?: number;\n};",
        "type": "{\n  email?: string;\n  firstName?: string;\n  lastName?: string;\n  accountType?: string;\n  shopDomain: string;\n  metadata?: KeyValueObj[];\n  prices?: string[];\n  paymentMethodId?: string | Stripe.PaymentMethod;\n  customerId?: string;\n  promotionId?: string;\n  revenueId?: Number;\n  shopNotes?: string;\n  contractEndDate?: string | Date;\n  contractType?: subscriptionType;\n  collectionMethod?: 'charge_automatically' | 'send_invoice';\n  _3_0?: number;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/subscription-manager/dto/createSubscriptionsAgencyRequest.ts",
    "exports": [
      {
        "name": " createSubscriptionsAgencyRequest",
        "text": "\n\nexport declare type createSubscriptionsAgencyRequest = {\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  accountType?: string;\n  metadata?: KeyValueObj[];\n  subscriptions: shopRequest[];\n  paymentMethodId: string | Stripe.PaymentMethod;\n  customerId?: string;\n  promotionId?: string;\n};",
        "type": "{\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  accountType?: string;\n  metadata?: KeyValueObj[];\n  subscriptions: shopRequest[];\n  paymentMethodId: string | Stripe.PaymentMethod;\n  customerId?: string;\n  promotionId?: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/subscription-manager/dto/generatePromotionCodeRequest.ts",
    "exports": [
      {
        "name": " generatePromotionCodeRequest",
        "text": "export declare type generatePromotionCodeRequest = {\n  coupon: string;\n  code?: string;\n  max_redemptions?: number;\n  expires_at?: number;\n};",
        "type": "{\n  coupon: string;\n  code?: string;\n  max_redemptions?: number;\n  expires_at?: number;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/subscription-manager/dto/getByShopDomain.ts",
    "exports": [
      {
        "name": " getByShopDomain",
        "text": "export declare type getByShopDomain = {\n  shopDomain: string;\n};",
        "type": "{\n  shopDomain: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/subscription-manager/dto/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/services/subscription-manager/dto/onboardingResponse.ts",
    "exports": [
      {
        "name": " onboardingResponse",
        "text": "\n\nexport declare type onboardingResponse = {\n  shop: string;\n  user: string;\n  completePercentage: number;\n  completeCount: number;\n  taskCount: number;\n  recomendedTasks: onboardingTaskInfo[];\n  criticalTasks: onboardingTaskInfo[];\n};",
        "type": "{\n  shop: string;\n  user: string;\n  completePercentage: number;\n  completeCount: number;\n  taskCount: number;\n  recomendedTasks: onboardingTaskInfo[];\n  criticalTasks: onboardingTaskInfo[];\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/subscription-manager/dto/onboardingTask.ts",
    "exports": [
      {
        "type": "enum",
        "name": " TASK_TYPE",
        "text": "\n\nexport enum TASK_TYPE {\n  CRITICAL = \"CRITICAL\",\n  RECOMENDED = \"RECOMENDED\",\n}"
      },
      {
        "type": "enum",
        "name": " TASK_LEVEL",
        "text": "\n\nexport enum TASK_LEVEL {\n  SHOP = \"SHOP\",\n  USER = \"USER\",\n  SHOP_USER = \"SHOP_USER\",\n}"
      },
      {
        "type": "enum",
        "name": " TASK_STATUS",
        "text": "\n\nexport enum TASK_STATUS {\n  COMPLETE = \"Complete\",\n  UNCOMPLETE = \"Uncomplete\",\n  UNKNOWN = \"Unknown\",\n}"
      },
      {
        "name": " onboardingTask",
        "text": "\n\nexport declare type onboardingTask = {\n  id: string;\n  name: string;\n  description: string;\n  order: number;\n  type: TASK_TYPE;\n  completeText: string;\n  uncompleteText: string;\n  level: TASK_LEVEL;\n  action: string;\n  lockedByFeature?: SubscriptionFeature | FeatureFlag; // TODO: Deprecate - clean up shop docs with this field - no longer in use\n  lockedByFeatureFlag?: FeatureFlag;\n};",
        "type": "{\n  id: string;\n  name: string;\n  description: string;\n  order: number;\n  type: TASK_TYPE;\n  completeText: string;\n  uncompleteText: string;\n  level: TASK_LEVEL;\n  action: string;\n  lockedByFeature?: SubscriptionFeature | FeatureFlag; // TODO: Deprecate - clean up shop docs with this field - no longer in use\n  lockedByFeatureFlag?: FeatureFlag;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/subscription-manager/dto/onboardingTaskInfo.ts",
    "exports": [
      {
        "name": " onboardingTaskInfo",
        "text": "\n\nexport declare type onboardingTaskInfo = onboardingTask & {\n  status: TASK_STATUS;\n  statusText: string;\n  info?: any;\n  skipped?: boolean;\n};",
        "type": "onboardingTask & {\n  status: TASK_STATUS;\n  statusText: string;\n  info?: any;\n  skipped?: boolean;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/subscription-manager/dto/pauseSubscriptionRequest.ts",
    "exports": [
      {
        "name": " pauseSubscriptionRequest",
        "text": "export declare type pauseSubscriptionRequest = {\n  reason?: string; //reason selected from dropdown list for pause\n  shopNotes?: string; //whatever additional notes CS wants to add !!!! it overwrites current shop notes !!!\n  resumesAt?: Date; // date to re-enable invoice charging\n  explanation?: String; //explanation for pause\n};",
        "type": "{\n  reason?: string; //reason selected from dropdown list for pause\n  shopNotes?: string; //whatever additional notes CS wants to add !!!! it overwrites current shop notes !!!\n  resumesAt?: Date; // date to re-enable invoice charging\n  explanation?: String; //explanation for pause\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/subscription-manager/dto/priceInfo.ts",
    "exports": [
      {
        "name": " PriceInfo",
        "text": "export declare type PriceInfo = { price_id: string; price: number };",
        "type": "{ price_id: string; price: number }"
      }
    ]
  },
  {
    "file": "@tw/types/services/subscription-manager/dto/pricingOffer.ts",
    "exports": [
      {
        "name": " pricingOffer",
        "text": "\n\nexport declare type pricingOffer = {\n  user?: string;\n  creationDate?: Date;\n  expirationDate?: Date;\n  prices: { price_id: string; product_id: string }[];\n  revenue?: number;\n  coupon?: coupon;\n  promotionCode?: { id: string; code: string };\n  usedAt?: Date;\n};",
        "type": "{\n  user?: string;\n  creationDate?: Date;\n  expirationDate?: Date;\n  prices: { price_id: string; product_id: string }[];\n  revenue?: number;\n  coupon?: coupon;\n  promotionCode?: { id: string; code: string };\n  usedAt?: Date;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/subscription-manager/dto/requiresActionNotification.ts",
    "exports": [
      {
        "name": " requiresActionNotification",
        "text": "export declare type requiresActionNotification = {\n  requires_action: boolean;\n  payment_intent_client_secret: string;\n  shop_domain: string;\n};",
        "type": "{\n  requires_action: boolean;\n  payment_intent_client_secret: string;\n  shop_domain: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/subscription-manager/dto/stipeData.ts",
    "exports": [
      {
        "name": " StripeData",
        "text": "export declare type StripeData = {\n  store_url: string;\n  subscription_id: string;\n  subscription_status: string;\n  subscription_start_date: string;\n  triple_whale: string;\n  pixel: string;\n  creative_cockpit: string;\n  affluencer_hub: string;\n  triple_whale_price: number;\n  pixel_price: number;\n  creative_cockpit_price: number;\n  affluencer_hub_price: number;\n  total: number;\n  discount?: string;\n};",
        "type": "{\n  store_url: string;\n  subscription_id: string;\n  subscription_status: string;\n  subscription_start_date: string;\n  triple_whale: string;\n  pixel: string;\n  creative_cockpit: string;\n  affluencer_hub: string;\n  triple_whale_price: number;\n  pixel_price: number;\n  creative_cockpit_price: number;\n  affluencer_hub_price: number;\n  total: number;\n  discount?: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/subscription-manager/dto/updateSubscriptionRequest.ts",
    "exports": [
      {
        "name": " updateSubscriptionRequest",
        "text": "\n\nexport declare type updateSubscriptionRequest = {\n  subscribe: string[];\n  unsubscribe: string[];\n  coupon?: string;\n  promotionCodeId?: string;\n  revenueId?: number;\n  paymentMethodId?: string | Stripe.PaymentMethod;\n  shopNotes?: string;\n  offerRedemption?: boolean;\n  cancelAtPeriodEnd?: boolean;\n  contractEndDate?: string | Date;\n  contractType?: subscriptionType;\n};",
        "type": "{\n  subscribe: string[];\n  unsubscribe: string[];\n  coupon?: string;\n  promotionCodeId?: string;\n  revenueId?: number;\n  paymentMethodId?: string | Stripe.PaymentMethod;\n  shopNotes?: string;\n  offerRedemption?: boolean;\n  cancelAtPeriodEnd?: boolean;\n  contractEndDate?: string | Date;\n  contractType?: subscriptionType;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/subscription-manager/entities/billingInterval.ts",
    "exports": [
      {
        "name": " BillingInterval",
        "text": "export declare type BillingInterval = \"month\" | \"year\";",
        "type": "\"month\" | \"year\""
      }
    ]
  },
  {
    "file": "@tw/types/services/subscription-manager/entities/coupon.ts",
    "exports": [
      {
        "name": " coupon",
        "text": "export declare type coupon = {\n  id: string;\n  name: string;\n  amount_off: string | number | null;\n  percent_off: number;\n};",
        "type": "{\n  id: string;\n  name: string;\n  amount_off: string | number | null;\n  percent_off: number;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/subscription-manager/entities/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/services/subscription-manager/entities/shopRequest.ts",
    "exports": [
      {
        "name": " shopRequest",
        "text": "\n\nexport declare type shopRequest = {\n  shopDomain: string;\n  prices: string[];\n  revenueId?: Number;\n  shopNotes?: string;\n  subscriptionType?: subscriptionType;\n};",
        "type": "{\n  shopDomain: string;\n  prices: string[];\n  revenueId?: Number;\n  shopNotes?: string;\n  subscriptionType?: subscriptionType;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/subscription-manager/entities/subscription.ts",
    "exports": [
      {
        "name": " subscription",
        "text": "\n\nexport declare type subscription = {\n  subscription: string;\n  shop: string;\n  customer: string;\n  email: string;\n  status: string;\n  revenue: number;\n  last_four: string;\n  payment_method: string;\n  card_brand: string;\n  notes: string;\n  cancel_reason: string | null;\n  cancel_at_period_end: boolean;\n  pause_collection_behavior: string;\n  pause_collection_resumes_at: Date;\n  items: subscriptionItem[];\n  features: string[];\n  coupon: coupon | null;\n  promotion_code: string | null;\n  full_price: number;\n  total_price: number;\n  billing_cycle: string;\n  old_revenue: number | null;\n  created_at: string;\n  current_period_start: string;\n  current_period_end: string;\n  pause_reason: string | null;\n  origin: string | null;\n  uncapped: boolean;\n  uncapped_until: string | null;\n  uncapped_tier: string | null;\n  contract_end_date?: string | Date;\n  contract_type?: subscriptionType;\n  collection_method?: 'charge_automatically' | 'send_invoice';\n};",
        "type": "{\n  subscription: string;\n  shop: string;\n  customer: string;\n  email: string;\n  status: string;\n  revenue: number;\n  last_four: string;\n  payment_method: string;\n  card_brand: string;\n  notes: string;\n  cancel_reason: string | null;\n  cancel_at_period_end: boolean;\n  pause_collection_behavior: string;\n  pause_collection_resumes_at: Date;\n  items: subscriptionItem[];\n  features: string[];\n  coupon: coupon | null;\n  promotion_code: string | null;\n  full_price: number;\n  total_price: number;\n  billing_cycle: string;\n  old_revenue: number | null;\n  created_at: string;\n  current_period_start: string;\n  current_period_end: string;\n  pause_reason: string | null;\n  origin: string | null;\n  uncapped: boolean;\n  uncapped_until: string | null;\n  uncapped_tier: string | null;\n  contract_end_date?: string | Date;\n  contract_type?: subscriptionType;\n  collection_method?: 'charge_automatically' | 'send_invoice';\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/subscription-manager/entities/subscriptionItem.ts",
    "exports": [
      {
        "name": " subscriptionItem",
        "text": "\n\nexport declare type subscriptionItem = {\n  subscription_item: string;\n  price: number;\n  description: string;\n  product_name: string;\n  product_id: string;\n  price_id: string;\n  early_birds: boolean;\n  plan_preview_start_date?: string;\n  plan_preview_end_date?: string;\n  billing_interval?: BillingInterval;\n};",
        "type": "{\n  subscription_item: string;\n  price: number;\n  description: string;\n  product_name: string;\n  product_id: string;\n  price_id: string;\n  early_birds: boolean;\n  plan_preview_start_date?: string;\n  plan_preview_end_date?: string;\n  billing_interval?: BillingInterval;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/subscription-manager/entities/subscriptionPlan.ts",
    "exports": [
      {
        "name": " SubscriptionPlanType",
        "text": "\n\nexport type SubscriptionPlanType = 'package' | 'addon';",
        "type": "'package' | 'addon'"
      },
      {
        "name": " subscriptionPlan",
        "text": "\n\nexport declare type subscriptionPlan = {\n  price_id: string;\n  description: string;\n  price: string;\n  revenue_name: string;\n  revenue_id: number;\n  early_birds: boolean;\n  for_sale: boolean;\n  product_id: string;\n  product_sort: number;\n  product_name: string;\n  product_description: string;\n  product_flag: SubscriptionFeature;\n  dependencies: string[];\n  billing_interval: BillingInterval | null;\n  product_type?: SubscriptionPlanType | null;\n  product_msp: SalesPlatform | null;\n  type?: string;\n  interval_count: number;\n  features?: SubscriptionFeature[];\n  product_alpha?: boolean;\n  tw_free?: boolean;\n  plan_preview?: boolean;\n  contract_type?: subscriptionType;\n};",
        "type": "{\n  price_id: string;\n  description: string;\n  price: string;\n  revenue_name: string;\n  revenue_id: number;\n  early_birds: boolean;\n  for_sale: boolean;\n  product_id: string;\n  product_sort: number;\n  product_name: string;\n  product_description: string;\n  product_flag: SubscriptionFeature;\n  dependencies: string[];\n  billing_interval: BillingInterval | null;\n  product_type?: SubscriptionPlanType | null;\n  product_msp: SalesPlatform | null;\n  type?: string;\n  interval_count: number;\n  features?: SubscriptionFeature[];\n  product_alpha?: boolean;\n  tw_free?: boolean;\n  plan_preview?: boolean;\n  contract_type?: subscriptionType;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/subscription-manager/entities/subscriptionRevenue.ts",
    "exports": [
      {
        "name": " subscriptionRevenue",
        "text": "export declare type subscriptionRevenue = {\n    id: number;\n    min: number;\n    max: number;\n    name:string;\n    description:string;\n}",
        "type": "{\n    id: number;\n    min: number;\n    max: number;\n    name:string;\n    description:string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/subscription-manager/entities/subscriptionType.ts",
    "exports": [
      {
        "type": "enum",
        "name": " subscriptionTypes",
        "text": "export enum subscriptionTypes {\n  '12 Month Contract' = '12 Month Contract',\n  Annual = 'Annual',\n  Monthly = 'Monthly',\n  Free = 'Free',\n  Quarterly = 'Quarterly',\n  Biennial = 'Biennial',\n}"
      },
      {
        "name": " subscriptionType",
        "text": "\n\nexport declare type subscriptionType = keyof typeof subscriptionTypes;",
        "type": "keyof typeof subscriptionTypes"
      }
    ]
  },
  {
    "file": "@tw/types/services/subscription-manager/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/services/users/app-request.ts",
    "exports": [
      {
        "name": " CreateAppRequest",
        "text": "\n\nexport declare type CreateAppRequest = {\n  name: string;\n  email: string;\n  company: string;\n  phone: string;\n  logoUrl: string;\n  tosUrl?: string;\n  policyUrl?: string;\n  appUrl: string;\n  purpose: string;\n  redirectUrls: string[];\n  scopes: SupportedScopes[];\n};",
        "type": "{\n  name: string;\n  email: string;\n  company: string;\n  phone: string;\n  logoUrl: string;\n  tosUrl?: string;\n  policyUrl?: string;\n  appUrl: string;\n  purpose: string;\n  redirectUrls: string[];\n  scopes: SupportedScopes[];\n}"
      },
      {
        "name": " AppRequest",
        "text": "\n\nexport declare type AppRequest = CreateAppRequest & {\n  _id: string;\n  status: AppRequestStatus;\n  handledAt: Date;\n  createdAt?: Date;\n  updatedAt?: Date;\n  statusActionReason: string;\n};",
        "type": "CreateAppRequest & {\n  _id: string;\n  status: AppRequestStatus;\n  handledAt: Date;\n  createdAt?: Date;\n  updatedAt?: Date;\n  statusActionReason: string;\n}"
      },
      {
        "type": "enum",
        "name": " AppRequestStatus",
        "text": "\n\nexport enum AppRequestStatus {\n  PENDING_REVIEW = 'pending_review',\n  APPROVED = 'approved',\n  DECLINED = 'declined',\n}"
      }
    ]
  },
  {
    "file": "@tw/types/services/users/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/services/users/oauth.ts",
    "exports": [
      {
        "name": " RequestWithUser",
        "text": "\n\nexport type RequestWithUser = Request & { user: FirebaseUser | HydraApp | undefined };",
        "type": "Request & { user: FirebaseUser | HydraApp | undefined }"
      },
      {
        "type": "enum",
        "name": " ConsentSubmitType",
        "text": "\n\nexport enum ConsentSubmitType {\n  Accept,\n  Deny,\n}"
      },
      {
        "name": " RequestBodyWithUser",
        "text": "\n\nexport declare type RequestBodyWithUser<Body> = {\n  body: Body;\n} & RequestWithUser;",
        "type": "{\n  body: Body;\n} & RequestWithUser"
      },
      {
        "name": " RequestNoSecurity",
        "text": "\n\nexport declare type RequestNoSecurity<Body> = {\n  body: Body;\n} & Request;",
        "type": "{\n  body: Body;\n} & Request"
      },
      {
        "type": "enum",
        "name": " SupportedScopes",
        "text": "\n\nexport enum SupportedScopes {\n  ADS_METRICS_READ = 'ads-metrics:read',\n  ADS_METRICS_WRITE = 'ads-metrics:write',\n  ATTRIBUTION_READ = 'attribution:read',\n}"
      },
      {
        "name": " Oauth2CreateUpdateClient",
        "text": "\n\nexport declare type Oauth2CreateUpdateClient = {\n  clientName: string;\n  clientUri: string;\n  tosUri?: string;\n  redirectUris: string[];\n  email?: string;\n  phone?: string;\n  scopes: SupportedScopes[];\n  policyUri?: string;\n  logoUri: string;\n};",
        "type": "{\n  clientName: string;\n  clientUri: string;\n  tosUri?: string;\n  redirectUris: string[];\n  email?: string;\n  phone?: string;\n  scopes: SupportedScopes[];\n  policyUri?: string;\n  logoUri: string;\n}"
      },
      {
        "name": " OauthRequest",
        "text": "\n\nexport declare type OauthRequest<Body> = {\n  body: Body;\n} & RequestWithUser;",
        "type": "{\n  body: Body;\n} & RequestWithUser"
      },
      {
        "name": " Oauth2GetClientFilter",
        "text": "\n\nexport declare type Oauth2GetClientFilter = {\n  limit?: number;\n  clientName: string;\n} & RequestWithUser;",
        "type": "{\n  limit?: number;\n  clientName: string;\n} & RequestWithUser"
      },
      {
        "name": " Oauth2ConsentAccept",
        "text": "\n\nexport declare type Oauth2ConsentAccept = {\n  scopes?: string[];\n  shopId?: string;\n  type?: ConsentSubmitType;\n  error?: string;\n  error_description?: string;\n  clientId?: string;\n  clientName?: string;\n};",
        "type": "{\n  scopes?: string[];\n  shopId?: string;\n  type?: ConsentSubmitType;\n  error?: string;\n  error_description?: string;\n  clientId?: string;\n  clientName?: string;\n}"
      },
      {
        "name": " scopesCopy",
        "text": "\n\nexport const scopesCopy = (clientName): { [key in SupportedScopes]: string } => ({\n  [SupportedScopes.ADS_METRICS_WRITE]: `Access metrics data in ${clientName} and display it in Triple Whale`,\n  [SupportedScopes.ADS_METRICS_READ]: `Send metrics data to ${clientName} from your Triple Whale account`,\n  [SupportedScopes.ATTRIBUTION_READ]: `Send attribution data to ${clientName} from your Triple Whale account`,\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/types/sonic/clickhouse.ts",
    "exports": [
      {
        "name": " ClickhouseColumnTypes",
        "text": "export type ClickhouseColumnTypes =\n  | ClickhouseColumnBaseTypes\n  | `LowCardinality(${ClickhouseColumnBaseTypes})`\n  | `DateTime64(${1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9})`\n  | `Tuple(${string})`;",
        "type": "| ClickhouseColumnBaseTypes\n  | `LowCardinality(${ClickhouseColumnBaseTypes})`\n  | `DateTime64(${1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9})`\n  | `Tuple(${string})`"
      },
      {
        "name": " ClickhouseTableColumn",
        "text": "\n\nexport interface ClickhouseTableColumn {\n  comment?: string;\n  name: string;\n  type: string;\n}",
        "type": "interface"
      },
      {
        "name": " ClickhouseTableIndex",
        "text": "\n\nexport interface ClickhouseTableIndex {\n  expression: string;\n  granularity?: number;\n  name: string;\n  type: string;\n}",
        "type": "interface"
      },
      {
        "name": " ClickHouseTableColumn",
        "text": "\n\nexport interface ClickHouseTableColumn {\n  comment?: string;\n  defaultExpression?: string;\n  defaultKind?: string;\n  name: string;\n  type: string;\n}",
        "type": "interface"
      },
      {
        "name": " ClickhouseBaseColumn",
        "text": "\n\nexport type ClickhouseBaseColumn = Omit<ClickHouseTableColumn, 'defaultKind'> & {\n  nullable?: boolean;\n  array?: boolean;\n  pii?: boolean;\n  sii?: boolean;\n  defaultKind?: 'DEFAULT' | 'MATERIALIZED' | 'EPHEMERAL' | 'ALIAS';\n};",
        "type": "Omit<ClickHouseTableColumn, 'defaultKind'> & {\n  nullable?: boolean;\n  array?: boolean;\n  pii?: boolean;\n  sii?: boolean;\n  defaultKind?: 'DEFAULT' | 'MATERIALIZED' | 'EPHEMERAL' | 'ALIAS';\n}"
      },
      {
        "name": " ClickhouseStandardColumn",
        "text": "\n\nexport type ClickhouseStandardColumn = Omit<ClickhouseBaseColumn, 'type'> & {\n  type: ClickhouseColumnTypes;\n};",
        "type": "Omit<ClickhouseBaseColumn, 'type'> & {\n  type: ClickhouseColumnTypes;\n}"
      },
      {
        "name": " ClickhouseNestedColumn",
        "text": "\n\nexport type ClickhouseNestedColumn = Omit<ClickhouseBaseColumn, 'type'> & {\n  type: 'Nested';\n  columns: ClickhouseColumn[];\n};",
        "type": "Omit<ClickhouseBaseColumn, 'type'> & {\n  type: 'Nested';\n  columns: ClickhouseColumn[];\n}"
      },
      {
        "name": " ClickhouseColumn",
        "text": "\n\nexport type ClickhouseColumn = ClickhouseStandardColumn | ClickhouseNestedColumn;",
        "type": "ClickhouseStandardColumn | ClickhouseNestedColumn"
      },
      {
        "name": " ClickhouseColumnUnnested",
        "text": "\n\nexport type ClickhouseColumnUnnested = Omit<ClickhouseColumn, 'type'> & {\n  type: string;\n};",
        "type": "Omit<ClickhouseColumn, 'type'> & {\n  type: string;\n}"
      },
      {
        "name": " indexTypes",
        "text": "\n\nexport type indexTypes = 'minmax' | 'set' | 'bloom_filter' | 'tokenbf_v1' | 'ngrambf_v1';",
        "type": "'minmax' | 'set' | 'bloom_filter' | 'tokenbf_v1' | 'ngrambf_v1'"
      },
      {
        "name": " ClickhouseIndex",
        "text": "\n\nexport type ClickhouseIndex = Omit<ClickhouseTableIndex, 'type'> & {\n  type: indexTypes;\n};",
        "type": "Omit<ClickhouseTableIndex, 'type'> & {\n  type: indexTypes;\n}"
      },
      {
        "name": " ClickhouseTableEngines",
        "text": "\n\nexport type ClickhouseTableEngines =\n  | 'MergeTree'\n  | 'ReplicatedMergeTree'\n  | 'Distributed'\n  | 'ReplacingMergeTree'\n  | 'Kafka'\n  | 'ReplicatedReplacingMergeTree'\n  | 'Null';",
        "type": "| 'MergeTree'\n  | 'ReplicatedMergeTree'\n  | 'Distributed'\n  | 'ReplacingMergeTree'\n  | 'Kafka'\n  | 'ReplicatedReplacingMergeTree'\n  | 'Null'"
      }
    ]
  },
  {
    "file": "@tw/types/sonic/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/types/AccountHealthReport.ts",
    "exports": [
      {
        "name": " AccountHealthReport",
        "text": "\n\nexport type AccountHealthReport = {\n  allAccounts: Record<string, Partial<MetricsTableDataWithCurrency>>;\n  errors: Record<string, any>;\n};",
        "type": "{\n  allAccounts: Record<string, Partial<MetricsTableDataWithCurrency>>;\n  errors: Record<string, any>;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/ActivityFeed.ts",
    "exports": [
      {
        "name": " Activity",
        "text": "\n\nexport type Activity = {\n  id: string;\n  activityKey?: string;\n  type: ActivityType;\n  date: Date;\n  shopId: string;\n  annotation: boolean;\n  serviceId: ServicesIds;\n  entity?: ActivityEntity;\n  accountId?: string;\n  entityId?: string;\n  entityName?: string;\n  field?: ActivityField;\n  from?: any;\n  to?: any;\n  title?: string;\n  description?: string;\n  source?: string;\n  author?: string;\n};",
        "type": "{\n  id: string;\n  activityKey?: string;\n  type: ActivityType;\n  date: Date;\n  shopId: string;\n  annotation: boolean;\n  serviceId: ServicesIds;\n  entity?: ActivityEntity;\n  accountId?: string;\n  entityId?: string;\n  entityName?: string;\n  field?: ActivityField;\n  from?: any;\n  to?: any;\n  title?: string;\n  description?: string;\n  source?: string;\n  author?: string;\n}"
      },
      {
        "name": " ActivityType",
        "text": "\n\nexport type ActivityType = 'create' | 'update' | 'delete' | 'sent';",
        "type": "'create' | 'update' | 'delete' | 'sent'"
      },
      {
        "name": " ActivityEntity",
        "text": "\n\nexport type ActivityEntity =\n  | 'order'\n  | 'product'\n  | 'variant'\n  | 'collection'\n  | 'theme'\n  | 'campaign'\n  | 'adset'\n  | 'ad'\n  | 'cdp_segment'\n  | 'sms_flow'\n  | 'email_flow'\n  | 'post_purchase_survey'\n  | 'integration'\n  | 'new_user'\n  | 'media';",
        "type": "| 'order'\n  | 'product'\n  | 'variant'\n  | 'collection'\n  | 'theme'\n  | 'campaign'\n  | 'adset'\n  | 'ad'\n  | 'cdp_segment'\n  | 'sms_flow'\n  | 'email_flow'\n  | 'post_purchase_survey'\n  | 'integration'\n  | 'new_user'\n  | 'media'"
      },
      {
        "name": " ActivityField",
        "text": "\n\nexport type ActivityField =\n  | 'status'\n  | 'name'\n  | 'daily_budget'\n  | 'sync_to_facebook'\n  | 'sync_to_klaviyo'\n  | 'lifetime_budget'\n  | 'bid_amount'\n  | 'inStock'\n  | 'price';",
        "type": "| 'status'\n  | 'name'\n  | 'daily_budget'\n  | 'sync_to_facebook'\n  | 'sync_to_klaviyo'\n  | 'lifetime_budget'\n  | 'bid_amount'\n  | 'inStock'\n  | 'price'"
      }
    ]
  },
  {
    "file": "@tw/types/types/AdMgmtAuditsRequest.ts",
    "exports": [
      {
        "name": " AdMgmtAuditLogsFilterOperator",
        "text": "\n\nexport type AdMgmtAuditLogsFilterOperator = 'contains' | 'not_contains' | 'equals' | 'not_equals';",
        "type": "'contains' | 'not_contains' | 'equals' | 'not_equals'"
      },
      {
        "name": " AdMgmtAuditLogsFilterOperands",
        "text": "\n\nexport type AdMgmtAuditLogsFilterOperands = 'entity' | 'name' | 'user' | 'status';",
        "type": "'entity' | 'name' | 'user' | 'status'"
      },
      {
        "name": " AdMgmtAuditLogsRequest",
        "text": "\n\nexport type AdMgmtAuditLogsRequest = {\n  segments?: FilterExpressions<AdMgmtAuditLogsFilterOperands, AdMgmtAuditLogsFilterOperator>[];\n  shop: string;\n  start: string;\n  end: string;\n};",
        "type": "{\n  segments?: FilterExpressions<AdMgmtAuditLogsFilterOperands, AdMgmtAuditLogsFilterOperator>[];\n  shop: string;\n  start: string;\n  end: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/AdProductHandle.ts",
    "exports": [
      {
        "name": " AdProductHandle",
        "text": "export type AdProductHandle = {\n  handle: string;\n  weight: number;\n};",
        "type": "{\n  handle: string;\n  weight: number;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/AdsSortBy.ts",
    "exports": [
      {
        "name": " AdsSortBy",
        "text": "\n\nexport type AdsSortBy = Pick<AnalyticsAttributes, 'name'> | MetricsKeys;",
        "type": "Pick<AnalyticsAttributes, 'name'> | MetricsKeys"
      }
    ]
  },
  {
    "file": "@tw/types/types/AnalyticsAttributes.ts",
    "exports": [
      {
        "name": " AnalyticsObjectType",
        "text": "\n\nexport declare type AnalyticsObjectType = 'channel' | 'adAccount' | 'campaign' | 'adset' | 'ad';",
        "type": "'channel' | 'adAccount' | 'campaign' | 'adset' | 'ad'"
      },
      {
        "name": " AttributeStatus",
        "text": "\nexport declare type AttributeStatus = 'ACTIVE' | 'PAUSED' | 'CANCELED';",
        "type": "'ACTIVE' | 'PAUSED' | 'CANCELED'"
      },
      {
        "name": " budgetTypeArr",
        "text": "\n\nexport const budgetTypeArr = ['daily', 'lifetime'] as const;",
        "type": "variable"
      },
      {
        "name": " BudgetType",
        "text": "\nexport declare type BudgetType = (typeof budgetTypeArr)[number];",
        "type": "(typeof budgetTypeArr)[number]"
      },
      {
        "name": " AllAttributeStatus",
        "text": "\n\nexport declare type AllAttributeStatus = {\n  [status in AttributeStatus]: status;\n};",
        "type": "{\n  [status in AttributeStatus]: status;\n}"
      },
      {
        "name": " AttributeStatusRoles",
        "text": "\n\nexport const AttributeStatusRoles: AllAttributeStatus = {\n  ACTIVE: 'ACTIVE',\n  PAUSED: 'PAUSED',\n  CANCELED: 'CANCELED',\n};",
        "type": "AllAttributeStatus"
      },
      {
        "name": " AnalyticsAttributes",
        "text": "\n\nexport declare type AnalyticsAttributes = {\n  id: string; // serviceId.dataType#accountId#campaignId#adsetId#adId\n  serviceId: ServicesIds;\n  dataType: DataTypesIds;\n  accountId: string;\n  campaignId?: string;\n  adsetId?: string;\n  adId?: string;\n  entity: AnalyticsObjectType;\n  name: string;\n  campaignName?: string;\n  adsetName?: string;\n  status: AttributeStatus;\n  budget?: number;\n  budgetType?: BudgetType;\n  imageUrl?: string;\n  currency?: string;\n  timezone?: string;\n  urlParams?: string;\n  creatives?: CreativeAttributes[];\n  moreData?: any;\n  adType?: number;\n  campaignType?: string | number;\n  isDynamicCreativeAdset?: boolean;\n  campaignObjective?: string;\n  links?: string[];\n  productHandles?: string[];\n  bodies?: string[];\n  titles?: string[];\n  videoIds?: string[];\n  images?: string[];\n  callToActionTypes?: string[];\n};",
        "type": "{\n  id: string; // serviceId.dataType#accountId#campaignId#adsetId#adId\n  serviceId: ServicesIds;\n  dataType: DataTypesIds;\n  accountId: string;\n  campaignId?: string;\n  adsetId?: string;\n  adId?: string;\n  entity: AnalyticsObjectType;\n  name: string;\n  campaignName?: string;\n  adsetName?: string;\n  status: AttributeStatus;\n  budget?: number;\n  budgetType?: BudgetType;\n  imageUrl?: string;\n  currency?: string;\n  timezone?: string;\n  urlParams?: string;\n  creatives?: CreativeAttributes[];\n  moreData?: any;\n  adType?: number;\n  campaignType?: string | number;\n  isDynamicCreativeAdset?: boolean;\n  campaignObjective?: string;\n  links?: string[];\n  productHandles?: string[];\n  bodies?: string[];\n  titles?: string[];\n  videoIds?: string[];\n  images?: string[];\n  callToActionTypes?: string[];\n}"
      },
      {
        "name": " allAnalyticsAttributes",
        "text": "\n\nexport type allAnalyticsAttributes = {\n  [attr in PickByType<keyof AnalyticsAttributes, string | number>]: attr;\n};",
        "type": "{\n  [attr in PickByType<keyof AnalyticsAttributes, string | number>]: attr;\n}"
      },
      {
        "name": " AnalyticsAttributesRoles",
        "text": "\n\nexport const AnalyticsAttributesRoles: allAnalyticsAttributes = {\n  id: 'id',\n  serviceId: 'serviceId',\n  dataType: 'dataType',\n  accountId: 'accountId',\n  campaignId: 'campaignId',\n  adsetId: 'adsetId',\n  adId: 'adId',\n  entity: 'entity',\n  name: 'name',\n  status: 'status',\n  imageUrl: 'imageUrl',\n  currency: 'currency',\n  timezone: 'timezone',\n  creatives: 'creatives',\n  urlParams: 'urlParams',\n  moreData: 'moreData',\n  adType: 'adType',\n  isDynamicCreativeAdset: 'isDynamicCreativeAdset',\n  campaignObjective: 'campaignObjective',\n  links: 'links',\n  productHandles: 'productHandles',\n  bodies: 'bodies',\n  titles: 'titles',\n  videoIds: 'videoIds',\n  images: 'images',\n  callToActionTypes: 'callToActionTypes',\n  campaignType: 'campaignType',\n  campaignName: 'campaignName',\n  adsetName: 'adsetName',\n  budget: 'budget',\n  budgetType: 'budgetType',\n};",
        "type": "allAnalyticsAttributes"
      }
    ]
  },
  {
    "file": "@tw/types/types/AttributesRequestParams.ts",
    "exports": [
      {
        "name": " AttributesRequestParams",
        "text": "\n\nexport declare type AttributesRequestParams = {\n  entity: Exclude<Entity, 'channel' | 'ad_account'>;\n  service_id: ServicesIds;\n  data_type: DataTypesIds;\n  account_ids: string[];\n  campaign_ids?: string[];\n  adset_ids?: string[];\n  ad_ids?: string[];\n  shop_id?: string;\n};",
        "type": "{\n  entity: Exclude<Entity, 'channel' | 'ad_account'>;\n  service_id: ServicesIds;\n  data_type: DataTypesIds;\n  account_ids: string[];\n  campaign_ids?: string[];\n  adset_ids?: string[];\n  ad_ids?: string[];\n  shop_id?: string;\n}"
      },
      {
        "name": " AttributesRequestByIdParams",
        "text": "\n\nexport declare type AttributesRequestByIdParams = {\n  entity: Exclude<Entity, 'channel' | 'ad_account'>;\n  id: string;\n};",
        "type": "{\n  entity: Exclude<Entity, 'channel' | 'ad_account'>;\n  id: string;\n}"
      },
      {
        "name": " AttributesRequestByNameParams",
        "text": "\n\nexport declare type AttributesRequestByNameParams = {\n  service_id: ServicesIds;\n  data_type: DataTypesIds;\n  account_ids: string[];\n  name: string;\n  entity: Exclude<Entity, 'channel'>;\n};",
        "type": "{\n  service_id: ServicesIds;\n  data_type: DataTypesIds;\n  account_ids: string[];\n  name: string;\n  entity: Exclude<Entity, 'channel'>;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/Attribution.ts",
    "exports": [
      {
        "name": " AttributionGroups",
        "text": "\n\nexport type AttributionGroups = 'campaign_id' | 'adset_id' | 'ad_id';",
        "type": "'campaign_id' | 'adset_id' | 'ad_id'"
      },
      {
        "name": " AttributionAdRequest",
        "text": "\n\nexport type AttributionAdRequest = {\n  service_id: string;\n  account_ids: string[];\n  campaign_id?: string;\n  adset_id?: string;\n} & BaseAttributionRequest;",
        "type": "{\n  service_id: string;\n  account_ids: string[];\n  campaign_id?: string;\n  adset_id?: string;\n} & BaseAttributionRequest"
      },
      {
        "name": " AttributionInfluencerRequest",
        "text": "\n\nexport type AttributionInfluencerRequest = {\n  campaign_id?: string;\n  isSummary?: boolean;\n} & BaseAttributionRequest;",
        "type": "{\n  campaign_id?: string;\n  isSummary?: boolean;\n} & BaseAttributionRequest"
      },
      {
        "name": " AttributionMetricsBreakdown",
        "text": "\n\nexport interface AttributionMetricsBreakdown {\n  date: string;\n  metrics: AttributionMetrics;\n}",
        "type": "interface"
      },
      {
        "name": " AttributionMetrics",
        "text": "\n\nexport interface AttributionMetrics {\n  spend: number;\n  conversionValue: number;\n  pixelConversionValue: number;\n  pixelPurchases: number;\n  pixelNcPurchases: number;\n  pixelNcConversionValue: number;\n  pixelCpa: number;\n  pixelNcCpa: number;\n  pixelNcAov: number;\n  purchases: number;\n  clicks: number;\n  impressions: number;\n  roas: number;\n  pixelRoas: number;\n  cpc: number;\n  ctr: number;\n  cpm: number;\n  cpa: number;\n  aov: number;\n}",
        "type": "interface"
      },
      {
        "name": " AttributionResponse",
        "text": "\n\nexport type AttributionResponse = {\n  metricsBreakdown: AttributionMetricsBreakdown[];\n  id: string;\n  name: string;\n  metrics: AttributionMetrics;\n};",
        "type": "{\n  metricsBreakdown: AttributionMetricsBreakdown[];\n  id: string;\n  name: string;\n  metrics: AttributionMetrics;\n}"
      },
      {
        "name": " InfluencerAttributionResponse",
        "text": "\n\nexport type InfluencerAttributionResponse = Influencer & AttributionResponse;",
        "type": "Influencer & AttributionResponse"
      },
      {
        "name": " RealTimeAttributionPayload",
        "text": "\n\nexport type RealTimeAttributionPayload = {\n  orderId: number;\n  totalPrice: number;\n  cogs: number;\n  eventDate: string;\n  model: ModelNames;\n} & AttributionData;",
        "type": "{\n  orderId: number;\n  totalPrice: number;\n  cogs: number;\n  eventDate: string;\n  model: ModelNames;\n} & AttributionData"
      },
      {
        "name": " LinearModelNames",
        "text": "\n\nexport type LinearModelNames = 'linear' | 'fullLinear' | 'linearAll' | 'linear-v2' | 'linearAll-v2';",
        "type": "'linear' | 'fullLinear' | 'linearAll' | 'linear-v2' | 'linearAll-v2'"
      },
      {
        "name": " ModelNames",
        "text": "\nexport type ModelNames =\n  | 'lastClick'\n  | 'fullLastClick'\n  | 'lastPlatformClick'\n  | 'firstClick'\n  | 'fullFirstClick'\n  | 'every'\n  | 'markov'\n  | 'shapley'\n  | 'fullLastClick-v2'\n  | 'fullFirstClick-v2'\n  | 'lastPlatformClick-v2'\n  | LinearModelNames;",
        "type": "| 'lastClick'\n  | 'fullLastClick'\n  | 'lastPlatformClick'\n  | 'firstClick'\n  | 'fullFirstClick'\n  | 'every'\n  | 'markov'\n  | 'shapley'\n  | 'fullLastClick-v2'\n  | 'fullFirstClick-v2'\n  | 'lastPlatformClick-v2'\n  | LinearModelNames"
      },
      {
        "name": " AttributionData",
        "text": "\n\nexport type AttributionData = {\n  source: string;\n  accountId?: string;\n  campaignId: string;\n  adsetId?: string;\n  adId?: string;\n};",
        "type": "{\n  source: string;\n  accountId?: string;\n  campaignId: string;\n  adsetId?: string;\n  adId?: string;\n}"
      },
      {
        "name": " AttributionObj",
        "text": "\n\nexport type AttributionObj = {\n  ids: AttributionData;\n  modelName: ModelNames;\n  clickDate: string;\n  linearWeight?: number;\n};",
        "type": "{\n  ids: AttributionData;\n  modelName: ModelNames;\n  clickDate: string;\n  linearWeight?: number;\n}"
      },
      {
        "name": " AttributionBreakdown",
        "text": "\n\nexport type AttributionBreakdown = 'source' | 'campaignId' | 'adsetId' | 'adId';",
        "type": "'source' | 'campaignId' | 'adsetId' | 'adId'"
      },
      {
        "name": " StatRequest",
        "text": "\nexport interface StatRequest {\n  shopDomain: string;\n  model: AttributionModels;\n  startDate: string;\n  endDate: string;\n  dateModel: AttributionDateModels;\n  sources?: ServicesIds[];\n  breakdown: AttributionBreakdown;\n  filters?: Record<ServicesIds, MetricsFilterExpression[][]>;\n  accountIds: Record<ServicesIds, string[]>;\n  currency: string;\n  // should be removed\n  attributionFilterKey?: 'campaignId' | 'adsetId';\n  attributionFilterValue?: string;\n  attributionFilters?: AttributionFilter[];\n  timezone?: string;\n  includeOneDayFacebookView: boolean;\n  shopCurrency?: string;\n  granularity?: 'day' | 'hour' | 'month' | 'week';\n  attributionWindow?: 14 | 7 | 28 | 1 | 'lifetime';\n  showDirect?: boolean;\n  includePpsViews?: boolean;\n  parentPixelPurchases?: number;\n  parentPixelConversionValue?: number;\n  useNexus?: boolean;\n}",
        "type": "interface"
      }
    ]
  },
  {
    "file": "@tw/types/types/AttributionDoc.ts",
    "exports": [
      {
        "name": " OrderStat",
        "text": "export type OrderStat = 'order' | 'newCustomerOrder';",
        "type": "'order' | 'newCustomerOrder'"
      }
    ]
  },
  {
    "file": "@tw/types/types/AttributionElement.ts",
    "exports": [
      {
        "name": " UnknownSource",
        "text": "\n\nexport type UnknownSource = string;",
        "type": "string"
      },
      {
        "name": " AttributionElement",
        "text": "\n\nexport declare type AttributionElement = {\n  id: string;\n  name: string;\n  status: AttributeStatus;\n  metricsBreakdown: MetricsBreakdown[];\n  metrics: AllMetricsAndPixelMetricsKeys;\n  type: Entity;\n  image?: string;\n\n  source: ServicesIds | UnknownSource;\n\n  accountId?: string;\n\n  campaignId?: string;\n  campaignName?: string;\n\n  adsetId?: string;\n  adsetName?: string;\n\n  adId?: string;\n  adName: string;\n\n  sourceMatch?: boolean;\n  campaignMatch?: boolean;\n  adsetMatch?: boolean;\n  adMatch?: boolean;\n};",
        "type": "{\n  id: string;\n  name: string;\n  status: AttributeStatus;\n  metricsBreakdown: MetricsBreakdown[];\n  metrics: AllMetricsAndPixelMetricsKeys;\n  type: Entity;\n  image?: string;\n\n  source: ServicesIds | UnknownSource;\n\n  accountId?: string;\n\n  campaignId?: string;\n  campaignName?: string;\n\n  adsetId?: string;\n  adsetName?: string;\n\n  adId?: string;\n  adName: string;\n\n  sourceMatch?: boolean;\n  campaignMatch?: boolean;\n  adsetMatch?: boolean;\n  adMatch?: boolean;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/AttributionWindow.ts",
    "exports": [
      {
        "name": " AttributionModelNames",
        "text": "\n\nexport type AttributionModelNames =\n  | `linear-v2`\n  | `linearAll-v2`\n  | `fullLastClick-v2`\n  | `fullFirstClick-v2`\n  | `lastPlatformClick-v2`;",
        "type": "| `linear-v2`\n  | `linearAll-v2`\n  | `fullLastClick-v2`\n  | `fullFirstClick-v2`\n  | `lastPlatformClick-v2`"
      },
      {
        "name": " NewAttributionField",
        "text": "\n\nexport type NewAttributionField = {\n  clickDate: string;\n  model: AttributionModelNames;\n  linearWeight: number;\n} & AttributionData & { query?: Query };",
        "type": "{\n  clickDate: string;\n  model: AttributionModelNames;\n  linearWeight: number;\n} & AttributionData & { query?: Query }"
      },
      {
        "name": " AttributionWindowsField",
        "text": "\n\nexport type AttributionWindowsField = {\n  d1?: NewAttributionField;\n  d7?: NewAttributionField;\n  d14?: NewAttributionField;\n  d28?: NewAttributionField;\n} & NewAttributionField;",
        "type": "{\n  d1?: NewAttributionField;\n  d7?: NewAttributionField;\n  d14?: NewAttributionField;\n  d28?: NewAttributionField;\n} & NewAttributionField"
      },
      {
        "name": " NewOrderAttributionDoc",
        "text": "\n\nexport type NewOrderAttributionDoc = {\n  tripleId: string;\n  sessionId?: string;\n  stat: OrderStat;\n  eventDate: string;\n  shop: string;\n  orderId: number | string;\n  totalPrice: number;\n  cogs: number;\n  linearWeight: number;\n  customerId: number;\n  firstName: string;\n  lastName: string;\n  orderName: string;\n  currency: string;\n  notes?: string;\n  docId: string;\n  isPpSurveyDuplicate?: boolean;\n  attributedFrom?: string;\n  products?: number[];\n  variants?: number[];\n  fakeUtcDate?: string;\n  utcOffset?: number;\n  path?: string;\n  device?: string;\n  browser?: string;\n  country?: string;\n  city?: string;\n  eventVersion?: number;\n  pixelVersion?: string;\n} & NewAttributionField &\n  AttributionWindowsField;",
        "type": "{\n  tripleId: string;\n  sessionId?: string;\n  stat: OrderStat;\n  eventDate: string;\n  shop: string;\n  orderId: number | string;\n  totalPrice: number;\n  cogs: number;\n  linearWeight: number;\n  customerId: number;\n  firstName: string;\n  lastName: string;\n  orderName: string;\n  currency: string;\n  notes?: string;\n  docId: string;\n  isPpSurveyDuplicate?: boolean;\n  attributedFrom?: string;\n  products?: number[];\n  variants?: number[];\n  fakeUtcDate?: string;\n  utcOffset?: number;\n  path?: string;\n  device?: string;\n  browser?: string;\n  country?: string;\n  city?: string;\n  eventVersion?: number;\n  pixelVersion?: string;\n} & NewAttributionField &\n  AttributionWindowsField"
      }
    ]
  },
  {
    "file": "@tw/types/types/BTFamilies.ts",
    "exports": [
      {
        "name": " BTFamilies",
        "text": "export type BTFamilies = 'hours' | 'day';",
        "type": "'hours' | 'day'"
      }
    ]
  },
  {
    "file": "@tw/types/types/CreativeAttributes.ts",
    "exports": [
      {
        "name": " CreativeTypesArray",
        "text": "\n\nexport const CreativeTypesArray = [\n  'video',\n  'image',\n  'copy',\n  'ad',\n  'adName',\n  'Segments',\n  'product',\n  'sku',\n] as const;",
        "type": "variable"
      },
      {
        "name": " CreativeTypes",
        "text": "\n\nexport type CreativeTypes = typeof CreativeTypesArray[number];",
        "type": "typeof CreativeTypesArray[number]"
      },
      {
        "name": " AllCreativeTypes",
        "text": "\n\nexport type AllCreativeTypes = {\n  [type in CreativeTypes]: type;\n};",
        "type": "{\n  [type in CreativeTypes]: type;\n}"
      },
      {
        "name": " CreativeTypesRoles",
        "text": "\n\nexport const CreativeTypesRoles: AllCreativeTypes = {\n  ad: 'ad',\n  adName: 'adName',\n  image: 'image',\n  video: 'video',\n  copy: 'copy',\n  Segments: 'Segments',\n  product: 'product',\n  sku: 'sku',\n};",
        "type": "AllCreativeTypes"
      },
      {
        "name": " CreativeAttributes",
        "text": "\n\nexport type CreativeAttributes = {\n  serviceId: ServicesIds;\n  accountId: string;\n  assetId: string;\n  assetType: CreativeTypes;\n\n  // only for creative type image / video\n  thumbnail?: string; // thumbnail_url\n\n  // only for creative type image\n  image?: string; // image_url\n\n  // only for creative type copy\n  body?: string;\n\n  // some creatives (image/video/copy) has title\n  // title?: string;\n\n  // some creatives has call to action (LEARN_MORE/SHOP_NOW etc.)\n  // callToActionType?: string; // call_to_action_type\n};",
        "type": "{\n  serviceId: ServicesIds;\n  accountId: string;\n  assetId: string;\n  assetType: CreativeTypes;\n\n  // only for creative type image / video\n  thumbnail?: string; // thumbnail_url\n\n  // only for creative type image\n  image?: string; // image_url\n\n  // only for creative type copy\n  body?: string;\n\n  // some creatives (image/video/copy) has title\n  // title?: string;\n\n  // some creatives has call to action (LEARN_MORE/SHOP_NOW etc.)\n  // callToActionType?: string; // call_to_action_type\n}"
      },
      {
        "name": " CreativeData",
        "text": "\n\nexport type CreativeData = {\n  assetId: string;\n  assetType: CreativeTypes;\n  isDynamic: boolean;\n  weight: number;\n};",
        "type": "{\n  assetId: string;\n  assetType: CreativeTypes;\n  isDynamic: boolean;\n  weight: number;\n}"
      },
      {
        "name": " CreativeMetricsTableRow",
        "text": "\n\nexport declare type CreativeMetricsTableRow = CreativeData & MetricsTableRow;",
        "type": "CreativeData & MetricsTableRow"
      }
    ]
  },
  {
    "file": "@tw/types/types/CreativeFiltersBuilder.ts",
    "exports": [
      {
        "name": " CreativeFiltersBuilder",
        "text": "export type CreativeFiltersBuilder = {\n  filtersText: string;\n  filterValues: Record<string, string>;\n};",
        "type": "{\n  filtersText: string;\n  filterValues: Record<string, string>;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/CreativesHealth.ts",
    "exports": [
      {
        "name": " InternalAccountData",
        "text": "\nexport type InternalAccountData = {\n  clicks: number,\n  spend: number,\n  impressions: number,\n  purchases: number,\n  conversionValue: number,\n  outboundClicks?:number\n};",
        "type": "{\n  clicks: number,\n  spend: number,\n  impressions: number,\n  purchases: number,\n  conversionValue: number,\n  outboundClicks?:number\n}"
      },
      {
        "name": " MetricsHelathQueryStringParams",
        "text": "\n\nexport declare type MetricsHelathQueryStringParams = {\n  creativeCockpitEnabled:boolean;\n} & MetricsQueryStringParams",
        "type": "{\n  creativeCockpitEnabled:boolean;\n} & MetricsQueryStringParams"
      }
    ]
  },
  {
    "file": "@tw/types/types/CreativesRequest.ts",
    "exports": [
      {
        "name": " CreativeFilterOperator",
        "text": "\n\nexport type CreativeFilterOperator =\n  | 'contains'\n  | 'not_contains'\n  | 'equals'\n  | 'not_equals'\n  | 'greater_than'\n  | 'greater_or_equal_than'\n  | 'less_than'\n  | 'less_or_equal_than';",
        "type": "| 'contains'\n  | 'not_contains'\n  | 'equals'\n  | 'not_equals'\n  | 'greater_than'\n  | 'greater_or_equal_than'\n  | 'less_than'\n  | 'less_or_equal_than'"
      },
      {
        "name": " CreativeFilterOperands",
        "text": "\n\nexport type CreativeFilterOperands =\n  | 'campaign_id'\n  | 'campaign_name'\n  | 'adset_id'\n  | 'adset_name'\n  | 'ad_id'\n  | 'ad_name';",
        "type": "| 'campaign_id'\n  | 'campaign_name'\n  | 'adset_id'\n  | 'adset_name'\n  | 'ad_id'\n  | 'ad_name'"
      },
      {
        "name": " CreativeMetricFilterOperands",
        "text": "\n\nexport type CreativeMetricFilterOperands =\n  | 'roas'\n  | 'cpc'\n  | 'cpm'\n  | 'spend'\n  | 'impressions'\n  | 'pixelRoas';",
        "type": "| 'roas'\n  | 'cpc'\n  | 'cpm'\n  | 'spend'\n  | 'impressions'\n  | 'pixelRoas'"
      },
      {
        "name": " CreativeFilterExpression",
        "text": "\n\nexport type CreativeFilterExpression = FilterExpression<\n  CreativeFilterOperands,\n  CreativeFilterOperator\n>;",
        "type": "FilterExpression<\n  CreativeFilterOperands,\n  CreativeFilterOperator\n>"
      },
      {
        "name": " CreativeMetricFilterExpression",
        "text": "\n\nexport type CreativeMetricFilterExpression = FilterExpression<\n  CreativeMetricFilterOperands,\n  CreativeFilterOperator\n>;",
        "type": "FilterExpression<\n  CreativeMetricFilterOperands,\n  CreativeFilterOperator\n>"
      },
      {
        "name": " HighlightMetrics",
        "text": "\n\nexport type HighlightMetrics =\n  | keyof RawMetrics\n  | keyof RawPixelMetrics\n  | keyof Pick<CalculatedMetrics, 'roas' | 'thumbStopRatio' | 'ctr'>\n  | keyof Pick<CalculatedPixelMetrics, 'pixelRoas'>;",
        "type": "| keyof RawMetrics\n  | keyof RawPixelMetrics\n  | keyof Pick<CalculatedMetrics, 'roas' | 'thumbStopRatio' | 'ctr'>\n  | keyof Pick<CalculatedPixelMetrics, 'pixelRoas'>"
      },
      {
        "name": " CreativeRequest",
        "text": "\n\nexport type CreativeRequest = {\n  entity: 'ad';\n  creative_type: CreativeTypes;\n  page: number;\n  pageSize?: number;\n  pixel_attribution_model: AttributionModels;\n  pixel_date_model: AttributionDateModels;\n  // filters?: FilterExpressions<CreativeFilterOperands, CreativeFilterOperator>[];\n  filters?: FilterExpressions<CreativeMetricFilterOperands, CreativeFilterOperator>[];\n  segments?: FilterExpressions<CreativeFilterOperands, CreativeFilterOperator>[];\n  shopDomain: string;\n  includeOneDayView?: boolean;\n} & Omit<MetricsQueryStringParams, 'filters'>;",
        "type": "{\n  entity: 'ad';\n  creative_type: CreativeTypes;\n  page: number;\n  pageSize?: number;\n  pixel_attribution_model: AttributionModels;\n  pixel_date_model: AttributionDateModels;\n  // filters?: FilterExpressions<CreativeFilterOperands, CreativeFilterOperator>[];\n  filters?: FilterExpressions<CreativeMetricFilterOperands, CreativeFilterOperator>[];\n  segments?: FilterExpressions<CreativeFilterOperands, CreativeFilterOperator>[];\n  shopDomain: string;\n  includeOneDayView?: boolean;\n} & Omit<MetricsQueryStringParams, 'filters'>"
      },
      {
        "name": " CreativeHighlightsRequest",
        "text": "\n\nexport type CreativeHighlightsRequest = {\n  metrics: HighlightMetrics[];\n  page?: 0;\n} & CreativeRequest;",
        "type": "{\n  metrics: HighlightMetrics[];\n  page?: 0;\n} & CreativeRequest"
      },
      {
        "name": " SegmentQuery",
        "text": "\n\nexport type SegmentQuery = {\n  metrics: AllMetricsAndPixelMetricsKeys;\n  metricsBreakdown: MetricsBreakdown[];\n  numberOfAds: number;\n  thumbnails: string[];\n};",
        "type": "{\n  metrics: AllMetricsAndPixelMetricsKeys;\n  metricsBreakdown: MetricsBreakdown[];\n  numberOfAds: number;\n  thumbnails: string[];\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/CurrencyConversion.ts",
    "exports": [
      {
        "name": " CurrencyConversionRequestParams",
        "text": "export declare type CurrencyConversionRequestParams = {\n  fromCurrency: string;\n  toCurrency: string;\n  start: string;\n  end: string;\n};",
        "type": "{\n  fromCurrency: string;\n  toCurrency: string;\n  start: string;\n  end: string;\n}"
      },
      {
        "name": " CurrencyConversionResponse",
        "text": "\n\nexport declare type CurrencyConversionResponse = {\n  rates: Record<string, number>;\n};",
        "type": "{\n  rates: Record<string, number>;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/DataHealth.ts",
    "exports": [
      {
        "name": " DataHealthReport",
        "text": "\n\nexport type DataHealthReport = {\n  [Property in keyof MetricsTableData]: {\n    internal: number;\n    external: number;\n    delta: number;\n  };\n};",
        "type": "{\n  [Property in keyof MetricsTableData]: {\n    internal: number;\n    external: number;\n    delta: number;\n  };\n}"
      },
      {
        "name": " DataHealthFullReport",
        "text": "\n\nexport type DataHealthFullReport = {\n  fieldsComparison: DataHealthReport;\n  shopId: string;\n  serviceId: ServicesIds;\n  accountId: string;\n  currency: string;\n  jobDate: string;\n  jobId?: string;\n  reportStartDate: string;\n  reportEndDate: string;\n  isDeltaError?: boolean;\n};",
        "type": "{\n  fieldsComparison: DataHealthReport;\n  shopId: string;\n  serviceId: ServicesIds;\n  accountId: string;\n  currency: string;\n  jobDate: string;\n  jobId?: string;\n  reportStartDate: string;\n  reportEndDate: string;\n  isDeltaError?: boolean;\n}"
      },
      {
        "name": " DataHealthFullReportRow",
        "text": "\n\nexport type DataHealthFullReportRow = {\n  shouldBeReported?: boolean;\n  healthCheckType?: HealthCheckType;\n} & DataHealthFullReport;",
        "type": "{\n  shouldBeReported?: boolean;\n  healthCheckType?: HealthCheckType;\n} & DataHealthFullReport"
      },
      {
        "name": " DataHealthField",
        "text": "\n\nexport type DataHealthField = keyof MetricsTableData;",
        "type": "keyof MetricsTableData"
      },
      {
        "name": " DateHealthFieldsConf",
        "text": "\n\nexport type DateHealthFieldsConf = {\n  [key in DataHealthField]?: {\n    isCritical?: boolean;\n    factor?: number;\n    minDelta?: number;\n    label?: string;\n  };\n};",
        "type": "{\n  [key in DataHealthField]?: {\n    isCritical?: boolean;\n    factor?: number;\n    minDelta?: number;\n    label?: string;\n  };\n}"
      },
      {
        "name": " DataHealthConf",
        "text": "\n\nexport type DataHealthConf = {\n  isSerialPeriodsChecks?: boolean;\n  fields: DateHealthFieldsConf;\n};",
        "type": "{\n  isSerialPeriodsChecks?: boolean;\n  fields: DateHealthFieldsConf;\n}"
      },
      {
        "name": " IntegrationDataHealthFullReport",
        "text": "\n\nexport type IntegrationDataHealthFullReport = {\n  fieldsComparison: DataHealthReport;\n  serviceId: ServicesIds;\n  accountId: string;\n  currency: string;\n  jobDate: string;\n  reportStartDate: string;\n  reportEndDate: string;\n  isDeltaError?: boolean;\n};",
        "type": "{\n  fieldsComparison: DataHealthReport;\n  serviceId: ServicesIds;\n  accountId: string;\n  currency: string;\n  jobDate: string;\n  reportStartDate: string;\n  reportEndDate: string;\n  isDeltaError?: boolean;\n}"
      },
      {
        "type": "enum",
        "name": " HealthCheckType",
        "text": "\n\nexport enum HealthCheckType {\n  AdsMetrics = 'AdsMetrics',\n  NexusAdsMetrics = 'NexusAdsMetrics',\n  BigTableVsNexus = 'BigTableVsNexus',\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/DataPubsub.ts",
    "exports": [
      {
        "name": " DataPubsubAttributes",
        "text": "export type DataPubsubAttributes = {\n  tableName: string;\n  shopId: string;\n};",
        "type": "{\n  tableName: string;\n  shopId: string;\n}"
      },
      {
        "name": " DataPubsubData",
        "text": "\n\nexport type DataPubsubData = Array<any>;",
        "type": "Array<any>"
      }
    ]
  },
  {
    "file": "@tw/types/types/EndpointParams.ts",
    "exports": [
      {
        "type": "enum",
        "name": " FileContentFieldNames",
        "text": "export enum FileContentFieldNames {\n  none,\n  data,\n  fileData,\n}"
      },
      {
        "name": " FileContentFieldName",
        "text": "\n\nexport type FileContentFieldName = keyof typeof FileContentFieldNames;",
        "type": "keyof typeof FileContentFieldNames"
      },
      {
        "name": " EndpointParams",
        "text": "\n\nexport interface EndpointParams {\n  isPubsub?: boolean;\n  fileContentFieldName?: FileContentFieldName;\n}",
        "type": "interface"
      }
    ]
  },
  {
    "file": "@tw/types/types/Filters.ts",
    "exports": [
      {
        "name": " FilterExpression",
        "text": "export class FilterExpression<D, R> {\n  operand: D;\n  operator: R;\n  value: string | number;\n}",
        "type": "class"
      },
      {
        "name": " FilterExpressions",
        "text": "\n\nexport class FilterExpressions<D, R> {\n  expressionList: FilterExpression<D, R>[]; // with OR between the expressions\n  enabled: boolean;\n  id: string;\n  segmentDescription: string;\n  segmentTitle: string;\n}",
        "type": "class"
      }
    ]
  },
  {
    "file": "@tw/types/types/FullBigOrder.ts",
    "exports": [
      {
        "name": " BigFullOrder",
        "text": "export interface BigFullOrder {\n    id: number\n    customer_id: number\n    date_created: string\n    date_modified: string\n    date_shipped: string\n    status_id: number\n    status: string\n    subtotal_ex_tax: string\n    subtotal_inc_tax: string\n    subtotal_tax: string\n    base_shipping_cost: string\n    shipping_cost_ex_tax: string\n    shipping_cost_inc_tax: string\n    shipping_cost_tax: string\n    shipping_cost_tax_class_id: number\n    base_handling_cost: string\n    handling_cost_ex_tax: string\n    handling_cost_inc_tax: string\n    handling_cost_tax: string\n    handling_cost_tax_class_id: number\n    base_wrapping_cost: string\n    wrapping_cost_ex_tax: string\n    wrapping_cost_inc_tax: string\n    wrapping_cost_tax: string\n    wrapping_cost_tax_class_id: number\n    total_ex_tax: string\n    total_inc_tax: string\n    total_tax: string\n    items_total: number\n    items_shipped: number\n    payment_method: string\n    payment_provider_id: string\n    payment_status: string\n    refunded_amount: string\n    order_is_digital: boolean\n    store_credit_amount: string\n    gift_certificate_amount: string\n    ip_address: string\n    ip_address_v6: string\n    geoip_country: string\n    geoip_country_iso2: string\n    currency_id: number\n    currency_code: string\n    currency_exchange_rate: string\n    default_currency_id: number\n    default_currency_code: string\n    staff_notes: string\n    customer_message: string\n    discount_amount: string\n    coupon_discount: string\n    shipping_address_count: number\n    is_deleted: boolean\n    ebay_order_id: string\n    cart_id: string\n    billing_address: BigBillingAddress\n    is_email_opt_in: boolean\n    credit_card_type: string\n    order_source: string\n    channel_id: number\n    external_source: string\n    consignments: BigConsignment[]\n    products: BigProducts\n    shipping_addresses: BigShippingAddresses\n    coupons: BigCoupons\n    external_id: any\n    external_merchant_id: any\n    tax_provider_id: string\n    customer_locale: string\n    external_order_id: string\n    store_default_currency_code: string\n    store_default_to_transactional_exchange_rate: string\n    custom_status: string\n}",
        "type": "interface"
      },
      {
        "name": " BigBillingAddress",
        "text": "\n\nexport interface BigBillingAddress {\n    first_name: string\n    last_name: string\n    company: string\n    street_1: string\n    street_2: string\n    city: string\n    state: string\n    zip: string\n    country: string\n    country_iso2: string\n    phone: string\n    email: string\n    form_fields: any[]\n}",
        "type": "interface"
      },
      {
        "name": " BigConsignment",
        "text": "\n\nexport interface BigConsignment {\n    pickups: any[]\n    shipping: BigShipping[]\n    downloads: any[]\n    email: {\n        gift_certificates: any[]\n    }\n}",
        "type": "interface"
      },
      {
        "name": " BigShipping",
        "text": "\n\nexport interface BigShipping {\n    id: number\n    first_name: string\n    last_name: string\n    company: string\n    street_1: string\n    street_2: string\n    city: string\n    zip: string\n    country: string\n    country_iso2: string\n    state: string\n    email: string\n    phone: string\n    form_fields: any[]\n    line_items: BigLineItem[]\n    items_total: number\n    items_shipped: number\n    shipping_method: string\n    base_cost: number\n    cost_ex_tax: number\n    cost_inc_tax: number\n    cost_tax: number\n    cost_tax_class_id: number\n    base_handling_cost: number\n    handling_cost_ex_tax: number\n    handling_cost_inc_tax: number\n    handling_cost_tax: number\n    handling_cost_tax_class_id: number\n    shipping_zone_id: number\n    shipping_zone_name: string\n    shipping_quotes: BigShippingQuotes\n}",
        "type": "interface"
      },
      {
        "name": " BigLineItem",
        "text": "\n\nexport interface BigLineItem {\n    id: number\n    order_id: number\n    product_id: number\n    variant_id: number\n    order_pickup_method_id: number\n    order_address_id: number\n    name: string\n    name_customer: string\n    name_merchant: string\n    sku: string\n    upc: string\n    type: string\n    base_price: string\n    price_ex_tax: string\n    price_inc_tax: string\n    price_tax: string\n    base_total: string\n    total_ex_tax: string\n    total_inc_tax: string\n    total_tax: string\n    weight: string\n    width: string\n    height: string\n    depth: string\n    quantity: number\n    base_cost_price: string\n    cost_price_inc_tax: string\n    cost_price_ex_tax: string\n    cost_price_tax: string\n    is_refunded: boolean\n    quantity_refunded: number\n    refund_amount: string\n    return_id: number\n    wrapping_id: number\n    wrapping_name: string\n    base_wrapping_cost: string\n    wrapping_cost_ex_tax: string\n    wrapping_cost_inc_tax: string\n    wrapping_cost_tax: string\n    wrapping_message: string\n    quantity_shipped: number\n    event_name: any\n    event_date: string\n    fixed_shipping_cost: string\n    ebay_item_id: string\n    ebay_transaction_id: string\n    option_set_id: any\n    parent_order_product_id: any\n    is_bundled_product: boolean\n    bin_picking_number: string\n    external_id: any\n    fulfillment_source: string\n    brand: string\n    gift_certificate_id: any\n    applied_discounts: any[]\n    product_options: any[]\n    configurable_fields: any[]\n    discounted_total_inc_tax: string\n}",
        "type": "interface"
      },
      {
        "name": " BigShippingQuotes",
        "text": "\n\nexport interface BigShippingQuotes {\n    url: string\n    resource: string\n}",
        "type": "interface"
      },
      {
        "name": " BigProducts",
        "text": "\n\nexport interface BigProducts {\n    url: string\n    resource: string\n}",
        "type": "interface"
      },
      {
        "name": " BigShippingAddresses",
        "text": "\n\nexport interface BigShippingAddresses {\n    url: string\n    resource: string\n}",
        "type": "interface"
      },
      {
        "name": " BigCoupons",
        "text": "\n\nexport interface BigCoupons {\n    url: string\n    resource: string\n}",
        "type": "interface"
      }
    ]
  },
  {
    "file": "@tw/types/types/FullShopifyOrder.ts",
    "exports": [
      {
        "name": " FullShopifyOrder",
        "text": "export interface FullShopifyOrder {\n  shopDomain: string;\n  id: number;\n  admin_graphql_api_id: string;\n  app_id: number;\n  browser_ip: string;\n  buyer_accepts_marketing: boolean;\n  cancel_reason?: any;\n  cancelled_at?: any;\n  cart_token: string;\n  checkout_id: number;\n  checkout_token: string;\n  client_details: ClientDetails;\n  closed_at?: any;\n  confirmed: boolean;\n  contact_email: string;\n  created_at: string;\n  currency: string;\n  current_subtotal_price: string;\n  current_subtotal_price_set: ShopPresentedMoney;\n  current_total_discounts: string;\n  current_total_discounts_set: ShopPresentedMoney;\n  current_total_duties_set?: any;\n  current_total_price: string;\n  current_total_price_set: ShopPresentedMoney;\n  current_total_tax: string;\n  current_total_tax_set: ShopPresentedMoney;\n  customer_locale: string;\n  device_id?: any;\n  discount_codes?: any[] | any;\n  email: string;\n  estimated_taxes: boolean;\n  financial_status: string;\n  fulfillment_status?: any;\n  gateway: string;\n  landing_site: string;\n  landing_site_ref?: any;\n  location_id?: any;\n  name: string;\n  note?: any;\n  note_attributes?: NameVal[] | null;\n  number: number;\n  order_number: number;\n  order_status_url: string;\n  original_total_duties_set?: any;\n  payment_gateway_names?: string[] | null;\n  phone?: any;\n  presentment_currency: string;\n  processed_at: string;\n  processing_method: string;\n  reference?: any;\n  referring_site: string;\n  source_identifier?: any;\n  source_name: string;\n  source_url?: any;\n  subtotal_price: string;\n  subtotal_price_set: ShopPresentedMoney;\n  tags: string;\n  tax_lines?: TaxLinesEntity[] | null;\n  taxes_included: boolean;\n  test: boolean;\n  token: string;\n  total_discounts: string;\n  total_discounts_set: ShopPresentedMoney;\n  total_line_items_price: string;\n  total_line_items_price_set: ShopPresentedMoney;\n  total_outstanding: string;\n  total_price: string;\n  total_price_set: ShopPresentedMoney;\n  total_price_usd: string;\n  total_shipping_price_set: ShopPresentedMoney;\n  total_tax: string;\n  total_tax_set: ShopPresentedMoney;\n  total_tip_received: string;\n  total_weight: number;\n  updated_at: string;\n  user_id?: any;\n  billing_address: ShopifyBillingAddress;\n  customer: Customer;\n  discount_applications?: DiscountApplicationsEntity[] | null;\n  fulfillments?: null[] | null;\n  line_items?: LineItemsEntity[] | null;\n  payment_details: PaymentDetails;\n  refunds?: null[] | null;\n  shipping_address: ShopifyBillingAddress;\n  shipping_lines?: ShippingLinesEntity[] | null;\n  cogs: number;\n  shopCode: string;\n}",
        "type": "interface"
      },
      {
        "name": " ClientDetails",
        "text": "\nexport interface ClientDetails {\n  accept_language: string;\n  browser_height?: any;\n  browser_ip: string;\n  browser_width?: any;\n  session_hash?: any;\n  user_agent: string;\n}",
        "type": "interface"
      },
      {
        "name": " ShopPresentedMoney",
        "text": "\nexport interface ShopPresentedMoney {\n  shop_money: Amount;\n  presentment_money: Amount;\n}",
        "type": "interface"
      },
      {
        "name": " ShopifyBillingAddress",
        "text": "\nexport interface ShopifyBillingAddress {\n  first_name: string;\n  address1: string;\n  phone: string;\n  city: string;\n  zip: string;\n  province: string;\n  country: string;\n  last_name: string;\n  address2?: any;\n  company?: any;\n  latitude: number;\n  longitude: number;\n  name: string;\n  country_code: string;\n  province_code: string;\n}",
        "type": "interface"
      },
      {
        "name": " Customer",
        "text": "\nexport interface Customer {\n  id: number;\n  email: string;\n  accepts_marketing: boolean;\n  created_at: string;\n  updated_at: string;\n  first_name: string;\n  last_name: string;\n  orders_count: number;\n  state: string;\n  total_spent: string;\n  last_order_id: number;\n  note?: any;\n  verified_email: boolean;\n  multipass_identifier?: any;\n  tax_exempt: boolean;\n  phone?: any;\n  tags: string;\n  last_order_name: string;\n  currency: string;\n  accepts_marketing_updated_at: string;\n  marketing_opt_in_level: string;\n  tax_exemptions?: null[] | null;\n  admin_graphql_api_id: string;\n  default_address: DefaultAddress;\n}",
        "type": "interface"
      },
      {
        "name": " DefaultAddress",
        "text": "\nexport interface DefaultAddress {\n  id: number;\n  customer_id: number;\n  first_name: string;\n  last_name: string;\n  company?: any;\n  address1: string;\n  address2?: any;\n  city: string;\n  province: string;\n  country: string;\n  zip: string;\n  phone: string;\n  name: string;\n  province_code: string;\n  country_code: string;\n  country_name: string;\n  default: boolean;\n}",
        "type": "interface"
      },
      {
        "name": " DiscountApplicationsEntity",
        "text": "\nexport interface DiscountApplicationsEntity {\n  target_type: string;\n  type: string;\n  value: string;\n  value_type: string;\n  allocation_method: string;\n  target_selection: string;\n  title: string;\n  description: string;\n}",
        "type": "interface"
      },
      {
        "name": " LineItemsEntity",
        "text": "\nexport interface LineItemsEntity {\n  id: number;\n  admin_graphql_api_id: string;\n  destination_location: DestinationLocationOrOriginLocation;\n  fulfillable_quantity: number;\n  fulfillment_service: string;\n  fulfillment_status?: any;\n  gift_card: boolean;\n  grams: number;\n  name: string;\n  origin_location: DestinationLocationOrOriginLocation;\n  pre_tax_price: string;\n  pre_tax_price_set: ShopPresentedMoney;\n  price: string;\n  price_set: ShopPresentedMoney;\n  product_exists: boolean;\n  product_id: number;\n  properties?: null[] | null;\n  quantity: number;\n  requires_shipping: boolean;\n  sku: string;\n  tax_code: string;\n  taxable: boolean;\n  title: string;\n  total_discount: string;\n  total_discount_set: ShopPresentedMoney;\n  variant_id: number;\n  variant_inventory_management: string;\n  variant_title: string;\n  vendor: string;\n  tax_lines?: TaxLinesEntity[] | null;\n  duties?: null[] | null;\n  discount_allocations?: DiscountAllocationsEntity[] | null;\n}",
        "type": "interface"
      },
      {
        "name": " DestinationLocationOrOriginLocation",
        "text": "\nexport interface DestinationLocationOrOriginLocation {\n  id: number;\n  country_code: string;\n  province_code: string;\n  name: string;\n  address1: string;\n  address2: string;\n  city: string;\n  zip: string;\n}",
        "type": "interface"
      },
      {
        "name": " DiscountAllocationsEntity",
        "text": "\nexport interface DiscountAllocationsEntity {\n  amount: string;\n  amount_set: ShopPresentedMoney;\n  discount_application_index: number;\n}",
        "type": "interface"
      },
      {
        "name": " PaymentDetails",
        "text": "\nexport interface PaymentDetails {\n  credit_card_bin: string;\n  avs_result_code?: any;\n  cvv_result_code?: any;\n  credit_card_number: string;\n  credit_card_company: string;\n}",
        "type": "interface"
      },
      {
        "name": " ShippingLinesEntity",
        "text": "\nexport interface ShippingLinesEntity {\n  id: number;\n  carrier_identifier?: any;\n  code: string;\n  delivery_category?: any;\n  discounted_price: string;\n  discounted_price_set: ShopPresentedMoney;\n  phone?: any;\n  price: string;\n  price_set: ShopPresentedMoney;\n  requested_fulfillment_service_id?: any;\n  source: string;\n  title: string;\n  tax_lines?: TaxLinesEntity[] | null;\n  discount_allocations?: null[] | null;\n}",
        "type": "interface"
      }
    ]
  },
  {
    "file": "@tw/types/types/FullStripeOrder.ts",
    "exports": [
      {
        "name": " StripeMessageBody",
        "text": "export interface StripeMessageBody {\n    id: string;\n    object: string;\n    account: string;\n    api_version: Date;\n    created: number;\n    data: FullStripeOrder;\n    livemode: boolean;\n    pending_webhooks: number;\n    request: {\n        id: string;\n        idempotency_key: string;\n    };\n    type: string;\n}",
        "type": "interface"
      },
      {
        "name": " FullStripeOrder",
        "text": "\n\nexport interface FullStripeOrder {\n    object: {\n        id: string;\n        object: string;\n        account_country: string;\n        account_name: string;\n        account_tax_ids: any;\n        amount_due: number;\n        amount_paid: number;\n        amount_remaining: number;\n        amount_shipping: number;\n        application: string;\n        application_fee_amount: string;\n        attempt_count: number;\n        attempted: boolean;\n        auto_advance: boolean;\n        automatic_tax: AutomaticTax;\n        billing_reason: string;\n        charge: string;\n        collection_method: string;\n        created: number;\n        currency: string;\n        custom_fields: any;\n        customer: string;\n        customer_address: string;\n        customer_email: string;\n        customer_name: string;\n        customer_phone: string;\n        customer_shipping: string;\n        customer_tax_exempt: string;\n        customer_tax_ids: any[];\n        default_payment_method: string;\n        default_source: string;\n        default_tax_rates: any[];\n        description: string;\n        discount: Discount;\n        discounts: string[];\n        due_date: string;\n        effective_at: string;\n        ending_balance: string;\n        footer: string;\n        from_invoice: string;\n        hosted_invoice_url: string;\n        invoice_pdf: string;\n        issuer: Issuer;\n        last_finalization_error: string;\n        latest_revision: string;\n        lines: Lines;\n        livemode: boolean;\n        metadata: any;\n        next_payment_attempt: number;\n        number: string;\n        on_behalf_of: string;\n        paid: boolean;\n        paid_out_of_band: boolean;\n        payment_intent: string;\n        payment_settings: PaymentSettings;\n        period_end: number;\n        period_start: number;\n        post_payment_credit_notes_amount: number;\n        pre_payment_credit_notes_amount: number;\n        quote: string;\n        receipt_number: string;\n        rendering: string;\n        shipping_cost: string;\n        shipping_details: string;\n        starting_balance: number;\n        statement_descriptor: string;\n        status: string;\n        status_transitions: StatusTransitions;\n        subscription: string;\n        subscription_details: SubscriptionDetails;\n        subtotal: number;\n        subtotal_excluding_tax: number;\n        tax: string;\n        test_clock: string;\n        total: number;\n        total_discount_amounts: DiscountAmount[];\n        total_excluding_tax: number;\n        total_tax_amounts: any[];\n        transfer_data: string;\n        webhooks_delivered_at: string;\n    }\n}",
        "type": "interface"
      },
      {
        "name": " AutomaticTax",
        "text": "\n\nexport interface AutomaticTax {\n    enabled: boolean;\n    liability: string;\n    status: string;\n}",
        "type": "interface"
      },
      {
        "name": " Discount",
        "text": "\n\nexport interface Discount {\n    id: string;\n    object: string;\n    checkout_session: string;\n    coupon: Coupon;\n    customer: string;\n    end: string;\n    invoice: string;\n    invoice_item: string;\n    promotion_code: string;\n    start: number;\n    subscription: string;\n    subscription_item: string;\n}",
        "type": "interface"
      },
      {
        "name": " Coupon",
        "text": "\n\nexport interface Coupon {\n    id: string;\n    object: string;\n    amount_off: string;\n    created: number;\n    currency: string;\n    duration: string;\n    duration_in_months: string;\n    livemode: boolean;\n    max_redemptions: string;\n    metadata: any;\n    name: string;\n    percent_off: number;\n    redeem_by: string;\n    times_redeemed: number;\n    valid: boolean;\n}",
        "type": "interface"
      },
      {
        "name": " Issuer",
        "text": "\n\nexport interface Issuer {\n    type: string;\n}",
        "type": "interface"
      },
      {
        "name": " Lines",
        "text": "\n\nexport interface Lines {\n    object: string;\n    data: Datum[];\n    has_more: boolean;\n    total_count: number;\n    url: string;\n}",
        "type": "interface"
      },
      {
        "name": " Datum",
        "text": "\n\nexport interface Datum {\n    id: string;\n    object: string;\n    amount: number;\n    amount_excluding_tax: number;\n    currency: string;\n    description: string;\n    discount_amounts: DiscountAmount[];\n    discountable: boolean;\n    discounts: any[];\n    invoice: string;\n    livemode: boolean;\n    metadata: any;\n    period: Period;\n    plan: Plan;\n    price: Price;\n    proration: boolean;\n    proration_details: ProrationDetails;\n    quantity: number;\n    subscription: string;\n    subscription_item: string;\n    tax_amounts: any[];\n    tax_rates: any[];\n    type: string;\n    unit_amount_excluding_tax: null | string;\n}",
        "type": "interface"
      },
      {
        "name": " DiscountAmount",
        "text": "\n\nexport interface DiscountAmount {\n    amount: number;\n    discount: string;\n}",
        "type": "interface"
      },
      {
        "name": " Period",
        "text": "\n\nexport interface Period {\n    end: number;\n    start: number;\n}",
        "type": "interface"
      },
      {
        "name": " Plan",
        "text": "\n\nexport interface Plan {\n    id: string;\n    object: string;\n    active: boolean;\n    aggregate_usage: string;\n    amount: string;\n    amount_decimal: number;\n    billing_scheme: string;\n    created: number;\n    currency: string;\n    interval: string;\n    interval_count: number;\n    livemode: boolean;\n    metadata: any;\n    meter: string;\n    nickname: string;\n    product: string;\n    tiers_mode: string;\n    transform_usage: string;\n    trial_period_days: string;\n    usage_type: string;\n}",
        "type": "interface"
      },
      {
        "name": " Price",
        "text": "\n\nexport interface Price {\n    id: string;\n    object: string;\n    active: boolean;\n    billing_scheme: string;\n    created: number;\n    currency: string;\n    custom_unit_amount: string;\n    livemode: boolean;\n    lookup_key: string;\n    metadata: any;\n    nickname: string;\n    product: string;\n    recurring: Recurring;\n    tax_behavior: string;\n    tiers_mode: string;\n    transform_quantity: number;\n    type: string;\n    unit_amount: string;\n    unit_amount_decimal: number;\n}",
        "type": "interface"
      },
      {
        "name": " Recurring",
        "text": "\n\nexport interface Recurring {\n    aggregate_usage: string;\n    interval: string;\n    interval_count: number;\n    meter: string;\n    trial_period_days: any;\n    usage_type: string;\n}",
        "type": "interface"
      },
      {
        "name": " ProrationDetails",
        "text": "\n\nexport interface ProrationDetails {\n    credited_items: any;\n}",
        "type": "interface"
      },
      {
        "name": " PaymentSettings",
        "text": "\n\nexport interface PaymentSettings {\n    default_mandate: string;\n    payment_method_options: string;\n    payment_method_types: any;\n}",
        "type": "interface"
      },
      {
        "name": " StatusTransitions",
        "text": "\n\nexport interface StatusTransitions {\n    finalized_at: string;\n    marked_uncollectible_at: string;\n    paid_at: string;\n    voided_at: string;\n}",
        "type": "interface"
      },
      {
        "name": " SubscriptionDetails",
        "text": "\n\nexport interface SubscriptionDetails {\n    metadata: any;\n}",
        "type": "interface"
      },
      {
        "name": " Request",
        "text": "\n\nexport interface Request {\n    id: string;\n    idempotency_key: string;\n}",
        "type": "interface"
      }
    ]
  },
  {
    "file": "@tw/types/types/FullWooOrder.ts",
    "exports": [
      {
        "name": " FullWooOrder",
        "text": "export interface FullWooOrder {\n    id: number;\n    parent_id: number;\n    status: string;\n    currency: string;\n    version: string;\n    prices_include_tax: boolean;\n    date_created: string;\n    date_modified: string;\n    discount_total: string;\n    discount_tax: string;\n    shipping_total: string;\n    shipping_tax: string;\n    cart_tax: string;\n    total: string;\n    total_tax: string;\n    customer_id: number;\n    order_key: string;\n    billing: WooBilling;\n    shipping: WooBilling;\n    payment_method: string;\n    payment_method_title: string;\n    transaction_id: string;\n    customer_ip_address: string;\n    customer_user_agent: string;\n    created_via: string;\n    customer_note: string;\n    date_completed?: string;\n    date_paid?: string;\n    cart_hash: string;\n    number: string;\n    meta_data: {\n        id: string; key: string;\n        value: string |\n            {\n                pys_landing: string;\n                pys_source: string;\n                pys_utm: string;\n                pys_browser_time: string;\n                last_pys_landing: string;\n                last_pys_source: string;\n                last_pys_utm: string;\n                pys_utm_id: string;\n                last_pys_utm_id: string;\n            } |\n            {\n                orders_count: number;\n                avg_order_value: number;\n                ltv: number\n            }\n    }[];\n    line_items: WooLineItem[];\n    tax_lines: {\n        id: number;\n        rate_code: string;\n        rate_id: number;\n        label: string;\n        compound: boolean;\n        tax_total: string;\n        shipping_tax_total: string;\n        rate_percent: string;\n        meta_data: any[]\n    }[];\n    shipping_lines: WooShippingLine[];\n    fee_lines: any[];\n    coupon_lines: any[];\n    refunds: any[];\n    payment_url: string;\n    is_editable: boolean;\n    needs_payment: boolean;\n    needs_processing: boolean;\n    date_created_gmt: string;\n    date_modified_gmt: string;\n    date_completed_gmt: string;\n    date_paid_gmt: string;\n    currency_symbol: string;\n    _links: {\n        self: {\n            href: string\n        }[];\n        collection: {\n            href: string\n        }[]\n    };\n}",
        "type": "interface"
      },
      {
        "name": " WooBilling",
        "text": "\n\nexport interface WooBilling {\n    first_name: string;\n    last_name: string;\n    company: string;\n    address_1: string;\n    address_2: string;\n    city: string;\n    state: string;\n    postcode: string;\n    country: string;\n    email: string;\n    phone: string;\n}",
        "type": "interface"
      },
      {
        "name": " WooShipping",
        "text": "\n\nexport interface WooShipping {\n    first_name: string;\n    last_name: string;\n    company: string;\n    address_1: string;\n    address_2: string;\n    city: string;\n    state: string;\n    postcode: string;\n    country: string;\n    phone: string;\n}",
        "type": "interface"
      },
      {
        "name": " WooShippingLine",
        "text": "\n\nexport interface WooShippingLine {\n    id: number;\n    method_title: string;\n    method_id: string;\n    instance_id: string;\n    total: string;\n    total_tax: string;\n    taxes: any[];\n    meta_data: {\n        id: number;\n        key: string;\n        value: string;\n        display_key: string;\n        display_value: string\n    }[]\n}",
        "type": "interface"
      },
      {
        "name": " WooLineItem",
        "text": "\n\nexport interface WooLineItem {\n    id: string;\n    name: string;\n    product_id: number;\n    variation_id: number;\n    quantity: number;\n    tax_class: string;\n    subtotal: string;\n    subtotal_tax: string;\n    total: string;\n    total_tax: string;\n    taxes: string;\n    meta_data: {\n        id: string;\n        key: string;\n        value: string;\n        display_key: string;\n        display_value: string\n    }[];\n    sku: string;\n    price: number;\n    img: {\n        id: number;\n        src: string\n    };\n    parent_name: string;\n}",
        "type": "interface"
      }
    ]
  },
  {
    "file": "@tw/types/types/Granularity.ts",
    "exports": [
      {
        "name": " GranularityArr",
        "text": "export const GranularityArr = ['hour', 'day', 'week', 'month', 'quarter', 'year', 'total'] as const;",
        "type": "variable"
      },
      {
        "name": " Granularity",
        "text": "\n\nexport type Granularity = (typeof GranularityArr)[number];",
        "type": "(typeof GranularityArr)[number]"
      },
      {
        "name": " allGranularity",
        "text": "\n\nexport type allGranularity = {\n  [t in Granularity]: t;\n};",
        "type": "{\n  [t in Granularity]: t;\n}"
      },
      {
        "name": " granularityRoles",
        "text": "\n\nexport const granularityRoles: allGranularity = {\n  hour: 'hour',\n  day: 'day',\n  week: 'week',\n  month: 'month',\n  quarter: 'quarter',\n  year: 'year',\n  total: 'total',\n};",
        "type": "allGranularity"
      }
    ]
  },
  {
    "file": "@tw/types/types/IndustryType.ts",
    "exports": [
      {
        "name": " IndustryTypesRoles",
        "text": "export const IndustryTypesRoles = [\n  \"all\",\n  \"art\",\n  \"baby\",\n  \"books\",\n  \"shoes\",\n  \"crafts\",\n  \"clothing\",\n  \"computers\",\n  \"electronics\",\n  \"collectibles\",\n  \"pet_supplies\",\n  \"home_garden\",\n  \"sporting_goods\",\n  \"toys_hobbies\",\n  \"health_beauty\",\n  \"office_products\",\n  \"digital_products\",\n  \"food_beverages\",\n  \"car_truck_parts\",\n  \"jewelry_watches\",\n  \"fashion_accessories\",\n  \"cellphones_accessories\",\n  \"hair_braids\",\n  \"other\",\n] as const;",
        "type": "variable"
      },
      {
        "name": " IndustryTypes",
        "text": "\n\nexport type IndustryTypes = typeof IndustryTypesRoles[number];",
        "type": "typeof IndustryTypesRoles[number]"
      }
    ]
  },
  {
    "file": "@tw/types/types/Influencers.ts",
    "exports": [
      {
        "name": " Influencer",
        "text": "export type Influencer = {\n  id?: string;\n  name: string;\n  profile_photo?: { name: string; type: string; url: string };\n  campaign: string;\n  destination_url?: string;\n  source?: string;\n  tracking_url?: string;\n  social_handle?: string;\n  discount_code?: string;\n  discount_value?: number;\n  one_time_spend?: number;\n  one_time_spend_date?: string;\n  sales_percentage?: number;\n  created_at?: string;\n  creatives: Array<CreativeType>;\n  is_auto_created?: boolean;\n  shouldDelete?: boolean;\n  expenses?: influencerExpense[];\n  links?: links[];\n};",
        "type": "{\n  id?: string;\n  name: string;\n  profile_photo?: { name: string; type: string; url: string };\n  campaign: string;\n  destination_url?: string;\n  source?: string;\n  tracking_url?: string;\n  social_handle?: string;\n  discount_code?: string;\n  discount_value?: number;\n  one_time_spend?: number;\n  one_time_spend_date?: string;\n  sales_percentage?: number;\n  created_at?: string;\n  creatives: Array<CreativeType>;\n  is_auto_created?: boolean;\n  shouldDelete?: boolean;\n  expenses?: influencerExpense[];\n  links?: links[];\n}"
      },
      {
        "name": " links",
        "text": "\n\nexport type links = {\n  id: string;\n  url?: string;\n  campaign: string;\n  source: string;\n  link: string;\n};",
        "type": "{\n  id: string;\n  url?: string;\n  campaign: string;\n  source: string;\n  link: string;\n}"
      },
      {
        "name": " influencerExpense",
        "text": "\nexport type influencerExpense =\n  | {\n      id: string;\n      type: 'time_based';\n      amount: number;\n      amount_type: 'currency';\n      start: string;\n      end: string | null;\n      recurring: 'weekly' | 'monthly' | 'one_time';\n      recurring_times: number;\n    }\n  | {\n      id: string;\n      type: 'order_based';\n      amount: number;\n      amount_type: 'percentage' | 'currency';\n      start: string;\n      end: string;\n    };",
        "type": "| {\n      id: string;\n      type: 'time_based';\n      amount: number;\n      amount_type: 'currency';\n      start: string;\n      end: string | null;\n      recurring: 'weekly' | 'monthly' | 'one_time';\n      recurring_times: number;\n    }\n  | {\n      id: string;\n      type: 'order_based';\n      amount: number;\n      amount_type: 'percentage' | 'currency';\n      start: string;\n      end: string;\n    }"
      },
      {
        "type": "function",
        "name": " isTimeBasedExpense",
        "text": "\n\nexport function isTimeBasedExpense(\n  expense: influencerExpense\n): expense is influencerExpense & { type: 'time_based' } {\n  return expense.type === 'time_based';\n}",
        "parameters": [
          {
            "name": "expense",
            "text": "expense: influencerExpense",
            "type": "influencerExpense"
          }
        ]
      },
      {
        "name": " CreativeType",
        "text": "\n\nexport interface CreativeType {\n  url: string;\n  type: string;\n  name?: string;\n  thumbnail?: string;\n}",
        "type": "interface"
      }
    ]
  },
  {
    "file": "@tw/types/types/JobType.ts",
    "exports": [
      {
        "name": " JobType",
        "text": "export declare type JobType =\n  | 'initial'\n  | 'updateToday'\n  | 'updateTodaySettings'\n  | 'updateTodayLight'\n  | 'updateWeek'\n  | 'update'\n  | 'create'\n  | 'edited'\n  | 'webhook';",
        "type": "| 'initial'\n  | 'updateToday'\n  | 'updateTodaySettings'\n  | 'updateTodayLight'\n  | 'updateWeek'\n  | 'update'\n  | 'create'\n  | 'edited'\n  | 'webhook'"
      },
      {
        "name": " AllJobTypes",
        "text": "\n\nexport type AllJobTypes = {\n  [type in JobType]: type;\n};",
        "type": "{\n  [type in JobType]: type;\n}"
      },
      {
        "name": " JobTypes",
        "text": "\n\nexport const JobTypes: AllJobTypes = {\n  initial: 'initial',\n  updateToday: 'updateToday',\n  updateTodaySettings: 'updateTodaySettings',\n  updateTodayLight: 'updateTodayLight',\n  updateWeek: 'updateWeek',\n  update: 'update',\n  create: 'create',\n  edited: 'edited',\n  webhook: 'webhook',\n};",
        "type": "AllJobTypes"
      }
    ]
  },
  {
    "file": "@tw/types/types/MetricTables.ts",
    "exports": [
      {
        "name": " PixelMetrics",
        "text": "\n\nexport interface PixelMetrics {\n  shop: string;\n  source: string;\n  account_id: string;\n  campaign_id: string;\n  adset_id?: string;\n  ad_id?: string;\n  date: string;\n  hour: number;\n  date_model: AttributionDateModels;\n  attribution_model: AttributionModels;\n  orders: number;\n  total_price: number;\n  total_cogs: number;\n  new_customer_orders: number;\n  new_customer_revenue: number;\n  new_customer_cogs: number;\n  visitors?: number;\n  // new_visitors?: number;\n}",
        "type": "interface"
      },
      {
        "name": " HourlyStatsKey",
        "text": "\n\nexport interface HourlyStatsKey {\n  service_id: string;\n  account_id: string;\n  campaign_id: string;\n  adset_id: string;\n  ad_id: string;\n  day: string;\n  hour: number;\n}",
        "type": "interface"
      },
      {
        "name": " CreativeStatsKey",
        "text": "\nexport type CreativeStatsKey = {\n  asset_id: string;\n  asset_type: CreativeTypes;\n  thumbnail: string,\n  image: string,\n  body: string,\n} & HourlyStatsKey;",
        "type": "{\n  asset_id: string;\n  asset_type: CreativeTypes;\n  thumbnail: string,\n  image: string,\n  body: string,\n} & HourlyStatsKey"
      },
      {
        "name": " Metrics",
        "text": "\n\nexport interface Metrics {\n  spend: number;\n  conversion_value: number;\n  clicks: number;\n  impressions: number;\n  purchases: number;\n  all_conversion_value?: number; // Require by Google Ads and apply only for it\n  all_conversions?: number; // Require by Google Ads and apply only for it\n  meta_purchases?: number;\n  meta_conversion_value?: number;\n  outbound_clicks?: number;\n  one_day_view_conversion_value?: number; // for FB\n  one_day_view_purchases_value?: number;//for FB  \n}",
        "type": "interface"
      },
      {
        "name": " CreativeMetrics",
        "text": "\nexport interface CreativeMetrics {\n  spend: number;\n  conversion_value: number;\n  clicks: number;\n  impressions: number;\n  purchases: number;\n  is_dynamic: boolean;\n  weight: number;\n  one_day_view_conversion_value?: number; // for FB\n  one_day_view_purchases_value?: number;//for FB\n  outbound_clicks?: number; // for FB\n  total_video_view?: number; // for FB\n  three_second_video_view?: number; // for FB\n  meta_conversion_value?: number; // for FB\n  meta_purchases?: number;  // for FB\n}",
        "type": "interface"
      },
      {
        "name": " CreativeStats",
        "text": "\n\nexport type CreativeStats = CreativeStatsKey & CreativeMetrics;",
        "type": "CreativeStatsKey & CreativeMetrics"
      },
      {
        "name": " AdMetrics",
        "text": "\nexport type AdMetrics = {\n  data_type: DataTypesIds;\n  ad_type?: number;\n} & HourlyStatsKey &\n  Metrics;",
        "type": "{\n  data_type: DataTypesIds;\n  ad_type?: number;\n} & HourlyStatsKey &\n  Metrics"
      },
      {
        "name": " CreativeAttributesTable",
        "text": "\n\nexport interface CreativeAttributesTable {\n  account_id: string;\n  asset_id: string;\n  asset_type: string;\n  body: string;\n  image: string;\n  service_id: string;\n  thumbnail: string;\n}",
        "type": "interface"
      },
      {
        "name": " AdsAttribute",
        "text": "\n\nexport type AdsAttribute = {\n  account_id: string;\n  service_id: string;\n  name: string;\n  status: string;\n  campaign_id: string;\n  ad_id: string;\n  adset_id: string;\n  image_url: string;\n  currency: string;\n  timezone: string;\n  campaign_name: string;\n  adset_name: string;\n  account_name: string;\n  campaign_status: string;\n  adset_status: string;\n};",
        "type": "{\n  account_id: string;\n  service_id: string;\n  name: string;\n  status: string;\n  campaign_id: string;\n  ad_id: string;\n  adset_id: string;\n  image_url: string;\n  currency: string;\n  timezone: string;\n  campaign_name: string;\n  adset_name: string;\n  account_name: string;\n  campaign_status: string;\n  adset_status: string;\n}"
      },
      {
        "name": " TwStats",
        "text": "\n\nexport interface TwStats {\n  metrics_pixel: PixelMetrics;\n  metrics_creative: CreativeStats;\n  metrics_ad: AdMetrics;\n  metrics_creative_attribute: CreativeAttributesTable;\n  metrics_ad_attribute: AdsAttribute;\n}",
        "type": "interface"
      }
    ]
  },
  {
    "file": "@tw/types/types/Metrics.ts",
    "exports": [
      {
        "name": " RawMetricsKeysArr",
        "text": "export const RawMetricsKeysArr = [\n  'spend',\n  'conversionValue',\n  'purchases',\n  'clicks',\n  'impressions',\n  'subscriptionSignUps',\n  'subscriptionSignUpsRate',\n  'subscriptionChurns',\n  'subscriptionChurnsRate',\n  'allConversions',\n  'allConversionValue',\n  'outboundClicks',\n  'oneDayViewConversionValue',\n  'oneDayViewPurchasesValue',\n  'threeSecondVideoView',\n  'totalVideoView',\n  'metaPurchases',\n  'metaConversionValue',\n  'sixSecondVideoView',\n  'totalCompletePaymentRate',\n  'completePayment',\n  'onWebOrder',\n  'totalOnWebOrderValue',\n  'campaignsConversionValue',\n  'flowsConversionValue',\n  'unsubscribed',\n  'subscribedToList',\n  'openedEmail',\n  'receivedEmail',\n  'clickedSms',\n  'clickedEmail',\n  'bidAmount',\n  'budget',\n  'adsetBudget',\n  'campaignBudget',\n  'responsesRate',\n  'responsesFacebook',\n  'responsesInstagram',\n  'responsesGoogle',\n  'responsesSnapchat',\n  'responsesPinterest',\n  'responsesTikTok',\n  'uniqueCustomers',\n  'lifetimeValue',\n  'frequency',\n  'ltvPerCpa',\n] as const;",
        "type": "variable"
      },
      {
        "name": " CalculatedMetricsKeysArr",
        "text": "\n\nexport const CalculatedMetricsKeysArr = [\n  'roas',\n  'cpc',\n  'ctr',\n  'cpm',\n  'cpa',\n  'aov',\n  'thumbStopRatio',\n  'outboundCtr',\n] as const;",
        "type": "variable"
      },
      {
        "name": " RawMetricsKeys",
        "text": "\n\nexport type RawMetricsKeys = (typeof RawMetricsKeysArr)[number];",
        "type": "(typeof RawMetricsKeysArr)[number]"
      },
      {
        "name": " CalculatedMetricsKeys",
        "text": "\n\nexport type CalculatedMetricsKeys = (typeof CalculatedMetricsKeysArr)[number];",
        "type": "(typeof CalculatedMetricsKeysArr)[number]"
      },
      {
        "name": " RawMetrics",
        "text": "\n\nexport declare type RawMetrics = {\n  [metric in RawMetricsKeys]?: number;\n};",
        "type": "{\n  [metric in RawMetricsKeys]?: number;\n}"
      },
      {
        "name": " RawMetricsToConvert",
        "text": "\n\nexport declare type RawMetricsToConvert = keyof Pick<\n  RawMetrics,\n  | 'spend'\n  | 'conversionValue'\n  | 'allConversionValue'\n  | 'oneDayViewConversionValue'\n  | 'totalCompletePaymentRate'\n  | 'totalOnWebOrderValue'\n>;",
        "type": "keyof Pick<\n  RawMetrics,\n  | 'spend'\n  | 'conversionValue'\n  | 'allConversionValue'\n  | 'oneDayViewConversionValue'\n  | 'totalCompletePaymentRate'\n  | 'totalOnWebOrderValue'\n>"
      },
      {
        "name": " allRawMetricsToConvert",
        "text": "\n\nexport const allRawMetricsToConvert: Record<string, RawMetricsToConvert> = {\n  spend: 'spend',\n  conversionValue: 'conversionValue',\n  allConversionValue: 'allConversionValue',\n  oneDayViewConversionValue: 'oneDayViewConversionValue',\n  totalCompletePaymentRate: 'totalCompletePaymentRate',\n  totalOnWebOrderValue: 'totalOnWebOrderValue',\n};",
        "type": "Record<string, RawMetricsToConvert>"
      },
      {
        "name": " isMetricToConvert",
        "text": "\n\nexport const isMetricToConvert = (key: string): key is RawMetricsToConvert => {\n  return Object.keys(allRawMetricsToConvert).includes(key);\n};",
        "type": "variable"
      },
      {
        "name": " CalculatedMetrics",
        "text": "\n\nexport declare type CalculatedMetrics = {\n  [metric in CalculatedMetricsKeys]?: number;\n};",
        "type": "{\n  [metric in CalculatedMetricsKeys]?: number;\n}"
      },
      {
        "name": " AllMetrics",
        "text": "\n\nexport type AllMetrics = {\n  [metric in keyof (RawMetrics & Required<CalculatedMetrics>)]: metric;\n};",
        "type": "{\n  [metric in keyof (RawMetrics & Required<CalculatedMetrics>)]: metric;\n}"
      },
      {
        "name": " rawPixelMandatoryMetricsNames",
        "text": "\n\nexport const rawPixelMandatoryMetricsNames = [\n  'pixelPurchases',\n  'pixelNcPurchases',\n  'pixelConversionValue',\n  'pixelNcConversionValue',\n  'pixelCogs',\n  'pixelNcCogs',\n  'pixelVisitors',\n  'pixelUniqueVisitors',\n  'pixelNewVisitors',\n  'pixelAtc',\n  'pixelUniqueAtc',\n  'pixelEmailSignup',\n  'pixelProductCount',\n] as const;",
        "type": "variable"
      },
      {
        "name": " rawPixelOptionalMetricsNames",
        "text": "\n\nexport const rawPixelOptionalMetricsNames = [\n  'pixelTimeOnSite',\n  'pixelBounces',\n  'pixelNonBouncedVisitors',\n  'pixelPageViews',\n] as const;",
        "type": "variable"
      },
      {
        "name": " RawPixelMetrics",
        "text": "\n\nexport type RawPixelMetrics = RawPixelMandatoryMetrics & Partial<RawPixelOptionalMetrics>;",
        "type": "RawPixelMandatoryMetrics & Partial<RawPixelOptionalMetrics>"
      },
      {
        "name": " CalculatedPixelMetricsKeysArr",
        "text": "\n\nexport const CalculatedPixelMetricsKeysArr = [\n  'pixelRoas',\n  'pixelCpa',\n  'pixelNcCpa',\n  'pixelAov',\n  'pixelNcAov',\n  'pixelProfit',\n] as const;",
        "type": "variable"
      },
      {
        "name": " CalculatedPixelMetricsKeys",
        "text": "\n\nexport type CalculatedPixelMetricsKeys = (typeof CalculatedPixelMetricsKeysArr)[number];",
        "type": "(typeof CalculatedPixelMetricsKeysArr)[number]"
      },
      {
        "name": " CalculatedPixelMetrics",
        "text": "\n\nexport declare type CalculatedPixelMetrics = {\n  [metric in CalculatedPixelMetricsKeys]?: number;\n};",
        "type": "{\n  [metric in CalculatedPixelMetricsKeys]?: number;\n}"
      },
      {
        "name": " ExpandedCalculatedPixelMetricsKeysArr",
        "text": "\n\nexport const ExpandedCalculatedPixelMetricsKeysArr = [\n  'pixelNcRoas',\n  'pixelNcConversionRate',\n  'pixelCostPerAtc',\n  'pixelCostPerVisitor',\n  'pixelCostPerNewVisitor',\n  'pixelCostPerEmailSignup',\n  'pixelEmailSignupRate',\n  'pixelConversionRate',\n  'pixelCvDelta',\n  'pixelAvgTimeOnSite',\n  'pixelAvgPageViews',\n  'pixelBounceRate',\n  'pixelAvgTouchpoints',\n  'pixelAvgTimeToConversion',\n  'pixelNewVisitorPerc',\n  'pixelNcPurchasesPerc',\n] as const;",
        "type": "variable"
      },
      {
        "name": " ExpandedCalculatedPixelMetricsKeys",
        "text": "\n\nexport type ExpandedCalculatedPixelMetricsKeys =\n  (typeof ExpandedCalculatedPixelMetricsKeysArr)[number];",
        "type": "(typeof ExpandedCalculatedPixelMetricsKeysArr)[number]"
      },
      {
        "name": " ExpandedCalculatedPixelMetrics",
        "text": "\n\nexport type ExpandedCalculatedPixelMetrics = {\n  [metric in ExpandedCalculatedPixelMetricsKeys]?: number;\n} & CalculatedPixelMetrics;",
        "type": "{\n  [metric in ExpandedCalculatedPixelMetricsKeys]?: number;\n} & CalculatedPixelMetrics"
      },
      {
        "name": " AllPixelMetrics",
        "text": "\n\nexport type AllPixelMetrics = {\n  [metric in keyof (RawPixelMetrics & Required<CalculatedPixelMetrics>)]: metric;\n};",
        "type": "{\n  [metric in keyof (RawPixelMetrics & Required<CalculatedPixelMetrics>)]: metric;\n}"
      },
      {
        "name": " AllMetricsAndPixelMetricsKeys",
        "text": "\n\nexport type AllMetricsAndPixelMetricsKeys = RawMetrics &\n  CalculatedMetrics &\n  RawPixelMetrics &\n  CalculatedPixelMetrics;",
        "type": "RawMetrics &\n  CalculatedMetrics &\n  RawPixelMetrics &\n  CalculatedPixelMetrics"
      },
      {
        "name": " blendedMetrics",
        "text": "\n\nexport const blendedMetrics = [\n  'marketingEfficiencyRatio',\n  'revenuePerSession',\n  'netProfit',\n  'netProfitMargin',\n  'newCustomerCostPerAcquisition',\n  'cashTurnover',\n  'blendedSpend',\n  'blendedConversionValue',\n  'blendedPurchases',\n  'blendedClicks',\n  'blendedImpressions',\n  'blendedAttributedRoas',\n  'blendedCostPerAcquisition',\n  'blendedRoas',\n  'blendedCTR',\n  'blendedCPC',\n  'blendedNewCustomerRoas',\n  'blendedCpc',\n  'blendedCtr',\n  'blendedCpm',\n  'blendedCpa',\n  'blendedNcCpa',\n  'blendedAov',\n  'blendedPoas',\n] as const;",
        "type": "variable"
      },
      {
        "name": " BlendedMetrics",
        "text": "\n\nexport type BlendedMetrics = (typeof blendedMetrics)[number];",
        "type": "(typeof blendedMetrics)[number]"
      },
      {
        "name": " ShopMetrics",
        "text": "\n\nexport const ShopMetrics = [\n  'orders',\n  'ordersWithAmount',\n  'refunds',\n  'sales',\n  'taxes',\n  'shipping',\n  'grossSales',\n  'discounts',\n  'newCustomerOrders',\n  'newCustomerSales',\n  'itemsSold',\n  'itemsSoldAvg',\n  'avgSold30',\n  'totalSold30',\n  'itemsSoldTotal',\n  'netSales',\n  'returningCustomerSales',\n  'returningCustomerOrders',\n  'refundsRate',\n  'itemsInInventory',\n  'conversionRate',\n  'daysOfStock',\n  'grossProfit',\n  'returnRate',\n  'returnsTotal',\n  'customerCount',\n  'contributionMargin',\n  'contributionMarginPerUnit',\n  'dateStockRunsOut',\n  'rpr',\n  'ltv60',\n  'ltv90',\n  'ltv180',\n  'ltv365',\n  'revenue',\n  'orderValue',\n  'ncOrderValue',\n  'productNcAov',\n  'productAov',\n  'productCpa',\n  'ordersWithProduct',\n  'ncRevenue',\n  'ncGrossProfit',\n  'ncOrdersWithProduct',\n  'adsInventory',\n  'cogs',\n  'cogsOrders',\n  'cogsRefunds',\n  'paymentGateways',\n  'handlingFees',\n  'inventoryItems',\n  'inventoryItemsMissing',\n  'inventoryCost',\n  'inventoryValue',\n  'newCustomersPercent',\n  'oldCustomersPercent',\n  'rcRevenue',\n  'avgPurchasePrice',\n  'modePurchasePrice',\n  'addedToCartEvents',\n  'customSpend',\n  'sessions',\n] as const;",
        "type": "variable"
      },
      {
        "name": " ShopMetrics",
        "text": "\n\nexport type ShopMetrics = (typeof ShopMetrics)[number];",
        "type": "(typeof ShopMetrics)[number]"
      },
      {
        "name": " MetricsKeysArr",
        "text": "\n\nexport const MetricsKeysArr = [\n  ...CalculatedMetricsKeysArr,\n  ...RawMetricsKeysArr,\n  ...rawPixelOptionalMetricsNames,\n  ...rawPixelMandatoryMetricsNames,\n  ...CalculatedPixelMetricsKeysArr,\n  ...ExpandedCalculatedPixelMetricsKeysArr,\n  ...blendedMetrics,\n  ...ShopMetrics,\n] as const;",
        "type": "variable"
      },
      {
        "name": " MetricsKeys",
        "text": "\n\nexport type MetricsKeys = (typeof MetricsKeysArr)[number];",
        "type": "(typeof MetricsKeysArr)[number]"
      },
      {
        "name": " EntityWithMetrics",
        "text": "\n\nexport type EntityWithMetrics = {\n  [metric in MetricsKeys]?: number;\n};",
        "type": "{\n  [metric in MetricsKeys]?: number;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/MetricsEntity.ts",
    "exports": [
      {
        "name": " Entity",
        "text": "export declare type Entity = 'channel' | 'ad_account' | 'campaign' | 'adset' | 'ad';",
        "type": "'channel' | 'ad_account' | 'campaign' | 'adset' | 'ad'"
      },
      {
        "name": " EntitiesIds",
        "text": "\nexport declare type EntitiesIds = 'account_ids' | 'campaign_ids' | 'adset_ids' | 'ad_ids';",
        "type": "'account_ids' | 'campaign_ids' | 'adset_ids' | 'ad_ids'"
      },
      {
        "name": " AllEntitiesIdsParams",
        "text": "\n\nexport declare type AllEntitiesIdsParams = {\n  [entity in EntitiesIds]?: string[];\n};",
        "type": "{\n  [entity in EntitiesIds]?: string[];\n}"
      },
      {
        "name": " allEntities",
        "text": "\n\nexport type allEntities = {\n  [t in Entity]: t;\n};",
        "type": "{\n  [t in Entity]: t;\n}"
      },
      {
        "name": " smallEntities",
        "text": "\n\nexport declare type smallEntities = {\n  [t in Exclude<Entity, 'channel' | 'ad_account'>]: t;\n};",
        "type": "{\n  [t in Exclude<Entity, 'channel' | 'ad_account'>]: t;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/MetricsQueryStringParams.ts",
    "exports": [
      {
        "name": " MetricsFilterOperator",
        "text": "\n\nexport type MetricsFilterOperator =\n  | 'contains'\n  | 'not_contains'\n  | 'equals'\n  | 'not_equals'\n  | 'greater_than'\n  | 'greater_or_equal_than'\n  | 'less_than'\n  | 'less_or_equal_than';",
        "type": "| 'contains'\n  | 'not_contains'\n  | 'equals'\n  | 'not_equals'\n  | 'greater_than'\n  | 'greater_or_equal_than'\n  | 'less_than'\n  | 'less_or_equal_than'"
      },
      {
        "name": " MetricsFilterOperands",
        "text": "\nexport type MetricsFilterOperands =\n  | 'campaign_id' // equals, not_equals\n  | 'campaign_name' // all operators\n  | 'adset_id' // equals, not_equals\n  | 'adset_name' // all operators\n  | 'ad_id' // equals, not_equals\n  | 'ad_name' // all operators\n  | 'roas'\n  | 'cpc'\n  | 'cpm'\n  | 'spend'\n  | 'impressions'\n  | 'pixelRoas';",
        "type": "| 'campaign_id' // equals, not_equals\n  | 'campaign_name' // all operators\n  | 'adset_id' // equals, not_equals\n  | 'adset_name' // all operators\n  | 'ad_id' // equals, not_equals\n  | 'ad_name' // all operators\n  | 'roas'\n  | 'cpc'\n  | 'cpm'\n  | 'spend'\n  | 'impressions'\n  | 'pixelRoas'"
      },
      {
        "name": " ShopifyMetricsFilterOperands",
        "text": "\n\nexport type ShopifyMetricsFilterOperands = 'sources' | 'order_tags';",
        "type": "'sources' | 'order_tags'"
      },
      {
        "name": " AdSegmentationFilters",
        "text": "\n// | 'customer_tags' //will be added in the NEAREST future, pls don't delete\n\nexport type AdSegmentationFilters = {\n  [service_id: string]: FilterExpressions<\n    MetricsFilterOperands | ShopifyMetricsFilterOperands,\n    MetricsFilterOperator\n  >[]; // with AND between the expressions\n};",
        "type": "{\n  [service_id: string]: FilterExpressions<\n    MetricsFilterOperands | ShopifyMetricsFilterOperands,\n    MetricsFilterOperator\n  >[]; // with AND between the expressions\n}"
      },
      {
        "name": " MetricsFilterExpression",
        "text": "\n\nexport type MetricsFilterExpression = FilterExpression<\n  MetricsFilterOperands | ShopifyMetricsFilterOperands,\n  MetricsFilterOperator\n>;",
        "type": "FilterExpression<\n  MetricsFilterOperands | ShopifyMetricsFilterOperands,\n  MetricsFilterOperator\n>"
      },
      {
        "name": " MetricsQueryStringParams",
        "text": "\n\nexport declare type MetricsQueryStringParams = {\n  start: string;\n  end: string;\n  data_type: DataTypesIds;\n  account_ids: string[];\n  granularity: Granularity;\n  entity?: Entity;\n  currency?: string;\n  filters?: MetricsFilterExpression[][];\n  filtersAllServices?: { [key in ServicesIds]?: MetricsFilterExpression[][] };\n  fetchFiltersOnServer?: boolean;\n  shopId?: string;\n  family?: BTFamilies;\n  attributes?: (keyof AnalyticsAttributes)[];\n  sort_by?: AdsSortBy;\n  sort_direction?: SortDirection;\n  splitFetchMetricsTable?: boolean;\n  useNexus?: boolean;\n  forceBigTable?: boolean;\n} & (\n  | { service_id: ServicesIds; service_ids?: ServicesIds[] }\n  | { service_ids: ServicesIds[]; service_id?: ServicesIds }\n);",
        "type": "{\n  start: string;\n  end: string;\n  data_type: DataTypesIds;\n  account_ids: string[];\n  granularity: Granularity;\n  entity?: Entity;\n  currency?: string;\n  filters?: MetricsFilterExpression[][];\n  filtersAllServices?: { [key in ServicesIds]?: MetricsFilterExpression[][] };\n  fetchFiltersOnServer?: boolean;\n  shopId?: string;\n  family?: BTFamilies;\n  attributes?: (keyof AnalyticsAttributes)[];\n  sort_by?: AdsSortBy;\n  sort_direction?: SortDirection;\n  splitFetchMetricsTable?: boolean;\n  useNexus?: boolean;\n  forceBigTable?: boolean;\n} & (\n  | { service_id: ServicesIds; service_ids?: ServicesIds[] }\n  | { service_ids: ServicesIds[]; service_id?: ServicesIds }\n)"
      }
    ]
  },
  {
    "file": "@tw/types/types/MetricsRemoveRequestParams.ts",
    "exports": [
      {
        "name": " MetricsRemoveRequestParams",
        "text": "\n\nexport declare type MetricsRemoveRequestParams = {\n  account_ids: string[];\n  service_id: ServicesIds;\n  dataType?: DataTypesIds;\n  start?: string;\n  end?: string;\n  day?: string;\n  timezone?: string;\n  transactionId?: string;\n};",
        "type": "{\n  account_ids: string[];\n  service_id: ServicesIds;\n  dataType?: DataTypesIds;\n  start?: string;\n  end?: string;\n  day?: string;\n  timezone?: string;\n  transactionId?: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/MetricsRow.ts",
    "exports": [
      {
        "name": " BigTableRow",
        "text": "\n\nexport type BigTableRow = {\n  key: string;\n  value: Record<string, RowValue[]>;\n};",
        "type": "{\n  key: string;\n  value: Record<string, RowValue[]>;\n}"
      },
      {
        "name": " RowsWithLastData",
        "text": "\n\nexport type RowsWithLastData = {\n  key: string;\n  value: Record<string, RawMetrics>;\n};",
        "type": "{\n  key: string;\n  value: Record<string, RawMetrics>;\n}"
      },
      {
        "name": " SingleParsedRow",
        "text": "\n\nexport type SingleParsedRow = {\n  date: string;\n  metrics: RawMetrics;\n}[];",
        "type": "{\n  date: string;\n  metrics: RawMetrics;\n}[]"
      }
    ]
  },
  {
    "file": "@tw/types/types/MetricsServiceTransformerRes.ts",
    "exports": [
      {
        "name": " MetricsServiceTransformerRes",
        "text": "\n\nexport type MetricsServiceTransformerRes = {\n  metadata: RawFileMetadata;\n  rows: MetricsTransformer;\n  attributes: AnalyticsAttributes[];\n};",
        "type": "{\n  metadata: RawFileMetadata;\n  rows: MetricsTransformer;\n  attributes: AnalyticsAttributes[];\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/MetricsTableData.ts",
    "exports": [
      {
        "name": " MetricsTableData",
        "text": "export declare type MetricsTableData = {\n  spend?: number;\n  conversionValue?: number;\n  clicks?: number;\n  impressions?: number;\n  purchases?: number;\n  allConversionValue?: number; // Require by Google Ads and apply only for it\n  allConversions?: number; // Require by Google Ads and apply only for it\n  oneDayViewConversionValue?: number; // for FB\n  oneDayViewPurchasesValue?: number; // for FB\n  outboundClicks?: number; // for FB\n  totalVideoView?: number; // for FB\n  threeSecondVideoView?: number; // for FB\n  metaConversionValue?: number; // for FB\n  metaPurchases?: number; // for FB\n  campaignsConversionValue?: number; // for Klaviyo\n  flowsConversionValue?: number; // for Klaviyo\n  unsubscribed?: number; // for Klaviyo\n  subscribedToList?: number; // for Klaviyo\n  openedEmail?: number; // for Klaviyo\n  receivedEmail?: number; // for Klaviyo\n  clickedSms?: number; // for Klaviyo\n  clickedEmail?: number; // for Klaviyo\n  flowsCount?: number; // for Klaviyo\n  totalCompletePaymentRate?: number; // for tiktok\n  totalOnWebOrderValue?: number; // for tiktok\n  completePayment?: number; // for tiktok\n  onWebOrder?: number; // for tiktok\n  engagements?: number; // for twitter ads\n  follows?: number; // for twitter ads\n};",
        "type": "{\n  spend?: number;\n  conversionValue?: number;\n  clicks?: number;\n  impressions?: number;\n  purchases?: number;\n  allConversionValue?: number; // Require by Google Ads and apply only for it\n  allConversions?: number; // Require by Google Ads and apply only for it\n  oneDayViewConversionValue?: number; // for FB\n  oneDayViewPurchasesValue?: number; // for FB\n  outboundClicks?: number; // for FB\n  totalVideoView?: number; // for FB\n  threeSecondVideoView?: number; // for FB\n  metaConversionValue?: number; // for FB\n  metaPurchases?: number; // for FB\n  campaignsConversionValue?: number; // for Klaviyo\n  flowsConversionValue?: number; // for Klaviyo\n  unsubscribed?: number; // for Klaviyo\n  subscribedToList?: number; // for Klaviyo\n  openedEmail?: number; // for Klaviyo\n  receivedEmail?: number; // for Klaviyo\n  clickedSms?: number; // for Klaviyo\n  clickedEmail?: number; // for Klaviyo\n  flowsCount?: number; // for Klaviyo\n  totalCompletePaymentRate?: number; // for tiktok\n  totalOnWebOrderValue?: number; // for tiktok\n  completePayment?: number; // for tiktok\n  onWebOrder?: number; // for tiktok\n  engagements?: number; // for twitter ads\n  follows?: number; // for twitter ads\n}"
      },
      {
        "name": " MetricsTableDataWithCurrency",
        "text": "\n\n// TODO: deprecate\nexport declare type MetricsTableDataWithCurrency = MetricsTableData & {\n  currency?: string;\n};",
        "type": "MetricsTableData & {\n  currency?: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/MetricsTableRow.ts",
    "exports": [
      {
        "name": " MetricsTableRow",
        "text": "\n\nexport declare type MetricsTableRow = {\n  channelId: string; // serviceId.dataType\n  accountId: string;\n  campaignId?: string;\n  adsetId?: string;\n  adId?: string;\n  currency?: string;\n  date: string;\n  hour: string;\n  slot: number;\n  adType?: number; //for youtube\n  data: MetricsTableData;\n};",
        "type": "{\n  channelId: string; // serviceId.dataType\n  accountId: string;\n  campaignId?: string;\n  adsetId?: string;\n  adId?: string;\n  currency?: string;\n  date: string;\n  hour: string;\n  slot: number;\n  adType?: number; //for youtube\n  data: MetricsTableData;\n}"
      },
      {
        "name": " MetricsTableDayRow",
        "text": "\n\nexport type MetricsTableDayRow = Omit<MetricsTableRow, 'hour'>;",
        "type": "Omit<MetricsTableRow, 'hour'>"
      }
    ]
  },
  {
    "file": "@tw/types/types/MetricsTransformer.ts",
    "exports": [
      {
        "name": " MetricsTransformer",
        "text": "\n\nexport type MetricsTransformer = { hours_rows: MetricsTableRow[]; day_rows: MetricsTableDayRow[] };",
        "type": "{ hours_rows: MetricsTableRow[]; day_rows: MetricsTableDayRow[] }"
      },
      {
        "name": " CreativeMetricsTransformer",
        "text": "\n\nexport type CreativeMetricsTransformer = {\n  regularCreativeMetricRows: CreativeMetricsTableRow[];\n  dynamicCreativeMetricRows: CreativeMetricsTableRow[];\n};",
        "type": "{\n  regularCreativeMetricRows: CreativeMetricsTableRow[];\n  dynamicCreativeMetricRows: CreativeMetricsTableRow[];\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/Nlq.ts",
    "exports": [
      {
        "type": "enum",
        "name": " NlqTypes",
        "text": "\n\nexport enum NlqTypes {\n  QUERY = \"QUERY\",\n  RESULT = \"RESULT\",\n}"
      },
      {
        "name": " NlqQuestion",
        "text": "\n\nexport type NlqQuestion = {\n  shopId: string;\n  userId: string;\n  question: string;\n  type: NlqTypes;\n  createdAt: Date | Timestamp;\n  resutleReference?: string;\n};",
        "type": "{\n  shopId: string;\n  userId: string;\n  question: string;\n  type: NlqTypes;\n  createdAt: Date | Timestamp;\n  resutleReference?: string;\n}"
      },
      {
        "name": " NlqResult",
        "text": "\n\nexport type NlqResult = {\n  shopId: string;\n  userId: string;\n  question: string;\n  query: string;\n  data?: {\n    [key: string]: any;\n  };\n  insights: string;\n  type: NlqTypes;\n  createdAt: Date | Timestamp;\n  queryReference?: string;\n  data_types?: { x: any[]; y: any[] } | any;\n};",
        "type": "{\n  shopId: string;\n  userId: string;\n  question: string;\n  query: string;\n  data?: {\n    [key: string]: any;\n  };\n  insights: string;\n  type: NlqTypes;\n  createdAt: Date | Timestamp;\n  queryReference?: string;\n  data_types?: { x: any[]; y: any[] } | any;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/OnlyOne.ts",
    "exports": [
      {
        "name": " OnlyOne",
        "text": "export type OnlyOne<T extends Record<string, any>> = {\n  [K in keyof T]: Pick<T, K> & Partial<Record<Exclude<keyof T, K>, undefined>>;\n}[keyof T];",
        "type": "{\n  [K in keyof T]: Pick<T, K> & Partial<Record<Exclude<keyof T, K>, undefined>>;\n}[keyof T]"
      }
    ]
  },
  {
    "file": "@tw/types/types/OnlyStringKeys.ts",
    "exports": [
      {
        "name": " OnlyStringKeys",
        "text": "export type OnlyStringKeys<R extends any, K extends keyof R = keyof R> = K extends string\n  ? K\n  : never;",
        "type": "K extends string\n  ? K\n  : never"
      }
    ]
  },
  {
    "file": "@tw/types/types/PPSData.ts",
    "exports": [
      {
        "name": " PPSData",
        "text": "export type PPSData = {\n  id?: string;\n  provider_id: 'shopify';\n  provider_account: string;\n  type: 'FAIRING' | 'KNO' | 'TW-survey';\n  survey_id?: string;\n  updated_at: string; // date\n  currency: string;\n  order_id: string;\n  order_total: number;\n  order_total_usd?: number;\n  question: string;\n  question_id: string;\n  response: string;\n  response_id: string;\n  free_text_response?: string;\n  response_date_time: string; // date\n  source?: string;\n  tw_service?: string;\n  question_type?: 'custom' | 'standard';\n  customer_email?: string;\n  customer_id?: string;\n  customer_phone?: string;\n}",
        "type": "{\n  id?: string;\n  provider_id: 'shopify';\n  provider_account: string;\n  type: 'FAIRING' | 'KNO' | 'TW-survey';\n  survey_id?: string;\n  updated_at: string; // date\n  currency: string;\n  order_id: string;\n  order_total: number;\n  order_total_usd?: number;\n  question: string;\n  question_id: string;\n  response: string;\n  response_id: string;\n  free_text_response?: string;\n  response_date_time: string; // date\n  source?: string;\n  tw_service?: string;\n  question_type?: 'custom' | 'standard';\n  customer_email?: string;\n  customer_id?: string;\n  customer_phone?: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/PickByType.ts",
    "exports": [
      {
        "name": " PickByType",
        "text": "export type PickByType<T, Value> = {\n  [P in keyof T as T[P] extends Value | undefined ? P : never]: T[P];\n};",
        "type": "{\n  [P in keyof T as T[P] extends Value | undefined ? P : never]: T[P];\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/Pixel.ts",
    "exports": [
      {
        "name": " AttributionDateModelsArr",
        "text": "export const AttributionDateModelsArr = ['eventDate', 'clickDate'] as const;",
        "type": "variable"
      },
      {
        "name": " AttributionDateModels",
        "text": "\n\nexport type AttributionDateModels = (typeof AttributionDateModelsArr)[number];",
        "type": "(typeof AttributionDateModelsArr)[number]"
      },
      {
        "name": " AttributionModelsArr",
        "text": "\n\nexport const AttributionModelsArr = [\n  'lastClick',\n  'firstClick',\n  'fullLastClick',\n  'fullFirstClick',\n  'lastPlatformClick',\n  'linear',\n  'linearAll',\n  'ppsViews',\n  'fullLastClick-v2',\n  'fullFirstClick-v2',\n  'lastPlatformClick-v2',\n  'linear-v2',\n  'linearAll-v2',\n] as const;",
        "type": "variable"
      },
      {
        "name": " AttributionModels",
        "text": "\n\nexport type AttributionModels = (typeof AttributionModelsArr)[number];",
        "type": "(typeof AttributionModelsArr)[number]"
      },
      {
        "name": " PixelIds",
        "text": "\n\nexport interface PixelIds {\n  source: string;\n  campaignId?: string;\n  adsetId?: string;\n  adId?: string;\n}",
        "type": "interface"
      },
      {
        "name": " Models",
        "text": "\n\nexport interface Models {\n  ids: PixelIds;\n  modelName: AttributionModels;\n  clickDate: string;\n  clickHour: number;\n}",
        "type": "interface"
      },
      {
        "name": " PixelMessage",
        "text": "\n\nexport interface PixelMessage {\n  models: Models[];\n  coo: string;\n  shopDomain: string;\n  totalPrice: number;\n  eventDate: string;\n  eventHour: number;\n  isNewCustomer: boolean;\n  cogs: number;\n}",
        "type": "interface"
      }
    ]
  },
  {
    "file": "@tw/types/types/PostPurchaseSurvey.ts",
    "exports": [
      {
        "name": " QuestionType",
        "text": "\n\nexport type QuestionType = 'select' | 'multiSelect' | 'freeText';",
        "type": "'select' | 'multiSelect' | 'freeText'"
      },
      {
        "name": " Response",
        "text": "\n\nexport type Response = Record<\n  string,\n  {\n    id: string;\n    label: string;\n    answers: number;\n    serviceId?: ServicesIds;\n    color?: string;\n    percentOfResponses?: number;\n    aov: number; // average order value?\n    revenue: number;\n    currency: string;\n  }\n>;",
        "type": "Record<\n  string,\n  {\n    id: string;\n    label: string;\n    answers: number;\n    serviceId?: ServicesIds;\n    color?: string;\n    percentOfResponses?: number;\n    aov: number; // average order value?\n    revenue: number;\n    currency: string;\n  }\n>"
      },
      {
        "name": " Survey",
        "text": "\n\nexport type Survey = {\n  id: string;\n  questions: number;\n  answers: number;\n  views: number;\n};",
        "type": "{\n  id: string;\n  questions: number;\n  answers: number;\n  views: number;\n}"
      },
      {
        "name": " Question",
        "text": "\n\nexport type Question = {\n  id: string;\n  surveyId: string;\n  shopId: string;\n  questionType: QuestionType;\n  createdAt: string;\n  updatedAt: string;\n  views: number;\n  responses: number;\n  responsesData: Response;\n};",
        "type": "{\n  id: string;\n  surveyId: string;\n  shopId: string;\n  questionType: QuestionType;\n  createdAt: string;\n  updatedAt: string;\n  views: number;\n  responses: number;\n  responsesData: Response;\n}"
      },
      {
        "name": " QuestionConfig",
        "text": "\n\nexport type QuestionConfig = {\n  question: {\n    id: number;\n    text: string;\n    type: 'single_option';\n    created_at: string;\n  };\n  options: Array<{\n    id: number;\n    label: string;\n    value: string;\n    status: 'active' | 'deleted';\n    created_at: string;\n  }>;\n};",
        "type": "{\n  question: {\n    id: number;\n    text: string;\n    type: 'single_option';\n    created_at: string;\n  };\n  options: Array<{\n    id: number;\n    label: string;\n    value: string;\n    status: 'active' | 'deleted';\n    created_at: string;\n  }>;\n}"
      },
      {
        "name": " Answer",
        "text": "\n\nexport type Answer = {\n  id: string;\n  shopId: string;\n  orderId: string;\n  answerDate: string;\n  questionType: QuestionType;\n  questionId: string;\n  answer: string;\n};",
        "type": "{\n  id: string;\n  shopId: string;\n  orderId: string;\n  answerDate: string;\n  questionType: QuestionType;\n  questionId: string;\n  answer: string;\n}"
      },
      {
        "name": " View",
        "text": "\n\nexport type View = {\n  id: string;\n  shopId: string;\n  orderId: string;\n  viewDate: string;\n  questionType: QuestionType;\n  questionId: string;\n};",
        "type": "{\n  id: string;\n  shopId: string;\n  orderId: string;\n  viewDate: string;\n  questionType: QuestionType;\n  questionId: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/RawEvent.ts",
    "exports": [
      {
        "name": " Query",
        "text": "export interface Query {\n  ttadid?: string;\n  fbadid?: string;\n  gadid?: string;\n  padid?: string;\n  scadid?: string;\n  tw_adid?: string;\n  ad_id?: string;\n  tw_adsetid?: string;\n  nbt?: string;\n  wickedsource?: string;\n  wickedid?: string;\n  h_ad_id?: string;\n  sc_adid?: string;\n  tt_adid?: string;\n  rd_adid?: string;\n  p_adid?: string;\n  fb_adid?: string;\n  g_adid?: string;\n  b_adid?: string;\n  trc_mad_id?: string;\n  utm_campaign?: string;\n  tw_campaign?: string;\n  tw_campaignid?: string;\n  campaign_id?: string;\n  sc_campaignid?: string;\n  tt_campaignid?: string;\n  rd_campaignid?: string;\n  p_campaignid?: string;\n  fb_campaignid?: string;\n  g_campaignid?: string;\n  b_campaignid?: string;\n  trc_mcmp_id?: string;\n  utm_content?: string;\n  utm_medium?: string;\n  utm_source?: string;\n  tw_source?: string;\n  utm_term?: string;\n  triplesource?: string;\n  sc_adsetid?: string;\n  tt_adsetid?: string;\n  rd_adgroupid?: string;\n  p_adgroupid?: string;\n  fb_adsetid?: string;\n  g_adgroupid?: string;\n  b_adgroupid?: string;\n  trc_mag_id?: string;\n  linkid?: string;\n  affluencerid?: string;\n  tw_medium?: string;\n  utm_id?: string;\n}",
        "type": "interface"
      }
    ]
  },
  {
    "file": "@tw/types/types/Realtime.ts",
    "exports": [
      {
        "name": " RealtimeEventType",
        "text": "\n\nexport type RealtimeEventType =\n  | 'job_manager_update'\n  | 'metrics_table_update'\n  | 'plaid_transaction_update'\n  | 'plaid_new_account_available'\n  | 'attribution_update'\n  | 'anomaly_alert'\n  | 'shopify_update'\n  | 'lighthouse_notification'\n  | 'cdp_segment_update'\n  | 'shopify_new_order'\n  | 'activity_feed_new_activity'\n  | 'willy_insights_stream'\n  | 'workflow_update'\n  | 'attribution_update_v2'\n  | 'client-actions'",
        "type": "| 'job_manager_update'\n  | 'metrics_table_update'\n  | 'plaid_transaction_update'\n  | 'plaid_new_account_available'\n  | 'attribution_update'\n  | 'anomaly_alert'\n  | 'shopify_update'\n  | 'lighthouse_notification'\n  | 'cdp_segment_update'\n  | 'shopify_new_order'\n  | 'activity_feed_new_activity'\n  | 'willy_insights_stream'\n  | 'workflow_update'\n  | 'attribution_update_v2'\n  | 'client-actions'"
      },
      {
        "name": " RealtimeEventScope",
        "text": "\n\n\nexport type RealtimeEventScope =\n  | ServicesIds\n  | RealtimeClientAction\n  | 'attribution'\n  | 'anomaly'\n  | 'user'\n  | 'cdp'\n  | 'willy'\n  | 'sensory-integrations'\n  | 'sensory-credentials';",
        "type": "| ServicesIds\n  | RealtimeClientAction\n  | 'attribution'\n  | 'anomaly'\n  | 'user'\n  | 'cdp'\n  | 'willy'\n  | 'sensory-integrations'\n  | 'sensory-credentials'"
      },
      {
        "name": " RealtimeEvent",
        "text": "\n\nexport type RealtimeEvent<D = any> = {\n  eventType: RealtimeEventType;\n  scope: RealtimeEventScope;\n  account?: string;\n  data?: D;\n};",
        "type": "{\n  eventType: RealtimeEventType;\n  scope: RealtimeEventScope;\n  account?: string;\n  data?: D;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/RealtimeSubscribeMessage.ts",
    "exports": [
      {
        "name": " clientActions",
        "text": "\n\nexport const clientActions = ['force-refresh'] as const;",
        "type": "variable"
      },
      {
        "name": " RealtimeChannel",
        "text": "\nexport type RealtimeChannel =\n  | `${ServicesIds | typeof sensoryIntegrationService | typeof sensoryCredentialService}:${string}`\n  | typeof sensoryMaster;",
        "type": "| `${ServicesIds | typeof sensoryIntegrationService | typeof sensoryCredentialService}:${string}`\n  | typeof sensoryMaster"
      },
      {
        "name": " RealtimeClientAction",
        "text": "\nexport type RealtimeClientAction = (typeof clientActions)[number];",
        "type": "(typeof clientActions)[number]"
      },
      {
        "name": " RealtimeSubscribeMessage",
        "text": "\n\nexport declare type RealtimeSubscribeMessage = {\n  channel: RealtimeChannel;\n  shopId: string;\n};",
        "type": "{\n  channel: RealtimeChannel;\n  shopId: string;\n}"
      },
      {
        "name": " ClientActionsRealtimeSubscribeMessage",
        "text": "\n\nexport declare type ClientActionsRealtimeSubscribeMessage = {\n  action: RealtimeClientAction;\n  shopId: string;\n  date: string;\n};",
        "type": "{\n  action: RealtimeClientAction;\n  shopId: string;\n  date: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/RulesAuditLogsRequest.ts",
    "exports": [
      {
        "name": " RulesAuditLogsFilterOperator",
        "text": "\n\nexport type RulesAuditLogsFilterOperator = 'contains' | 'not_contains' | 'equals' | 'not_equals';",
        "type": "'contains' | 'not_contains' | 'equals' | 'not_equals'"
      },
      {
        "name": " RulesAuditLogsFilterOperands",
        "text": "\n\nexport type RulesAuditLogsFilterOperands =\n  | 'campaign_id'\n  | 'campaign_name'\n  | 'adset_id'\n  | 'adset_name'\n  | 'ad_id'\n  | 'ad_name'\n  | 'rule_name'\n  | 'user';",
        "type": "| 'campaign_id'\n  | 'campaign_name'\n  | 'adset_id'\n  | 'adset_name'\n  | 'ad_id'\n  | 'ad_name'\n  | 'rule_name'\n  | 'user'"
      },
      {
        "name": " AuditRuleStatus",
        "text": "\n\nexport type AuditRuleStatus = 'falsy' | 'created' | 'executed' | 'failed';",
        "type": "'falsy' | 'created' | 'executed' | 'failed'"
      },
      {
        "name": " RulesAuditLogsRequest",
        "text": "\n\nexport type RulesAuditLogsRequest = {\n  segments?: FilterExpressions<RulesAuditLogsFilterOperands, RulesAuditLogsFilterOperator>[];\n  shop: string;\n  status?: AuditRuleStatus;\n  start: string;\n  end: string;\n  searchAfter?: number;\n  pageSize?: number;\n  auditTypes?: string[];\n};",
        "type": "{\n  segments?: FilterExpressions<RulesAuditLogsFilterOperands, RulesAuditLogsFilterOperator>[];\n  shop: string;\n  status?: AuditRuleStatus;\n  start: string;\n  end: string;\n  searchAfter?: number;\n  pageSize?: number;\n  auditTypes?: string[];\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/RulesEngine.ts",
    "exports": [
      {
        "name": " EntityTypes",
        "text": "export type EntityTypes = 'account' | 'campaign' | 'adset' | 'ad' | '';",
        "type": "'account' | 'campaign' | 'adset' | 'ad' | ''"
      },
      {
        "name": " MetricFields",
        "text": "\n\nexport type MetricFields = {\n    show: EntityTypes[];\n    value: string;\n    label: string;\n    showCurrency?: boolean;\n    showWarning?: boolean;\n};",
        "type": "{\n    show: EntityTypes[];\n    value: string;\n    label: string;\n    showCurrency?: boolean;\n    showWarning?: boolean;\n}"
      },
      {
        "name": " rulesActionDropdown",
        "text": "\n\nexport const rulesActionDropdown: Record<string, MetricFields> = {\n    increase_budget: {\n      show: ['campaign', 'adset'],\n      value: 'increase_budget',\n      label: 'Increase %entity% budget by ($)',\n      showWarning: true /* show a warning for increase budget multiple times a day */,\n    },\n    'increase_budget-percentage': {\n      show: ['campaign', 'adset'],\n      value: 'increase_budget-percentage',\n      label: 'Increase %entity% budget by (%)',\n      showWarning: true /* show a warning for increase budget multiple times a day */,\n    },\n    decrease_budget: {\n      show: ['campaign', 'adset'],\n      value: 'decrease_budget',\n      label: 'Decrease %entity% budget by ($)',\n      showWarning: true /* show a warning for decrease budget multiple times a day */,\n    },\n    'decrease_budget-percentage': {\n      show: ['campaign', 'adset'],\n      value: 'decrease_budget-percentage',\n      label: 'Decrease %entity% budget by (%)',\n      showWarning: true /* show a warning for decrease budget multiple times a day */,\n    },\n    pause: {\n      show: ['campaign', 'adset', 'ad'],\n      value: 'pause',\n      label: 'Pause %entity%',\n    },\n    start: {\n      show: ['campaign', 'adset', 'ad'],\n      value: 'start',\n      label: 'Start %entity%',\n    },\n};",
        "type": "Record<string, MetricFields>"
      },
      {
        "name": " StatusAction",
        "text": "\n\nexport type StatusAction = typeof statusActions[number];",
        "type": "typeof statusActions[number]"
      },
      {
        "name": " BudgetAction",
        "text": "\nexport type BudgetAction = typeof budgetActions[number];",
        "type": "typeof budgetActions[number]"
      },
      {
        "name": " StrategyAction",
        "text": "\nexport type StrategyAction = typeof strategyActions[number];",
        "type": "typeof strategyActions[number]"
      },
      {
        "name": " Scope",
        "text": "\nexport type Scope = typeof scopes[number];",
        "type": "typeof scopes[number]"
      },
      {
        "name": " Evaluation",
        "text": "\nexport type Evaluation = typeof evaluations[number];",
        "type": "typeof evaluations[number]"
      },
      {
        "name": " BidStrategyType",
        "text": "\nexport type BidStrategyType = typeof bidStrategyTypes[number];",
        "type": "typeof bidStrategyTypes[number]"
      },
      {
        "name": " RuleActions",
        "text": "\nexport type RuleActions = StatusAction | BudgetAction | StrategyAction;",
        "type": "StatusAction | BudgetAction | StrategyAction"
      },
      {
        "type": "function",
        "name": " isBudgetAction",
        "text": "\n\nexport function isBudgetAction(action: StatusAction | BudgetAction | StrategyAction): action is BudgetAction {\n  return budgetActions.includes(action as BudgetAction);\n}",
        "parameters": [
          {
            "name": "action",
            "text": "action: StatusAction | BudgetAction | StrategyAction",
            "type": "StatusAction | BudgetAction | StrategyAction"
          }
        ]
      },
      {
        "type": "function",
        "name": " isStatusAction",
        "text": "\n\nexport function isStatusAction(action: StatusAction | BudgetAction | StrategyAction): action is StatusAction {\n  return statusActions.includes(action as StatusAction);\n}",
        "parameters": [
          {
            "name": "action",
            "text": "action: StatusAction | BudgetAction | StrategyAction",
            "type": "StatusAction | BudgetAction | StrategyAction"
          }
        ]
      },
      {
        "type": "function",
        "name": " isStrategyAction",
        "text": "\n\nexport function isStrategyAction(action: StatusAction | BudgetAction | StrategyAction): action is StrategyAction {\n  return strategyActions.includes(action as StrategyAction);\n}",
        "parameters": [
          {
            "name": "action",
            "text": "action: StatusAction | BudgetAction | StrategyAction",
            "type": "StatusAction | BudgetAction | StrategyAction"
          }
        ]
      },
      {
        "name": " ActionParams",
        "text": "\n\nexport type ActionParams = {\n  shop: string;\n  ruleId: string;\n  action: StatusAction | BudgetAction | StrategyAction;\n  scope: Scope;\n  id: string;\n  value?: number;\n  valueType?: 'percentage';\n  auditId: string;\n  mode?: 'exec' | 'logOnly';\n  emittedAt: number;\n  frequency?: string;\n  testIndex?: boolean;\n};",
        "type": "{\n  shop: string;\n  ruleId: string;\n  action: StatusAction | BudgetAction | StrategyAction;\n  scope: Scope;\n  id: string;\n  value?: number;\n  valueType?: 'percentage';\n  auditId: string;\n  mode?: 'exec' | 'logOnly';\n  emittedAt: number;\n  frequency?: string;\n  testIndex?: boolean;\n}"
      },
      {
        "name": " ActionResult",
        "text": "\n\nexport type ActionResult = ActionParams & { status: 'success' | 'error'; message: string };",
        "type": "ActionParams & { status: 'success' | 'error'; message: string }"
      }
    ]
  },
  {
    "file": "@tw/types/types/ShopMetrics.ts",
    "exports": [
      {
        "name": " shopMetricsServices",
        "text": "export const shopMetricsServices = [\n  'facebook-ads',\n  'bing',\n  'google-ads',\n  'snapchat-ads',\n  'tiktok-ads',\n  'pinterest-ads',\n  'other',\n  'klaviyo',\n  'twitter-ads',\n] as const;",
        "type": "variable"
      },
      {
        "name": " shopMetricsServiceData",
        "text": "\n\nexport declare type shopMetricsServiceData = {\n  responses: number;\n  price: number;\n};",
        "type": "{\n  responses: number;\n  price: number;\n}"
      },
      {
        "name": " ShopMetrics",
        "text": "\n\nexport declare type ShopMetrics = Record<\n  (typeof shopMetricsServices)[number],\n  shopMetricsServiceData\n>;",
        "type": "Record<\n  (typeof shopMetricsServices)[number],\n  shopMetricsServiceData\n>"
      }
    ]
  },
  {
    "file": "@tw/types/types/ShopMetricsQueryStringParams.ts",
    "exports": [
      {
        "name": " ShopMetricsQueryStringParams",
        "text": "\n\nexport declare type ShopMetricsQueryStringParams = {\n  start: string;\n  end: string;\n  service_id: ServicesIds;\n  shop_domain: string;\n};",
        "type": "{\n  start: string;\n  end: string;\n  service_id: ServicesIds;\n  shop_domain: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/ShopMetricsRemoveRequestParams.ts",
    "exports": [
      {
        "name": " ShopMetricsRemoveRequestParams",
        "text": "\n\nexport declare type ShopMetricsRemoveRequestParams = {\n  shop_domain: string;\n  service_id: ServicesIds;\n};",
        "type": "{\n  shop_domain: string;\n  service_id: ServicesIds;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/ShopProviders.ts",
    "exports": [
      {
        "name": " ShopProviderState",
        "text": "export interface ShopProviderState {\n  integrations: { [key in string]?: ShopIntegrationState };\n  error?: {\n    errorMessage: string;\n    createdAt: Date;\n  };\n}",
        "type": "interface"
      },
      {
        "name": " ShopIntegrationState",
        "text": "\n\nexport interface ShopIntegrationState {\n  status?: ShopIntegrationStatusEnum;\n  error?: {\n    errorMessage: string;\n    createdAt: Date;\n  };\n}",
        "type": "interface"
      },
      {
        "name": " ShopIntegrationProperties",
        "text": "\n\nexport interface ShopIntegrationProperties {\n  currency?: string;\n  id: string;\n  integrationId?: string;\n  providerAccount: string;\n  name?: string;\n  status?: ShopIntegrationStatusEnum;\n  errorMessage?: string;\n  end_advertiser?: string;\n  timezone?: string;\n  settings?: any;\n}",
        "type": "interface"
      },
      {
        "name": " ShopProviderStatus",
        "text": "\n\nexport interface ShopProviderStatus {\n  status?: ShopProviderStatusEnum;\n  errorMessage?: string;\n}",
        "type": "interface"
      },
      {
        "type": "enum",
        "name": " ShopProviderStatusEnum",
        "text": "\n\nexport enum ShopProviderStatusEnum {\n  pending = 'pending',\n  disconnected = 'disconnected',\n  connected = 'connected',\n  backfill = 'backfill',\n}"
      },
      {
        "type": "enum",
        "name": " ShopIntegrationStatusEnum",
        "text": "\n\nexport enum ShopIntegrationStatusEnum {\n  pending = 'pending',\n  ready = 'ready',\n  paused = 'paused',\n  backfill = 'backfill',\n  error = 'error',\n  retryableError = 'retryableError',\n  deleted = 'deleted',\n  disconnected = 'disconnected',\n  unknown = 'unknown',\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/ShopServiceData.ts",
    "exports": [
      {
        "name": " ShopServiceData",
        "text": "\n\nexport type ShopServiceData = {\n  lastImportTimestamp?: Date;\n  accounts?: { [accountId: string]: ServiceAccountData };\n  serviceConfiguration?: TiktokConfig | FacebookConfig;\n};",
        "type": "{\n  lastImportTimestamp?: Date;\n  accounts?: { [accountId: string]: ServiceAccountData };\n  serviceConfiguration?: TiktokConfig | FacebookConfig;\n}"
      },
      {
        "name": " ServiceAccountData",
        "text": "\n\nexport type ServiceAccountData = {\n  id?: string;\n  invalidConnection?: InvalidConnection;\n};",
        "type": "{\n  id?: string;\n  invalidConnection?: InvalidConnection;\n}"
      },
      {
        "name": " InvalidConnection",
        "text": "\n\nexport type InvalidConnection = {\n  invalidStateReason?: string;\n  invalidStateCode?: string;\n  jobId?: string;\n  timestamp?: Date;\n};",
        "type": "{\n  invalidStateReason?: string;\n  invalidStateCode?: string;\n  jobId?: string;\n  timestamp?: Date;\n}"
      },
      {
        "name": " ServiceAccountParams",
        "text": "\n\nexport type ServiceAccountParams = {\n  shopDomain: string;\n  serviceId: ServicesIds;\n  accountId: string;\n  invalidConnection?: InvalidConnection;\n};",
        "type": "{\n  shopDomain: string;\n  serviceId: ServicesIds;\n  accountId: string;\n  invalidConnection?: InvalidConnection;\n}"
      },
      {
        "name": " TiktokConfig",
        "text": "\n\nexport type TiktokConfig = {\n  purchasesEvent?: tiktokPurchasesEvent;\n};",
        "type": "{\n  purchasesEvent?: tiktokPurchasesEvent;\n}"
      },
      {
        "name": " FacebookConfig",
        "text": "\n\nexport type FacebookConfig = { };",
        "type": "{ }"
      },
      {
        "type": "enum",
        "name": " tiktokPurchasesEvent",
        "text": "\n\nexport enum tiktokPurchasesEvent {\n  COMPLETE_PAYMENT = 'completePayment',\n  PLACE_AN_ORDER = 'placeAnOrder',\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/SubscriptionFeature.ts",
    "exports": [
      {
        "type": "enum",
        "name": " SubscriptionFeature",
        "text": "export enum SubscriptionFeature {\n  // PROD means PRODUCT, to use on any relation between paying product to component\n  BASIC = 'BASIC',\n  PROD_BASIC = 'PROD_BASIC',\n  PIXEL = 'PIXEL',\n  PROD_PIXEL = 'PROD_PIXEL',\n  CREATIVE_COCKPIT = 'CREATIVE_COCKPIT',\n  PROD_CREATIVE_COCKPIT = 'PROD_CREATIVE_COCKPIT',\n  FREE_WILLY = 'FREE_WILLY',\n  PROD_FREE_WILLY = 'PROD_FREE_WILLY',\n  AFFLUENCER_HUB = 'AFFLUENCER_HUB',\n  PROD_AFFLUENCER_HUB = 'PROD_AFFLUENCER_HUB',\n  PROFESSIONAL_SERVICES = 'PROFESSIONAL_SERVICES',\n  PROD_PROFESSIONAL_SERVICES = 'PROD_PROFESSIONAL_SERVICES',\n  PPS = 'PPS',\n  PROD_A = 'PROD_A',\n  PROD_B = 'PROD_B',\n  PROD_C = 'PROD_C',\n  PROD_D = 'PROD_D',\n  PROD_FREE = 'PROD_FREE',\n  CONF_A = 'CONF_A',\n  CONF_B = 'CONF_B',\n  CONF_C = 'CONF_C',\n  CONF_D = 'CONF_D',\n  PROD_AUTOMATION = 'PROD_AUTOMATION',\n  CONF_AUTOMATION = 'CONF_AUTOMATION',\n  CONF_BASIC = 'CONF_BASIC',\n  CONF_PIXEL = 'CONF_PIXEL',\n  CONF_CREATIVE_COCKPIT = 'CONF_CREATIVE_COCKPIT',\n  CONF_FREE = 'CONF_FREE',\n  CONF_TRENDS = 'CONF_TRENDS',\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/UserShopFirestoreUpdate.ts",
    "exports": [
      {
        "type": "enum",
        "name": " UserShopFirestoreUpdateEventType",
        "text": "export enum UserShopFirestoreUpdateEventType {\n  Added = 'added',\n  Deleted = 'deleted',\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/ValueFormat.ts",
    "exports": [
      {
        "name": " valueFormats",
        "text": "export type valueFormats = 'decimal' | 'percent' | 'currency' | 'string' | 'date' | 'duration';",
        "type": "'decimal' | 'percent' | 'currency' | 'string' | 'date' | 'duration'"
      },
      {
        "name": " TwNumberFormatOptions",
        "text": "\n\nexport interface TwNumberFormatOptions extends Intl.NumberFormatOptions {\n  style: valueFormats;\n}",
        "type": "interface"
      }
    ]
  },
  {
    "file": "@tw/types/types/ValueOf.ts",
    "exports": [
      {
        "name": " ValueOf",
        "text": "export type ValueOf<T> = T[keyof T];",
        "type": "T[keyof T]"
      }
    ]
  },
  {
    "file": "@tw/types/types/chart.ts",
    "exports": [
      {
        "name": " AbstractChart",
        "text": "export type AbstractChart = {\n  x: number;\n  y: number;\n};",
        "type": "{\n  x: number;\n  y: number;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/dataHealthRequest.ts",
    "exports": [
      {
        "name": " periodObject",
        "text": "\n\nexport type periodObject = { start: string; end: string };",
        "type": "{ start: string; end: string }"
      },
      {
        "name": " dataHealthRequest",
        "text": "\n\nexport type dataHealthRequest = {\n  shopId: string;\n  serviceId?: ServicesIds;\n  serviceIds?: ServicesIds[];\n  accountIds?: string[];\n  sendSlack?: boolean;\n  softImport?: boolean;\n  jobId?: string;\n  jobType?: string;\n  start: string;\n  end: string;\n  factor?: number;\n  healthCheckType?: HealthCheckType;\n  granularity?: Granularity;\n  //for mini health check\n  importSpecificDays?: boolean;\n};",
        "type": "{\n  shopId: string;\n  serviceId?: ServicesIds;\n  serviceIds?: ServicesIds[];\n  accountIds?: string[];\n  sendSlack?: boolean;\n  softImport?: boolean;\n  jobId?: string;\n  jobType?: string;\n  start: string;\n  end: string;\n  factor?: number;\n  healthCheckType?: HealthCheckType;\n  granularity?: Granularity;\n  //for mini health check\n  importSpecificDays?: boolean;\n}"
      },
      {
        "name": " dataHealthReportsRequest",
        "text": "\n\nexport type dataHealthReportsRequest = {\n  shopId?: string;\n  servicesId?: ServicesIds[];\n  jobDate?: string;\n  jobId?: string;\n  reportStartDate?: string;\n  reportEndDate?: string;\n  isDelta?: boolean;\n  from?: number;\n  size?: number;\n  healthCheckType?: HealthCheckType;\n};",
        "type": "{\n  shopId?: string;\n  servicesId?: ServicesIds[];\n  jobDate?: string;\n  jobId?: string;\n  reportStartDate?: string;\n  reportEndDate?: string;\n  isDelta?: boolean;\n  from?: number;\n  size?: number;\n  healthCheckType?: HealthCheckType;\n}"
      },
      {
        "name": " IntegrationDataHealthRequest",
        "text": "\n\nexport type IntegrationDataHealthRequest = {\n  serviceId: ServicesIds;\n  accountId: string;\n  sendSlack?: boolean;\n  softImport?: boolean;\n  jobId?: string;\n  start: string;\n  end: string;\n  factor?: number;\n};",
        "type": "{\n  serviceId: ServicesIds;\n  accountId: string;\n  sendSlack?: boolean;\n  softImport?: boolean;\n  jobId?: string;\n  start: string;\n  end: string;\n  factor?: number;\n}"
      },
      {
        "name": " IntegrationDataHealthReportsRequest",
        "text": "\n\nexport type IntegrationDataHealthReportsRequest = {\n  servicesId?: ServicesIds[];\n  accountId?: string;\n  jobDate?: string;\n  reportStartDate?: string;\n  reportEndDate?: string;\n  isDelta?: boolean;\n  from?: number;\n  size?: number;\n};",
        "type": "{\n  servicesId?: ServicesIds[];\n  accountId?: string;\n  jobDate?: string;\n  reportStartDate?: string;\n  reportEndDate?: string;\n  isDelta?: boolean;\n  from?: number;\n  size?: number;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/index.ts",
    "exports": []
  },
  {
    "file": "@tw/types/types/lighthouse.ts",
    "exports": [
      {
        "name": " lighthouseNotificationType",
        "text": "export const lighthouseNotificationType = [\n  'anomaly',\n  'rule',\n  'generative',\n  'timing',\n  'cdp-audience',\n  'rules-report',\n  'inventory',\n  'metrics-report',\n  'data-stories',\n  'opportunity-report',\n  'klaviyo',\n] as const;",
        "type": "variable"
      },
      {
        "name": " LighthouseNotificationTypes",
        "text": "\n\nexport type LighthouseNotificationTypes = (typeof lighthouseNotificationType)[number];",
        "type": "(typeof lighthouseNotificationType)[number]"
      },
      {
        "name": " LighthouseNotification",
        "text": "\n\nexport type LighthouseNotification<D = any> = {\n  id: string;\n  docId?: string;\n  type: LighthouseNotificationTypes;\n  startDate: Date;\n  endDate: Date;\n  shop: string;\n  user: string;\n  read?: boolean;\n  archived?: boolean;\n  serviceId: string;\n  timeToLive?: Date;\n  createdAt?: Date;\n  updatedAt?: Date;\n  data: D;\n  subtopic?: string;\n  email?: string;\n};",
        "type": "{\n  id: string;\n  docId?: string;\n  type: LighthouseNotificationTypes;\n  startDate: Date;\n  endDate: Date;\n  shop: string;\n  user: string;\n  read?: boolean;\n  archived?: boolean;\n  serviceId: string;\n  timeToLive?: Date;\n  createdAt?: Date;\n  updatedAt?: Date;\n  data: D;\n  subtopic?: string;\n  email?: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/media.ts",
    "exports": [
      {
        "name": " MediaSource",
        "text": "export type MediaSource = 'media_library' | 'affluencer' | 'creative' | 'inventory' | 'products';",
        "type": "'media_library' | 'affluencer' | 'creative' | 'inventory' | 'products'"
      },
      {
        "name": " MediaType",
        "text": "\n\nexport type MediaType = {\n  _id?: any;\n  id?: string;\n  shop_id: string;\n  name: string;\n  service_id: string;\n  source: string;\n  file_size?: string;\n  media_type: string;\n  gcs_path: string;\n  url?: string;\n  custom_id?: string;\n  tags?: string;\n  thumbnail?: string;\n  versions?: MediaItemType[];\n  version_base?: string;\n};",
        "type": "{\n  _id?: any;\n  id?: string;\n  shop_id: string;\n  name: string;\n  service_id: string;\n  source: string;\n  file_size?: string;\n  media_type: string;\n  gcs_path: string;\n  url?: string;\n  custom_id?: string;\n  tags?: string;\n  thumbnail?: string;\n  versions?: MediaItemType[];\n  version_base?: string;\n}"
      },
      {
        "name": " MediaItemType",
        "text": "\n\nexport type MediaItemType = {\n  _id?: any;\n  id?: string;\n  shop_id: string;\n  name: string;\n  service_id: string;\n  source: string;\n  file_size?: string;\n  media_type: string;\n  gcs_path: string;\n  url?: string;\n  custom_id?: string;\n  tags?: string;\n  thumbnail?: string;\n  versions?: MediaItemType[];\n  version_base?: string;\n};",
        "type": "{\n  _id?: any;\n  id?: string;\n  shop_id: string;\n  name: string;\n  service_id: string;\n  source: string;\n  file_size?: string;\n  media_type: string;\n  gcs_path: string;\n  url?: string;\n  custom_id?: string;\n  tags?: string;\n  thumbnail?: string;\n  versions?: MediaItemType[];\n  version_base?: string;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/types/metricsEntities.ts",
    "exports": [
      {
        "name": " MetricsEntities",
        "text": "\n\nexport const MetricsEntities: allEntities = {\n  channel: 'channel',\n  ad_account: 'ad_account',\n  campaign: 'campaign',\n  adset: 'adset',\n  ad: 'ad',\n};",
        "type": "allEntities"
      },
      {
        "name": " SmallEntities",
        "text": "\n\nexport const SmallEntities: smallEntities = {\n  campaign: 'campaign',\n  adset: 'adset',\n  ad: 'ad',\n};",
        "type": "smallEntities"
      }
    ]
  },
  {
    "file": "@tw/types/types/sortDirection.ts",
    "exports": [
      {
        "name": " SortDirection",
        "text": "export type SortDirection = 'ascending' | 'descending' | 'none';",
        "type": "'ascending' | 'descending' | 'none'"
      }
    ]
  },
  {
    "file": "@tw/types/types/userRoles.ts",
    "exports": [
      {
        "name": " UserRoles",
        "text": "export const UserRoles = [\n  'ad_buyer',\n  'agency_owner',\n  'brand_owner',\n  'marketing_manager',\n  'retention_marketer',\n  'operations',\n  'finance_accounting',\n  'Inventory_supply_chain',\n] as const;",
        "type": "variable"
      },
      {
        "name": " UserRolesTypes",
        "text": "\n\nexport type UserRolesTypes = typeof UserRoles[number];",
        "type": "typeof UserRoles[number]"
      }
    ]
  },
  {
    "file": "@tw/types/willy/langchain/langchain.ts",
    "exports": [
      {
        "name": " MainTypesArr",
        "text": "export const MainTypesArr = ['provider_account', 'report', 'dashboard', 'cost', 'theme'] as const;",
        "type": "variable"
      },
      {
        "name": " MainActionTypes",
        "text": "\n\nexport type MainActionTypes = (typeof MainTypesArr)[number];",
        "type": "(typeof MainTypesArr)[number]"
      },
      {
        "name": " mainActionsDict",
        "text": "\nexport const mainActionsDict: Record<\n  MainActionTypes,\n  { id: MainActionTypes; description: string }\n> = {\n  provider_account: {\n    id: 'provider_account',\n    description:\n      'Connect or disconnect to Provider/integration account, and retrieve the connection information',\n  },\n  report: {\n    id: 'report',\n    description: 'Create/Edit email report or google sheet report',\n  },\n  dashboard: {\n    id: 'dashboard',\n    description: 'Create/Edit/Delete a Dashboard',\n  },\n  cost: {\n    id: 'cost',\n    description:\n      'Retrieve/Create/Edit/Delete a Cost (like COGS, gateway, shipping, custom expenses)',\n  },\n  theme: {\n    id: 'theme',\n    description: 'Change the app theme (like dark mode, light mode)',\n  },\n};",
        "type": "Record<\n  MainActionTypes,\n  { id: MainActionTypes; description: string }\n>"
      },
      {
        "name": " MainActionTypesWithUnknown",
        "text": "\n\nexport type MainActionTypesWithUnknown = MainActionTypes | 'unknown' | 'general';",
        "type": "MainActionTypes | 'unknown' | 'general'"
      },
      {
        "name": " MainActionResult",
        "text": "\n\nexport type MainActionResult = {\n  mainActionType: MainActionTypesWithUnknown;\n  error?: string;\n  isNeedUserInteraction: boolean;\n  data:\n    | ReportsActionResult\n    | CostActionResult\n    | DashboardActionResult\n    | ProviderActionResult\n    | GenericActionResult\n    | GeneralActionResult; // in case for general on main\n};",
        "type": "{\n  mainActionType: MainActionTypesWithUnknown;\n  error?: string;\n  isNeedUserInteraction: boolean;\n  data:\n    | ReportsActionResult\n    | CostActionResult\n    | DashboardActionResult\n    | ProviderActionResult\n    | GenericActionResult\n    | GeneralActionResult; // in case for general on main\n}"
      },
      {
        "name": " GeneralActionResult",
        "text": "\n\nexport type GeneralActionResult = {\n  providerType: MainActionTypesWithUnknown;\n  error?: string;\n  data: ChainData;\n};",
        "type": "{\n  providerType: MainActionTypesWithUnknown;\n  error?: string;\n  data: ChainData;\n}"
      },
      {
        "name": " ChainData",
        "text": "\n\nexport type ChainData = {\n  originalAnswer: string;\n  chainSuccess: boolean;\n  [key: string]: any;\n};",
        "type": "{\n  originalAnswer: string;\n  chainSuccess: boolean;\n  [key: string]: any;\n}"
      },
      {
        "name": " ERROR_PREFIX",
        "text": "\n\nexport const ERROR_PREFIX = `error: `;",
        "type": "variable"
      },
      {
        "name": " ERROR_PREFIX_PROMPT",
        "text": "\nexport const ERROR_PREFIX_PROMPT = `with this prefix: ${ERROR_PREFIX}`;",
        "type": "variable"
      },
      {
        "name": " GenericActionResult",
        "text": "\n\nexport type GenericActionResult = {\n  error?: string;\n  data: ChainData;\n};",
        "type": "{\n  error?: string;\n  data: ChainData;\n}"
      },
      {
        "name": " ReportsActionTypesArr",
        "text": "\n\n//Reports\n\nexport const ReportsActionTypesArr = ['create', 'edit', 'delete'] as const;",
        "type": "variable"
      },
      {
        "name": " ReportsActionTypes",
        "text": "\n\nexport type ReportsActionTypes = (typeof ReportsActionTypesArr)[number];",
        "type": "(typeof ReportsActionTypesArr)[number]"
      },
      {
        "name": " reportsActionsDict",
        "text": "\nexport const reportsActionsDict: Record<\n  ReportsActionTypes,\n  { id: ReportsActionTypes; description: string }\n> = {\n  create: {\n    id: 'create',\n    description: 'create a reports',\n  },\n  edit: {\n    id: 'edit',\n    description: 'edit or update a reports',\n  },\n  delete: {\n    id: 'delete',\n    description: 'delete a reports',\n  },\n};",
        "type": "Record<\n  ReportsActionTypes,\n  { id: ReportsActionTypes; description: string }\n>"
      },
      {
        "name": " ReportsActionTypesWithUnknown",
        "text": "\n\nexport type ReportsActionTypesWithUnknown = ReportsActionTypes | 'unknown';",
        "type": "ReportsActionTypes | 'unknown'"
      },
      {
        "name": " ReportsActionResult",
        "text": "\n\nexport type ReportsActionResult = {\n  reportsType: ReportsActionTypesWithUnknown;\n  error?: string;\n  data: ChainData;\n};",
        "type": "{\n  reportsType: ReportsActionTypesWithUnknown;\n  error?: string;\n  data: ChainData;\n}"
      },
      {
        "name": " CostActionTypesArr",
        "text": "\n\n//cost\n\nexport const CostActionTypesArr = [\n  'custom_expenses',\n  'gateway_cost',\n  'shipping_cost',\n  'cogs',\n] as const;",
        "type": "variable"
      },
      {
        "name": " CostActionTypes",
        "text": "\n\nexport type CostActionTypes = (typeof CostActionTypesArr)[number];",
        "type": "(typeof CostActionTypesArr)[number]"
      },
      {
        "name": " costActionsDict",
        "text": "\nexport const costActionsDict: Record<\n  CostActionTypes,\n  { id: CostActionTypes; description: string }\n> = {\n  custom_expenses: {\n    id: 'custom_expenses',\n    description: 'Custom Expenses',\n  },\n  gateway_cost: {\n    id: 'gateway_cost',\n    description: 'Gateway Cost',\n  },\n  shipping_cost: {\n    id: 'shipping_cost',\n    description: 'Shipping Cost',\n  },\n  cogs: {\n    id: 'cogs',\n    description: 'Cost of Goods (COGS)',\n  },\n};",
        "type": "Record<\n  CostActionTypes,\n  { id: CostActionTypes; description: string }\n>"
      },
      {
        "name": " CostActionTypesWithUnknown",
        "text": "\n\nexport type CostActionTypesWithUnknown = CostActionTypes | 'unknown';",
        "type": "CostActionTypes | 'unknown'"
      },
      {
        "name": " CostActionResult",
        "text": "\n\nexport type CostActionResult = {\n  costType: CostActionTypesWithUnknown;\n  crud: CRUDWithUnknownAction;\n  error?: string;\n  data: ChainData;\n};",
        "type": "{\n  costType: CostActionTypesWithUnknown;\n  crud: CRUDWithUnknownAction;\n  error?: string;\n  data: ChainData;\n}"
      },
      {
        "name": " CRUDActionTypesArr",
        "text": "\n\n// CROUD\n\nexport const CRUDActionTypesArr = ['get', 'update', 'create', 'delete'] as const;",
        "type": "variable"
      },
      {
        "name": " CRUDActionTypes",
        "text": "\n\nexport type CRUDActionTypes = (typeof CRUDActionTypesArr)[number];",
        "type": "(typeof CRUDActionTypesArr)[number]"
      },
      {
        "name": " actionsDict",
        "text": "\nexport const actionsDict: Record<CRUDActionTypes, { id: CRUDActionTypes; title: string }> = {\n  get: {\n    id: 'get',\n    title: 'Get or Give me',\n  },\n  update: {\n    id: 'update',\n    title: 'Update or Edit',\n  },\n  create: {\n    id: 'create',\n    title: 'Add or Create',\n  },\n  delete: {\n    id: 'delete',\n    title: 'Delete or remove',\n  },\n};",
        "type": "Record<CRUDActionTypes, { id: CRUDActionTypes; title: string }>"
      },
      {
        "name": " CRUDWithUnknownAction",
        "text": "\n\nexport type CRUDWithUnknownAction = CRUDActionTypes | 'unknown';",
        "type": "CRUDActionTypes | 'unknown'"
      },
      {
        "name": " DashboardActionTypesArr",
        "text": "\n\n//Dashboard\n\nexport const DashboardActionTypesArr = ['create', 'edit', 'delete'] as const;",
        "type": "variable"
      },
      {
        "name": " DashboardActionTypes",
        "text": "\n\nexport type DashboardActionTypes = (typeof DashboardActionTypesArr)[number];",
        "type": "(typeof DashboardActionTypesArr)[number]"
      },
      {
        "name": " dashboardActionsDict",
        "text": "\nexport const dashboardActionsDict: Record<\n  DashboardActionTypes,\n  { id: DashboardActionTypes; description: string }\n> = {\n  create: {\n    id: 'create',\n    description: 'create a dashboard',\n  },\n  edit: {\n    id: 'edit',\n    description: 'edit or update a dashboard',\n  },\n  delete: {\n    id: 'delete',\n    description: 'delete a dashboard',\n  },\n};",
        "type": "Record<\n  DashboardActionTypes,\n  { id: DashboardActionTypes; description: string }\n>"
      },
      {
        "name": " DashboardActionTypesWithUnknown",
        "text": "\n\nexport type DashboardActionTypesWithUnknown = DashboardActionTypes | 'unknown';",
        "type": "DashboardActionTypes | 'unknown'"
      },
      {
        "name": " DashboardActionResult",
        "text": "\n\nexport type DashboardActionResult = {\n  error?: string;\n  dashboardType: DashboardActionTypesWithUnknown;\n  data: ChainData;\n};",
        "type": "{\n  error?: string;\n  dashboardType: DashboardActionTypesWithUnknown;\n  data: ChainData;\n}"
      },
      {
        "name": " ProviderTypesArr",
        "text": "\n\n//Provider\n\nexport const ProviderTypesArr = ['connect', 'disconnect', 'show', 'show-all'] as const;",
        "type": "variable"
      },
      {
        "name": " ProviderActionTypes",
        "text": "\n\nexport type ProviderActionTypes = (typeof ProviderTypesArr)[number];",
        "type": "(typeof ProviderTypesArr)[number]"
      },
      {
        "name": " ProviderActionsDict",
        "text": "\nexport const ProviderActionsDict: Record<\n  ProviderActionTypes,\n  { id: ProviderActionTypes; description: string }\n> = {\n  connect: {\n    id: 'connect',\n    description: 'Connect to (like Facebook and Google) Account',\n  },\n  disconnect: {\n    id: 'disconnect',\n    description: 'Disconnect from provider (like Facebook and Google) account',\n  },\n  show: {\n    id: 'show',\n    description: 'Show the provider connection information (like the status, name etc)',\n  },\n  'show-all': {\n    id: 'show-all',\n    description: 'Show the list of all connected integrations.',\n  },\n};",
        "type": "Record<\n  ProviderActionTypes,\n  { id: ProviderActionTypes; description: string }\n>"
      },
      {
        "name": " ProviderActionTypesWithUnknown",
        "text": "\n\nexport type ProviderActionTypesWithUnknown = ProviderActionTypes | 'unknown';",
        "type": "ProviderActionTypes | 'unknown'"
      },
      {
        "name": " ProviderActionResult",
        "text": "\n\nexport type ProviderActionResult = {\n  providerType: ProviderActionTypesWithUnknown;\n  error?: string;\n  data: ChainData;\n};",
        "type": "{\n  providerType: ProviderActionTypesWithUnknown;\n  error?: string;\n  data: ChainData;\n}"
      }
    ]
  },
  {
    "file": "@tw/types/willyTypes.ts",
    "exports": [
      {
        "name": " AggregationFunction",
        "text": "\n\nexport type AggregationFunction = 'AVG' | 'COUNT' | 'SUM' | 'MAX' | 'MIN' | 'COUNT_DISTINCT';",
        "type": "'AVG' | 'COUNT' | 'SUM' | 'MAX' | 'MIN' | 'COUNT_DISTINCT'"
      },
      {
        "type": "enum",
        "name": " FilterComparator",
        "text": "\n\nexport enum FilterComparator {\n  GREATER_THAN = 'greater_than',\n  LESS_THAN = 'less_than',\n  EQUAL = 'equal',\n  NOT_EQUAL = 'not_equal',\n  CONTAIN = 'contain',\n  NOT_CONTAIN = 'not_contain',\n  IS_IN = 'is_in',\n  IS_NOT_IN = 'is_not_in',\n  START_WITH = 'start_with',\n  NOT_START_WITH = 'not_start_with',\n  END_WITH = 'end_with',\n  NOT_END_WITH = 'not_end_with',\n  IS_SET = 'is_set',\n  IS_NOT_SET = 'is_not_set',\n  IS = 'is',\n  IS_NOT = 'is_not',\n  // Time Comparators\n  OVER_ALL_TIME = 'over_all_time',\n  WITHIN = 'within',\n  BETWEEN = 'between',\n  BEFORE = 'before',\n  AFTER = 'after',\n  UNDER = 'under',\n  OVER = 'over',\n  // AI\n  TOP = 'top',\n}"
      },
      {
        "name": " EVENT_DATE",
        "text": "\nexport const EVENT_DATE = 'event_date';",
        "type": "variable"
      },
      {
        "name": " SQLType",
        "text": "\n\nexport type SQLType = (typeof SQLTypeArray)[number];",
        "type": "(typeof SQLTypeArray)[number]"
      },
      {
        "name": " BqColumn",
        "text": "\n\nexport type BqColumn = {\n  name: string; //name is the table real column name\n  id: string;\n  title: string;\n  type: SQLType;\n  autoCompleteKey?: FilterProperty;\n  options?: OptionsObj[];\n  getOptionsFunc?: (value: string) => OptionsObj[];\n  multiSelect?: boolean;\n  columns?: BqColumn[];\n  selected?: boolean;\n  expanded?: boolean;\n  pivot?: boolean;\n  agg?: AggregationFunction;\n  relatedTable?: string[];\n  comparators?: FilterComparatorType[];\n  description?: string;\n  aggFunction?: AggregationFunction;\n};",
        "type": "{\n  name: string; //name is the table real column name\n  id: string;\n  title: string;\n  type: SQLType;\n  autoCompleteKey?: FilterProperty;\n  options?: OptionsObj[];\n  getOptionsFunc?: (value: string) => OptionsObj[];\n  multiSelect?: boolean;\n  columns?: BqColumn[];\n  selected?: boolean;\n  expanded?: boolean;\n  pivot?: boolean;\n  agg?: AggregationFunction;\n  relatedTable?: string[];\n  comparators?: FilterComparatorType[];\n  description?: string;\n  aggFunction?: AggregationFunction;\n}"
      },
      {
        "name": " FilterRow",
        "text": "\n\nexport type FilterRow = {\n  column: BqColumn;\n  isReadOnly?: boolean;\n  comparator?: FilterComparatorType;\n  value?: any;\n  value1?: any;\n  value2?: any;\n  unit?: any;\n  isDeleted?: boolean;\n};",
        "type": "{\n  column: BqColumn;\n  isReadOnly?: boolean;\n  comparator?: FilterComparatorType;\n  value?: any;\n  value1?: any;\n  value2?: any;\n  unit?: any;\n  isDeleted?: boolean;\n}"
      },
      {
        "name": " SQLTypeArray",
        "text": "\n\nexport const SQLTypeArray = [\n  'string',\n  'numeric',\n  'date',\n  'timestamp',\n  'boolean',\n  'record repeated',\n  'repeated string',\n  'formula',\n  'unknown',\n  'parameter',\n] as const;",
        "type": "variable"
      },
      {
        "type": "enum",
        "name": " ElementTypes",
        "text": "\n\nexport enum ElementTypes {\n  OPERATOR = 'operator',\n  INTEGER = 'integer',\n  METRIC = 'metric',\n  PARENTHESES = 'parentheses',\n}"
      },
      {
        "name": " ExpressionElement",
        "text": "\n\nexport type ExpressionElement = {\n  // id: string;\n  title: string;\n  value?: any;\n  type: ElementTypes;\n  isSelected?: boolean;\n};",
        "type": "{\n  // id: string;\n  title: string;\n  value?: any;\n  type: ElementTypes;\n  isSelected?: boolean;\n}"
      }
    ]
  },
  {
    "file": "@tw/ui-components/scripts/create-component/helpers/generateComponentStorybookTemplateFile.js",
    "exports": []
  },
  {
    "file": "@tw/ui-components/scripts/create-component/helpers/generateComponentTemplateFile.js",
    "exports": []
  },
  {
    "file": "@tw/ui-components/scripts/create-component/helpers/updateComponentRootExports.js",
    "exports": []
  },
  {
    "file": "@tw/ui-components/scripts/create-component/index.js",
    "exports": []
  },
  {
    "file": "@tw/ui-components/scripts/create-icon/index.js",
    "exports": []
  },
  {
    "file": "@tw/ui-components/scripts/delete-icon/index.js",
    "exports": []
  },
  {
    "file": "@tw/ui-components/scripts/generate-icons-sprite/generate-icons-sprite.js",
    "exports": []
  },
  {
    "file": "@tw/ui-components/scripts/generate-icons-sprite/helpers.js",
    "exports": []
  },
  {
    "file": "@tw/ui-components/scripts/generate-icons-sprite/index.js",
    "exports": []
  },
  {
    "file": "@tw/ui-components/scripts/helpers/getInput.js",
    "exports": []
  },
  {
    "file": "@tw/ui-components/scripts/helpers/getInputFromFile.js",
    "exports": []
  },
  {
    "file": "@tw/ui-components/scripts/helpers/promiseDeleteFile.js",
    "exports": []
  },
  {
    "file": "@tw/ui-components/scripts/helpers/promiseGetFilesForDir.js",
    "exports": []
  },
  {
    "file": "@tw/ui-components/scripts/helpers/promiseReadFile.js",
    "exports": []
  },
  {
    "file": "@tw/ui-components/scripts/helpers/promiseRenameFile.js",
    "exports": []
  },
  {
    "file": "@tw/ui-components/scripts/helpers/promiseWriteFile.js",
    "exports": []
  },
  {
    "file": "@tw/ui-components/scripts/rename-icon/index.js",
    "exports": []
  },
  {
    "file": "@tw/ui-components/src/ThemeProvider.tsx",
    "exports": [
      {
        "name": " ThemeProvider",
        "text": "\n\nexport const ThemeProvider: React.FC<PropsWithChildren> = ({ children }) => {\n  return (\n    <MantineProvider\n      theme={theme}\n      colorSchemeManager={colorSchemeManager}\n      cssVariablesResolver={resolver}\n    >\n      {children}\n    </MantineProvider>\n  );\n};",
        "type": "React.FC<PropsWithChildren>"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/assets/icons/svg/sprite.symbol.svg",
    "exports": []
  },
  {
    "file": "@tw/ui-components/src/assets/image-placeholder.png",
    "exports": []
  },
  {
    "file": "@tw/ui-components/src/assets/nav-images/creative-cockpit-icon.png",
    "exports": []
  },
  {
    "file": "@tw/ui-components/src/assets/nav-images/insights-icon.png",
    "exports": []
  },
  {
    "file": "@tw/ui-components/src/assets/nav-images/ops-icon.png",
    "exports": []
  },
  {
    "file": "@tw/ui-components/src/assets/nav-images/pixel-icon.png",
    "exports": []
  },
  {
    "file": "@tw/ui-components/src/assets/nav-images/summary-icon.png",
    "exports": []
  },
  {
    "file": "@tw/ui-components/src/assets/nav-images/willy-icon.png",
    "exports": []
  },
  {
    "file": "@tw/ui-components/src/classes/HierarchicalList.ts",
    "exports": [
      {
        "name": " HierarchicalListItem",
        "text": "\n\nexport type HierarchicalListItem<T = any, M extends Record<string, any> = Record<string, any>> = {\n  id: Id;\n  value: T;\n  depth?: Depth;\n  children: HierarchicalListItem<T>[];\n  metadata?: M;\n};",
        "type": "{\n  id: Id;\n  value: T;\n  depth?: Depth;\n  children: HierarchicalListItem<T>[];\n  metadata?: M;\n}"
      },
      {
        "name": " FlatListItem",
        "text": "\n\nexport type FlatListItem<T = any, M extends Record<string, any> = Record<string, any>> = Prettify<\n  Omit<HierarchicalListItem<T, M>, 'children'> & {\n    parentId: string | null;\n    index: number;\n  }\n>;",
        "type": "Prettify<\n  Omit<HierarchicalListItem<T, M>, 'children'> & {\n    parentId: string | null;\n    index: number;\n  }\n>"
      },
      {
        "name": " FlatList",
        "text": "\n\nexport type FlatList<T = any> = FlatListItem<T>[];",
        "type": "FlatListItem<T>[]"
      },
      {
        "name": " FlatListWithKeys",
        "text": "\n\nexport type FlatListWithKeys<T = any> = Record<string, FlatListItem<T>>;",
        "type": "Record<string, FlatListItem<T>>"
      },
      {
        "name": " HierarchicalList",
        "text": "\n\nexport class HierarchicalList<T> extends Observable<HierarchicalListItem<T>[]> {\n  //\n  // STATIC\n  //\n  private static addListItemDepth<T>(items: HierarchicalListItem<T>[], depth: number = 0) {\n    for (const item of items) {\n      item.depth = depth;\n      this.addListItemDepth(item.children, depth + 1);\n    }\n    return items;\n  }\n\n  public static fromFlatList<T>(\n    flatList: FlatList<T>,\n    parentId: string | null = null\n  ): HierarchicalListItem<T>[] {\n    const { currentLevel, subLevel } = flatList.reduce(\n      (acc, x) => (acc[x.parentId === parentId ? 'currentLevel' : 'subLevel'].push(x), acc),\n      { currentLevel: [] as FlatList<T>, subLevel: [] as FlatList<T> }\n    );\n\n    return currentLevel.map(({ parentId, ...c }) => ({\n      ...c,\n      children: this.fromFlatList(subLevel, c.id),\n    }));\n  }\n\n  public static toFlatList<T>(\n    children: HierarchicalListItem<T>[],\n    parent?: HierarchicalListItem<T>\n  ): FlatList<T> {\n    return children.reduce((acc, child, i) => {\n      const { children, ..._child } = child;\n\n      acc.push(\n        { ..._child, parentId: parent?.id || null, index: i },\n        ...this.toFlatList(children, child)\n      );\n\n      return acc;\n    }, [] as FlatList<T>);\n  }\n\n  public static toFlatListWithKeys<T>(\n    children: HierarchicalListItem<T>[],\n    parent?: HierarchicalListItem<T>\n  ): FlatListWithKeys<T> {\n    return children.reduce((acc, child, i) => {\n      const { children, ..._child } = child;\n\n      acc[_child.id] = { ..._child, parentId: parent?.id || null, index: i };\n\n      const subList = this.toFlatListWithKeys(children, child);\n      for (const key in subList) {\n        acc[key] = subList[key];\n      }\n\n      return acc;\n    }, {} as FlatListWithKeys<T>);\n  }\n\n  public static fromFlatListWithKeys<T>(\n    list: FlatListWithKeys<T>,\n    parentId: string | null = null\n  ): HierarchicalListItem<T>[] {\n    const { currentLevel, subLevel } = Object.entries(list).reduce(\n      (acc, [k, v]) => {\n        const bucket = v.parentId === parentId ? 'currentLevel' : 'subLevel';\n\n        if (bucket === 'subLevel') {\n          acc.subLevel[k] = v;\n          return acc;\n        }\n\n        const { parentId: _, index, ...rest } = v;\n        const newItem = { ...rest, children: [] };\n\n        // if there's a duplicate index, set dup after first\n        if (acc.currentLevel[index]) {\n          acc.currentLevel = [\n            ...acc.currentLevel.slice(0, index),\n            newItem,\n            ...acc.currentLevel.slice(index),\n          ];\n        } else {\n          acc.currentLevel[index] = newItem;\n        }\n\n        return acc;\n      },\n      {\n        currentLevel: [] as HierarchicalListItem<T>[],\n        subLevel: {} as FlatListWithKeys<T>,\n      }\n    );\n\n    return currentLevel.map((c) => ({\n      ...c,\n      children: this.fromFlatListWithKeys(subLevel, c.id),\n    }));\n  }\n\n  public static fromFlatListToFlatListWithKeys<T>(list: FlatList<T>) {\n    const newList: FlatListWithKeys<T> = {};\n\n    for (const item of list) {\n      newList[item.id] = item;\n    }\n\n    return newList;\n  }\n\n  public static fromFlatListWithKeysToFlatLists<T>(list: FlatListWithKeys<T>) {\n    const newList: FlatList<T> = [];\n\n    for (const key in list) {\n      const item = list[key];\n      newList.push(item);\n    }\n\n    return newList;\n  }\n\n  //\n  // BUILDERS\n  //\n  public static createHierarchicalListItem<T, M extends Record<string, any>>(\n    params: WithPartial<HierarchicalListItem<T, M>, 'children' | 'metadata'>\n  ): HierarchicalListItem<T, M> {\n    if (!Array.isArray(params.children)) params.children = [];\n    return params as HierarchicalListItem<T, M>;\n  }\n\n  public static createFlatListItem<T, M extends Record<string, any>>(\n    params: WithPartial<FlatListItem<T, M>, 'parentId' | 'depth'>\n  ): FlatListItem<T, M> {\n    if (typeof params.parentId === 'undefined') params.parentId = null;\n    return params as FlatListItem<T, M>;\n  }\n\n  public static getItemByTargetPath<T>(\n    targetPath: number[],\n    list: HierarchicalListItem<T>[]\n  ): HierarchicalListItem<T> | undefined {\n    let item: HierarchicalListItem<T>[] | HierarchicalListItem<T> = list;\n\n    for (const target of targetPath) {\n      item = item[target];\n      if (!Array.isArray(item)) return item;\n    }\n  }\n\n  //\n  // INSTANCE\n  //\n  public constructor(items: HierarchicalListItem<T>[]) {\n    super({ initialData: HierarchicalList.addListItemDepth(items) });\n  }\n\n  private cache = new Map<string, HierarchicalListItem<T>>();\n\n  // emitting updates is taken care of separately here\n  private set children(newList: HierarchicalListItem<T>[]) {\n    this._data = newList;\n  }\n\n  private getItemById(\n    itemId?: string | null,\n    children: HierarchicalListItem<T>[] = this.children\n  ): HierarchicalListItem<T> | undefined {\n    if (!itemId) return;\n\n    const cachedItem = this.cache.get(itemId);\n    if (cachedItem) return cachedItem;\n\n    for (const item of children) {\n      if (item.id === itemId) return item;\n\n      const foundItem = this.getItemById(itemId, item.children);\n      if (foundItem) {\n        this.cache.set(foundItem.id, foundItem);\n        return foundItem;\n      }\n    }\n  }\n\n  public get asFlat() {\n    return HierarchicalList.toFlatList(this.children);\n  }\n\n  public get children() {\n    return this._data;\n  }\n\n  /**\n   * @description Removes first item from top children by default.\n   * if `itemId` is specified, finds children item with that id and removes\n   * first item from that children\n   */\n  public shift({ itemId }: { itemId?: string }): HierarchicalListItem<T> | undefined {\n    const item = this.getItemById(itemId);\n    if (!item) return;\n\n    const firstListItem = item.children.shift();\n    if (!firstListItem) return;\n\n    // no longer in children, so also no longer in cache\n    this.cache.delete(firstListItem.id);\n\n    item.children = [...item.children];\n\n    this.emitUpdate();\n\n    return firstListItem;\n  }\n\n  public unshift(args: { newItem: HierarchicalListItem<T>; itemId?: string }): number | undefined {\n    const { newItem, itemId } = args;\n    const item = this.getItemById(itemId);\n    if (!item) return;\n\n    const newItemWithDepth = { ...newItem, depth: (item.depth || 0) + 1 };\n    item.children = [newItemWithDepth, ...item.children];\n\n    // if added to array, also added to cache\n    this.cache.set(newItem.id, newItem);\n\n    this.emitUpdate();\n\n    return item.children.length;\n  }\n\n  public push(args: { newItem: HierarchicalListItem<T>; itemId?: string }): number | undefined {\n    const { newItem, itemId } = args;\n    const item = this.getItemById(itemId);\n    if (!item) return;\n\n    const newItemWithDepth = { ...newItem, depth: (item.depth || 0) + 1 };\n    item.children = [...item.children, newItemWithDepth];\n\n    // if added to array, also added to cache\n    this.cache.set(newItem.id, newItem);\n\n    this.emitUpdate();\n\n    return item.children.length;\n  }\n\n  public pop({ itemId }: { itemId?: string }) {\n    const item = this.getItemById(itemId);\n    if (!item) return;\n\n    const lastItem = item.children.pop();\n    if (!lastItem) return;\n\n    // no longer in children, so also no longer in cache\n    this.cache.delete(lastItem.id);\n\n    item.children = [...item.children];\n\n    this.emitUpdate();\n\n    return lastItem;\n  }\n\n  public insert(args: { newItem: HierarchicalListItem<T>; index: number; itemId?: string }) {\n    const { newItem, index, itemId } = args;\n    const item = this.getItemById(itemId);\n    if (!item) return;\n\n    const newItemWithDepth = { ...newItem, depth: (item.depth || 0) + 1 };\n    item.children = [\n      ...item.children.slice(0, index),\n      newItemWithDepth,\n      ...item.children.slice(index),\n    ];\n\n    // if added to array, also added to cache\n    this.cache.set(newItemWithDepth.id, newItemWithDepth);\n\n    this.emitUpdate();\n\n    return item.children.length;\n  }\n\n  public replace(args: {\n    parentId?: string | null;\n    newItem: HierarchicalListItem<T>;\n    position: number;\n  }) {\n    const { parentId, newItem, position } = args;\n    const parentItem = this.getItemById(parentId) || this;\n\n    const newItemWithDepth = {\n      ...newItem,\n      depth: 'depth' in parentItem ? (parentItem.depth || 0) + 1 : 0,\n    };\n    parentItem.children = [\n      ...parentItem.children.slice(0, position),\n      newItemWithDepth,\n      ...parentItem.children.slice(position + 1),\n    ];\n\n    // if added to array, also added to cache\n    this.cache.set(newItemWithDepth.id, newItemWithDepth);\n\n    this.emitUpdate();\n\n    return parentItem.children.length;\n  }\n\n  public remove({ index, itemId }: { index: number; itemId?: string }) {\n    const item = this.getItemById(itemId);\n    if (!item) return;\n\n    const [removedItem] = item.children.splice(index, 1);\n    if (!removedItem) return;\n\n    // no longer in children, so also no longer in cache\n    this.cache.delete(removedItem.id);\n\n    item.children = [...item.children];\n\n    this.emitUpdate();\n\n    return removedItem;\n  }\n\n  public reorder(args: {\n    from: { key?: string; position: number };\n    to: { key?: string; position: number };\n  }) {\n    const { from, to } = args;\n\n    const source = this.getItemById(from.key) || this;\n    const destination = this.getItemById(to.key) || this;\n\n    const [removedItem] = source.children.splice(from.position, 1);\n    if (!removedItem) return;\n\n    destination.children = [\n      ...destination.children.slice(0, to.position),\n      removedItem,\n      ...destination.children.slice(to.position),\n    ];\n\n    this.emitUpdate();\n  }\n}",
        "type": " Observable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/classes/ListHandler.ts",
    "exports": [
      {
        "name": " ListHandler",
        "text": "\n\nexport class ListHandler<T> extends Observable<T[]> {\n  public constructor(list: T[]) {\n    super({ initialData: list });\n  }\n\n  public get list() {\n    return this._data;\n  }\n\n  private set list(newList: T[]) {\n    this.setData(newList);\n  }\n\n  public shift() {\n    const firstItem = this.list.shift();\n    this.list = [...this.list];\n    this.emitUpdate();\n    return firstItem;\n  }\n\n  public unshift(newItem: T) {\n    this.list = [newItem, ...this.list];\n    this.emitUpdate();\n  }\n\n  public push(newItem: T) {\n    this.list = [...this.list, newItem];\n    this.emitUpdate();\n  }\n\n  public pop() {\n    const lastItem = this.list[this.list.length - 1];\n    this.list = this.list.slice(0, this.list.length - 1);\n    this.emitUpdate();\n    return lastItem;\n  }\n\n  public insert(newItem: T, index: number) {\n    this.list = [...this.list.slice(0, index), newItem, ...this.list.slice(index)];\n    this.emitUpdate();\n  }\n\n  public remove(index: number) {\n    this.list.splice(index, 1);\n    this.list = [...this.list];\n    this.emitUpdate();\n  }\n\n  public reorder({ from, to }: { from: number; to: number }) {\n    const [item] = this.list.splice(from, 1);\n    this.list = [...this.list.slice(0, to), item, ...this.list.slice(to)];\n    this.emitUpdate();\n  }\n}",
        "type": " Observable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/classes/StyleComputer.ts",
    "exports": [
      {
        "name": " StyleComputer",
        "text": "\n\nexport abstract class StyleComputer {\n  public abstract readonly color: FormattedColor;\n  public abstract readonly theme: MantineTheme;\n\n  protected get darkMode(): boolean {\n    return $colorScheme.get() === 'dark';\n  }\n\n  public get colorString(): string {\n    if (isValidShadelessColor(this.color)) {\n      if (this.color === 'transparent') return TRANSPARENT;\n      return vars.colors[this.color];\n    }\n\n    const [color, shade] = this.color.split('.');\n\n    //@ts-ignore\n    return vars.colors[color][Number(shade)];\n  }\n}",
        "type": "class"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/classes/index.ts",
    "exports": []
  },
  {
    "file": "@tw/ui-components/src/components/Accordion/Accordion.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    multiple: true,\n    defaultValue: ['Apples', 'Bananas'],\n    children: groceries.map((item) => (\n      <Accordion.Item key={item.value} value={item.value}>\n        <Accordion.Control icon={item.emoji}>{item.value}</Accordion.Control>\n        <Accordion.Panel>{item.description}</Accordion.Panel>\n      </Accordion.Item>\n    )),\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Accordion/Accordion.tsx",
    "exports": [
      {
        "name": " Accordion",
        "text": "\n\nexport const Accordion: AccordionComponent = Object.assign(BaseAccordion, {\n  Control: AccordionControl,\n  Item: AccordionItem,\n  Panel: AccordionPanel,\n});",
        "type": "AccordionComponent"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/ActionIcon/ActionIcon.stories.tsx",
    "exports": [
      {
        "name": " Default",
        "text": "\n\nexport const Default: Story = {\n  args: {\n    icon: 'check-thin',\n    variant: 'default',\n    // color: 'one.5',\n    radius: 'xs',\n  },\n  render: (props) => {\n    return (\n      <Group justify=\"space-between\">\n        <ActionIcon {...props} onClick={() => {}} />\n        <ThemeToggle />\n      </Group>\n    );\n  },\n};",
        "type": "Story"
      },
      {
        "name": " Activator",
        "text": "\nexport const Activator: Story = {\n  args: {\n    icon: 'check-thin',\n    variant: 'activator',\n    color: 'one.5',\n    radius: 'xs',\n  },\n  render: (props) => {\n    return (\n      <Group justify=\"space-between\">\n        <ActionIcon {...props} onClick={() => {}} />\n        <ThemeToggle />\n      </Group>\n    );\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/ActionIcon/ActionIcon.tsx",
    "exports": [
      {
        "name": " ActionIconVariant",
        "text": "\n\nexport type ActionIconVariant = Exclude<MantineActionIconVariant | 'activator', 'white'>;",
        "type": "Exclude<MantineActionIconVariant | 'activator', 'white'>"
      },
      {
        "name": " ActionIconProps",
        "text": "\n\nexport interface ActionIconProps\n  extends TwBaseProps,\n    TwStyleSystemProps,\n    EventHandler<React.ButtonHTMLAttributes<HTMLButtonElement>>,\n    Pick<MantineActionIconProps, 'disabled' | 'loaderProps' | 'loading' | 'gradient'> {\n  variant?: ActionIconVariant;\n  size?: Size;\n  color?: FormattedColor;\n  radius?: Size | 'round';\n  outline?: boolean;\n  icon?: JSX.Element | IconName;\n  iconSize?: number;\n  iconColor?: FormattedColor;\n  pressed?: boolean; // TODO: This needs to give the illusion that the icon is pressed if true.\n}",
        "type": "interface"
      },
      {
        "name": " ActionIcon",
        "text": "\n\nexport const ActionIcon = forwardRef<HTMLButtonElement, ActionIconProps>((props, ref) => {\n  const {\n    size = 'md',\n    'data-testid': dataTestId = 'action-icon',\n    variant = 'subtle',\n    outline,\n    radius = DEFAULT_RADIUS,\n    color = 'one.6',\n    icon,\n    iconSize = 16,\n    iconColor,\n    disabled = false,\n    ...other\n  } = props;\n\n  const darkMode = useColorScheme().colorScheme === 'dark';\n\n  return (\n    <MantineActionIcon\n      ref={ref}\n      {...{\n        size,\n        disabled,\n        variant: getMantineVariant(variant, darkMode),\n        'data-testid': dataTestId,\n        style: assignInlineVars({\n          [actionIconClr]: extractCSSColor(color),\n          [borderRadius]: vars.radius[radius],\n        }),\n        children: extractIcon(icon, {\n          size: iconSize,\n          color: nonCustomIconClrVariants.has(variant) ? undefined : iconColor || props.color,\n          disabled,\n        }),\n        className: variant === 'activator' ? activator : variant === 'filled' ? filled : props.outline ? focusOutline : base,\n        ...other,\n      }}\n    />\n  );\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/ActionIcon/dynamic-vars.css.ts",
    "exports": [
      {
        "name": " actionIconClr",
        "text": "\n\nexport const actionIconClr = createVar();",
        "type": "variable"
      },
      {
        "name": " borderRadius",
        "text": "\nexport const borderRadius = createVar();",
        "type": "variable"
      },
      {
        "name": " buttonBgColor",
        "text": "\nexport const buttonBgColor = createVar();",
        "type": "variable"
      },
      {
        "name": " buttonOutlineColor",
        "text": "\nexport const buttonOutlineColor = createVar();",
        "type": "variable"
      },
      {
        "name": " disabledBgClr",
        "text": "\nexport const disabledBgClr = createVar();",
        "type": "variable"
      },
      {
        "name": " disabledClr",
        "text": "\nexport const disabledClr = createVar();",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/ActionIcon/variants/activator.css.ts",
    "exports": [
      {
        "name": " activator",
        "text": "\nexport const activator = style([\n  base,\n  {\n    backgroundColor: activatorBgColor,\n    color: activatorButtonColor,\n    borderStyle: 'solid',\n    borderWidth: 1,\n    borderColor: activatorBorderClr,\n\n    ':focus': {\n      outline: 'none',\n    },\n\n    ':disabled': {\n      backgroundColor: disabledBgClr,\n      color: disabledClr,\n    },\n\n    // making sure to override certain inherited styles...\n    ':hover': {\n      backgroundColor: activatorBgColor,\n    },\n\n    vars: {\n      [activatorBgColor]: vars.colors.white,\n      [activatorBorderClr]: vars.colors.named2[3],\n      [activatorButtonColor]: vars.colors.gray[7],\n      [disabledBgClr]: vars.colors.gray[1],\n      [disabledClr]: vars.colors.gray[4],\n    },\n\n    selectors: {\n      [vars.darkSelector]: {\n        vars: {\n          [activatorBgColor]: vars.colors.gray[6],\n          [activatorBorderClr]: vars.colors.named2[3],\n          [activatorButtonColor]: vars.colors.gray[0],\n          [disabledBgClr]: vars.colors.gray[7],\n          [disabledClr]: vars.colors.gray[5],\n        },\n      },\n    },\n  },\n]);",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/ActionIcon/variants/base.css.ts",
    "exports": [
      {
        "name": " base",
        "text": "\n\nexport const base = style({\n  borderRadius,\n  transform: 'scale(1.05)',\n\n  ':active': {\n    transform: 'scale(1.05) translateY(calc(0.0625rem*var(--mantine-scale)))',\n  },\n});",
        "type": "variable"
      },
      {
        "name": " focusOutline",
        "text": "\n\nexport const focusOutline = style([\n  base,\n  {\n    ':focus': {\n      boxShadow: `0px 1px 2px rgba(0, 0, 0, 0.05),\n              0px 0px 0px 2px #FFFFFF,\n              0px 0px 0px 4px ${actionIconClr}`,\n    },\n  },\n]);",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/ActionIcon/variants/filled.css.ts",
    "exports": [
      {
        "name": " filled",
        "text": "\nexport const filled = style([\n  base,\n  {\n    backgroundColor: filledBgColor,\n    color: filledButtonColor,\n\n    ':disabled': {\n      backgroundColor: disabledBgClr,\n      color: disabledClr,\n    },\n\n    // making sure to override certain inherited styles...\n    ':hover': {\n      backgroundColor: hoverBgColor,\n    },\n\n    vars: {\n      [filledBgColor]: vars.colors.one[5],\n      [filledButtonColor]: vars.colors.white,\n      [hoverBgColor]: vars.colors.one[6],\n      [disabledBgClr]: vars.colors.gray[1],\n      [disabledClr]: vars.colors.gray[4],\n    },\n\n    selectors: {\n      [vars.darkSelector]: {\n        vars: {\n          [filledBgColor]: vars.colors.one[5],\n          [hoverBgColor]: vars.colors.one[6],\n          [filledButtonColor]: vars.colors.white,\n          [disabledBgClr]: vars.colors.gray[7],\n          [disabledClr]: vars.colors.gray[5],\n        },\n      },\n    },\n  },\n]);",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/ActionIconDecorator/ActionIconDecorator.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: <Image src='https://cdn.shopify.com/s/files/1/2148/9535/products/HTSAH_94e98c77-5ff6-4ab5-b32a-905a6fbf32cb.jpg?v=1591205882' w={80} />,\n    position: 'bottom',\n    actionIconProps: {\n      icon: 'delete',\n      size: 'xs',\n      onClick: () => alert('action icon clicked'),\n    },\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/ActionIconDecorator/ActionIconDecorator.tsx",
    "exports": [
      {
        "name": " ActionIconDecoratorProps",
        "text": "\n\nexport interface ActionIconDecoratorProps extends TwBaseProps, PropsWithChildren {\n  actionIconProps: ActionIconProps;\n  position?: 'top' | 'bottom';\n}",
        "type": "interface"
      },
      {
        "name": " ActionIconDecorator",
        "text": "\n\nexport const ActionIconDecorator = forwardRef<HTMLDivElement, ActionIconDecoratorProps>(\n  (props, ref) => {\n    const { actionIconProps, position = 'top', children = false } = props;\n\n    return (\n      <Box ref={ref} pos=\"relative\" display=\"inline-block\">\n        {children}\n        <div\n          style={{\n            position: 'absolute',\n            boxSizing: 'unset',\n            display: 'inline-flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            right: 0,\n            ...(position === 'top' ? { top: 0 } : { bottom: 0 }),\n            borderRadius: '50%',\n            transform: `translate(20%, ${position === 'top' ? '-' : ''}30%)`,\n          }}\n        >\n          <ActionIcon variant=\"default\" radius=\"round\" {...actionIconProps} />\n        </div>\n      </Box>\n    );\n  }\n);",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Alert/Alert.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'Alert',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Alert/Alert.tsx",
    "exports": [
      {
        "name": " AlertProps",
        "text": "\n\nexport interface AlertProps\n  extends TwBaseProps,\n    PropsWithChildren,\n    Pick<\n      MantineAlertProps,\n      'title' | 'icon' | 'onClose' | 'withCloseButton' | 'closeButtonLabel' | 'variant'\n    > {\n  children: React.ReactNode;\n  color?: FormattedColor;\n}",
        "type": "interface"
      },
      {
        "name": " Alert",
        "text": "\n\nexport const Alert = forwardRef<HTMLDivElement, AlertProps>((props, ref) => {\n  return <MantineAlert {...props} ref={ref} />;\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Anchor/Anchor.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'Anchor',\n    rightIcon: 'calculator',\n    textProps: {\n      // fz: 'xl'\n    }\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Anchor/Anchor.tsx",
    "exports": [
      {
        "name": " AnchorDefaultProps",
        "text": "\n\nexport interface AnchorDefaultProps\n  extends BaseAnchorProps,\n    Pick<React.AnchorHTMLAttributes<HTMLAnchorElement>, 'href' | 'target'> {\n  as?: 'a';\n}",
        "type": "interface"
      },
      {
        "name": " AnchorButtonProps",
        "text": "\n\nexport interface AnchorButtonProps extends BaseAnchorProps {\n  as: 'button';\n  onClick?: () => any;\n  disabled?: boolean;\n  leftIcon?: JSX.Element | IconName | null;\n  rightIcon?: JSX.Element | IconName | null;\n}",
        "type": "interface"
      },
      {
        "name": " AnchorProps",
        "text": "\n\nexport type AnchorProps = AnchorDefaultProps | AnchorButtonProps;",
        "type": "AnchorDefaultProps | AnchorButtonProps"
      },
      {
        "name": " Anchor",
        "text": "\n\nexport const Anchor = forwardRef<any, AnchorProps>((props, ref) => {\n  const computedProps = useMemo(\n    () => (props.as === 'button' ? getButtonProps(props) : getDefaultProps(props)),\n    [props]\n  );\n  const parsedColor = useParsedColor(props.color || props.c || 'one.6');\n\n  return (\n    <MantineAnchor\n      ref={ref}\n      {...computedProps}\n      style={assignInlineVars({ [anchorClr]: parsedColor })}\n      className={classes.base}\n    />\n  );\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Anchor/dynamic-vars.css.ts",
    "exports": [
      {
        "name": " anchorClr",
        "text": "\n\nexport const anchorClr = createVar();",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Anchor/variants/base.css.ts",
    "exports": [
      {
        "name": " base",
        "text": "\n\nexport const base = style({\n  color: anchorClr,\n\n  ':disabled': {\n    color: vars.colors.gray[3],\n  },\n\n  ':hover': {\n    color: darken(anchorClr, 0.075) + ' !important',\n  },\n\n  vars: {\n    [anchorClr]: vars.colors.one[6],\n  },\n\n  selectors: {\n    [vars.darkSelector]: {\n      vars: {\n        [anchorClr]: vars.colors.one[5],\n      },\n    },\n  },\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Anchor/variants/button.css.ts",
    "exports": [
      {
        "name": " button",
        "text": "\n\nexport const button = style([\n  base,\n  {\n    ':disabled': {\n      color: vars.colors.gray[3],\n    },\n\n    selectors: {\n      '&:hover:not([data-disabled])': {\n        color: darken(anchorClr, 0.075),\n      },\n    },\n  },\n]);",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Anchor/variants/index.ts",
    "exports": []
  },
  {
    "file": "@tw/ui-components/src/components/AppShell/AppShell.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'AppShell',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/AppShell/AppShell.tsx",
    "exports": [
      {
        "name": " IAppShellSection",
        "text": "\n\nexport interface IAppShellSection\n  extends Omit<PropsFrom<typeof MantineAppShell.Section>, keyof GetStylesApiOptions>,\n    PropsWithChildren,\n    TwBaseProps,\n    TwCustomStyleSystemProps {}",
        "type": "interface"
      },
      {
        "name": " AppShellProps",
        "text": "\n\nexport interface AppShellProps\n  extends TwBaseProps,\n    Omit<MantineAppShellProps, keyof GetStylesApiOptions> {}",
        "type": "interface"
      },
      {
        "name": " AppShell",
        "text": "\n\nexport const AppShell: IAppShell = (props) => {\n  return <MantineAppShell {...props} />;\n};",
        "type": "IAppShell"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Autocomplete/Autocomplete.css.ts",
    "exports": [
      {
        "name": " dropdown",
        "text": "\n\nexport const dropdown = style({\n  backgroundColor: vars.colors.white,\n  selectors: {\n    [vars.darkSelector]: {\n      backgroundColor: vars.colors.gray[7],\n    },\n  },\n});",
        "type": "variable"
      },
      {
        "name": " option",
        "text": "\nexport const option = style({\n  backgroundColor: vars.colors.white,\n  color: vars.colors.gray[7],\n\n  ':hover': {\n    backgroundColor: optionHoverBg,\n  },\n\n  vars: {\n    [optionHoverBg]: vars.colors.gray[2],\n  },\n\n  selectors: {\n    [vars.darkSelector]: {\n      backgroundColor: vars.colors.gray[7],\n      color: vars.colors.gray[0],\n\n      vars: {\n        [optionHoverBg]: vars.colors.gray[8],\n      },\n    },\n  },\n});",
        "type": "variable"
      },
      {
        "name": " input",
        "text": "\nexport const input = style({\n  borderColor: vars.colors.gray[3],\n  backgroundColor: vars.colors.white,\n  color: vars.colors.gray[7],\n\n  '::placeholder': {\n    fontWeight: 500,\n    color: inputPlaceholderClr,\n  },\n\n  vars: {\n    [inputPlaceholderClr]: vars.colors.gray[7],\n  },\n\n  selectors: {\n    [vars.darkSelector]: {\n      borderColor: 'transparent',\n      backgroundColor: vars.colors.gray[7],\n      color: vars.colors.gray[0],\n\n      vars: {\n        [inputPlaceholderClr]: vars.colors.gray[0],\n      },\n    },\n  },\n});",
        "type": "variable"
      },
      {
        "name": " inputWithError",
        "text": "\n\nexport const inputWithError = style({\n  position: 'relative',\n  top: vars.spacing.xs,\n});",
        "type": "variable"
      },
      {
        "name": " error",
        "text": "\n\nexport const error = style({\n  position: 'relative',\n  top: vars.spacing.xs,\n  paddingTop: 5,\n});",
        "type": "variable"
      },
      {
        "name": " sectionWithError",
        "text": "\n\nexport const sectionWithError = style({\n  paddingTop: vars.spacing.lg,\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Autocomplete/Autocomplete.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    data: ['React', 'Angular', 'Svelte', 'Vue'],\n  },\n};",
        "type": "Story"
      },
      {
        "name": " Deduped",
        "text": "\n\nexport const Deduped: Story = {\n  args: {\n    data: [\n      { value: 'react', disabled: true },\n      { value: 'ng', disabled: false },\n      { value: 'svelte', disabled: false },\n      'vue',\n      { value: 'vue', disabled: false },\n      { value: 'vue', disabled: false },\n      { value: 'vue', disabled: false },\n      {\n        group: 'fruits',\n        items: [\n          { value: 'react', disabled: true },\n          { value: 'vue', disabled: false },\n          { value: 'test', disabled: false },\n        ],\n      },\n    ],\n  },\n  render: ({ data }) => {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const [value, setValue] = useState<string>('');\n\n    return <Autocomplete data={data} value={value} onChange={setValue} />;\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Autocomplete/Autocomplete.tsx",
    "exports": [
      {
        "name": " AutocompleteItem",
        "text": "\n\nexport type AutocompleteItem = {\n  value: string;\n  label: string;\n  disabled?: boolean;\n};",
        "type": "{\n  value: string;\n  label: string;\n  disabled?: boolean;\n}"
      },
      {
        "name": " AutocompleteProps",
        "text": "\n\nexport interface AutocompleteProps\n  extends TwBaseProps,\n    Omit<MantineAutocompleteProps, keyof GetStylesApiOptions> {\n  icon?: MantineAutocompleteProps['leftSection'];\n}",
        "type": "interface"
      },
      {
        "name": " Autocomplete",
        "text": "\n\nexport const Autocomplete = forwardRef<HTMLInputElement, AutocompleteProps>(\n  ({ data, ...props }, ref) => {\n    const dedupedData = useDedupedComboboxStringData(data);\n\n    return (\n      <MantineAutocomplete\n        {...props}\n        data={dedupedData}\n        ref={ref}\n        classNames={{\n          dropdown: classes.dropdown,\n          option: classes.option,\n          input: cx(classes.input, !!props.error && classes.inputWithError),\n          error: classes.error,\n          section: props.error ? classes.sectionWithError : '',\n        }}\n      />\n    );\n  }\n);",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Avatar/Avatar.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'Avatar',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Avatar/Avatar.tsx",
    "exports": [
      {
        "name": " AvatarProps",
        "text": "\n\nexport interface AvatarProps\n  extends TwBaseProps,\n    PropsWithChildren,\n    Omit<MantineAvatarProps, keyof GetStylesApiOptions> {\n  color?: FormattedColor;\n}",
        "type": "interface"
      },
      {
        "name": " Avatar",
        "text": "\n\nexport const Avatar = forwardRef<HTMLDivElement, AvatarProps>((props, ref) => {\n  return <MantineAvatar {...props} ref={ref} />;\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Badge/Badge.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'Badge',\n    uppercase: true,\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Badge/Badge.tsx",
    "exports": [
      {
        "name": " BadgeProps",
        "text": "\n\nexport interface BadgeProps\n  extends TwBaseProps,\n    Omit<MantineBadgeProps, keyof Omit<GetStylesApiOptions, 'variant'>> {\n  color?: FormattedColor;\n  uppercase?: boolean;\n}",
        "type": "interface"
      },
      {
        "name": " Badge",
        "text": "\n\nexport const Badge = forwardRef<HTMLDivElement, BadgeProps>(\n  ({ uppercase = true, ...rest }, ref) => {\n    const textTransformStyle = uppercase ? {} : { textTransform: 'none' };\n\n    // TODO: See what to do about the any\n    return (\n      <MantineBadge {...rest} ref={ref} style={{ ...textTransformStyle, fontWeight: 500 } as any} />\n    );\n  }\n);",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Box/Box.css.ts",
    "exports": [
      {
        "name": " hiddenScrollbar",
        "text": "\n\nexport const hiddenScrollbar = style({\n  '::-webkit-scrollbar': {\n    display: 'none',\n  },\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Box/Box.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'Box',\n    as: 'p',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Box/Box.tsx",
    "exports": [
      {
        "name": " BoxProps",
        "text": "\n\n// TODO: Need to see if to limit here\nexport interface BoxProps\n  extends TwBaseProps,\n    PropsWithChildren,\n    TwPolymorphicComponent,\n    EventHandler<React.BaseHTMLAttributes<HTMLElement>>,\n    Omit<MantineBoxProps, MantinePropsToRemove>,\n    TwStyleSystemProps,\n    TwCustomStyleSystemProps {\n  withScrollbar?: boolean;\n}",
        "type": "interface"
      },
      {
        "name": " Box",
        "text": "\n\nexport const Box = forwardRef<any, BoxProps>((props, ref) => {\n  const {\n    rest: { as, withScrollbar = true, ...rest },\n    style,\n  } = extractAndMapCustomPropsToStyle(props);\n  return (\n    <MantineBox\n      ref={ref}\n      // TODO: See if this can be fixed\n      component={as as any}\n      {...rest}\n      style={style}\n      className={!withScrollbar ? classes.hiddenScrollbar : ''}\n    />\n  );\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Button/Button.stories.tsx",
    "exports": [
      {
        "name": " Primary",
        "text": "\n\nexport const Primary: Story = {\n  args: {\n    leftSection: 'check-thin',\n    variant: 'primary',\n    color: 'one.5',\n    radius: 'default',\n  },\n};",
        "type": "Story"
      },
      {
        "name": " Secondary",
        "text": "\n\nexport const Secondary: Story = {\n  args: {\n    leftSection: 'check-thin',\n    variant: 'secondary',\n    color: 'one.5',\n    radius: 'default',\n  },\n};",
        "type": "Story"
      },
      {
        "name": " Activator",
        "text": "\n\nexport const Activator: Story = {\n  args: {\n    leftSection: 'check-thin',\n    variant: 'activator',\n    color: 'one.5',\n    radius: 'default',\n  },\n};",
        "type": "Story"
      },
      {
        "name": " White",
        "text": "\n\nexport const White: Story = {\n  args: {\n    leftSection: 'check-thin',\n    variant: 'white',\n    color: 'one.5',\n    radius: 'default',\n  },\n};",
        "type": "Story"
      },
      {
        "name": " Gradient",
        "text": "\n\nexport const Gradient: Story = {\n  args: {\n    leftSection: 'check-thin',\n    variant: 'gradient',\n    color: 'one.5',\n    radius: 'default',\n  },\n};",
        "type": "Story"
      },
      {
        "name": " Danger",
        "text": "\n\nexport const Danger: Story = {\n  args: {\n    leftSection: 'check-thin',\n    variant: 'danger',\n    color: 'one.5',\n    radius: 'default',\n  },\n};",
        "type": "Story"
      },
      {
        "name": " Warning",
        "text": "\n\nexport const Warning: Story = {\n  args: {\n    leftSection: 'check-thin',\n    variant: 'warning',\n    color: 'one.5',\n    radius: 'default',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Button/Button.tsx",
    "exports": [
      {
        "name": " ButtonRadius",
        "text": "\n\nexport type ButtonRadius = 'default' | 'round';",
        "type": "'default' | 'round'"
      },
      {
        "name": " ButtonVariant",
        "text": "\n\nexport type ButtonVariant =\n  | 'primary'\n  | 'secondary'\n  | 'white'\n  | 'gradient'\n  | 'activator'\n  | 'danger'\n  | 'warning';",
        "type": "| 'primary'\n  | 'secondary'\n  | 'white'\n  | 'gradient'\n  | 'activator'\n  | 'danger'\n  | 'warning'"
      },
      {
        "name": " ButtonProps",
        "text": "\n\nexport interface ButtonProps\n  extends TwBaseProps,\n    TwStyleSystemProps,\n    TwCustomStyleSystemProps,\n    PropsWithChildren,\n    React.ButtonHTMLAttributes<HTMLButtonElement>,\n    Omit<PropsFrom<typeof MantineButton>, MantinePropsToRemove> {\n  variant?: ButtonVariant;\n  radius?: ButtonRadius;\n  size?: Exclude<Size, 0>;\n  color?: FormattedColor;\n  /** Generally used for icons - hence icon name is a possibility here, but you can put any JSX.Element as well. */\n  leftSection?: JSX.Element | IconName | null;\n  /** Generally used for icons - hence icon name is a possibility here, but you can put any JSX.Element as well. */\n  rightSection?: JSX.Element | IconName | null;\n  forceColorScheme?: 'dark' | 'light';\n  compact?: boolean;\n}",
        "type": "interface"
      },
      {
        "name": " Button",
        "text": "\n\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>((props, ref) => {\n  const {\n    variant = 'primary',\n    size = 'sm',\n    'data-testid': dataTestId = 'button',\n    leftSection,\n    rightSection,\n    disabled = false,\n    compact = false,\n    color = 'one.5',\n    radius = 'default',\n    forceColorScheme,\n    ...other\n  } = extractAndMapCustomPropsToStyle(props).rest;\n  const parsedColor = useMemo(() => extractCSSColor(color), [color]);\n\n  return (\n    <MantineButton\n      variant={TW_MANTINE_VARIANT[variant]}\n      leftSection={extractSideSection(leftSection, {\n        size: 12,\n        disabled,\n        color: variant === 'activator' ? undefined : 'inherit',\n      })}\n      rightSection={extractSideSection(rightSection, {\n        size: 12,\n        disabled,\n        color: variant === 'activator' ? undefined : 'inherit',\n      })}\n      radius={vars.radius[radius === 'round' ? 'round' : DEFAULT_RADIUS]}\n      /** Mantine uses this \"compact\" prefix to convert the button to a compact element */\n      size={compact ? `compact-${size}` : size}\n      disabled={disabled}\n      data-testid={dataTestId}\n      ref={ref}\n      style={assignInlineVars({\n        [buttonBgColor]: parsedColor,\n        [buttonOutlineColor]: parsedColor,\n      })}\n      styles={{ label: { fontSize: vars.fontSizes.sm, fontWeight: 500 } }}\n      className={VARIANT_STYLE_OVERRIDE[variant]}\n      data-tw-ui-component=\"Button\"\n      {...(forceColorScheme && { 'data-clr-scheme': forceColorScheme })}\n      {...getMarketingProps(`button-${props.children}`)}\n      {...other}\n    />\n  );\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Button/dynamic-vars.css.ts",
    "exports": [
      {
        "name": " buttonBgColor",
        "text": "\n\nexport const buttonBgColor = createVar();",
        "type": "variable"
      },
      {
        "name": " buttonOutlineColor",
        "text": "\nexport const buttonOutlineColor = createVar();",
        "type": "variable"
      },
      {
        "name": " disabledBgClr",
        "text": "\nexport const disabledBgClr = createVar();",
        "type": "variable"
      },
      {
        "name": " disabledClr",
        "text": "\nexport const disabledClr = createVar();",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Button/variants/activator.css.ts",
    "exports": [
      {
        "name": " activator",
        "text": "\n\nexport const activator = style([\n  base,\n  {\n    backgroundColor: activatorBgColor,\n    color: activatorButtonColor,\n    borderStyle: 'solid',\n    borderWidth: 1,\n    borderColor: activatorBorderClr,\n\n    ':focus': {\n      outline: 'none',\n    },\n\n    ':disabled': {\n      backgroundColor: disabledBgClr,\n      color: disabledClr,\n    },\n\n    selectors: {\n      // making sure to override certain inherited styles...\n      '&:hover:not(:disabled)': {\n        color: activatorButtonColor,\n        backgroundColor: activatorBgColor,\n      },\n\n      '&[data-clr-scheme=\"dark\"]': darkVars,\n      [vars.darkSelector + ':not([data-clr-scheme=\"light\"])']: darkVars,\n    },\n\n    ...lightVars,\n  },\n]);",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Button/variants/base.css.ts",
    "exports": [
      {
        "name": " lightDisabledVars",
        "text": "\n\nexport const lightDisabledVars = {\n  vars: {\n    [disabledBgClr]: vars.colors.gray[2],\n    [disabledClr]: vars.colors.gray[4],\n  },\n};",
        "type": "variable"
      },
      {
        "name": " darkDisabledVars",
        "text": "\n\nexport const darkDisabledVars = {\n  vars: {\n    [disabledBgClr]: vars.colors.gray[7],\n    [disabledClr]: vars.colors.gray[5],\n  },\n};",
        "type": "variable"
      },
      {
        "name": " base",
        "text": "\n\nexport const base = style({\n  boxShadow: '0px 1px 2px rgba(0, 0, 0, 0.05)',\n  ':focus': {\n    outline: `2px solid ${buttonOutlineColor}`,\n    outlineOffset: '2px',\n  },\n  ':disabled': {\n    backgroundColor: disabledBgClr,\n    color: disabledClr,\n    border: 'none',\n  },\n  ...lightDisabledVars,\n  selectors: {\n    '&:not(:disabled):hover': {\n      backgroundColor: buttonBgColor,\n      color: '#FFFFFF',\n    },\n    '&:disabled[data-clr-scheme=\"dark\"]': darkDisabledVars,\n    [vars.darkSelector + ':disabled:not([data-clr-scheme=\"light\"])']: darkDisabledVars,\n  },\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Button/variants/danger.css.ts",
    "exports": [
      {
        "name": " danger",
        "text": "\n\nexport const danger = style([\n  base,\n  {\n    color: txtClr,\n    borderColor: txtClr,\n\n    selectors: {\n      '&:not(:disabled):hover': {\n        backgroundColor: vars.colors.red[0],\n        color: txtClr,\n        backdropFilter: filter,\n      },\n      '&:disabled': {\n        ...lightDisabledVars,\n        border: '1px solid',\n        borderColor: vars.colors.red[2],\n        backgroundColor: vars.colors.white,\n      },\n      '&[data-clr-scheme=\"dark\"]': darkVars,\n      [vars.darkSelector + ':not(:disabled, [data-clr-scheme=\"light\"])']: {\n        ...darkVars,\n        backgroundColor: 'inherit',\n      },\n    },\n\n    ...lightVars,\n  },\n]);",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Button/variants/gradient.css.ts",
    "exports": [
      {
        "name": " gradient",
        "text": "\n\nexport const gradient = style([\n  base,\n  {\n    ':focus': {\n      outline: 'none',\n    },\n  },\n]);",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Button/variants/index.ts",
    "exports": []
  },
  {
    "file": "@tw/ui-components/src/components/Button/variants/primary.css.ts",
    "exports": [
      {
        "name": " primary",
        "text": "\n\nexport const primary = style([\n  base,\n  {\n    backgroundColor: buttonBgColor,\n  },\n]);",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Button/variants/secondary.css.ts",
    "exports": [
      {
        "name": " secondary",
        "text": "\n\nexport const secondary = style([\n  base,\n  {\n    color: buttonOutlineColor,\n    borderColor: buttonOutlineColor,\n    selectors: {\n      '&:not(:disabled):hover': {\n        color: vars.colors.white,\n      },\n    },\n  },\n]);",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Button/variants/warning.css.ts",
    "exports": [
      {
        "name": " warning",
        "text": "\n\nexport const warning = style([\n  base,\n  {\n    color: txtClr,\n    borderColor: txtClr,\n\n    selectors: {\n      '&:not(:disabled):hover': {\n        backgroundColor: vars.colors.yellow[0],\n        color: txtClr,\n        backdropFilter: filter,\n      },\n      '&:disabled': {\n        ...lightDisabledVars,\n        border: '1px solid',\n        borderColor: vars.colors.yellow[2],\n        backgroundColor: vars.colors.white,\n      },\n      '&[data-clr-scheme=\"dark\"]': darkVars,\n      [vars.darkSelector + ':not(:disabled, [data-clr-scheme=\"light\"])']: {\n        ...darkVars,\n        backgroundColor: 'inherit',\n      },\n    },\n\n    ...lightVars,\n  },\n]);",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Button/variants/white.css.ts",
    "exports": [
      {
        "name": " white",
        "text": "\n\nexport const white = style([\n  base,\n  {\n    backgroundColor: vars.colors.white,\n    color: txtClr,\n\n    selectors: {\n      '&:not(:disabled):hover': {\n        backgroundColor: vars.colors.gray[0],\n        color: txtClr,\n        backdropFilter: filter,\n      },\n      '&:disabled': {\n        ...lightDisabledVars,\n        backgroundColor: lightDisabledVars.vars[disabledBgClr],\n      },\n      '&[data-clr-scheme=\"dark\"]': darkVars,\n      [vars.darkSelector + ':not(:disabled, [data-clr-scheme=\"light\"])']: {\n        ...darkVars,\n        backgroundColor: 'inherit',\n      },\n    },\n\n    ...lightVars,\n  },\n]);",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Card/Card.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'Card',\n  },\n};",
        "type": "Story"
      },
      {
        "name": " Sectioned",
        "text": "\n\nexport const Sectioned: Story = {\n  render: () => {\n    return (\n      <Tooltip label=\"whoa!!\">\n        <Card\n          shadow=\"sm\"\n          padding=\"xl\"\n          as=\"a\"\n          href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\n          target=\"_blank\"\n        >\n          <Card.Section>\n            <Image\n              src=\"https://images.unsplash.com/photo-1579227114347-15d08fc37cae?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2550&q=80\"\n              h={160}\n              alt=\"No way!\"\n            />\n          </Card.Section>\n\n          <Text fw={500} size=\"lg\" mt=\"md\">\n            You&apos;ve won a million dollars in cash!\n          </Text>\n\n          <Text mt=\"xs\" c=\"one.5\" size=\"sm\">\n            Please click anywhere on this card to claim your reward, this is not a fraud, trust us\n          </Text>\n        </Card>\n      </Tooltip>\n    );\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Card/Card.tsx",
    "exports": [
      {
        "name": " CardProps",
        "text": "\n\nexport type CardProps = TwBaseProps &\n  TwStyleSystemProps &\n  Omit<PropsFrom<typeof MantineCard>, MantinePropsToRemove | 'component'> &\n  EventHandler<React.HTMLAttributes<HTMLDivElement>> & {\n    overflow?: CSSProperties['overflow'];\n  };",
        "type": "TwBaseProps &\n  TwStyleSystemProps &\n  Omit<PropsFrom<typeof MantineCard>, MantinePropsToRemove | 'component'> &\n  EventHandler<React.HTMLAttributes<HTMLDivElement>> & {\n    overflow?: CSSProperties['overflow'];\n  }"
      },
      {
        "name": " CardSectionProps",
        "text": "\n\nexport type CardSectionProps = TwBaseProps &\n  TwStyleSystemProps &\n  Omit<PropsFrom<typeof MantineCard.Section>, MantinePropsToRemove | 'component'> & {\n    withTopBorder?: boolean;\n    withBottomBorder?: boolean;\n  };",
        "type": "TwBaseProps &\n  TwStyleSystemProps &\n  Omit<PropsFrom<typeof MantineCard.Section>, MantinePropsToRemove | 'component'> & {\n    withTopBorder?: boolean;\n    withBottomBorder?: boolean;\n  }"
      },
      {
        "name": " Card",
        "text": "\n\nexport const Card: CardComponent = Object.assign(BaseCard, {\n  Section: BaseCardSection,\n}) as CardComponent;",
        "type": "CardComponent"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Center/Center.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'Center',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Center/Center.tsx",
    "exports": [
      {
        "name": " CenterProps",
        "text": "\n\nexport interface CenterProps\n  extends TwBaseProps,\n    TwStyleSystemProps,\n    Omit<MantineCenterProps, MantinePropsToRemove> {}",
        "type": "interface"
      },
      {
        "name": " Center",
        "text": "\n\n// TODO: See what to do about forwarding refs here\nexport const Center: FC<CenterProps> = (props) => {\n  return <MantineCenter {...props} />;\n};",
        "type": "FC<CenterProps>"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Checkbox/Checkbox.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    label: 'Checkbox item',\n  },\n};",
        "type": "Story"
      },
      {
        "name": " Checked",
        "text": "\n\nexport const Checked: Story = {\n  args: {\n    ...Basic.args,\n    checked: true,\n  },\n};",
        "type": "Story"
      },
      {
        "name": " Disabled",
        "text": "\n\nexport const Disabled: Story = {\n  args: {\n    ...Basic.args,\n    disabled: true,\n  },\n};",
        "type": "Story"
      },
      {
        "name": " Indeterminate",
        "text": "\n\nexport const Indeterminate: Story = {\n  args: {\n    ...Basic.args,\n    indeterminate: true,\n  },\n};",
        "type": "Story"
      },
      {
        "name": " Invalid",
        "text": "\n\nexport const Invalid: Story = {\n  args: {\n    ...Basic.args,\n    wrapperProps: {\n      withAsterisk: true,\n    },\n    checked: false,\n    error: 'You should check this',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Checkbox/Checkbox.tsx",
    "exports": [
      {
        "name": " CheckboxGroupProps",
        "text": "\n\nexport interface CheckboxGroupProps\n  extends TwBaseProps,\n    TwStyleSystemProps,\n    Omit<MantineCheckboxGroupProps, MantinePropsToRemove> {}",
        "type": "interface"
      },
      {
        "name": " CheckboxProps",
        "text": "\n\nexport interface CheckboxProps\n  extends TwBaseProps,\n    TwStyleSystemProps,\n    Omit<MantineCheckboxProps, MantinePropsToRemove | 'color' | 'onChange'> {\n  color?: FormattedColor;\n  onChange?: TWOnChange<boolean>;\n}",
        "type": "interface"
      },
      {
        "type": "specifier",
        "name": " Checkbox",
        "text": " Checkbox"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Checkbox/CheckboxGroup.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {},\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Checkbox/styles.css.ts",
    "exports": [
      {
        "name": " checkboxInput",
        "text": "\n\nexport const checkboxInput = style({\n  selectors: {\n    '&:not(:checked,[data-indeterminate],:disabled)': {\n      borderColor: vars.colors.gray[4],\n      backgroundColor: vars.colors.named[5],\n    },\n  },\n});",
        "type": "variable"
      },
      {
        "name": " label",
        "text": "\n\nexport const label = style({\n  color: defaultTextColor,\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Collapse/Collapse.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'Collapse',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Collapse/Collapse.tsx",
    "exports": [
      {
        "name": " CollapseProps",
        "text": "\n\nexport interface CollapseProps\n  extends TwBaseProps,\n    PropsWithChildren,\n    Pick<\n      MantineCollapseProps,\n      | 'in'\n      | 'transitionDuration'\n      | 'transitionTimingFunction'\n      | 'animateOpacity'\n      | 'onTransitionEnd'\n    >,\n    Omit<EventHandler<React.ComponentPropsWithoutRef<'div'>>, 'onTransitionEnd'> {\n  children: React.ReactNode;\n}",
        "type": "interface"
      },
      {
        "name": " Collapse",
        "text": "\n\nexport const Collapse = forwardRef<HTMLDivElement, CollapseProps>((props, ref) => {\n  return <MantineCollapse {...props} ref={ref} />;\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Combobox/Combobox.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'Combobox',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Combobox/Combobox.tsx",
    "exports": [
      {
        "name": " ComboboxProps",
        "text": "\n// import { getMarketingProps } from '../../utils/commonPropGenerators';\n\n// export interface ComboboxProps\n//   extends TwBaseProps,\n//     PropsWithChildren,\n//     Omit<MantineComboboxProps, MantinePropsToRemove> {}\n\nexport interface ComboboxProps extends PropsFrom<typeof MantineCombobox> {}",
        "type": "interface"
      },
      {
        "name": " Combobox",
        "text": "\n\nexport const Combobox = MantineCombobox;",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/ConfirmModal/ConfirmModal.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    // children: 'ConfirmModal',\n  },\n};",
        "type": "Story"
      },
      {
        "name": " Compound",
        "text": "\n\nexport const Compound: Story = {\n  render: () => {\n    const complicatedCallback = async () => {\n      if (await confirm({ title: 'testing', message: 'some message' })) {\n        console.log('woo hoo!!!');\n      } else {\n        console.log('oy vey');\n      }\n    };\n\n    const complicatedCallback2 = async () => {\n      if (\n        await confirm({\n          title: 'testing',\n          message: 'some message',\n          modalProps: { size: 'lg', zIndex: 200 },\n          confirmText: 'Hi!',\n          cancelText: 'Bye!',\n          reverseOrder: true,\n        })\n      ) {\n        console.log('woo hoo!!!');\n      } else {\n        console.log('oy vey');\n      }\n    };\n\n    const complicatedCallback3 = async () => {\n      let text = ''\n\n      if (\n        await confirm({\n          title: 'testing',\n          message: <TextInput onChange={e => text = e.target.value} />,\n          modalProps: { size: 'lg', zIndex: 200 },\n          confirmText: 'Hi!',\n          cancelText: 'Bye!',\n          reverseOrder: true,\n        })\n      ) {\n        console.log('woo hoo!!!', text);\n      } else {\n        console.log('oy vey');\n      }\n    };\n\n    const complicatedCallback4 = async () => {\n      const $inputText = $store('')\n\n      const Component = () => {\n        const [text, setText] = $inputText.useStore()\n\n        return <TextInput value={text} onChange={e => setText(e.target.value)} />\n      }\n\n      if (\n        await confirm({\n          title: 'testing',\n          message: Component,\n          modalProps: { size: 'lg', zIndex: 200 },\n          confirmText: 'Hi!',\n          cancelText: 'Bye!',\n          reverseOrder: true,\n        })\n      ) {\n        console.log('woo hoo!!!', $inputText.get());\n      } else {\n        console.log('oy vey');\n      }\n    };\n\n    return (\n      <Flex gap=\"md\" direction=\"column\">\n        <ConfirmModal />\n\n        <Button onClick={complicatedCallback}>Open Modal</Button>\n\n        <Button onClick={complicatedCallback2}>Open Fancy Modal</Button>\n\n        <Button onClick={complicatedCallback3}>UNCONTROLLED - Open Fancy Modal With Component as Message</Button>\n\n        <Button onClick={complicatedCallback4}>CONTROLLED - Open Fancy Modal With Component as Message</Button>\n      </Flex>\n    );\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/ConfirmModal/ConfirmModal.tsx",
    "exports": [
      {
        "name": " ConfirmModal",
        "text": "\n\n//\n// GLOBAL COMPONENT\n//\nexport const ConfirmModal = () => {\n  const [{ open, message: Message, title, modalProps, confirmText, cancelText, reverseOrder }] =\n    $modalStore.useStore();\n\n  return (\n    <Modal\n      {...modalProps}\n      opened={open}\n      onClose={cancelAction}\n      title={typeof title === 'string' ? <Text>{title}</Text> : title}\n      data-tw-ui-component=\"ConfirmModal\"\n      {...getMarketingProps(`tw-confirmation-modal`)}\n    >\n      {typeof Message === 'string' ? <Text>{Message}</Text> : typeof Message === 'function' ? <Message /> : Message}\n      <Flex\n        gap=\"xs\"\n        justify={reverseOrder ? 'flex-start' : 'flex-end'}\n        direction={reverseOrder ? 'row-reverse' : 'row'}\n      >\n        <Button onClick={confirmAction}>{confirmText}</Button>\n        <Button variant=\"white\" onClick={cancelAction}>\n          {cancelText}\n        </Button>\n      </Flex>\n    </Modal>\n  );\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/ConfirmModal/confirm.ts",
    "exports": [
      {
        "name": " confirm",
        "text": "\n\n//\nexport const confirm = async ({\n  title,\n  message,\n  modalProps,\n  confirmText = 'Confirm',\n  cancelText = 'Cancel',\n  reverseOrder,\n}: Omit<ModalStore, 'open' | 'confirmed'>) => {\n  $modalStore.set((x) => ({\n    ...x,\n    open: true,\n    title,\n    message,\n    modalProps: { ...DEFAULT_CONFIRM_MODAL_STORE_PROPS.modalProps, ...modalProps },\n    confirmText,\n    cancelText,\n    reverseOrder,\n  }));\n\n  return new Promise((resolve) => {\n    const unsubscribe = $modalStore.subscribe(({ confirmed }) => {\n      try {\n        resolve(!!confirmed);\n      } finally {\n        unsubscribe();\n        $modalStore.set((x) => ({ ...x, open: false }));\n      }\n    });\n  });\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/ConfirmModal/store.ts",
    "exports": [
      {
        "name": " DEFAULT_CONFIRM_MODAL_STORE_PROPS",
        "text": "\n\nexport const DEFAULT_CONFIRM_MODAL_STORE_PROPS = {\n  open: false,\n  title: '',\n  message: '',\n  confirmed: false,\n  confirmText: 'Confirm',\n  cancelText: 'Cancel',\n  modalProps: { zIndex: Number.MAX_SAFE_INTEGER },\n};",
        "type": "variable"
      },
      {
        "name": " $modalStore",
        "text": "\n\n//\n// STORE\n//\nexport const $modalStore = $store<ModalStore>(DEFAULT_CONFIRM_MODAL_STORE_PROPS);",
        "type": "variable"
      },
      {
        "type": "function",
        "name": " confirmAction",
        "text": "\n\n//\n// ACTIONS\n//\nexport function confirmAction() {\n  $modalStore.set((x) => ({ ...x, confirmed: true }));\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " cancelAction",
        "text": "\n\nexport function cancelAction() {\n  $modalStore.set((x) => ({ ...x, confirmed: false }));\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/ConfirmModal/types.ts",
    "exports": [
      {
        "name": " ModalStore",
        "text": "\n\nexport type ModalStore = {\n  open: boolean;\n  title?: React.ReactNode;\n  message?: React.FC | React.ReactNode;\n  confirmed?: boolean;\n  confirmText?: string;\n  cancelText?: string;\n  /** By default, confirm action is on the left. If true, this prop reverses their order. */\n  reverseOrder?: boolean;\n  modalProps?: Partial<Omit<ModalProps, 'onClose' | 'opened'>>;\n};",
        "type": "{\n  open: boolean;\n  title?: React.ReactNode;\n  message?: React.FC | React.ReactNode;\n  confirmed?: boolean;\n  confirmText?: string;\n  cancelText?: string;\n  /** By default, confirm action is on the left. If true, this prop reverses their order. */\n  reverseOrder?: boolean;\n  modalProps?: Partial<Omit<ModalProps, 'onClose' | 'opened'>>;\n}"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Container/Container.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'Container',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Container/Container.tsx",
    "exports": [
      {
        "name": " ContainerProps",
        "text": "\n\n// TODO: See what to limit here\nexport interface ContainerProps extends TwBaseProps, PropsWithChildren, MantineContainerProps {\n  size?: Size;\n}",
        "type": "interface"
      },
      {
        "name": " Container",
        "text": "\n\nexport const Container = forwardRef<HTMLDivElement, ContainerProps>((props, ref) => {\n  return <MantineContainer {...props} ref={ref} />;\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/DraggableAccordion/DraggableAccordion.css.ts",
    "exports": [
      {
        "name": " draggableItem",
        "text": "\n\nexport const draggableItem = style({\n  border: '1px solid blue',\n});",
        "type": "variable"
      },
      {
        "name": " dragging",
        "text": "\n\nexport const dragging = style([\n  draggableItem,\n  {\n    borderColor: 'green',\n  },\n]);",
        "type": "variable"
      },
      {
        "name": " isDraggingOver",
        "text": "\n\nexport const isDraggingOver = style({\n  backgroundColor: 'green',\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/DraggableAccordion/DraggableAccordion.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    data: HL as unknown as HierarchicalListItem<string>[],\n    maxDepth: 2,\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/DraggableAccordion/DraggableAccordion.tsx",
    "exports": [
      {
        "type": "function",
        "name": " DraggableAccordion",
        "text": "\n\nexport function DraggableAccordion({ data, maxDepth }: DraggableAccordionProps) {\n  const [state, handler] = useHierarchicalList(data);\n\n  const renderListItem = useCallback(\n    (item: HierarchicalListItem<string>, index: number) => (\n      <Draggable key={item.id} draggableId={item.id} index={index}>\n        {(provided, snapshot) => {\n          const itemDepth = item.depth || 0;\n\n          return (\n            <div\n              ref={provided.innerRef}\n              {...provided.draggableProps}\n              {...provided.dragHandleProps}\n              style={{\n                ...provided.draggableProps.style,\n                cursor: snapshot.isDragging ? 'grabbing' : 'pointer',\n              }}\n            >\n              <Droppable direction=\"vertical\" droppableId={item.id} type={`depth-${itemDepth}`}>\n                {(provided) => {\n                  return (\n                    <>\n                      <NavLink\n                        {...provided.droppableProps}\n                        ref={provided.innerRef}\n                        label={item.value}\n                        children={\n                          itemDepth >= maxDepth ? undefined : item.children.length > 0 ? (\n                            item.children.map((nestedItem, nestedIndex) =>\n                              renderListItem(nestedItem, nestedIndex)\n                            )\n                          ) : (\n                            <Text fz=\"sm\">No items added</Text>\n                          )\n                        }\n                      />\n                      {provided.placeholder}\n                    </>\n                  );\n                }}\n              </Droppable>\n            </div>\n          );\n        }}\n      </Draggable>\n    ),\n    [maxDepth]\n  );\n\n  const items = useMemo(\n    () => state.map((item, index) => renderListItem(item, index)),\n    [state, renderListItem]\n  );\n\n  return (\n    <DragDropContext\n      onDragEnd={({ destination, source, type }) => {\n        // if depth is greater than 1, we need to make sure children can't be accepted\n        const depth = +(type.split('-')[1] || 0);\n        if (!destination || depth > maxDepth) return;\n\n        handler.reorder({\n          from: {\n            key: source.droppableId,\n            position: source.index,\n          },\n          to: {\n            key: destination.droppableId,\n            position: destination.index,\n          },\n        });\n      }}\n    >\n      <Droppable droppableId=\"rootDroppable\">\n        {(provided) => (\n          <div {...provided.droppableProps} ref={provided.innerRef}>\n            {items}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n}",
        "parameters": [
          {
            "name": "{ data, maxDepth }",
            "text": "{ data, maxDepth }: DraggableAccordionProps",
            "type": "DraggableAccordionProps"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/DraggableAccordion/hl.ts",
    "exports": [
      {
        "name": " HL",
        "text": "\n\nexport const HL: HierarchicalListItem<number>[] = [\n  {\n    id: '1',\n    value: 1,\n    children: [],\n  },\n  {\n    id: '2',\n    value: 2,\n    children: [\n      {\n        id: '4',\n        value: 4,\n        children: [],\n      },\n      {\n        id: '5',\n        value: 5,\n        children: [\n          {\n            id: '6',\n            value: 6,\n            children: [],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: '3',\n    value: 3,\n    children: [],\n  },\n];",
        "type": "HierarchicalListItem<number>[]"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Drawer/Drawer.css.ts",
    "exports": [
      {
        "name": " drawerBg",
        "text": "\n\nexport const drawerBg = createVar();",
        "type": "variable"
      },
      {
        "name": " withScrollbar",
        "text": "\nexport const withScrollbar = createVar();",
        "type": "variable"
      },
      {
        "name": " drawer",
        "text": "\n\nexport const drawer = style({\n  backgroundColor: drawerBg,\n});",
        "type": "variable"
      },
      {
        "name": " hiddenScroll",
        "text": "\n\nexport const hiddenScroll = style({\n  '::-webkit-scrollbar': {\n    display: 'none',\n  },\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Drawer/Drawer.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'Drawer',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Drawer/Drawer.tsx",
    "exports": [
      {
        "name": " DrawerProps",
        "text": "\n\nexport interface DrawerProps\n  extends TwBaseProps,\n    TwStyleSystemProps,\n    PropsWithChildren,\n    Omit<MantineDrawerProps, MantinePropsToRemove> {\n  withScrollbar?: boolean;\n}",
        "type": "interface"
      },
      {
        "name": " Drawer",
        "text": "\n\nexport const Drawer = (props: DrawerProps) => {\n  const { bg, withScrollbar = false, ...rest } = props;\n\n  return (\n    <MantineDrawer\n      style={assignInlineVars({\n        [drawerBg]: extractCSSColor(bg || 'white'),\n      })}\n      classNames={{ content: cx(drawer, !withScrollbar && hiddenScroll) }}\n      {...rest}\n    />\n  );\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Flex/Flex.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\n// TODO: Figure out how to show children to show functionality for flex component\nexport const Basic: Story = {\n  args: {\n    children: 'Flex',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Flex/Flex.tsx",
    "exports": [
      {
        "name": " FlexProps",
        "text": "\n\nexport interface FlexProps\n  extends TwBaseProps,\n    TwStyleSystemProps,\n    TwCustomStyleSystemProps,\n    PropsWithChildren,\n    Omit<MantineFlexProps, MantinePropsToRemove> {\n  gap?: Size;\n  rowGap?: Size;\n  columnGap?: Size;\n  align?: CSSProperties['alignItems'];\n  justify?: CSSProperties['justifyContent'];\n  wrap?: CSSProperties['flexWrap'];\n  direction?: CSSProperties['flexDirection'];\n}",
        "type": "interface"
      },
      {
        "name": " Flex",
        "text": "\n\nexport const Flex = forwardRef<HTMLDivElement, FlexProps>((props, ref) => {\n  const { rest, style } = extractAndMapCustomPropsToStyle(props);\n  return <MantineFlex {...rest} style={style} ref={ref} />;\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Grid/Grid.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'Grid',\n  },\n};",
        "type": "Story"
      },
      {
        "name": " Columns",
        "text": "\n\nexport const Columns: Story = {\n  args: {\n    gutterLg: 'xl',\n    children: [\n      <Grid.Col span={2} bg=\"one.2\">\n        something\n      </Grid.Col>,\n      <Grid.Col span={4} bg=\"two.3\">\n        something\n      </Grid.Col>,\n      <Grid.Col span={1} bg=\"green.2\">\n        something\n      </Grid.Col>,\n    ],\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Grid/Grid.tsx",
    "exports": [
      {
        "name": " GridProps",
        "text": "\n\nexport interface GridProps\n  extends TwBaseProps,\n    TwStyleSystemProps,\n    Omit<MantineGridProps, MantinePropsToRemove> {\n  gutter?: Size;\n  gutterLg?: Size;\n  gutterMd?: Size;\n  gutterSm?: Size;\n  gutterXl?: Size;\n  gutterXs?: Size;\n}",
        "type": "interface"
      },
      {
        "name": " Grid",
        "text": "\n\nexport const Grid: IGrid = (props) => {\n  return <MantineGrid {...props} />;\n};",
        "type": "IGrid"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Group/Group.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'Group',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Group/Group.tsx",
    "exports": [
      {
        "name": " GroupProps",
        "text": "\n\n// TODO: Limit props\nexport interface GroupProps extends TwBaseProps, PropsWithChildren, MantineGroupProps {}",
        "type": "interface"
      },
      {
        "name": " Group",
        "text": "\n\nexport const Group = forwardRef<HTMLDivElement, GroupProps>((props, ref) => {\n  return <MantineGroup {...props} ref={ref} />;\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Grow/Grow.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    grow: 1,\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Grow/Grow.tsx",
    "exports": [
      {
        "name": " GrowProps",
        "text": "\n\nexport interface GrowProps\n  extends TwBaseProps,\n    PropsWithChildren,\n    TwPolymorphicComponent,\n    EventHandler<React.BaseHTMLAttributes<HTMLElement>>,\n    Omit<MantineBoxProps, keyof GetStylesApiOptions>,\n    TwCustomStyleSystemProps {\n  grow?: CSSProperties['flexGrow'];\n}",
        "type": "interface"
      },
      {
        "name": " Grow",
        "text": "\n\nexport const Grow = forwardRef<any, GrowProps>((props, ref) => {\n  const {\n    rest: { as, grow, ...rest },\n    style,\n  } = extractAndMapCustomPropsToStyle(props);\n  return (\n    <MantineBox\n      ref={ref}\n      // TODO: See if this can be fixed from any\n      component={(as || 'div') as any}\n      {...rest}\n      style={{ ...style, flexGrow: grow || 1 }}\n    />\n  );\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Header/Header.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'Header',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Header/Header.tsx",
    "exports": [
      {
        "name": " HeaderProps",
        "text": "\n\nexport interface HeaderProps\n  extends TwBaseProps,\n    TwCustomStyleSystemProps,\n    Override<TwStyleSystemProps, { bg?: FormattedColor | (string & {}) }>,\n    Omit<AppShellHeaderProps, MantinePropsToRemove> {}",
        "type": "interface"
      },
      {
        "name": " Header",
        "text": "\n\nexport const Header = forwardRef<HTMLElement, HeaderProps>((props, ref) => {\n  const { style, rest } = extractAndMapCustomPropsToStyle(props);\n  return <AppShell.Header {...rest} style={style} ref={ref} />;\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Icon/Icon.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    name: undefined,\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Icon/Icon.tsx",
    "exports": [
      {
        "name": " IconProps",
        "text": "\n\nexport interface IconProps extends TwBaseProps {\n  name: IconName;\n  height?: number;\n  width?: number;\n  size?: number;\n  color?: FormattedColor | 'inherit';\n  disabled?: boolean;\n}",
        "type": "interface"
      },
      {
        "name": " Icon",
        "text": "\n\nexport const Icon = forwardRef<SVGSVGElement, IconProps>(\n  ({ name, size, width = 16, height = 16, color, disabled = false }, ref) => {\n    const [spriteFilePath] = $spritePath.useStore();\n\n    const hexCode = useMemo(() => {\n      if (color === 'inherit') return 'currentColor';\n      const clr = color ?? (disabled ? 'gray.5' : 'named.8');\n      return extractCSSColor(clr);\n    }, [color, disabled]);\n\n    return (\n      <svg\n        ref={ref}\n        style={{\n          fill: hexCode,\n          color: hexCode,\n          width: size || width,\n          height: size || height,\n        }}\n      >\n        <use xlinkHref={`${spriteFilePath}#${name}`} />\n      </svg>\n    );\n  }\n);",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Icon/spriteFilePathStore.ts",
    "exports": [
      {
        "name": " $spritePath",
        "text": "\n\nexport const $spritePath = $store('');",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Image/Image.css.ts",
    "exports": [
      {
        "name": " shadowBorder",
        "text": "\n\nexport const shadowBorder = style({\n  borderRadius: shadowBorderRadius,\n  boxShadow: imageBoxShadow,\n  border: '1px solid white',\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Image/Image.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    width: 100,\n    src: 'https://cdn.shopify.com/s/files/1/2148/9535/products/HTSAH_94e98c77-5ff6-4ab5-b32a-905a6fbf32cb.jpg?v=1591205882',\n  },\n};",
        "type": "Story"
      },
      {
        "name": " Bordered",
        "text": "\n\nexport const Bordered: Story = {\n  args: {\n    w: 100,\n    shadowBorderSize: 'sm',\n    src: 'https://cdn.shopify.com/s/files/1/2148/9535/products/HTSAH_94e98c77-5ff6-4ab5-b32a-905a6fbf32cb.jpg?v=1591205882',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Image/Image.tsx",
    "exports": [
      {
        "name": " ImageProps",
        "text": "\n\nexport interface ImageProps\n  extends TwBaseProps,\n    TwStyleSystemProps,\n    HTMLOnlyImgAttributes,\n    Omit<PropsFrom<typeof MantineImage>, MantinePropsToRemove> {\n  shadowBorderSize?: Exclude<Size, 0>;\n  width?: MantineImageProps['w'];\n}",
        "type": "interface"
      },
      {
        "name": " Image",
        "text": "\n\nexport const Image = forwardRef<HTMLImageElement, ImageProps>((props, ref) => {\n  const { shadowBorderSize, width, ...rest } = props;\n\n  return (\n    <MantineImage\n      fallbackSrc={defaultImage}\n      {...rest}\n      w={props.w ?? width}\n      ref={ref}\n      style={\n        shadowBorderSize &&\n        assignInlineVars({\n          [shadowBorderRadius]: vars.radius[shadowBorderSize],\n          [imageBoxShadow]: vars.shadows[shadowBorderSize],\n        })\n      }\n      className={cx(!!shadowBorderSize && classes.shadowBorder)}\n    />\n  );\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Image/dynamic-vars.css.ts",
    "exports": [
      {
        "name": " shadowBorderRadius",
        "text": "\n\nexport const shadowBorderRadius = createVar();",
        "type": "variable"
      },
      {
        "name": " imageBoxShadow",
        "text": "\nexport const imageBoxShadow = createVar();",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/List/List.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: [\n      <List.Item>howdy</List.Item>,\n      <List.Item>howdy</List.Item>,\n      <List.Item>howdy</List.Item>,\n      <List.Item>howdy</List.Item>,\n    ],\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/List/List.tsx",
    "exports": [
      {
        "name": " ListProps",
        "text": "\n\nexport interface ListProps\n  extends TwBaseProps,\n    PropsWithChildren,\n    Omit<PropsFrom<typeof MantineList>, MantinePropsToRemove> {}",
        "type": "interface"
      },
      {
        "name": " ListItemProps",
        "text": "\n\nexport interface ListItemProps\n  extends TwBaseProps,\n    TwStyleSystemProps,\n    PropsWithChildren,\n    Omit<PropsFrom<typeof MantineList.Item>, MantinePropsToRemove> {\n  c?: FormattedColor;\n  color?: FormattedColor;\n}",
        "type": "interface"
      },
      {
        "name": " List",
        "text": "\n\nexport const List: ListComponent = Object.assign(BaseList, {\n  Item: BaseListItem,\n}) as ListComponent;",
        "type": "ListComponent"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Loader/Loader.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'Loader',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Loader/Loader.tsx",
    "exports": [
      {
        "name": " LoaderProps",
        "text": "\n\n// NOTE: Allowing size to be MantineSize, since we might need to make a loader a certain number of pixels tall/wide\nexport interface LoaderProps\n  extends TwBaseProps,\n    PropsWithChildren,\n    Pick<MantineLoaderProps, 'variant' | 'size'> {\n  color?: FormattedColor;\n}",
        "type": "interface"
      },
      {
        "name": " Loader",
        "text": "\n\nexport const Loader = forwardRef<HTMLElement, LoaderProps>((props, ref) => {\n  // setting defaults...\n  const {\n    size = 'md',\n    color = 'one.6',\n    variant = 'oval',\n    'data-testid': dataTestId = 'loader',\n    ...other\n  } = props;\n\n  return (\n    <MantineLoader\n      {...{\n        size,\n        color,\n        'data-testid': dataTestId,\n        variant,\n        ...other,\n      }}\n      ref={ref}\n    />\n  );\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/LoadingOverlay/LoadingOverlay.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  render: () => {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const [opened, { toggle }] = useDisclosure(false);\n\n    return (\n      <>\n        <Modal opened={opened} onClose={toggle}>\n          <LoadingOverlay\n            overlayProps={{ blur: '2px', radius: 'sm' }}\n            zIndex={1000}\n            visible={true}\n          />\n          Howdy! Modal is here\n        </Modal>\n        <Button onClick={toggle}>Click to toggle modal</Button>\n      </>\n    );\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/LoadingOverlay/LoadingOverlay.tsx",
    "exports": [
      {
        "name": " LoadingOverlayProps",
        "text": "\n\nexport interface LoadingOverlayProps\n  extends TwBaseProps,\n    PropsWithChildren,\n    Omit<MantineLoadingOverlayProps, MantinePropsToRemove> {\n  radius?: Size;\n  loaderProps?: Override<LoaderProps, FormattedColorProps>;\n  overlayProps?: Override<OverlayProps, FormattedColorProps>;\n}",
        "type": "interface"
      },
      {
        "name": " LoadingOverlay",
        "text": "\n\nexport const LoadingOverlay = forwardRef<HTMLDivElement, LoadingOverlayProps>((props, ref) => {\n  return <MantineLoadingOverlay {...props} ref={ref} />;\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Main/Main.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'Main',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Main/Main.tsx",
    "exports": [
      {
        "name": " MainProps",
        "text": "\n\nexport interface MainProps\n  extends TwBaseProps,\n    Omit<TwStyleSystemProps, 'pl'>,\n    Omit<AppShellMainProps, MantinePropsToRemove> {\n  pl?: MantineSpacing;\n}",
        "type": "interface"
      },
      {
        "name": " Main",
        "text": "\n\nexport const Main = forwardRef<HTMLElement, MainProps>((props, ref) => {\n  return <AppShell.Main {...props} ref={ref} />;\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Menu/Menu.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'Menu',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Menu/Menu.tsx",
    "exports": [
      {
        "name": " MenuProps",
        "text": "\n\nexport interface MenuProps\n  extends TwBaseProps,\n    PropsWithChildren,\n    TwStyleSystemProps,\n    Omit<MantineMenuProps, MantinePropsToRemove> {\n}",
        "type": "interface"
      },
      {
        "name": " Menu",
        "text": "\n\nexport const Menu: IMenu = (props) => <MantineMenu {...props} />;",
        "type": "IMenu"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Modal/Modal.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'Modal',\n  },\n};",
        "type": "Story"
      },
      {
        "name": " Compound",
        "text": "\n\nexport const Compound: Story = {\n  render: () => {\n    const [opened, setOpened] = useState(false);\n\n    return (\n      <>\n        <Modal.Root opened={opened} onClose={() => setOpened(false)}>\n          <Modal.Overlay />\n          <Modal.Content>\n            <Modal.Header>\n              <Modal.Title>Modal title</Modal.Title>\n              <Modal.CloseButton />\n            </Modal.Header>\n            <Modal.Body>Modal content</Modal.Body>\n          </Modal.Content>\n        </Modal.Root>\n\n        <Button onClick={() => setOpened(true)}>Open Modal</Button>\n      </>\n    );\n  },\n};",
        "type": "Story"
      },
      {
        "name": " WithFooter",
        "text": "\n\nexport const WithFooter: Story = {\n  render: () => {\n    const [opened, setOpened] = useState(false);\n\n    return (\n      <>\n        <Modal onClose={() => setOpened(false)} opened={opened}>\n          <Modal.Header>\n            <Modal.Title>Modal title</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <div style={{ height: '700px' }}>Modal content</div>\n          </Modal.Body>\n          <Modal.Footer>howdy</Modal.Footer>\n        </Modal>\n\n        <ThemeToggle />\n        <Button onClick={() => setOpened(true)}>Open Modal</Button>\n      </>\n    );\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Modal/Modal.tsx",
    "exports": [
      {
        "name": " ModalProps",
        "text": "\n\nexport interface ModalProps\n  extends TwBaseProps,\n    PropsWithChildren,\n    Omit<MantineModalProps, MantinePropsToRemove> {\n  size?: Size;\n  closeButtonAlignment?: 'start' | 'center';\n  headerBorder?: boolean;\n}",
        "type": "interface"
      },
      {
        "name": " Modal",
        "text": "\n\nexport const Modal: IModal = (props) => {\n  const { centered = true, closeButtonAlignment, headerBorder, ...other } = props;\n\n  return (\n    <MantineModal\n      styles={{\n        root: {\n          background: vars.colors.named[0],\n        },\n        content: {\n          background: vars.colors.named[0],\n        },\n        close: {\n          alignSelf: closeButtonAlignment === 'start' ? 'flex-start' : 'center',\n        },\n        header: {\n          background: vars.colors.named[0],\n          borderBottom: headerBorder ? `1px solid ${vars.colors.gray[2]}` : 'none',\n        },\n      }}\n      centered={centered}\n      {...other}\n    />\n  );\n};",
        "type": "IModal"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/MonthPicker/MonthPicker.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {},\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/MonthPicker/MonthPicker.tsx",
    "exports": [
      {
        "name": " MonthPickerProps",
        "text": "\n\nexport interface MonthPickerProps\n  extends TwBaseProps,\n    Pick<\n      PropsFrom<typeof MantineMonthPicker>,\n      | 'minDate'\n      | 'maxDate'\n      | 'onChange'\n      | 'value'\n      | 'type'\n      | 'onDateChange'\n      | 'maxDate'\n      | 'date'\n      | 'allowDeselect'\n      | 'allowSingleDateInRange'\n    > {}",
        "type": "interface"
      },
      {
        "name": " MonthPicker",
        "text": "\n\nexport const MonthPicker = forwardRef<HTMLDivElement, MonthPickerProps>((props, ref) => {\n  return (\n    <MantineMonthPicker\n      ref={ref}\n      data-tw-ui-component=\"MonthPicker\"\n      {...getMarketingProps('month-picker')}\n      {...props}\n    />\n  );\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/MultiSelect/MultiSelect.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    data: [\n      { value: 'react', label: 'React' },\n      { value: 'ng', label: 'Angular' },\n      { value: 'svelte', label: 'Svelte' },\n      'vue',\n      { value: 'vue', label: 'Vue' },\n      { value: 'vue', label: 'Vue' },\n      { value: 'vue', label: 'Vue' },\n      {\n        group: 'fruits',\n        items: [\n          { value: 'vue', label: 'Vue' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'test', label: 'Test' },\n        ],\n      },\n    ],\n  },\n  render: ({ data }) => {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const [value, setValue] = useState<string[]>([]);\n\n    return <MultiSelect data={data} value={value} onChange={setValue} />;\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/MultiSelect/MultiSelect.tsx",
    "exports": [
      {
        "name": " MultiSelectProps",
        "text": "\n\nexport interface MultiSelectProps\n  extends TwBaseProps,\n    PropsWithChildren,\n    Omit<MantineMultiSelectProps, keyof Omit<GetStylesApiOptions, 'styles'>> {}",
        "type": "interface"
      },
      {
        "name": " MultiSelect",
        "text": "\n\nexport const MultiSelect = forwardRef<HTMLInputElement, MultiSelectProps>((props, ref) => {\n  useEffect(() => {\n    if (Array.isArray(props.value)) return;\n\n    console.warn(\n      `Incorrect data passed to UI Component - \"Multiselect\" - must be of type \"string[]\"`\n    );\n  }, [props.value]);\n\n  const data = useDedupedComboboxData(props.data);\n\n  return (\n    <MantineMultiSelect\n      {...props}\n      ref={ref}\n      data={data}\n      value={Array.isArray(props.value) ? [...new Set(props.value)] : []}\n    />\n  );\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Nav/Nav.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'Nav',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Nav/Nav.tsx",
    "exports": [
      {
        "name": " INav",
        "text": "// import { Navbar } from '@mantine/core';\n// import { useMemo } from 'react';\n// import { Box, Flex, Text, useColorScheme } from '@tw/ui-components';\n// import { NavSection } from './RecursiveNavLink';\n// import { useAppSelector } from 'reducers/RootType';\n// import { capitalize, truncate } from 'lodash';\n// import { selectNavigationSections } from 'constants/routes';\n// import { useFilterMenu } from 'components/LeftSideNavigation/navigationHooks';\n// import { StoresNav } from './StoresNav';\n// import { SettingsAvatar } from './SettingsAvatar';\n// import { ShopIcon } from './ShopIcon';\n\nexport interface INav {}",
        "type": "interface"
      },
      {
        "name": " Nav",
        "text": "\n\n// TODO: Make sure to change default config when moved\nexport const Nav = () => {\n  // // TODO: It's ok to use useColorScheme here, because we're going to move this component to ui-components before deployment\n  // const { colorScheme } = useColorScheme();\n  // const navigationSections = useAppSelector(selectNavigationSections);\n  // const mainSections = useFilterMenu(navigationSections, 'main');\n  // const currentShopId = useAppSelector((state) => state.currentShopId);\n  // const darkMode = colorScheme === 'dark';\n\n  // const formattedShopName = useMemo(\n  //   () => truncate(capitalize(currentShopId?.replace('.myshopify.com', '')), { length: 17 }),\n  //   [currentShopId]\n  // );\n\n  // const mainLinks = useMemo(() => {\n  //   return mainSections.map((props) => {\n  //     const key = `nav-link-${props.title}-${props.icon}`;\n  //     return <NavSection key={key} {...props} />;\n  //   });\n  // }, [mainSections]);\n\n  // return (\n  //   <Navbar width={{ sm: 300 }} bg={darkMode ? '#161A22' : 'white'}>\n  //     <Flex>\n  //       <StoresNav />\n  //       <Box w=\"100%\">\n  //         <Box\n  //           mah={60}\n  //           p={20}\n  //           style={{ borderBottom: `1px solid ${darkMode ? '#262D3B' : '#DFE4EB'}` }}\n  //         >\n  //           <Flex justify=\"space-between\" align=\"center\">\n  //             <Flex gap=\"xs\" align=\"center\">\n  //               <ShopIcon />\n  //               <Text color={darkMode ? 'white' : 'gray.5'} fz=\"md\">\n  //                 {formattedShopName}\n  //               </Text>\n  //             </Flex>\n  //             <Flex gap=\"xs\">\n  //               <SettingsAvatar />\n  //             </Flex>\n  //           </Flex>\n  //         </Box>\n  //         <Box pos=\"relative\" top={26}>\n  //           <AppShell.Section grow px={16}>\n  //             <Flex direction=\"column\">{mainLinks}</Flex>\n  //           </AppShell.Section>\n  //         </Box>\n  //       </Box>\n  //     </Flex>\n  //   </Navbar>\n  // );\n\n  return null;\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/NavLink/NavLink.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'NavLink',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/NavLink/NavLink.tsx",
    "exports": [
      {
        "name": " NavLinkProps",
        "text": "\n\n// TODO: Need to fix spacing, so we don't allow number offset here\nexport interface NavLinkProps\n  extends TwBaseProps,\n    PropsWithChildren,\n    TwPolymorphicComponent,\n    // TODO: Double check if we shouldn't allow everything here\n    // Omit<EventHandler<React.ButtonHTMLAttributes<HTMLButtonElement>>, 'onChange'>,\n    Omit<MantineNavLinkProps, keyof GetStylesApiOptions> {\n  color?: FormattedColor;\n  as?: 'a';\n  onClick?: () => void;\n}",
        "type": "interface"
      },
      {
        "name": " NavLink",
        "text": "\n\nexport const NavLink = forwardRef<any, NavLinkProps>((props, ref) => {\n  const mappedProps = {\n    ...props,\n    ...(props.as && { component: props.as }),\n  };\n\n  return <MantineNavLink {...mappedProps} ref={ref} />;\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/NavSection/NavSection.css.ts",
    "exports": [
      {
        "name": " link",
        "text": "\n\nexport const link = style({\n  fontSize: vars.fontSizes.xs,\n  fontWeight: 500,\n  color: vars.colors.gray[7],\n\n  selectors: {\n    [vars.darkSelector]: {\n      color: vars.colors.white,\n    },\n  },\n});",
        "type": "variable"
      },
      {
        "name": " childLink",
        "text": "\nexport const childLink = style({\n  padding: '3px 4px 3px 0px',\n  borderRadius: 3,\n  width: 210,\n\n  vars: {\n    [childLinkHvrClr]: vars.colors.gray[7],\n  },\n\n  ':hover': {\n    color: childLinkHvrClr,\n    backgroundColor: vars.colors.named[4],\n  },\n\n  selectors: {\n    [vars.darkSelector]: {\n      vars: {\n        [childLinkHvrClr]: vars.colors.white,\n      },\n    },\n  },\n});",
        "type": "variable"
      },
      {
        "name": " activeLink",
        "text": "\n\nexport const activeLink = style({\n  color: vars.colors.gray[7],\n  backgroundColor: vars.colors.named[4],\n\n  selectors: {\n    [vars.darkSelector]: {\n      color: vars.colors.white,\n    },\n  },\n});",
        "type": "variable"
      },
      {
        "name": " sectionLink",
        "text": "\n\nexport const sectionLink = style({\n  padding: 8,\n  paddingRight: 4,\n  height: 40,\n\n  ':hover': {\n    backgroundColor: vars.colors.named[2],\n  },\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/NavSection/NavSection.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    // children: 'NavSection',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/NavSection/NavSection.tsx",
    "exports": [
      {
        "name": " NavSectionLinkProps",
        "text": "\n\n// TODO: See a way to make these less smart\nexport type NavSectionLinkProps = {\n  label: React.ReactNode;\n  id?: string;\n  isActive?: boolean;\n  onClick?: (...args: any[]) => any;\n  as?: PropsFrom<typeof MantineNavLink>['component'];\n  leftSection?: PropsFrom<typeof MantineNavLink>['leftSection'];\n  style?: TwStyleSystemProps;\n};",
        "type": "{\n  label: React.ReactNode;\n  id?: string;\n  isActive?: boolean;\n  onClick?: (...args: any[]) => any;\n  as?: PropsFrom<typeof MantineNavLink>['component'];\n  leftSection?: PropsFrom<typeof MantineNavLink>['leftSection'];\n  style?: TwStyleSystemProps;\n}"
      },
      {
        "name": " NavSectionLink",
        "text": "\nexport const NavSectionLink: React.FC<NavSectionLinkProps> = ({\n  id,\n  label,\n  style,\n  isActive,\n  onClick,\n  as,\n  leftSection,\n}) => {\n  return (\n    <MantineNavLink\n      variant=\"light\"\n      component={as}\n      className={cx(classes.link, classes.childLink, !!isActive && classes.activeLink)}\n      onClick={onClick}\n      label={label}\n      pl={42}\n      leftSection={leftSection}\n      {...style}\n      {...getMarketingProps(id ?? (typeof label === 'string' ? label : 'no-label'))}\n    />\n  );\n};",
        "type": "React.FC<NavSectionLinkProps>"
      },
      {
        "name": " NavSectionProps",
        "text": "\n\nexport type NavSectionProps = {\n  title?: string;\n  icon?: React.FC<{ width?: number; height?: number }>;\n  routes: NavSectionLinkProps[];\n  isOpen?: boolean;\n  onClick?: () => void;\n};",
        "type": "{\n  title?: string;\n  icon?: React.FC<{ width?: number; height?: number }>;\n  routes: NavSectionLinkProps[];\n  isOpen?: boolean;\n  onClick?: () => void;\n}"
      },
      {
        "name": " NavSection",
        "text": "\nexport const NavSection: React.FC<NavSectionProps> = ({\n  title,\n  routes,\n  icon,\n  isOpen: _isOpen = false,\n  onClick,\n}) => {\n  const [isOpen, setIsOpen] = useState(_isOpen);\n\n  const hasChildren = !!routes.length;\n\n  const LeftIcon = useMemo(() => (typeof icon === 'function' ? icon({}) : icon), [icon]);\n  const RightSection = useMemo(\n    () => (hasChildren ? <Icon width={10} name={`arrow-${isOpen ? 'up' : 'down'}-3`} /> : null),\n    [hasChildren, isOpen]\n  );\n\n  const toggleOpen = () => {\n    setIsOpen((x) => !x);\n    onClick?.();\n  };\n\n  const childLinks = useMemo(() => {\n    if (!hasChildren) return;\n\n    if (routes.length === 1) {\n      const { onClick, label } = routes[0];\n      return (\n        <MantineNavLink\n          variant=\"light\"\n          className={cx(classes.link, classes.sectionLink)}\n          leftSection={LeftIcon}\n          label={label}\n          onClick={onClick}\n        />\n      );\n    }\n\n    return routes.map((props, i) => {\n      const key = `nav-link-${i}-${props.label}`;\n      return <NavSectionLink {...props} id={title + '-' + props.label} key={key} />;\n    });\n  }, [hasChildren, routes, LeftIcon, title]);\n\n  useEffect(() => {\n    setIsOpen(_isOpen);\n  }, [_isOpen]);\n\n  if (childLinks && !Array.isArray(childLinks)) {\n    return childLinks;\n  }\n\n  return (\n    <MantineNavLink\n      opened={isOpen}\n      key={(title || 'link-title') + icon}\n      variant=\"light\"\n      pr={20}\n      className={cx(classes.link, classes.sectionLink)}\n      leftSection={LeftIcon}\n      label={title}\n      onClick={toggleOpen}\n      childrenOffset={0}\n      rightSection={RightSection}\n      disableRightSectionRotation\n      {...getMarketingProps(title || '')}\n    >\n      {childLinks}\n    </MantineNavLink>\n  );\n};",
        "type": "React.FC<NavSectionProps>"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/NavSectionIcon/NavSectionIcon.css.ts",
    "exports": [
      {
        "name": " navSectionIcon",
        "text": "\n\nexport const navSectionIcon = style({\n  borderRadius: vars.radius.sm,\n  width: navIconW,\n  height: navIconH,\n  boxShadow: vars.shadows.sm,\n  backgroundColor: vars.colors.one[0],\n\n  selectors: {\n    [vars.darkSelector]: {\n      backgroundColor: vars.colors.gray[6],\n    },\n  },\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/NavSectionIcon/NavSectionIcon.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    // children: 'NavSectionIcon',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/NavSectionIcon/NavSectionIcon.tsx",
    "exports": [
      {
        "name": " INavSectionIcon",
        "text": "\n\nexport interface INavSectionIcon {\n  src: keyof typeof images;\n  width?: number;\n  height?: number;\n}",
        "type": "interface"
      },
      {
        "name": " NavSectionIcon",
        "text": "\n\nexport const NavSectionIcon: React.FC<INavSectionIcon> = ({ src, width = 24, height = 24 }) => {\n  // image size always 2/3s of the surrounding box\n  const imageWidth = Math.floor((width * 2) / 3);\n  const imageHeight = Math.floor((height * 2) / 3);\n\n  return (\n    <Flex\n      justify=\"center\"\n      align=\"center\"\n      className={classes.navSectionIcon}\n      style={assignInlineVars({\n        [navIconW]: `${width}px`,\n        [navIconH]: `${height}px`,\n      })}\n    >\n      <Image src={images[src]} w={imageWidth} h={imageHeight} fit=\"contain\" />\n    </Flex>\n  );\n};",
        "type": "React.FC<INavSectionIcon>"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/NavSectionIcon/dynamic-vars.css.ts",
    "exports": [
      {
        "name": " navIconW",
        "text": "\n\nexport const navIconW = createVar();",
        "type": "variable"
      },
      {
        "name": " navIconH",
        "text": "\nexport const navIconH = createVar();",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/NavSectionIcon/navSectionIcons.ts",
    "exports": [
      {
        "name": " images",
        "text": "\n\nexport const images = {\n  summary: summaryImage,\n  pixel: pixelImage,\n  'creative-cockpit': creativeCockpitImage,\n  insights: insightsImage, // also retention\n  willy: willyImage,\n  ops: opsImage,\n} as const;",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Navbar/Navbar.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'Navbar',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Navbar/Navbar.tsx",
    "exports": [
      {
        "name": " NavbarProps",
        "text": "\n\nexport interface NavbarProps\n  extends TwBaseProps,\n    TwCustomStyleSystemProps,\n    Override<TwStyleSystemProps, { bg?: FormattedColor | (string & {}) }>,\n    Omit<AppShellNavbarProps, MantinePropsToRemove> {}",
        "type": "interface"
      },
      {
        "name": " Navbar",
        "text": "\n\nexport const Navbar: React.FC<NavbarProps> = (props) => {\n  const { style, rest } = extractAndMapCustomPropsToStyle(props);\n  return <MantineAppShell.Navbar {...rest} style={style} />;\n};",
        "type": "React.FC<NavbarProps>"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/PasswordInput/PasswordInput.css.ts",
    "exports": [
      {
        "name": " visibilityToggle",
        "text": "\n\nexport const visibilityToggle = style({\n  color: inputClr,\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/PasswordInput/PasswordInput.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {},\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/PasswordInput/PasswordInput.tsx",
    "exports": [
      {
        "name": " PasswordInputProps",
        "text": "\n\nexport interface PasswordInputProps\n  extends TwBaseProps,\n    Omit<EventHandler<React.InputHTMLAttributes<HTMLInputElement>>, 'onChange'>,\n    Omit<MantinePasswordInputProps, keyof GetStylesApiOptions | 'onChange'> {\n  onChange?: TWOnChange<string>;\n  withBorder?: boolean;\n  forceColorScheme?: 'light' | 'dark';\n}",
        "type": "interface"
      },
      {
        "name": " PasswordInput",
        "text": "\n\nexport const PasswordInput = forwardRef<HTMLInputElement, PasswordInputProps>((props, ref) => {\n  const darkMode = useColorScheme().colorScheme === 'dark';\n  const { radius = 'xs', error, onChange, withBorder = true, forceColorScheme, ...other } = props;\n\n  return (\n    <MantinePasswordInput\n      {...other}\n      error={error}\n      inputWrapperOrder={['label', 'input', 'description', 'error']}\n      radius={radius}\n      // TODO: This kind of styling is in TextInput as well - refactor to make more dry\n      style={assignInlineVars({\n        [inputClr]:\n          !darkMode || forceColorScheme === 'light' ? vars.colors.gray[7] : vars.colors.gray[0],\n        [inputBgClr]:\n          !darkMode || forceColorScheme === 'light' ? vars.colors.white : vars.colors.gray[6],\n      })}\n      classNames={{\n        input: cx(input, withBorder && inputWithBorder, !!error && inputWithError),\n        error: errorStyle,\n        visibilityToggle: visibilityToggle,\n      }}\n      data-tw-ui-component=\"PasswordInput\"\n      ref={ref}\n      onChange={wrapInputOnChange(onChange)}\n      {...getMarketingProps(\n        props.placeholder || props.id || props.value?.toString() || 'tw-password-input'\n      )}\n    />\n  );\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Popover/Popover.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'Popover',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Popover/Popover.tsx",
    "exports": [
      {
        "name": " PopoverProps",
        "text": "\n\nexport type PopoverProps = TwBaseProps &\n  TwStyleSystemProps &\n  Omit<MantinePopoverProps, MantinePropsToRemove>;",
        "type": "TwBaseProps &\n  TwStyleSystemProps &\n  Omit<MantinePopoverProps, MantinePropsToRemove>"
      },
      {
        "name": " PopoverTargetProps",
        "text": "\n\nexport type PopoverTargetProps = TwBaseProps &\n  TwStyleSystemProps &\n  Omit<MantinePopoverTargetProps, MantinePropsToRemove>;",
        "type": "TwBaseProps &\n  TwStyleSystemProps &\n  Omit<MantinePopoverTargetProps, MantinePropsToRemove>"
      },
      {
        "name": " PopoverDropdownProps",
        "text": "\n\nexport type PopoverDropdownProps = TwBaseProps &\n  TwStyleSystemProps &\n  TwCustomStyleSystemProps &\n  Omit<MantinePopoverDropdownProps, MantinePropsToRemove>;",
        "type": "TwBaseProps &\n  TwStyleSystemProps &\n  TwCustomStyleSystemProps &\n  Omit<MantinePopoverDropdownProps, MantinePropsToRemove>"
      },
      {
        "name": " Popover",
        "text": "\n\nexport const Popover: PopoverComponent = Object.assign(BasePopover, {\n  Target: PopoverTarget,\n  Dropdown: PopoverDropdown,\n}) as PopoverComponent;",
        "type": "PopoverComponent"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Progress/Progress.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'Progress',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Progress/Progress.tsx",
    "exports": [
      {
        "name": " ProgressProps",
        "text": "\n\nexport interface ProgressProps\n  extends TwBaseProps,\n    Omit<MantineProgressProps, MantinePropsToRemove> {\n  color?: FormattedColor;\n}",
        "type": "interface"
      },
      {
        "name": " Progress",
        "text": "\n\nexport const Progress = forwardRef<HTMLDivElement, ProgressProps>((props, ref) => {\n  return (\n    <MantineProgress\n      {...props}\n      ref={ref}\n      data-tw-ui-component=\"Progress\"\n      {...getMarketingProps('progress')}\n    />\n  );\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/QuantityDecorator/QuantityDecorator.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: (\n      <Image\n        w={100}\n        shadowBorderSize={'sm'}\n        src={\n          'https://cdn.shopify.com/s/files/1/2148/9535/products/HTSAH_94e98c77-5ff6-4ab5-b32a-905a6fbf32cb.jpg?v=1591205882'\n        }\n      />\n    ),\n    quantity: 2,\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/QuantityDecorator/QuantityDecorator.tsx",
    "exports": [
      {
        "name": " QuantityDecoratorProps",
        "text": "\n\nexport interface QuantityDecoratorProps extends TwBaseProps, PropsWithChildren {\n  quantity: number | string;\n  size?: 'sm'; // TODO: change to Size when we have all sizes\n  color?: FormattedColor;\n  showOnZero?: boolean;\n}",
        "type": "interface"
      },
      {
        "name": " QuantityDecorator",
        "text": "\n\nexport const QuantityDecorator = forwardRef<HTMLDivElement, QuantityDecoratorProps>(\n  (props, ref) => {\n    const { children, quantity, size, color, showOnZero = false } = props;\n\n    return (\n      <Box ref={ref} pos=\"relative\" display=\"inline-block\">\n        {children}\n\n        {!!(showOnZero || quantity) && (\n          <Box\n            component=\"div\"\n            style={(theme: MantineTheme) => {\n              const style = new QuantityDecoratorComputer(theme, { size, color });\n\n              return {\n                ...style.basicStyle,\n                ...style.colorStyle,\n                ...style.sizeStyle,\n                ...style.borderStyle,\n                position: 'absolute',\n                boxSizing: 'unset',\n                display: 'inline-flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                right: 0,\n                top: 0,\n                borderRadius: '50%',\n                transform: 'translate(20%, -30%)',\n              };\n            }}\n          >\n            {quantity}\n          </Box>\n        )}\n      </Box>\n    );\n  }\n);",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/QuantityDecorator/QuantityDecoratorComputer.ts",
    "exports": [
      {
        "name": " QuantityDecoratorComputer",
        "text": "\n\nexport class QuantityDecoratorComputer extends StyleComputer {\n  private readonly size = 'sm'; // TODO: change to type Size when we have all sizes\n  public readonly color: FormattedColor = 'one.6';\n  // private readonly withBorder: boolean = true;\n\n  // TODO: change to Size when we have all sizes\n  private sizes: Readonly<Record<string, Record<'sm', `${string}rem`>>> = {\n    dimension: {\n      sm: '0.938rem',\n    },\n    font: {\n      sm: '0.68rem',\n    },\n    border: {\n      sm: '0.188rem',\n    },\n  };\n\n  public constructor(\n    public override readonly theme: MantineTheme,\n    props: Pick<QuantityDecoratorProps, 'size' | 'color'>\n  ) {\n    super();\n    this.size = props.size ?? this.size;\n    this.color = props.color ?? this.color;\n  }\n\n  public get borderStyle() {\n    return {\n      borderWidth: this.sizes.border[this.size],\n      borderColor: !this.darkMode ? this.theme.white : this.theme.colors.gray[8],\n      borderStyle: 'solid',\n    };\n  }\n\n  public get basicStyle() {\n    return {\n      fontFamily: this.theme.fontFamily,\n    };\n  }\n\n  public get colorStyle() {\n    return {\n      backgroundColor: this.colorString,\n      color: this.theme.white,\n    };\n  }\n\n  public get sizeStyle() {\n    return {\n      width: this.sizes.dimension[this.size],\n      height: this.sizes.dimension[this.size],\n      fontSize: this.sizes.font[this.size],\n    };\n  }\n}",
        "type": " StyleComputer"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/RingProgress/RingProgress.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'RingProgress',\n    sections: [\n      { value: 40, color: 'cyan' },\n      { value: 15, color: 'orange' },\n      { value: 15, color: 'grape' },\n    ],\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/RingProgress/RingProgress.tsx",
    "exports": [
      {
        "name": " RingProgressProps",
        "text": "\n\nexport interface RingProgressProps\n  extends TwBaseProps,\n    PropsWithChildren,\n    Omit<\n      PropsFrom<typeof MantineRingProgress>,\n      keyof GetStylesApiOptions | keyof MantineStyleProps\n    > {\n  rootColor?: FormattedColor;\n}",
        "type": "interface"
      },
      {
        "name": " RingProgress",
        "text": "\n\nexport const RingProgress = forwardRef<HTMLDivElement, RingProgressProps>((props, ref) => {\n  return (\n    <MantineRingProgress\n      {...props}\n      ref={ref}\n      data-tw-ui-component=\"RingProgress\"\n      {...getMarketingProps('ring-progress')}\n    />\n  );\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/SegmentedControl/SegmentedControl.css.ts",
    "exports": [
      {
        "name": " activeControl",
        "text": "\n\nexport const activeControl = style({\n  ':active': {\n    border,\n    backgroundColor,\n    color,\n  },\n\n  vars: {\n    // [border]: `1px solid ${vars.colors.gray[2]}`,\n    [backgroundColor]: vars.colors.white,\n    [color]: vars.colors.gray[7],\n    [disabledBg]: vars.colors.gray[1],\n    [disabledClr]: vars.colors.gray[4],\n  },\n\n  selectors: {\n    '&:active:disabled': {\n      backgroundColor: disabledBg,\n      color: disabledClr,\n    },\n\n    [vars.darkSelector]: {\n      vars: {\n        // [border]: 'none',\n        [backgroundColor]: vars.colors.gray[7],\n        [color]: vars.colors.gray[0],\n        [disabledBg]: vars.colors.gray[8],\n        [disabledClr]: vars.colors.gray[6],\n      },\n    },\n  },\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/SegmentedControl/SegmentedControl.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'SegmentedControl',\n    data: ['one', 'two'],\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/SegmentedControl/SegmentedControl.tsx",
    "exports": [
      {
        "name": " SegmentedControlProps",
        "text": "\n// import { activeControl } from './SegmentedControl.css';\n\nexport interface SegmentedControlProps\n  extends TwBaseProps,\n    PropsWithChildren,\n    TwStyleSystemProps,\n    Omit<MantineSegmentedControlProps, MantinePropsToRemove> {\n  color?: FormattedColor;\n}",
        "type": "interface"
      },
      {
        "name": " SegmentedControl",
        "text": "\n\nexport const SegmentedControl = forwardRef<HTMLDivElement, SegmentedControlProps>((props, ref) => {\n  return <MantineSegmentedControl {...props} styles={(theme) => ({\n    root: {\n      backgroundColor: 'transparent',\n    },\n    indicator: {\n      backgroundColor: theme.colors.gray[2]\n    }\n  })} ref={ref} />;\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Select/Select.css.ts",
    "exports": [
      {
        "name": " dropdown",
        "text": "\n\nexport const dropdown = style({\n  borderColor,\n  backgroundColor: vars.colors.white,\n  minWidth: minDropdownWidth,\n\n  selectors: {\n    [vars.darkSelector]: {\n      backgroundColor: vars.colors.gray[6],\n    },\n  },\n});",
        "type": "variable"
      },
      {
        "name": " input",
        "text": "\n\nexport const input = style({\n  borderColor,\n  color: vars.colors.black,\n  fontWeight,\n  backgroundColor: vars.colors.white,\n\n  selectors: {\n    [vars.darkSelector]: {\n      color: vars.colors.white,\n      backgroundColor: vars.colors.gray[6],\n    },\n  },\n});",
        "type": "variable"
      },
      {
        "name": " inputFocus",
        "text": "\n\nexport const inputFocus = style({\n  ':focus': {\n    borderColor,\n  },\n});",
        "type": "variable"
      },
      {
        "name": " option",
        "text": "\nexport const option = style({\n  fontWeight,\n  color: optionClr,\n  backgroundColor: vars.colors.white,\n\n  vars: {\n    [optionClr]: vars.colors.black,\n  },\n\n  selectors: {\n    [vars.darkSelector]: {\n      backgroundColor: vars.colors.gray[6],\n\n      vars: {\n        [optionClr]: vars.colors.white,\n      },\n    },\n\n    '&:hover, &[data-selected=\"true\"]': {\n      backgroundColor: vars.colors.named[4],\n    },\n\n    '&[data-selected=\"true\"]:hover': {\n      backgroundColor: darken(vars.colors.named[4], 0.1),\n    },\n  },\n});",
        "type": "variable"
      },
      {
        "name": " section",
        "text": "\n\nexport const section = style({\n  // TODO: Figure out why this is necessary - somehow the section blocks the click event...\n  pointerEvents: 'none',\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Select/Select.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    data: [\n      { value: 'react', label: 'React' },\n      { value: 'ng', label: 'Angular' },\n      { value: 'svelte', label: 'Svelte' },\n      { value: 'vue', label: 'Vue' },\n    ]\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Select/Select.tsx",
    "exports": [
      {
        "name": " SelectProps",
        "text": "\n\nexport interface SelectProps\n  extends TwBaseProps,\n    PropsWithChildren,\n    TwStyleSystemProps,\n    Omit<MantineSelectProps, keyof Omit<GetStylesApiOptions, 'styles'> | keyof MantineStyleProps> {\n  focusStyles?: boolean;\n  withBorder?: boolean;\n  minDropdownWidth?: number | string;\n  fw?: string | number;\n  /** Determines whether it should be possible to deselect value by clicking on the selected option, false by default */\n  allowDeselect?: boolean;\n}",
        "type": "interface"
      },
      {
        "name": " Select",
        "text": "\n\nexport const Select = forwardRef<HTMLInputElement, SelectProps>((props, ref) => {\n  const {\n    focusStyles = false,\n    withBorder = true,\n    minDropdownWidth: _minDropdownWidth,\n    fw = 400 as any,\n    allowDeselect = false,\n    data,\n    comboboxProps,\n    ...rest\n  } = props;\n\n  const dedupedData = useDedupedComboboxData(data);\n\n  return (\n    <MantineSelect\n      ref={ref}\n      {...rest}\n      data={dedupedData}\n      allowDeselect={allowDeselect}\n      style={assignInlineVars({\n        [borderColor]: withBorder ? vars.colors.named2[3] : 'transparent',\n        ...(_minDropdownWidth && { [minDropdownWidth]: _minDropdownWidth + 'px' }),\n      })}\n      comboboxProps={{\n        ...comboboxProps,\n        styles() {\n          return {\n            dropdown: assignInlineVars({\n              [borderColor]: withBorder ? vars.colors.named2[3] : 'transparent',\n            }),\n          };\n        },\n      }}\n      classNames={{\n        dropdown: classes.dropdown,\n        input: cx(classes.input, !focusStyles && classes.inputFocus),\n        option: classes.option,\n        section: classes.section,\n      }}\n    />\n  );\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Select/dynamic-vars.css.ts",
    "exports": [
      {
        "name": " borderColor",
        "text": "\n\nexport const borderColor = createVar();",
        "type": "variable"
      },
      {
        "name": " fontWeight",
        "text": "\nexport const fontWeight = createVar();",
        "type": "variable"
      },
      {
        "name": " minDropdownWidth",
        "text": "\nexport const minDropdownWidth = createVar();",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Skeleton/Skeleton.css.ts",
    "exports": [
      {
        "name": " skeletonBeforeColor",
        "text": "\n\nexport const skeletonBeforeColor = createVar();",
        "type": "variable"
      },
      {
        "name": " skeletonAfterColor",
        "text": "\nexport const skeletonAfterColor = createVar();",
        "type": "variable"
      },
      {
        "name": " skeleton",
        "text": "\n\nexport const skeleton = style({\n  vars: {\n    [skeletonBeforeColor]: vars.colors.gray[2],\n    [skeletonAfterColor]: vars.colors.gray[3],\n  },\n\n  selectors: {\n    '&[data-visible]::before': {\n      backgroundColor: skeletonBeforeColor + ' !important',\n    },\n\n    '&[data-visible]::after': {\n      backgroundColor: skeletonAfterColor + ' !important',\n    },\n\n    [vars.darkSelector]: {\n      vars: {\n        [skeletonBeforeColor]: vars.colors.gray[4],\n        [skeletonAfterColor]: vars.colors.gray[5],\n      },\n    },\n  },\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Skeleton/Skeleton.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'Skeleton',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Skeleton/Skeleton.tsx",
    "exports": [
      {
        "name": " SkeletonProps",
        "text": "\n\nexport interface SkeletonProps\n  extends TwBaseProps,\n    PropsWithChildren,\n    Pick<MantineSkeletonProps, 'visible' | 'height' | 'width' | 'circle' | 'radius' | 'animate'> {\n  /**\n   * @description First color in animation\n   */\n  beforeColor?: FormattedColor;\n  /**\n   * @description Second color in animation\n   */\n  afterColor?: FormattedColor;\n}",
        "type": "interface"
      },
      {
        "name": " Skeleton",
        "text": "\n\nexport const Skeleton = forwardRef<HTMLDivElement, SkeletonProps>(\n  ({ beforeColor, afterColor, ...props }, ref) => {\n    return (\n      <MantineSkeleton\n        {...props}\n        ref={ref}\n        style={assignInlineVars({\n          [skeletonBeforeColor]: beforeColor && extractCSSColor(beforeColor),\n          [skeletonAfterColor]: afterColor && extractCSSColor(afterColor),\n        })}\n        className={skeleton}\n      />\n    );\n  }\n);",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Slider/Slider.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'Slider',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Slider/Slider.tsx",
    "exports": [
      {
        "name": " SliderProps",
        "text": "\n\nexport interface SliderProps\n  extends TwBaseProps,\n    PropsWithChildren,\n    Omit<MantineSliderProps, keyof GetStylesApiOptions> {\n  color?: FormattedColor;\n}",
        "type": "interface"
      },
      {
        "name": " Slider",
        "text": "\n\nexport const Slider = forwardRef<HTMLDivElement, SliderProps>((props, ref) => {\n  return <MantineSlider {...props} ref={ref} data-tw-ui-component=\"Slider\" />;\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Stack/Stack.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'Stack',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Stack/Stack.tsx",
    "exports": [
      {
        "name": " StackProps",
        "text": "\n\nexport interface StackProps\n  extends TwBaseProps,\n    TwStyleSystemProps,\n    PropsWithChildren,\n    Pick<MantineStackProps, 'variant' | 'gap' | 'align' | 'justify' | 'style'> {}",
        "type": "interface"
      },
      {
        "name": " Stack",
        "text": "\n\nexport const Stack = forwardRef<HTMLDivElement, StackProps>((props, ref) => {\n  return <MantineStack {...props} ref={ref} />;\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/StoresNav/StoresNav.css.ts",
    "exports": [
      {
        "name": " shopImageOutlineClr",
        "text": "\n\nexport const shopImageOutlineClr = createVar();",
        "type": "variable"
      },
      {
        "name": " shopImage",
        "text": "\nexport const shopImage = style({\n  outline: `2px solid ${shopImageOutlineClr}`,\n  outlineOffset: `1px`,\n  border: `1px solid transparent`,\n\n  vars: {\n    [shopImageOutlineClr]: vars.colors.gray[4],\n  },\n\n  selectors: {\n    [vars.darkSelector]: {\n      [shopImageOutlineClr]: vars.colors.gray[2],\n    },\n  },\n});",
        "type": "variable"
      },
      {
        "name": " wrapper",
        "text": "\n\nexport const wrapper = style({\n  height: '100vh',\n  overflowY: 'scroll',\n  '::-webkit-scrollbar': {\n    display: 'none',\n  },\n});",
        "type": "variable"
      },
      {
        "name": " dropZone",
        "text": "\n\nexport const dropZone = style({\n  padding: '15px 20px 0',\n  display: 'flex',\n  justifyContent: 'flex-start',\n  flexDirection: 'column',\n  alignItems: 'center',\n  gap: '10px',\n  overflow: 'scroll',\n  scrollbarWidth: 'none',\n  cursor: 'pointer',\n  maxHeight: '100vh',\n\n  '::-webkit-scrollbar': {\n    display: 'none',\n  },\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/StoresNav/StoresNav.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    // children: 'StoresNav',\n    shops: [\n      {\n        shopId: 'madisonbraids.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/madisonbraids.myshopify.com',\n        activeAppVersion: '2.0',\n        features: ['CONF_NEW_DESIGN'],\n        ui: {\n          inAppContextBanners: {\n            summary: false,\n            attribution: false,\n          },\n          attribution: {\n            selectedColumns: [\n              'showInGraph',\n              'status',\n              'name',\n              'pixelConversionValue',\n              'spend',\n              'pixelCogs',\n              'pixelProfit',\n              'adsInventory',\n            ],\n          },\n          summary: {\n            expenses: {\n              index: 13,\n            },\n            kno: {\n              index: 16,\n            },\n            snapchat: {\n              index: 9,\n            },\n            'c44fd938-10f3-462f-8f9f-808b241839fa': {\n              isForceHideCustomMetricAfterMargeWithStats: false,\n              index: 0,\n              hidden: true,\n            },\n            customMetrics: {\n              index: 18,\n            },\n            customersLifetimeValue: {\n              index: 7,\n            },\n            inventory: {\n              index: 14,\n            },\n            financePinned: {\n              index: 23,\n            },\n            twitter: {\n              index: 10,\n            },\n            'bf62fefb-c2fa-4b31-b99d-84e12347ba0e': {\n              mode: 'tile',\n              index: 1,\n            },\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n              index: 3,\n              mode: 'tile',\n            },\n            'amazon-sales': {\n              index: 20,\n            },\n            enquirelabs: {\n              index: 17,\n            },\n            'amazon-ads': {\n              index: 21,\n            },\n            tiktok: {\n              index: 11,\n            },\n            pinterest: {\n              index: 15,\n            },\n            benchmarks: {\n              mode: 'tile',\n            },\n            facebookAds: {\n              index: 6,\n            },\n            GOOGLE_ANALYTICS: {\n              index: 8,\n            },\n            store: {\n              mode: 'tile',\n              index: 4,\n            },\n            influencers: {\n              index: 19,\n            },\n            'amazon-stats': {\n              index: 22,\n            },\n            '2a6c849f-dda9-4282-bbdc-d4d78146a11c': {\n              index: 0,\n            },\n            klaviyo: {\n              index: 12,\n            },\n            amazon: {\n              hidden: false,\n            },\n            salesBySegment: {\n              index: 17,\n            },\n            gorgias: {\n              index: 11,\n            },\n            tripleStats: {\n              mode: 'tile',\n              index: 2,\n            },\n            'fa44c05e-2e6f-4a06-86cf-f4cd086c26a9': {\n              index: 27,\n            },\n            '7dd5f96c-d43c-4aeb-a9b4-9ee846140d81': {\n              index: 24,\n            },\n            GOOGLE_ADS: {\n              index: 8,\n              isForceHideCustomMetricAfterMargeWithStats: false,\n              hidden: false,\n            },\n            pixel: {\n              index: 5,\n            },\n          },\n          useNewDesign: true,\n          gridDesktopColumns: 3,\n          summaryFullWidth: false,\n          gridDesktop: false,\n        },\n        lastRoutesPerVersion: {\n          '3.0': '/dashboards/pkSdHUeSMgodrvJl4A4C',\n          '2.0': '/attribution/all/all',\n        },\n        timezone: 'America/New_York',\n        roles: ['admin'],\n        accessRoles: ['expenses'],\n      },\n      {\n        shopId: 'wax-london.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/wax-london.myshopify.com',\n        features: [],\n        ui: {\n          gridDesktop: false,\n          summaryFullWidth: false,\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        roles: ['admin'],\n        notificationCount: 6,\n      },\n      {\n        shopId: '1p-ecomm.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/1p-ecomm.myshopify.com',\n        features: ['CONF_PII_FIRST_PHORM'],\n        timezone: 'America/Chicago',\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n          attribution: {\n            selectedColumns: [\n              'showInGraph',\n              'status',\n              'name',\n              'spend',\n              'pixelRoas',\n              'pixelPurchases',\n              'pixelNcPurchases',\n              'pixelConversionValue',\n              'pixelNcConversionValue',\n              'pixelNcRoas',\n              'pixelCpa',\n              'pixelNcCpa',\n              'pixelAov',\n              'pixelProfit',\n              'overlap',\n              'pixelVisitors',\n              'pixelUniqueVisitors',\n              'pixelNewVisitors',\n              'pixelEmailSignup',\n              'pixelUniqueAtc',\n              'pixelConversionRate',\n              'pixelBounceRate',\n              'adsInventory',\n            ],\n          },\n        },\n        roles: ['admin'],\n        accessRoles: ['expenses'],\n      },\n      {\n        shopId: '0a7868-3.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/0a7868-3.myshopify.com',\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        roles: ['admin'],\n      },\n      {\n        shopId: '172350.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/172350.myshopify.com',\n        ui: {\n          attribution: {\n            selectedColumns: [\n              'showInGraph',\n              'status',\n              'name',\n              'spend',\n              'pixelRoas',\n              'pixelPurchases',\n              'pixelNcPurchases',\n              'pixelConversionValue',\n              'pixelNcConversionValue',\n              'pixelNcRoas',\n              'pixelCpa',\n              'pixelNcCpa',\n              'pixelAov',\n              'pixelProfit',\n              'overlap',\n              'pixelVisitors',\n              'pixelUniqueVisitors',\n              'pixelNewVisitors',\n              'pixelEmailSignup',\n              'pixelUniqueAtc',\n              'pixelConversionRate',\n              'pixelBounceRate',\n              'adsInventory',\n            ],\n          },\n        },\n        notificationCount: 6,\n      },\n      {\n        shopId: 'rocketsofawesome.myshopify.com',\n        shopImage:\n          'https://api.triplewhale.com/api/v2/media/shop-icon/rocketsofawesome.myshopify.com',\n        accessRoles: [],\n        roles: ['admin'],\n        ui: {\n          attribution: {\n            selectedColumns: [\n              'showInGraph',\n              'status',\n              'name',\n              'spend',\n              'pixelNewVisitors',\n              'pixelCostPerNewVisitor',\n              'pixelNewVisitorPerc',\n              'pixelNcPurchases',\n              'pixelNcConversionValue',\n              'pixelNcRoas',\n              'pixelNcAov',\n              'pixelNcPurchasesPerc',\n              'pixelNcConversionRate',\n            ],\n          },\n          summary: {\n            customMetrics: {\n              tiles: [\n                'totalNetProfit',\n                'roas',\n                'mer',\n                'totalNetMargin',\n                'blendedAds',\n                'newCustomersCpa',\n                'newCustomersRoas',\n                'a6YOmUc1woIeVP8cE7rr',\n                'RVF6xnqqFrUJc38biCE2',\n                'a0smKXrYTrWfLmNLlQOi',\n                'RenjUE2lIA2qXXZDhhfL',\n                'MnDKhaC5FOfLZS97PDh1',\n                'U8SEoQbxOeW0C8olyIek',\n                'fF1w3lC8XaYMntPmKRkY',\n                '8J6Fz53mDgekNijCL1ub',\n                'P08YQ9iOaIny8kQuTmOf',\n                'lgye4HEDYLWBRvWihrc1',\n                'otBPXfQmvygHIUxCfoz8',\n                '4jIHeoU3hQAHAI6i6ud7',\n                'imG9Cq6gIKONI1DgvIYV',\n                '93K498G4DMzar14cpKvz',\n              ],\n            },\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n          inAppContextBanners: {\n            summary: false,\n          },\n        },\n      },\n      {\n        shopId: '12256b.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/12256b.myshopify.com',\n        roles: ['admin'],\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n      },\n      {\n        shopId: '3003232.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/3003232.myshopify.com',\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        roles: ['admin'],\n      },\n      {\n        shopId: '3003233.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/3003233.myshopify.com',\n        roles: ['admin'],\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n      },\n      {\n        shopId: '300323.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/300323.myshopify.com',\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        roles: ['admin'],\n      },\n      {\n        shopId: '30032334.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/30032334.myshopify.com',\n        roles: ['admin'],\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n      },\n      {\n        shopId: '3003237.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/3003237.myshopify.com',\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        roles: ['admin'],\n      },\n      {\n        shopId: '4356786543567.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/4356786543567.myshopify.com',\n        accessRoles: [],\n        ui: {\n          useNewDesign: true,\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        invitationId: '6CVc88cTPDwUIHEfezNd',\n        roles: ['admin'],\n        inviterId: 'hRam2Dmbr7asaxBvReSAXGEhaMb2',\n        invitedAt: {\n          seconds: 1675862296,\n          nanoseconds: 674000000,\n        },\n      },\n      {\n        shopId: '51105d.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/51105d.myshopify.com',\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        roles: ['admin'],\n      },\n      {\n        shopId: '7f189d.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/7f189d.myshopify.com',\n        accessRoles: [],\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        roles: ['admin'],\n      },\n      {\n        shopId: '9edb83.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/9edb83.myshopify.com',\n        ui: {\n          useNewDesign: true,\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        invitationId: '6CVc88cTPDwUIHEfezNd',\n        invitedAt: {\n          seconds: 1675862296,\n          nanoseconds: 674000000,\n        },\n        roles: ['admin'],\n        accessRoles: [],\n        inviterId: 'hRam2Dmbr7asaxBvReSAXGEhaMb2',\n      },\n      {\n        shopId: 'batsheva-090909090990.myshopify.com',\n        shopImage:\n          'https://api.triplewhale.com/api/v2/media/shop-icon/batsheva-090909090990.myshopify.com',\n        accessRoles: [],\n        roles: ['admin'],\n        inviterId: 'hRam2Dmbr7asaxBvReSAXGEhaMb2',\n        invitationId: '6CVc88cTPDwUIHEfezNd',\n        invitedAt: {\n          seconds: 1675862296,\n          nanoseconds: 674000000,\n        },\n        ui: {\n          useNewDesign: true,\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n      },\n      {\n        shopId: 'batsheva-tesghfdhgdf.myshopify.com',\n        shopImage:\n          'https://api.triplewhale.com/api/v2/media/shop-icon/batsheva-tesghfdhgdf.myshopify.com',\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        roles: ['admin'],\n      },\n      {\n        shopId: 'batsheva-testfreewilly.myshopify.com',\n        shopImage:\n          'https://api.triplewhale.com/api/v2/media/shop-icon/batsheva-testfreewilly.myshopify.com',\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        roles: ['admin'],\n      },\n      {\n        shopId: 'batsheva-testinagain.myshopify.com',\n        shopImage:\n          'https://api.triplewhale.com/api/v2/media/shop-icon/batsheva-testinagain.myshopify.com',\n        invitationId: '6CVc88cTPDwUIHEfezNd',\n        inviterId: 'hRam2Dmbr7asaxBvReSAXGEhaMb2',\n        ui: {\n          useNewDesign: true,\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        invitedAt: {\n          seconds: 1675862296,\n          nanoseconds: 674000000,\n        },\n        accessRoles: [],\n        roles: ['admin'],\n      },\n      {\n        shopId: 'batsheva-testlink.myshopify.com',\n        shopImage:\n          'https://api.triplewhale.com/api/v2/media/shop-icon/batsheva-testlink.myshopify.com',\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        roles: ['admin'],\n      },\n      {\n        shopId: 'batshevatest.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/batshevatest.myshopify.com',\n        invitedAt: {\n          seconds: 1675862296,\n          nanoseconds: 674000000,\n        },\n        accessRoles: [],\n        roles: ['admin'],\n        ui: {\n          useNewDesign: true,\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        invitationId: '6CVc88cTPDwUIHEfezNd',\n        inviterId: 'hRam2Dmbr7asaxBvReSAXGEhaMb2',\n      },\n      {\n        shopId: 'bylashbabe.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/bylashbabe.myshopify.com',\n        roles: ['admin'],\n        accessRoles: [],\n        ui: {\n          inAppContextBanners: {\n            attribution: false,\n          },\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n          attribution: {\n            selectedColumns: [\n              'showInGraph',\n              'status',\n              'name',\n              'spend',\n              'pixelPurchases',\n              'pixelNcPurchases',\n              'pixelNcPurchasesPerc',\n              'purchases',\n            ],\n          },\n        },\n      },\n      {\n        shopId: 'chamberlaincoffee.myshopify.com',\n        shopImage:\n          'https://api.triplewhale.com/api/v2/media/shop-icon/chamberlaincoffee.myshopify.com',\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n            customMetrics: {\n              tiles: [\n                'totalNetProfit',\n                'roas',\n                'mer',\n                'totalNetMargin',\n                'blendedAds',\n                'newCustomersCpa',\n                'newCustomersRoas',\n                'blendedSales',\n                'SCWPhJ3bUkoeDN3Utnni',\n                'HEsnedsx7sQmTTCuf4nM',\n                '31c8tmjvNORpYZAythCb',\n                'NGh5a6hkmnkWX1Qlf7EP',\n                'rQB8tj4SrLcKq9flQp07',\n                'jyWoPWdQOsb4lLBvYEeN',\n                'GAtVDpklmwf1zTPtEFQk',\n                'hHdv1P6vlbjWgJJfl3rj',\n                'zrIhqZkvzQJOHYupQ6qG',\n              ],\n            },\n          },\n        },\n        notificationCount: 3,\n      },\n      {\n        shopId: 'chayastern-free-willy-15-02-triplewhale.myshopify.com',\n        shopImage:\n          'https://api.triplewhale.com/api/v2/media/shop-icon/chayastern-free-willy-15-02-triplewhale.myshopify.com',\n        accessRoles: [],\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        roles: ['admin'],\n      },\n      {\n        shopId: 'chezijob2-cupon1.myshopify.com',\n        shopImage:\n          'https://api.triplewhale.com/api/v2/media/shop-icon/chezijob2-cupon1.myshopify.com',\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        roles: ['admin'],\n        accessRoles: [],\n      },\n      {\n        shopId: 'e03909-2.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/e03909-2.myshopify.com',\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        roles: ['admin'],\n      },\n      {\n        shopId: 'f16f47-4.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/f16f47-4.myshopify.com',\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        roles: ['admin'],\n      },\n      {\n        shopId: 'gummyhairdev.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/gummyhairdev.myshopify.com',\n        ui: {\n          attribution: {\n            selectedColumns: [\n              'showInGraph',\n              'status',\n              'name',\n              'spend',\n              'pixelRoas',\n              'pixelPurchases',\n              'pixelNcPurchases',\n              'pixelConversionValue',\n              'pixelNcConversionValue',\n              'pixelNcRoas',\n              'pixelCpa',\n              'pixelNcCpa',\n              'pixelAov',\n              'pixelProfit',\n              'overlap',\n              'pixelVisitors',\n              'pixelUniqueVisitors',\n              'pixelNewVisitors',\n              'pixelEmailSignup',\n              'pixelUniqueAtc',\n              'pixelConversionRate',\n              'pixelBounceRate',\n              'adsInventory',\n            ],\n          },\n        },\n        notificationCount: 6,\n      },\n      {\n        shopId: 'letterfest.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/letterfest.myshopify.com',\n        roles: ['admin'],\n        accessRoles: [],\n        ui: {\n          inAppContextBanners: {\n            summary: false,\n          },\n        },\n        notificationCount: 6,\n      },\n      {\n        shopId: 'lonza-shoes.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/lonza-shoes.myshopify.com',\n        ui: {\n          attribution: {\n            selectedColumns: [\n              'showInGraph',\n              'status',\n              'name',\n              'spend',\n              'pixelRoas',\n              'pixelPurchases',\n              'pixelNcPurchases',\n              'pixelConversionValue',\n              'pixelNcConversionValue',\n              'pixelNcRoas',\n              'pixelCpa',\n              'pixelNcCpa',\n              'pixelAov',\n              'pixelProfit',\n              'overlap',\n              'pixelVisitors',\n              'pixelUniqueVisitors',\n              'pixelNewVisitors',\n              'pixelEmailSignup',\n              'pixelUniqueAtc',\n              'pixelConversionRate',\n              'pixelBounceRate',\n              'adsInventory',\n            ],\n          },\n        },\n        notificationCount: 6,\n      },\n      {\n        shopId: 'new-pricing-test.myshopify.com',\n        shopImage:\n          'https://api.triplewhale.com/api/v2/media/shop-icon/new-pricing-test.myshopify.com',\n        roles: ['admin'],\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        accessRoles: [],\n      },\n      {\n        shopId: 'pear-ring.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/pear-ring.myshopify.com',\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        features: ['CONF_EXPENSES_BLOCKED'],\n        roles: ['admin'],\n        accessRoles: [],\n        notificationCount: 12,\n      },\n      {\n        shopId: 'penina-rothner-test.myshopify.com',\n        shopImage:\n          'https://api.triplewhale.com/api/v2/media/shop-icon/penina-rothner-test.myshopify.com',\n        roles: ['admin'],\n        accessRoles: ['expenses', 'finance'],\n        ui: {\n          useNewDesign: true,\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n      },\n      {\n        shopId: 'shoeembassy.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/shoeembassy.myshopify.com',\n        ui: {\n          summary: {\n            webAnalytics: {\n              index: 4,\n            },\n            pinned: {\n              tiles: [\n                'netSales',\n                'blendedAds',\n                'roas',\n                'newCustomersCpa',\n                'totalNetMargin',\n                'pixelConversionRate',\n                'pixelCostPerSession',\n                'facebookPurchases',\n              ],\n              index: 0,\n            },\n            pinterest: {\n              index: 8,\n            },\n            tiktok: {\n              index: 7,\n            },\n            GOOGLE_ADS: {\n              index: 6,\n            },\n            pixel: {\n              index: 3,\n            },\n            customMetrics: {\n              index: 2,\n            },\n            store: {\n              index: 1,\n            },\n            facebookAds: {\n              index: 5,\n            },\n            expenses: {\n              index: 9,\n            },\n          },\n          inAppContextBanners: {},\n        },\n        accessRoles: [],\n        roles: ['admin'],\n        notificationCount: 6,\n      },\n      {\n        shopId: 'test-production.myshopify.com',\n        shopImage:\n          'https://api.triplewhale.com/api/v2/media/shop-icon/test-production.myshopify.com',\n        accessRoles: [],\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        roles: ['admin'],\n      },\n      {\n        shopId: 'testnovember.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/testnovember.myshopify.com',\n        roles: ['admin'],\n        inviterId: 'hRam2Dmbr7asaxBvReSAXGEhaMb2',\n        accessRoles: [],\n        ui: {\n          useNewDesign: true,\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        invitedAt: {\n          seconds: 1675862296,\n          nanoseconds: 674000000,\n        },\n        invitationId: '6CVc88cTPDwUIHEfezNd',\n      },\n      {\n        shopId: 'testpayment1.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/testpayment1.myshopify.com',\n        roles: ['admin'],\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n      },\n      {\n        shopId: 'testpayment3.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/testpayment3.myshopify.com',\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        roles: ['admin'],\n      },\n      {\n        shopId: 'testpayment2.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/testpayment2.myshopify.com',\n        roles: ['admin'],\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n      },\n      {\n        shopId: 'testproductionpaymentlink.myshopify.com',\n        shopImage:\n          'https://api.triplewhale.com/api/v2/media/shop-icon/testproductionpaymentlink.myshopify.com',\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        roles: ['admin'],\n      },\n      {\n        shopId: 'wishywish-store.myshopify.com',\n        shopImage:\n          'https://api.triplewhale.com/api/v2/media/shop-icon/wishywish-store.myshopify.com',\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        roles: ['admin'],\n        accessRoles: [],\n      },\n      {\n        shopId: 'yitzchak-test.57231.myshopify.com',\n        shopImage:\n          'https://api.triplewhale.com/api/v2/media/shop-icon/yitzchak-test.57231.myshopify.com',\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        roles: ['owner'],\n      },\n      {\n        shopId: 'every-foods.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/every-foods.myshopify.com',\n        roles: ['admin'],\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        features: ['CONF_NEW_DESIGN'],\n        notificationCount: 6,\n      },\n      {\n        shopId: 'the-frownies.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/the-frownies.myshopify.com',\n        roles: ['admin'],\n        features: ['CONF_NEW_DESIGN'],\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        notificationCount: 6,\n      },\n      {\n        shopId: 'corsa-girl.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/corsa-girl.myshopify.com',\n        ui: {\n          gridDesktopColumns: 4,\n          summaryFullWidth: true,\n          gridDesktop: true,\n        },\n        notificationCount: 6,\n      },\n      {\n        shopId: 'batsheva-impppp.myshopify.com',\n        shopImage:\n          'https://api.triplewhale.com/api/v2/media/shop-icon/batsheva-impppp.myshopify.com',\n        roles: ['admin'],\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n      },\n      {\n        shopId: 'batsheva-impppp1.myshopify.com',\n        shopImage:\n          'https://api.triplewhale.com/api/v2/media/shop-icon/batsheva-impppp1.myshopify.com',\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        roles: ['admin'],\n      },\n      {\n        shopId: 'batsheva-impppp2.myshopify.com',\n        shopImage:\n          'https://api.triplewhale.com/api/v2/media/shop-icon/batsheva-impppp2.myshopify.com',\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        roles: ['admin'],\n      },\n      {\n        shopId: 'my-obvi.myshopify.com',\n        shopImage: 'https://api.triplewhale.com/api/v2/media/shop-icon/my-obvi.myshopify.com',\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        roles: ['admin'],\n        features: [],\n      },\n      {\n        shopId: 'trueclassictees-com.myshopify.com',\n        shopImage:\n          'https://api.triplewhale.com/api/v2/media/shop-icon/trueclassictees-com.myshopify.com',\n        ui: {\n          summary: {\n            pinned: {\n              tiles: ['netSales', 'blendedAds', 'roas'],\n            },\n          },\n        },\n        features: [],\n        roles: ['admin'],\n        notificationCount: 6,\n      },\n    ] as any,\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/StoresNav/StoresNav.tsx",
    "exports": [
      {
        "name": " StoresNavProps",
        "text": "\n\nexport type StoresNavProps = {\n  shops: {\n    shopId: string;\n    shopName: string;\n    shopImage: string;\n    [key: string]: any;\n  }[];\n  onStoreClicked: (shopId: string) => void;\n  onDragEnd: OnDragEndResponder;\n  activeShopImageRef: MutableRefObject<HTMLImageElement>;\n};",
        "type": "{\n  shops: {\n    shopId: string;\n    shopName: string;\n    shopImage: string;\n    [key: string]: any;\n  }[];\n  onStoreClicked: (shopId: string) => void;\n  onDragEnd: OnDragEndResponder;\n  activeShopImageRef: MutableRefObject<HTMLImageElement>;\n}"
      },
      {
        "name": " StoresNav",
        "text": "\n\nexport const StoresNav: React.FC<StoresNavProps> = ({\n  activeShopImageRef,\n  shops,\n  onDragEnd,\n  onStoreClicked,\n}) => {\n  if (!shops.length) return null;\n\n  return (\n    <Flex\n      direction=\"column\"\n      justify=\"flex-start\"\n      align=\"center\"\n      classNames={{ root: classes.wrapper }}\n    >\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable direction=\"vertical\" droppableId=\"stores-nav-drop-zone\">\n          {(provided) => (\n            <div className={classes.dropZone} ref={provided.innerRef} {...provided.droppableProps}>\n              {shops.map(({ shopId, shopName, shopImage }, index) => (\n                <Draggable\n                  key={`store-icon-${shopId}`}\n                  draggableId={`store-icon-${shopId}`}\n                  index={index}\n                >\n                  {(provided) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                    >\n                      <Tooltip label={shopName}>\n                        <Image\n                          radius=\"sm\"\n                          w={30}\n                          h={30}\n                          src={shopImage}\n                          onClick={() => onStoreClicked(shopId)}\n                          classNames={index !== 0 ? undefined : { root: classes.shopImage }}\n                          {...(index === 0 && { ref: activeShopImageRef })}\n                        />\n                      </Tooltip>\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </Flex>\n  );\n};",
        "type": "React.FC<StoresNavProps>"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/StyledPopover/StyledPopover.css.ts",
    "exports": [
      {
        "name": " styledNavLink",
        "text": "\n\nexport const styledNavLink = style({\n  backgroundColor: vars.colors.named[5],\n});",
        "type": "variable"
      },
      {
        "name": " styledNavLinkHover",
        "text": "\n\nexport const styledNavLinkHover = style({\n  ':hover': {\n    backgroundColor: vars.colors.named[4],\n  },\n});",
        "type": "variable"
      },
      {
        "name": " styledNavLinkBorder",
        "text": "\nexport const styledNavLinkBorder = style({\n  borderTop: navLinkTopBorder,\n\n  vars: {\n    [navLinkTopBorder]: `1px solid white`,\n  },\n\n  selectors: {\n    [vars.darkSelector]: {\n      [navLinkTopBorder]: `1px solid #262D3B`,\n    },\n  },\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/StyledPopover/StyledPopover.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    // children: 'StyledPopover',\n    target: <div>target</div>,\n    popoverLinks: [\n      {\n        children: <div>howdy</div>,\n      },\n      {\n        children: <div>howdy</div>,\n      },\n      {\n        children: <div>howdy</div>,\n      },\n      {\n        children: <div>howdy</div>,\n        topBorder: true,\n      },\n    ],\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/StyledPopover/StyledPopover.tsx",
    "exports": [
      {
        "name": " PopoverLink",
        "text": "\n\nexport type PopoverLink = {\n  children: React.ReactNode;\n  /**\n   * Determines if popover section should have a border denoting separation\n   */\n  topBorder?: boolean;\n};",
        "type": "{\n  children: React.ReactNode;\n  /**\n   * Determines if popover section should have a border denoting separation\n   */\n  topBorder?: boolean;\n}"
      },
      {
        "name": " StyledPopoverProps",
        "text": "\n\nexport type StyledPopoverProps = TwBaseProps &\n  Omit<PopoverProps, keyof GetStylesApiOptions | 'children'> & {\n    target: React.ReactNode;\n    popoverLinks: PopoverLink[];\n    onClick?: React.MouseEventHandler<HTMLButtonElement>;\n  };",
        "type": "TwBaseProps &\n  Omit<PopoverProps, keyof GetStylesApiOptions | 'children'> & {\n    target: React.ReactNode;\n    popoverLinks: PopoverLink[];\n    onClick?: React.MouseEventHandler<HTMLButtonElement>;\n  }"
      },
      {
        "name": " StyledPopover",
        "text": "\n\nexport const StyledPopover: React.FC<StyledPopoverProps> = ({\n  target,\n  popoverLinks,\n  position = 'top-start',\n  shadow = 'md',\n  withinPortal = true,\n  ...rest\n}) => {\n  const uniqueId = useRef('popover-' + generateRandomUniqueId());\n  const darkMode = useMantineColorScheme().colorScheme === 'dark';\n\n  return (\n    <Popover\n      position={position}\n      shadow={shadow}\n      styles={() => ({ dropdown: { padding: 0 } })}\n      withinPortal={withinPortal}\n      {...rest}\n    >\n      <Popover.Target>\n        <div>{target}</div>\n      </Popover.Target>\n      <Popover.Dropdown bg={darkMode ? darken('#1F2530', 0.2) : 'white'} style={{ border: 'none' }}>\n        {popoverLinks.map(({ topBorder, children }, i) => {\n          const borderRadiusStyles = (() => {\n            if (i === 0)\n              return {\n                borderTopRightRadius: '4px',\n                borderTopLeftRadius: '4px',\n              };\n            if (i === popoverLinks.length - 1)\n              return {\n                borderBottomRightRadius: '4px',\n                borderBottomLeftRadius: '4px',\n              };\n            return {};\n          })();\n\n          return (\n            <NavLink\n              key={`${uniqueId.current}-${i}`}\n              classNames={{\n                root: cx(styledNavLink, styledNavLinkHover, !!topBorder && styledNavLinkBorder),\n                children: styledNavLinkHover,\n              }}\n              styles={{ root: borderRadiusStyles }}\n              label={children}\n            />\n          );\n        })}\n      </Popover.Dropdown>\n    </Popover>\n  );\n};",
        "type": "React.FC<StyledPopoverProps>"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/SubSettingsPopover/SubSettingsPopover.css.ts",
    "exports": [
      {
        "name": " hover",
        "text": "\n\nexport const hover = style({\n  ':hover': {\n    backgroundColor: vars.colors.named[4],\n  },\n  ':first-of-type': {\n    borderTopRightRadius: vars.radius.sm,\n    borderTopLeftRadius: vars.radius.sm,\n  },\n  ':last-of-type': {\n    borderBottomRightRadius: vars.radius.sm,\n    borderBottomLeftRadius: vars.radius.sm,\n  },\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/SubSettingsPopover/SubSettingsPopover.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    targetLabel: 'Howdy!',\n    options: [\n      {\n        value: 'light',\n        label: 'Light',\n      },\n      {\n        value: 'dark',\n        label: 'Dark',\n      },\n      {\n        value: 'auto',\n        label: 'Auto',\n      },\n    ],\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/SubSettingsPopover/SubSettingsPopover.tsx",
    "exports": [
      {
        "name": " SubSettingsPopoverOption",
        "text": "\n\nexport type SubSettingsPopoverOption = {\n  label: string;\n  value?: string;\n  onClick?: React.MouseEventHandler<HTMLElement>;\n};",
        "type": "{\n  label: string;\n  value?: string;\n  onClick?: React.MouseEventHandler<HTMLElement>;\n}"
      },
      {
        "name": " SubSettingsPopoverProps",
        "text": "\n\nexport type SubSettingsPopoverProps = {\n  targetLabel?: string;\n  targetIcon?: IconName;\n  options: SubSettingsPopoverOption[];\n  value?: string;\n  textProps?: TextProps;\n};",
        "type": "{\n  targetLabel?: string;\n  targetIcon?: IconName;\n  options: SubSettingsPopoverOption[];\n  value?: string;\n  textProps?: TextProps;\n}"
      },
      {
        "name": " SubSettingsPopover",
        "text": "\n\nexport const SubSettingsPopover: React.FC<SubSettingsPopoverProps> = ({\n  options,\n  targetLabel,\n  targetIcon,\n  value,\n  textProps,\n}) => {\n  const [showIcon, setShowIcon] = useState(false);\n  const isSmall = useSelectByWindowResize(({ width }) => width <= 640);\n\n  return (\n    <Popover\n      width=\"dropdown\"\n      position={isSmall ? 'bottom-start' : 'right-start'}\n      positionDependencies={[isSmall]}\n      shadow=\"md\"\n      styles={() => ({ dropdown: { padding: 0 } })}\n      onChange={() => setShowIcon((x) => !x)}\n    >\n      <Popover.Target>\n        <Flex justify=\"space-between\" align=\"center\" style={{ cursor: 'pointer' }}>\n          <Flex gap=\"sm\" align=\"center\">\n            {!!targetIcon && <Icon name={targetIcon} />}\n            {!!targetLabel && <Text {...textProps}>{targetLabel}</Text>}\n          </Flex>\n          {showIcon && <Icon name=\"caret-right\" size={12} />}\n        </Flex>\n      </Popover.Target>\n      <Popover.Dropdown bg=\"named.5\" style={{ border: 'none', transform: 'translate(4px, -10%)' }}>\n        {options.map(({ label, onClick, value: optionValue }) => (\n          <Flex\n            style={{ cursor: 'pointer' }}\n            justify=\"space-between\"\n            align=\"center\"\n            key={label}\n            onClick={onClick}\n            w={208}\n            p={8}\n            pl={16}\n            className={hover}\n          >\n            <Text {...textProps}>{label}</Text>\n            {value && optionValue && optionValue === value && <Icon name=\"check-thin\" />}\n          </Flex>\n        ))}\n      </Popover.Dropdown>\n    </Popover>\n  );\n};",
        "type": "React.FC<SubSettingsPopoverProps>"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Switch/Switch.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  render: () => {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const [checked, { toggle }] = useDisclosure(false);\n\n    return (\n      <Switch\n        label=\"hey\"\n        onColor=\"one.9\"\n        offColor=\"named.7\"\n        variant=\"simple\"\n        withOutline\n        onChange={toggle}\n        checked={checked}\n      />\n    );\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Switch/Switch.tsx",
    "exports": [
      {
        "name": " SwitchVariants",
        "text": "\n\nexport type SwitchVariants = 'simple' | 'short';",
        "type": "'simple' | 'short'"
      },
      {
        "name": " SwitchProps",
        "text": "\n\nexport interface SwitchProps\n  extends TwBaseProps,\n    PropsWithChildren,\n    EventHandler<React.InputHTMLAttributes<HTMLInputElement>>,\n    Pick<\n      MantineSwitchProps,\n      'checked' | 'labelPosition' | 'label' | 'description' | 'disabled' | 'thumbIcon'\n    > {\n  variant?: SwitchVariants;\n  size?: Exclude<Size, 0>;\n  /** Automatically used as \"onColor\" and \"offColor\" */\n  color?: FormattedColor;\n  onColor?: FormattedColor;\n  offColor?: FormattedColor;\n  withOutline?: boolean;\n}",
        "type": "interface"
      },
      {
        "name": " Switch",
        "text": "\n\nexport const Switch = forwardRef<HTMLInputElement, SwitchProps>((props, ref) => {\n  const {\n    size = 'md',\n    'data-testid': dataTestId = 'switch',\n    labelPosition = 'right',\n    label,\n    color = 'one.6',\n    onColor,\n    offColor,\n    checked,\n    withOutline = false,\n    ...other\n  } = props;\n\n  const darkMode = useColorScheme().colorScheme === 'dark';\n  const extractedOnColor = useMemo(() => extractCSSColor(onColor ?? color), [onColor, color]);\n  const extractedOffColor = useMemo(\n    () => extractCSSColor(offColor ?? (darkMode ? 'gray.5' : 'gray.2')),\n    [offColor, darkMode]\n  );\n\n  return (\n    <MantineSwitch\n      {...{\n        size,\n        labelPosition,\n        checked,\n        'data-testid': dataTestId,\n        ...other,\n        variant: other.variant || 'simple',\n      }}\n      label={label ? <Text>{label}</Text> : null}\n      style={assignInlineVars({\n        [thumbSize]: THUMB_SIZES[size],\n        [trackWidth]: TRACK_SIZES[size].width,\n        [trackHeight]: TRACK_SIZES[size].height,\n        [_onColor]: extractedOnColor,\n        [_offColor]: extractedOffColor,\n      })}\n      classNames={{\n        track: cx(\n          classes.track,\n          other.variant === 'short' && classes.shortTrack,\n          checked && [classes.checked, withOutline && classes.checkedWithOutline]\n        ),\n        thumb: cx(\n          classes.thumb,\n          other.variant === 'short' && [classes.shortThumb, checked && classes.shortThumbChecked]\n        ),\n      }}\n      ref={ref}\n    />\n  );\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Switch/SwitchStyleComputer.ts",
    "exports": [
      {
        "name": " SwitchStyleComputer",
        "text": "\n\nexport class SwitchStyleComputer extends StyleComputer {\n  private readonly size: Exclude<Size, 0> = 'md';\n  private readonly variant: SwitchVariants = 'simple';\n  private readonly checked: boolean = false;\n  public override readonly color: FormattedColor = 'one.6';\n  private readonly onColor: string;\n  private readonly offColor: string;\n\n  public constructor(public override readonly theme: MantineTheme, props: ExtractedSwitchProps) {\n    super();\n    this.size = props.size ?? this.size;\n    this.color = props.color ?? this.color;\n\n    const extractedColor = extractCSSColor(this.color);\n    this.onColor = props.onColor ? extractCSSColor(props.onColor) : extractedColor;\n    this.offColor = props.offColor ? extractCSSColor(props.offColor) : extractedColor;\n\n    this.variant = props.variant ?? this.variant;\n    this.checked = props.checked ?? this.checked;\n  }\n\n  private get shortTrack(): object | null {\n    if (this.variant !== 'short') return null;\n    const trackSize = {\n      xs: { width: '1.125rem', height: '0.5rem' },\n      sm: { width: '1.75rem', height: '0.75rem' },\n      md: { width: '2.25rem', height: '1rem' },\n      lg: { width: '2.875rem', height: '1.25rem' },\n      xl: { width: '3.375rem', height: '1.5rem' },\n    }[this.size];\n    return {\n      ...trackSize,\n      overflow: 'visible',\n      minWidth: 'unset',\n    };\n  }\n\n  private get shortThumb(): object | null {\n    if (this.variant !== 'short') return null;\n\n    const thumbSize = {\n      xs: '0.625rem',\n      sm: '1rem',\n      md: '1.25rem',\n      lg: '1.5rem',\n      xl: '1.875rem',\n    }[this.size];\n\n    return {\n      width: thumbSize,\n      height: thumbSize,\n      left: this.checked ? `calc(100% - ${thumbSize}) !important` : 0,\n      border: `1px solid ${vars.colors.gray[2]} !important`,\n    };\n  }\n\n  private get checkedStyles() {\n    return {\n      backgroundColor: this.offColor,\n      boxShadow: `0px 0px 0px 2px #FFFFFF, 0px 0px 0px 4px ${this.offColor}`,\n    };\n  }\n\n  // currently using the format for Mantine custom styles based on their style api for the switch component\n  public get track_CustomStyles() {\n    return {\n      border: 'none',\n      backgroundColor: this.onColor,\n      ...(!!this.checked && this.checkedStyles),\n      ...(!!this.shortTrack && this.shortTrack),\n    };\n  }\n\n  public get thumb_CustomStyles() {\n    return {\n      border: 'none',\n      boxShadow: '0px 1px 3px rgba(0, 0, 0, 0.1), 0px 1px 2px rgba(0, 0, 0, 0.06)',\n      ...(!!this.shortThumb && this.shortThumb),\n    };\n  }\n}",
        "type": " StyleComputer"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Switch/dynamic-vars.css.ts",
    "exports": [
      {
        "name": " trackWidth",
        "text": "\n\nexport const trackWidth = createVar();",
        "type": "variable"
      },
      {
        "name": " trackHeight",
        "text": "\nexport const trackHeight = createVar();",
        "type": "variable"
      },
      {
        "name": " thumbSize",
        "text": "\nexport const thumbSize = createVar();",
        "type": "variable"
      },
      {
        "name": " onColor",
        "text": "\nexport const onColor = createVar();",
        "type": "variable"
      },
      {
        "name": " offColor",
        "text": "\nexport const offColor = createVar();",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Switch/styles/index.ts",
    "exports": []
  },
  {
    "file": "@tw/ui-components/src/components/Switch/styles/short.css.ts",
    "exports": [
      {
        "name": " shortTrack",
        "text": "\n\nexport const shortTrack = style({\n  width: trackWidth,\n  height: trackHeight,\n  overflow: 'visible',\n  minWidth: 'unset',\n});",
        "type": "variable"
      },
      {
        "name": " shortThumb",
        "text": "\n\nexport const shortThumb = style({\n  width: thumbSize,\n  height: thumbSize,\n  left: 0,\n  border: `1px solid ${vars.colors.gray[2]} !important`,\n});",
        "type": "variable"
      },
      {
        "name": " shortThumbChecked",
        "text": "\n\nexport const shortThumbChecked = style([\n  shortThumb,\n  {\n    left: `calc(100% - ${thumbSize}) !important`,\n  },\n]);",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Switch/styles/thumb.css.ts",
    "exports": [
      {
        "name": " thumb",
        "text": "\n\nexport const thumb = style({\n  border: 'none',\n  boxShadow: '0px 1px 3px rgba(0, 0, 0, 0.1), 0px 1px 2px rgba(0, 0, 0, 0.06)',\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Switch/styles/track.css.ts",
    "exports": [
      {
        "name": " track",
        "text": "\n\nexport const track = style({\n  border: 'none',\n  backgroundColor: offColor,\n});",
        "type": "variable"
      },
      {
        "name": " checked",
        "text": "\n\nexport const checked = style([\n  track,\n  {\n    backgroundColor: onColor,\n  },\n]);",
        "type": "variable"
      },
      {
        "name": " checkedWithOutline",
        "text": "\n\nexport const checkedWithOutline = style({\n  outline: `2px solid ${onColor}`,\n  outlineOffset: '2px',\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Table/Table.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children,\n  },\n};",
        "type": "Story"
      },
      {
        "name": " Border",
        "text": "\n\nexport const Border: Story = {\n  args: {\n    ...Basic.args,\n    withBorder: true,\n  },\n};",
        "type": "Story"
      },
      {
        "name": " Striped",
        "text": "\n\nexport const Striped: Story = {\n  args: {\n    ...Basic.args,\n    striped: true,\n  },\n};",
        "type": "Story"
      },
      {
        "name": " Hover",
        "text": "\n\nexport const Hover: Story = {\n  args: {\n    ...Basic.args,\n    highlightOnHover: true,\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Table/Table.tsx",
    "exports": [
      {
        "name": " TableProps",
        "text": "\n\nexport interface TableProps\n  extends TwBaseProps,\n    PropsWithChildren,\n    Omit<MantineTableProps, keyof GetStylesApiOptions> {\n  withBorder?: boolean;\n}",
        "type": "interface"
      },
      {
        "name": " Table",
        "text": "\n\nexport const Table = forwardRef<HTMLTableElement, TableProps>(({ withBorder, ...props }, ref) => {\n  props.withTableBorder = withBorder ?? props.withTableBorder ?? false;\n\n  return <MantineTable {...props} ref={ref} />;\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Tabs/Tabs.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'Tabs',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Tabs/Tabs.tsx",
    "exports": [
      {
        "name": " TabsProps",
        "text": "\n\nexport interface TabsProps\n  extends TwBaseProps,\n    Omit<EventHandler<React.HTMLAttributes<HTMLDivElement>>, 'onChange'>,\n    Omit<MantineTabsProps, keyof GetStylesApiOptions> {\n  color?: FormattedColor;\n  fullWidth?: boolean;\n}",
        "type": "interface"
      },
      {
        "name": " Tabs",
        "text": "\n\nexport const Tabs: ITabs = (props) => {\n  const { fullWidth = false, ...rest } = props;\n  const style: CSSProperties = fullWidth\n    ? { width: '100%', overflowX: 'auto', display: 'flex' }\n    : {};\n  return <MantineTabs {...rest} style={style} />;\n};",
        "type": "ITabs"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Text/Text.css.ts",
    "exports": [
      {
        "name": " chosenColor",
        "text": "\n\nexport const chosenColor = createVar();",
        "type": "variable"
      },
      {
        "name": " text",
        "text": "\nexport const text = style({ color: chosenColor });",
        "type": "variable"
      },
      {
        "name": " defaultTextColor",
        "text": "\n\nexport const defaultTextColor = createVar();",
        "type": "variable"
      },
      {
        "name": " defaultText",
        "text": "\nexport const defaultText = style({\n  color: defaultTextColor,\n\n  vars: {\n    [defaultTextColor]: vars.colors.gray[7],\n  },\n\n  selectors: {\n    [vars.darkSelector]: {\n      vars: {\n        [defaultTextColor]: vars.colors.gray[0],\n      },\n    },\n  },\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Text/Text.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children:\n      'Hello World fqe;fkawdj;sfkajsd;kfjas;dkfja;sldkfj;alskdjf;laksdjf;laksdjf;lkasjd;lfkajs;dlkfja;lskdfj;alksdjf;alksdjf;alksdfj',\n    fz: 'md',\n    // eslint-disable-next-line no-constant-condition\n    c: false ? 'gray.5' : false ? 'gray.7' : 'gray.8',\n  },\n};",
        "type": "Story"
      },
      {
        "name": " Legend",
        "text": "\n\nexport const Legend: Story = {\n  args: {\n    children: 'Hello World',\n    fz: 'md',\n    as: 'legend',\n  },\n};",
        "type": "Story"
      },
      {
        "name": " Paragraph",
        "text": "\n\nexport const Paragraph: Story = {\n  args: {\n    children: 'Hello World',\n    fz: 'md',\n    as: 'p',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Text/Text.tsx",
    "exports": [
      {
        "name": " TextProps",
        "text": "\n\nexport interface TextProps\n  extends TwBaseProps,\n    TwPolymorphicComponent,\n    PropsWithChildren,\n    Omit<MantineTextProps, keyof GetStylesApiOptions | 'c'> {\n  c?: FormattedColor;\n  color?: FormattedColor;\n  as?: MantineTextProps['component'];\n  weight?: MantineTextProps['fw'];\n  align?: MantineTextProps['ta'];\n}",
        "type": "interface"
      },
      {
        "name": " Text",
        "text": "\n\nexport const Text = forwardRef<HTMLElement, TextProps>((props, ref) => {\n  const { as = 'div', span, c, color, weight, align, ...rest } = props;\n\n  const dynamicColor = useMemo(() => {\n    const receivedColor = color || c;\n    return receivedColor ? extractCSSColor(receivedColor) : undefined;\n  }, [color, c]);\n\n  return (\n    <MantineText\n      {...rest}\n      style={assignInlineVars({ [chosenColor]: dynamicColor })}\n      className={color || c ? text : defaultText}\n      fw={rest.fw ?? weight}\n      ta={rest.ta ?? align}\n      component={span ? 'span' : as}\n      ref={ref}\n      data-tw-ui-component=\"Text\"\n    />\n  );\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/TextInput/TextInput.css.ts",
    "exports": [
      {
        "name": " inputClr",
        "text": "\n\nexport const inputClr = createVar();",
        "type": "variable"
      },
      {
        "name": " inputBgClr",
        "text": "\nexport const inputBgClr = createVar();",
        "type": "variable"
      },
      {
        "name": " input",
        "text": "\nexport const input = style({\n  backgroundColor: inputBgClr,\n  borderColor: 'transparent',\n  color: inputClr,\n\n  '::placeholder': {\n    color: vars.colors.named[7],\n  },\n});",
        "type": "variable"
      },
      {
        "name": " inputWithError",
        "text": "\n\nexport const inputWithError = style({\n  position: 'relative',\n  top: vars.spacing.xs,\n});",
        "type": "variable"
      },
      {
        "name": " inputWithBorder",
        "text": "\n\nexport const inputWithBorder = style({\n  borderColor: vars.colors.named2[3],\n\n  ':focus': {\n    borderColor: vars.colors.one[PRIMARY_SHADE],\n  },\n});",
        "type": "variable"
      },
      {
        "name": " errorStyle",
        "text": "\n\nexport const errorStyle = style({\n  position: 'relative',\n  top: vars.spacing.xs,\n  paddingTop: 5,\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/TextInput/TextInput.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    //fz: 'md',\n    // bg: 'red.8'\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/TextInput/TextInput.tsx",
    "exports": [
      {
        "name": " TextInputProps",
        "text": "\n\nexport interface TextInputProps\n  extends TwBaseProps,\n    TwStyleSystemProps,\n    Omit<EventHandler<React.InputHTMLAttributes<HTMLInputElement>>, 'onChange'>,\n    Pick<\n      MantineTextInputProps,\n      | 'value'\n      | 'label'\n      | 'placeholder'\n      | 'description'\n      | 'type'\n      | 'size'\n      | 'error'\n      | 'disabled'\n      | 'radius'\n      | 'required'\n    > {\n  forceColorScheme?: 'light' | 'dark';\n  leadingIcon?: IconName | JSX.Element;\n  trailingIcon?: IconName | JSX.Element;\n  onChange?: TWOnChange<string>;\n  withBorder?: boolean;\n}",
        "type": "interface"
      },
      {
        "name": " TextInput",
        "text": "\n\nexport const TextInput = forwardRef<HTMLInputElement, TextInputProps>((props, ref) => {\n  const darkMode = useColorScheme().colorScheme === 'dark';\n\n  const {\n    leadingIcon: li,\n    trailingIcon: ti,\n    radius = DEFAULT_RADIUS,\n    withBorder = true,\n    error,\n    onChange,\n    forceColorScheme,\n    bg,\n    c,\n    ...other\n  } = props;\n  const leadingIcon = useMemo(() => extractIcon(li), [li]);\n  const trailingIcon = useMemo(() => extractIcon(ti), [ti]);\n\n  const isDarkMode = darkMode && forceColorScheme !== 'light';\n\n  const _inputClr = useMemo(() => {\n    if (c) return extractCSSColor(c);\n    return isDarkMode ? vars.colors.gray[0] : vars.colors.gray[7];\n  }, [isDarkMode, c]);\n\n  const _inputBgClr = useMemo(() => {\n    if (bg) return extractCSSColor(bg);\n    return isDarkMode ? vars.colors.gray[6] : vars.colors.white;\n  }, [isDarkMode, bg]);\n\n  return (\n    <MantineTextInput\n      {...other}\n      error={error}\n      leftSection={leadingIcon}\n      rightSection={trailingIcon}\n      inputWrapperOrder={['label', 'input', 'description', 'error']}\n      radius={radius}\n      styles={{\n        label: {\n          width: '100%',\n        },\n      }}\n      style={assignInlineVars({\n        [inputClr]: _inputClr,\n        [inputBgClr]: _inputBgClr,\n      })}\n      classNames={{\n        input: cx(input, withBorder && inputWithBorder, !!error && inputWithError),\n        error: errorStyle,\n      }}\n      ref={ref}\n      onChange={wrapInputOnChange(onChange)}\n    />\n  );\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Textarea/Textarea.css.ts",
    "exports": [
      {
        "name": " inputClr",
        "text": "\n\nexport const inputClr = createVar();",
        "type": "variable"
      },
      {
        "name": " inputBgClr",
        "text": "\nexport const inputBgClr = createVar();",
        "type": "variable"
      },
      {
        "name": " input",
        "text": "\nexport const input = style({\n  backgroundColor: inputBgClr,\n  borderColor: 'transparent',\n  color: inputClr,\n\n  '::placeholder': {\n    color: vars.colors.named[7],\n  },\n});",
        "type": "variable"
      },
      {
        "name": " inputWithError",
        "text": "\n\nexport const inputWithError = style({\n  position: 'relative',\n  top: vars.spacing.xs,\n});",
        "type": "variable"
      },
      {
        "name": " inputWithBorder",
        "text": "\n\nexport const inputWithBorder = style({\n  borderColor: vars.colors.named2[3],\n\n  ':focus': {\n    borderColor: vars.colors.one[PRIMARY_SHADE],\n  },\n});",
        "type": "variable"
      },
      {
        "name": " errorStyle",
        "text": "\n\nexport const errorStyle = style({\n  position: 'relative',\n  top: vars.spacing.xs,\n  paddingTop: 5,\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Textarea/Textarea.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    // children: 'Textarea',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Textarea/Textarea.tsx",
    "exports": [
      {
        "name": " TextareaProps",
        "text": "\n\nexport interface TextareaProps\n  extends TwBaseProps,\n    TwStyleSystemProps,\n    EventHandler<React.TextareaHTMLAttributes<HTMLTextAreaElement>>,\n    Pick<\n      MantineTextareaProps,\n      'value' | 'label' | 'placeholder' | 'description' | 'size' | 'error' | 'disabled' | 'radius' | 'required' | 'autosize' | 'autoFocus' | 'minRows' | 'maxRows'\n    > {\n}",
        "type": "interface"
      },
      {
        "name": " Textarea",
        "text": "\n\nexport const Textarea = forwardRef<HTMLTextAreaElement, TextareaProps>((props, ref) => {\n  const {\n    radius = DEFAULT_RADIUS,\n    error,\n    bg,\n    c,\n    ...other\n  } = props;\n  const isDarkMode = useColorScheme().colorScheme === 'dark';\n\n  const _inputClr = useMemo(() => {\n    if (c) return extractCSSColor(c);\n    return isDarkMode ? vars.colors.gray[0] : vars.colors.gray[7];\n  }, [isDarkMode, c]);\n\n  const _inputBgClr = useMemo(() => {\n    if (bg) return extractCSSColor(bg);\n    return isDarkMode ? vars.colors.gray[6] : vars.colors.white;\n  }, [isDarkMode, bg]);\n\n  return (\n    <MantineTextarea\n      {...other}\n      error={error}\n      ref={ref}\n      radius={radius}\n      data-tw-ui-component=\"Textarea\"\n      styles={{\n        label: {\n          width: '100%',\n        },\n      }}\n      classNames={{\n        input: cx(input, inputWithBorder, !!error && inputWithError),\n        error: errorStyle,\n      }}\n      style={assignInlineVars({\n        [inputClr]: _inputClr,\n        [inputBgClr]: _inputBgClr,\n      })}\n      {...getMarketingProps('textarea')}\n    />\n  )\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Timeline/Timeline.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: [\n      <Timeline.Item title=\"1\" />,\n      <Timeline.Item title=\"2\" />,\n      <Timeline.Item title=\"3\" />,\n    ],\n    id: '',\n    'data-testid': '',\n    active: 1,\n    align: 'left',\n    bulletSize: 20,\n    radius: 'lg',\n    color: 'one.6',\n    reverseActive: false,\n    skeletonLines: 5,\n  },\n};",
        "type": "Story"
      },
      {
        "name": " Loading",
        "text": "\n\nexport const Loading: Story = {\n  args: {\n    id: '',\n    'data-testid': '',\n    align: 'left',\n    bulletSize: 20,\n    radius: 'lg',\n    color: 'one.6',\n    reverseActive: false,\n    loading: true,\n    lineWidth: 1,\n    skeletonLines: 3,\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Timeline/Timeline.tsx",
    "exports": [
      {
        "name": " TimelineBulletVariant",
        "text": "\n\nexport type TimelineBulletVariant = 'colored' | 'transparent';",
        "type": "'colored' | 'transparent'"
      },
      {
        "name": " TimelineItemProps",
        "text": "\n\nexport interface TimelineItemProps extends TwBaseProps, MantineTimelineItemProps {\n  color?: FormattedColor;\n}",
        "type": "interface"
      },
      {
        "name": " TimelineProps",
        "text": "\n\nexport interface TimelineProps extends TwBaseProps, MantineTimelineProps {\n  color?: FormattedColor;\n  radius?: Size;\n  bulletVariant?: TimelineBulletVariant;\n  loading?: boolean;\n  skeletonLines?: number;\n}",
        "type": "interface"
      },
      {
        "type": "specifier",
        "name": " Timeline",
        "text": " Timeline"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Title/Title.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'Title',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Title/Title.tsx",
    "exports": [
      {
        "name": " TitleProps",
        "text": "\n\nexport interface TitleProps extends TwBaseProps, PropsWithChildren, MantineTitleProps {\n  weight?: MantineTitleProps['fw'];\n  color?: MantineTitleProps['c'];\n}",
        "type": "interface"
      },
      {
        "name": " Title",
        "text": "\n\nexport const Title = forwardRef<HTMLHeadingElement, TitleProps>((props, ref) => {\n  const darkMode = useColorScheme().colorScheme === 'dark';\n  const { c, color, ...rest } = props;\n  const usedColor = c ?? color ?? (darkMode ? 'gray.1' : 'gray.6');\n  return <MantineTitle {...rest} ref={ref} c={usedColor} />;\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Tooltip/Tooltip.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'Tooltip',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Tooltip/Tooltip.tsx",
    "exports": [
      {
        "name": " TooltipProps",
        "text": "\n\nexport interface TooltipProps extends TwBaseProps, MantineTooltipProps {}",
        "type": "interface"
      },
      {
        "name": " Tooltip",
        "text": "\n\nexport const Tooltip: ITooltip = (props) => {\n  const { withinPortal = true, ...rest } = props;\n\n  return (\n    <MantineTooltip\n      {...rest}\n      withinPortal={withinPortal}\n      styles={() => {\n        return {\n          tooltip: {\n            visibility: props.label ? 'visible' : 'hidden',\n          },\n        };\n      }}\n    />\n  );\n};",
        "type": "ITooltip"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Transition/Transition.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: () => <div>howdy</div>,\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/Transition/Transition.tsx",
    "exports": [
      {
        "name": " TransitionProps",
        "text": "\n\nexport interface TransitionProps extends TwBaseProps, MantineTransitionProps {}",
        "type": "interface"
      },
      {
        "name": " Transition",
        "text": "\n\nexport const Transition: React.FC<TransitionProps> = (props) => {\n  return <MantineTransition {...props} data-tw-ui-component=\"Transition\" />;\n};",
        "type": "React.FC<TransitionProps>"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/UnstyledButton/UnstyledButton.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    children: 'UnstyledButton',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/UnstyledButton/UnstyledButton.tsx",
    "exports": [
      {
        "name": " UnstyledButtonProps",
        "text": "\n\nexport interface UnstyledButtonProps\n  extends TwBaseProps,\n    PropsWithChildren,\n    EventHandler<React.ButtonHTMLAttributes<HTMLButtonElement>>,\n    Omit<MantineUnstyledButtonProps, keyof GetStylesApiOptions> {\n  color?: FormattedColor;\n}",
        "type": "interface"
      },
      {
        "name": " UnstyledButton",
        "text": "\n\nexport const UnstyledButton = forwardRef<HTMLButtonElement, UnstyledButtonProps>((props, ref) => {\n  return <MantineUnstyledButton {...props} ref={ref} />;\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/UserSettingsAvatar/UserSettings.css.ts",
    "exports": [
      {
        "name": " placeholder",
        "text": "\n\nexport const placeholder = style({\n  ':hover': {\n    backgroundColor: vars.colors.one[5],\n  },\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/UserSettingsAvatar/UserSettingsAvatar.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    // children: 'UserSettingsAvatar',\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/UserSettingsAvatar/UserSettingsAvatar.tsx",
    "exports": [
      {
        "name": " UserSettingsAvatar",
        "text": "\n\nexport const UserSettingsAvatar = forwardRef<HTMLButtonElement, UserSettingsAvatarProps>(\n  ({ avatarSource, initials, onClick, size = 24 }, ref) => {\n    return (\n      <UnstyledButton onClick={onClick} ref={ref} {...getMarketingProps('user-settings-avatar')}>\n        <Avatar\n          variant=\"filled\"\n          size={size}\n          radius=\"50%\"\n          color=\"one.5\"\n          fw={300}\n          // TODO: Make smaller\n          fz=\"sm\"\n          classNames={{ placeholder: classes.placeholder }}\n          {...(avatarSource && { src: avatarSource })}\n          {...(initials && { children: initials })}\n        />\n      </UnstyledButton>\n    );\n  }\n);",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/UserSettingsPopover/UserSettingsPopover.css.ts",
    "exports": [
      {
        "name": " userSettingsPopoverNavLink",
        "text": "\n\nexport const userSettingsPopoverNavLink = style({\n  backgroundColor: vars.colors.named[5],\n\n  ':hover': {\n    backgroundColor: vars.colors.named[4],\n  },\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/UserSettingsPopover/UserSettingsPopover.stories.tsx",
    "exports": [
      {
        "name": " Basic",
        "text": "\n\nexport const Basic: Story = {\n  args: {\n    avatarSource: '',\n    initials: 'YS',\n    targetSize: 'lg',\n    popoverLinks: [\n      {\n        children: <div>howdy</div>,\n      },\n      {\n        children: <div>howdy</div>,\n      },\n      {\n        children: <div>howdy</div>,\n      },\n      {\n        children: <div>howdy</div>,\n        topBorder: true,\n      },\n    ],\n  },\n};",
        "type": "Story"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/UserSettingsPopover/UserSettingsPopover.tsx",
    "exports": [
      {
        "name": " UserSettingsPopoverProps",
        "text": "\n\nexport type UserSettingsPopoverProps = {\n  avatarSource: string;\n  initials: string;\n  popoverLinks: PopoverLink[];\n  onClick?: React.MouseEventHandler<HTMLButtonElement>;\n  targetSize?: Size | number;\n};",
        "type": "{\n  avatarSource: string;\n  initials: string;\n  popoverLinks: PopoverLink[];\n  onClick?: React.MouseEventHandler<HTMLButtonElement>;\n  targetSize?: Size | number;\n}"
      },
      {
        "name": " UserSettingsPopover",
        "text": "\n\nexport const UserSettingsPopover: React.FC<UserSettingsPopoverProps> = ({\n  avatarSource,\n  initials,\n  popoverLinks,\n  targetSize,\n}) => {\n  const darkMode = useMantineColorScheme().colorScheme === 'dark';\n\n  return (\n    <Popover\n      width=\"dropdown\"\n      position=\"top-start\"\n      shadow=\"md\"\n      styles={() => ({ dropdown: { padding: 0 } })}\n      withinPortal\n    >\n      <Popover.Target>\n        <UserSettingsAvatar size={targetSize} avatarSource={avatarSource} initials={initials} />\n      </Popover.Target>\n      <Popover.Dropdown bg={darkMode ? darken('#1F2530', 0.2) : 'white'} style={{ border: 'none' }}>\n        {popoverLinks.map(({ topBorder, children }, i) => {\n          const borderRadiusStyles = (() => {\n            if (i === 0)\n              return {\n                borderTopRightRadius: '4px',\n                borderTopLeftRadius: '4px',\n              };\n            if (i === popoverLinks.length - 1)\n              return {\n                borderBottomRightRadius: '4px',\n                borderBottomLeftRadius: '4px',\n              };\n            return {};\n          })();\n\n          return (\n            <NavLink\n              key={`user-popover-link-${i}`}\n              w={208}\n              fz=\"sm\"\n              classNames={{ root: userSettingsPopoverNavLink }}\n              styles={() => ({\n                root: {\n                  ...(!!topBorder && {\n                    borderTop: `1px solid ${darkMode ? '#262D3B' : vars.colors.gray[1]}`,\n                  }),\n                  ...borderRadiusStyles,\n                },\n              })}\n              label={children}\n            />\n          );\n        })}\n      </Popover.Dropdown>\n    </Popover>\n  );\n};",
        "type": "React.FC<UserSettingsPopoverProps>"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/components/index.ts",
    "exports": []
  },
  {
    "file": "@tw/ui-components/src/constants/README.colors.md",
    "exports": []
  },
  {
    "file": "@tw/ui-components/src/constants/colors.ts",
    "exports": [
      {
        "name": " colors",
        "text": "export const colors = {\n  one: [\n    '#E0EDFF',\n    '#BAD6FB',\n    '#81B5F7',\n    '#4D9BFE',\n    '#2281FB',\n    '#0C70F2',\n    '#0A5ECC',\n    '#0A4DA6',\n    '#073B80',\n    '#042959',\n  ],\n  two: [\n    '#E0F7FF',\n    '#C7F0FF',\n    '#8CE0FF',\n    '#57CDF8',\n    '#25BFF7',\n    '#10AEE8',\n    '#0B9ED4',\n    '#087FAA',\n    '#085D7C',\n    '#054861',\n  ],\n  red: [\n    '#FEF2F2',\n    '#FEE2E2',\n    '#FECACA',\n    '#FCA5A5',\n    '#F87171',\n    '#EF4444',\n    '#DC2626',\n    '#B91C1C',\n    '#991B1B',\n    '#7F1D1D',\n  ],\n  orange: [\n    '#FFF5ED',\n    '#FFE8D5',\n    '#FED0AA',\n    '#F8B06D',\n    '#FB9039',\n    '#F97316',\n    '#EA580C',\n    '#C2410C',\n    '#9A3412',\n    '#7C2D12',\n  ],\n  yellow: [\n    '#FFFBEB',\n    '#FEF3C7',\n    '#FDE08A',\n    '#FCD34D',\n    '#FBBF24',\n    '#F59E0B',\n    '#D97706',\n    '#B45309',\n    '#92400E',\n    '#78350F',\n  ],\n  green: [\n    '#ECFDF8',\n    '#D1FAEE',\n    '#A7F3DD',\n    '#6EE7C5',\n    '#34D3A6',\n    '#10B989',\n    '#05966D',\n    '#047857',\n    '#065F46',\n    '#064E3A',\n  ],\n  teal: [\n    '#F0FDFC',\n    '#CCFBF7',\n    '#99F6EE',\n    '#5EEADE',\n    '#2DD4C6',\n    '#14B8AA',\n    '#0D9488',\n    '#0F766E',\n    '#115E58',\n    '#134E49',\n  ],\n  cyan: [\n    '#ECFEFF',\n    '#CFFCFE',\n    '#A5F9FC',\n    '#67F4F9',\n    '#22E7EE',\n    '#06CDD4',\n    '#08ACB2',\n    '#0E8C90',\n    '#157275',\n    '#166063',\n  ],\n  pink: [\n    '#FDF2F8',\n    '#FCE7F1',\n    '#FBCFE5',\n    '#F9A8D1',\n    '#F472B3',\n    '#EC4899',\n    '#DB2781',\n    '#BE186B',\n    '#A90859',\n    '#83184E',\n  ],\n  gray: [\n    '#F9FAFB',\n    '#F1F3F6',\n    '#E5E7EB',\n    '#D1D4DB',\n    '#9CA2AF',\n    '#6B7280', // all icons light mode\n    '#4B5363', // text light mode\n    '#374051',\n    '#1F2737', // Header\n    '#0E1420',\n  ],\n  named: [\n    '#F9FAFB',\n    '#F1F3F6',\n    '#FFFFFF',\n    '#F9FAFB',\n    '#E5E7EB',\n    '#FFFFFF',\n    '#0C70F2',\n    '#9CA2AF',\n    '#6B7280',\n    '#1F2737',\n  ],\n  named2: [\n    '#374051',\n    '#4B5363',\n    '#6B7280',\n    '#D1D4DB',\n    '#F1F3F6',\n    '#F9FAFB',\n    '#D1D4DB',\n    '#E5E7EB',\n    '#FFFFFF',\n    '#000000',\n  ],\n  // dark: [],\n} as const;",
        "type": "variable"
      },
      {
        "name": " darkModeColors",
        "text": "\n\nexport const darkModeColors = {\n  gray: [\n    '#D5DEED',\n    '#B2C4DE',\n    '#889CB7',\n    '#5E728D',\n    '#445268',\n    '#2E3746',\n    '#222935',\n    '#1A2029',\n    '#161A22',\n    '#12161C',\n  ],\n  named: [\n    '#12161C',\n    '#161A22',\n    '#161A22',\n    '#12161C',\n    '#2E3746',\n    '#222935',\n    '#2281FB',\n    '#5E728D',\n    '#889CB7',\n    '#FFFFFF',\n  ],\n  named2: [\n    '#E8EEF7',\n    '#D5DEED',\n    '#B2C4DE',\n    '#2E3746',\n    '#262D3B',\n    '#1A2029',\n    '#222935',\n    '#222935',\n    '#FFFFFF',\n    '#000000',\n  ],\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/constants/headings.ts",
    "exports": [
      {
        "name": " headings",
        "text": "export const headings = {\n  fontWeight: '400',\n  sizes: {\n    h1: {\n      fontSize: '40px',\n      lineHeight: '48px',\n    },\n    h2: {\n      fontSize: '36px',\n      lineHeight: '44px',\n    },\n    h3: {\n      fontSize: '32px',\n      lineHeight: '40px',\n    },\n    h4: {\n      fontSize: '28px',\n      lineHeight: '36px',\n    },\n    h5: {\n      fontSize: '24px',\n      lineHeight: '32px',\n    },\n    h6: {\n      fontSize: '20px',\n      lineHeight: '28px',\n    },\n  },\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/constants/icons.ts",
    "exports": [
      {
        "name": " icons",
        "text": "export const icons = [\n  'activity-feed',\n  'adroll',\n  'affluencer',\n  'agency',\n  'ai-chat-spark',\n  'amazon',\n  'analytics-pie',\n  'app-window-graph',\n  'apps',\n  'archive-major',\n  'area-chart',\n  'arrow-down-3',\n  'arrow-up-3',\n  'attentive',\n  'badge-check',\n  'bar-chart',\n  'bigcommerce',\n  'billing',\n  'blended-metrics',\n  'board',\n  'book-close-3',\n  'build',\n  'button-controller',\n  'button-play',\n  'calculator',\n  'calendar-1',\n  'calendar-edit',\n  'caret-down-bold',\n  'caret-down',\n  'caret-left',\n  'caret-right',\n  'caret-up-bold',\n  'categories-major',\n  'channels-major',\n  'chat',\n  'check-thick',\n  'check-thin',\n  'checkmark',\n  'chevron-down',\n  'chevron-left-minor',\n  'chevron-right-minor',\n  'circle-x',\n  'clock',\n  'close',\n  'code-bracket',\n  'collapse',\n  'columns-3-major',\n  'combo-chart',\n  'copy-2',\n  'criteo',\n  'custom-metrics',\n  'db',\n  'delete',\n  'dragger-handle-1',\n  'duplicate',\n  'dynamic-filters',\n  'edit-settings',\n  'edit',\n  'enquirelabs',\n  'exclamation',\n  'expand-square',\n  'expand',\n  'explain-query',\n  'export',\n  'external-minor',\n  'facebook-circle',\n  'fairing',\n  'filter-major',\n  'filter',\n  'flash',\n  'forward-view',\n  'full-stacked-area-chart',\n  'full-stacked-bar-chart',\n  'full-stacked-column-chart',\n  'gcp',\n  'globe',\n  'google-ads',\n  'google-analytics',\n  'google-sheets',\n  'google',\n  'gorgias',\n  'green-check',\n  'grid-all',\n  'group-1',\n  'group-2',\n  'group',\n  'grouped-column-chart',\n  'growth',\n  'head-idea',\n  'horizontal-dots-minor',\n  'horizontal-slider',\n  'hubspot',\n  'image',\n  'influencers',\n  'info',\n  'inspiration',\n  'intercom',\n  'klaviyo',\n  'kno',\n  'knowledge-base',\n  'layout',\n  'library',\n  'lighthouse-1',\n  'line-arrow',\n  'line-chart',\n  'linear',\n  'link',\n  'linkedin',\n  'loader-1',\n  'lock',\n  'marketing',\n  'media-buyer',\n  'megaphone',\n  'menu-burger',\n  'menu-vertical',\n  'meta-2',\n  'meta-data',\n  'meta',\n  'microsoft',\n  'minus',\n  'money-bag',\n  'mountain',\n  'new-copy',\n  'new-edit',\n  'office-building-tall',\n  'okendo',\n  'omnisend',\n  'outbrain',\n  'pacing',\n  'pause',\n  'performance-increase',\n  'phone-1',\n  'pie',\n  'pin-1',\n  'pinterest',\n  'pivot',\n  'pixel',\n  'planner',\n  'play-arrow',\n  'play-circle',\n  'player',\n  'plus-1',\n  'plus-circle',\n  'plus-square-border',\n  'plus-square',\n  'plus',\n  'pods-view',\n  'posthog',\n  'postscript',\n  'pps',\n  'presentation',\n  'pro',\n  'python',\n  'question-mark',\n  'rating-star',\n  'recharge',\n  'refresh-minor',\n  'regenerate',\n  'rename',\n  'reset',\n  'scdp',\n  'search-history',\n  'search-major',\n  'seasonal-2',\n  'seasonal',\n  'section',\n  'sections',\n  'send-chat',\n  'sequence',\n  'settings',\n  'share-minor',\n  'share',\n  'shell-screen',\n  'shipbob',\n  'shipstation',\n  'shopify',\n  'skio',\n  'slack-2',\n  'slack',\n  'smsbump',\n  'snapchat-circle',\n  'sort-asc',\n  'sort-desc',\n  'sort',\n  'sql',\n  'stacked-column-chart',\n  'stripe',\n  'table-view',\n  'tablet-ai-spark',\n  'taboola',\n  'target-dollar',\n  'tatari',\n  'text-file',\n  'text',\n  'theme-toggle',\n  'tiktok',\n  'tiles-view',\n  'triple-whale-logo',\n  'triple-whale-rounded-logo',\n  'twitter',\n  'union',\n  'user-profile-circle',\n  'user-single',\n  'view',\n  'widget-editor',\n  'woocommerce',\n  'your-boards',\n  'your-templates'\n] as const;",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/css-variable-resolver.ts",
    "exports": [
      {
        "name": " resolver",
        "text": "\n\nexport const resolver: CSSVariablesResolver = () => ({\n  variables: {},\n  light: {},\n  dark: {\n    '--mantine-color-gray-0': darkModeColors.gray[0],\n    '--mantine-color-gray-1': darkModeColors.gray[1],\n    '--mantine-color-gray-2': darkModeColors.gray[2],\n    '--mantine-color-gray-3': darkModeColors.gray[3],\n    '--mantine-color-gray-4': darkModeColors.gray[4],\n    '--mantine-color-gray-5': darkModeColors.gray[5],\n    '--mantine-color-gray-6': darkModeColors.gray[6],\n    '--mantine-color-gray-7': darkModeColors.gray[7],\n    '--mantine-color-gray-8': darkModeColors.gray[8],\n    '--mantine-color-gray-9': darkModeColors.gray[9],\n\n    '--mantine-color-named-0': darkModeColors.named[0],\n    '--mantine-color-named-1': darkModeColors.named[1],\n    '--mantine-color-named-2': darkModeColors.named[2],\n    '--mantine-color-named-3': darkModeColors.named[3],\n    '--mantine-color-named-4': darkModeColors.named[4],\n    '--mantine-color-named-5': darkModeColors.named[5],\n    '--mantine-color-named-6': darkModeColors.named[6],\n    '--mantine-color-named-7': darkModeColors.named[7],\n    '--mantine-color-named-8': darkModeColors.named[8],\n    '--mantine-color-named-9': darkModeColors.named[9],\n\n    '--mantine-color-named2-0': darkModeColors.named2[0],\n    '--mantine-color-named2-1': darkModeColors.named2[1],\n    '--mantine-color-named2-2': darkModeColors.named2[2],\n    '--mantine-color-named2-3': darkModeColors.named2[3],\n    '--mantine-color-named2-4': darkModeColors.named2[4],\n    '--mantine-color-named2-5': darkModeColors.named2[5],\n    '--mantine-color-named2-6': darkModeColors.named2[6],\n    '--mantine-color-named2-7': darkModeColors.named2[7],\n    '--mantine-color-named2-8': darkModeColors.named2[8],\n    '--mantine-color-named2-9': darkModeColors.named2[9],\n  },\n});",
        "type": "CSSVariablesResolver"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/globals.d.ts",
    "exports": []
  },
  {
    "file": "@tw/ui-components/src/hooks/index.ts",
    "exports": [
      {
        "type": "specifier",
        "name": " useColorScheme",
        "text": " useMantineColorScheme as useColorScheme"
      },
      {
        "type": "specifier",
        "name": " useCombobox",
        "text": " useCombobox"
      },
      {
        "type": "specifier",
        "name": " useLocalStorage",
        "text": " useLocalStorage"
      },
      {
        "type": "specifier",
        "name": " useSelectByWindowResize",
        "text": " useSelectByWindowResize"
      },
      {
        "type": "specifier",
        "name": " useWindowSize",
        "text": " useWindowSize"
      },
      {
        "type": "specifier",
        "name": " useDisclosure",
        "text": " useDisclosure"
      },
      {
        "type": "specifier",
        "name": " useParsedColor",
        "text": " useParsedColor"
      },
      {
        "type": "specifier",
        "name": " useHierarchicalList",
        "text": " useHierarchicalList"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/hooks/useDedupedComboboxData.ts",
    "exports": [
      {
        "type": "function",
        "name": " useDedupedComboboxData",
        "text": "\n\n/** This hook uses `dedupComboboxData` under the hood to\n * make sure there are no duplicate values in the combobox. */\nexport function useDedupedComboboxData(data?: ComboboxData): ComboboxData {\n  return useMemo(() => (!data ? emptyArray : dedupComboboxData(data)), [data]);\n}",
        "parameters": [
          {
            "name": "data",
            "text": "data?: ComboboxData",
            "type": "ComboboxData"
          }
        ]
      },
      {
        "type": "function",
        "name": " useDedupedComboboxStringData",
        "text": "\n\n/** This hook uses `dedupComboboxStringData` under the hood to\n * make sure there are no duplicate values in the combobox. */\nexport function useDedupedComboboxStringData(data?: ComboboxStringData): ComboboxStringData {\n  return useMemo(() => (!data ? emptyArray : dedupComboboxStringData(data)), [data]);\n}",
        "parameters": [
          {
            "name": "data",
            "text": "data?: ComboboxStringData",
            "type": "ComboboxStringData"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/hooks/useDisclosure.ts",
    "exports": [
      {
        "type": "function",
        "name": " useDisclosure",
        "text": "\n\nexport function useDisclosure(initialValue: boolean) {\n  const [opened, setOpened] = useState(initialValue);\n\n  const open = useCallback(() => setOpened(true), []);\n  const close = useCallback(() => setOpened(false), []);\n  const toggle = useCallback(() => setOpened((x) => !x), []);\n\n  return [opened, { open, close, toggle }] as const;\n}",
        "parameters": [
          {
            "name": "initialValue",
            "text": "initialValue: boolean",
            "type": "boolean"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/hooks/useHierarchicalList.ts",
    "exports": [
      {
        "type": "function",
        "name": " useHierarchicalList",
        "text": "\n\nexport function useHierarchicalList<T>(initialList: HierarchicalListItem<T>[]) {\n  const [list, setList] = useState<HierarchicalListItem<T>[]>(initialList);\n  const handler = useMemo(() => new HierarchicalList<T>(list), [list]);\n\n  useEffect(() => {\n    setList(initialList);\n  }, [initialList]);\n\n  useEffect(() => {\n    const func = (l: HierarchicalListItem<T>[]) => setList([...l]);\n    handler.addUpdateListener(func);\n    return () => handler.removeUpdateListener(func);\n  }, [handler]);\n\n  return [list, handler] as const;\n}",
        "parameters": [
          {
            "name": "initialList",
            "text": "initialList: HierarchicalListItem<T>[]",
            "type": "HierarchicalListItem<T>[]"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/hooks/useList.ts",
    "exports": [
      {
        "type": "function",
        "name": " useList",
        "text": "\n\n/** Utility hook that just makes it a bit easier to deal with list states in an optimized way */\nexport function useList<T>(initialList: T[]) {\n  const [list, setList] = useState<T[]>(initialList);\n  const handler = useMemo(() => new ListHandler<T>(list), [list]);\n\n  useEffect(() => {\n    handler.addUpdateListener(setList);\n    return () => handler.removeUpdateListener(setList);\n  }, [handler]);\n\n  return [list, handler] as const;\n}",
        "parameters": [
          {
            "name": "initialList",
            "text": "initialList: T[]",
            "type": "T[]"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/hooks/useLocalStorage.ts",
    "exports": [
      {
        "type": "function",
        "name": " useLocalStorage",
        "text": "\n\nexport function useLocalStorage<T extends {} | any[]>({\n  key,\n  defaultValue,\n}: {\n  key: string;\n  defaultValue: T;\n}): [T, LocalStorageStateSetter<T>] {\n  const storedState = useMemo(() => localStorage.getItem(key) || '\"\"', [key]);\n  const [state, setState] = useState<T>(JSON.parse(storedState) || defaultValue);\n\n  const setLocalStorageState: LocalStorageStateSetter<T> = (value) => {\n    const computedVal = typeof value === 'function' ? value(state) : value;\n    setState(computedVal);\n    const valStr = JSON.stringify(computedVal);\n    localStorage.setItem(key, valStr);\n  };\n\n  useEffect(() => {\n    setLocalStorageState(state);\n  }, []);\n\n  return [state, setLocalStorageState];\n}",
        "parameters": [
          {
            "name": "{\n  key,\n  defaultValue,\n}",
            "text": "{\n  key,\n  defaultValue,\n}: {\n  key: string;\n  defaultValue: T;\n}",
            "type": "{\n  key: string;\n  defaultValue: T;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/hooks/useParsedColor.ts",
    "exports": [
      {
        "type": "function",
        "name": " useParsedColor",
        "text": "\n\nexport function useParsedColor(clr: FormattedColor | 'inherit'): HexColor {\n  return useMemo(() => (clr === 'inherit' ? 'inherit' : extractCSSColor(clr)), [clr]);\n}",
        "parameters": [
          {
            "name": "clr",
            "text": "clr: FormattedColor | 'inherit'",
            "type": "FormattedColor | 'inherit'"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/hooks/useSelectByWindowResize.ts",
    "exports": [
      {
        "type": "function",
        "name": " useSelectByWindowResize",
        "text": "\n\n/**\n * @description\n * Meant to be used like redux-toolkit useSelector, just for window resize events. Here's a simple example:\n *\n * `const isMobile = useSelectByWindowResize<boolean>(({ width }) => width < 600)`\n *\n * In the callback, you get access to width, height, prevWidth, and prevHeight. There are a lot of possibilities,\n * but the main benefit in using this hook is that it doesn't cause a rerender everytime the window is resized.\n * Just like useSelector, it only causes a rerender when what's being returned from the selector changes.\n */\nexport function useSelectByWindowResize<T>(cb: WindowResizeSelectorCallback<T>): T {\n  const [state, setState] = useState<T>(() =>\n    cb({ width: window.innerWidth, height: window.innerHeight })\n  );\n\n  useEffect(() => {\n    const handleResize = () => {\n      const res = cb({ width: window.innerWidth, height: window.innerHeight });\n      if (!isEqual(state, res)) setState(res);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [state, cb]);\n\n  return state;\n}",
        "parameters": [
          {
            "name": "cb",
            "text": "cb: WindowResizeSelectorCallback<T>",
            "type": "WindowResizeSelectorCallback<T>"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/hooks/useWindowSize.ts",
    "exports": [
      {
        "type": "function",
        "name": " useWindowSize",
        "text": " // so hook can determine which dimensions to look for\n\n/**\n * @description\n * this hook takes in a map of custom dimensions and returns the name of the\n * dimension that currently matches the size of the window.\n * @param dimension Either 'width'  or 'height'. Determines what dimension the dimensionConstraints are being used on.\n * @param dimensionConstraints Map of dimension name to min size for that dimension.\n * @returns Name of the first object in the dimensions map that matches the current window width.\n */\nexport function useWindowSize<T extends BreakpointMap>(\n  dimension: Dimension,\n  map: T\n): keyof T | 'unmapped' {\n  return useSelectByWindowResize<keyof T | 'unmapped'>((dimensions) => {\n    const size = dimensions[dimension];\n\n    for (const key in map) {\n      const [min, max] = map[key];\n      if (size >= min && (typeof max !== 'number' || size < max)) return key;\n    }\n\n    return 'unmapped';\n  });\n}",
        "parameters": [
          {
            "name": "dimension",
            "text": "dimension: Dimension",
            "type": "Dimension"
          },
          {
            "name": "map",
            "text": "map: T",
            "type": "T"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/index.ts",
    "exports": []
  },
  {
    "file": "@tw/ui-components/src/stores/$colorScheme.ts",
    "exports": [
      {
        "name": " LS_TW_UI_CLR_SCHEME_KEY",
        "text": "\n\n/** Key where ui components color scheme is saved in local storage. */\nexport const LS_TW_UI_CLR_SCHEME_KEY = 'tw-ui-color-scheme';",
        "type": "variable"
      },
      {
        "name": " $colorScheme",
        "text": "\n/** Store used to control/observe the mantine color manager */\nexport const $colorScheme = $store<MantineColorScheme>(\n  isMantineColorScheme(initVal) ? initVal : 'light'\n);",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/stores/README.md",
    "exports": []
  },
  {
    "file": "@tw/ui-components/src/stores/index.ts",
    "exports": []
  },
  {
    "file": "@tw/ui-components/src/theme.ts",
    "exports": [
      {
        "name": " useTheme",
        "text": "\n\n/**\n * @description This seems mostly safe to use in each component, since the theme\n * object doesn't really change and therefore won't cause rerenders.\n */\nexport const useTheme = useMantineTheme;",
        "type": "variable"
      },
      {
        "name": " MantineThemeColorsOverride",
        "text": "\n  export interface MantineThemeColorsOverride {\n    colors: Record<ExtendedCustomColors, MantineColorsTuple>;\n  }",
        "type": "interface"
      },
      {
        "name": " PRIMARY_SHADE",
        "text": "\n\nexport const PRIMARY_SHADE = 5;",
        "type": "variable"
      },
      {
        "name": " TRANSPARENT",
        "text": "\n\nexport const TRANSPARENT = '#00000000';",
        "type": "variable"
      },
      {
        "name": " DEFAULT_RADIUS",
        "text": "\nexport const DEFAULT_RADIUS = 'sm';",
        "type": "variable"
      },
      {
        "name": " theme",
        "text": "\n\nexport const theme: MantineThemeOverride = createTheme({\n  scale: 1,\n  fontSmoothing: true,\n  white: '#fff',\n  black: '#000',\n  colors,\n  primaryShade: PRIMARY_SHADE,\n  primaryColor: 'one',\n  fontFamily:\n    \"Inter, -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif\",\n  headings,\n  radius: {\n    xs: '0.25rem',\n    sm: '0.375rem',\n    md: '0.5rem',\n    lg: '0.75rem',\n    xl: '1rem',\n    round: '2rem',\n  },\n  defaultRadius: 'sm',\n  fontSizes: {\n    xs: '0.75rem',\n    sm: '0.875rem',\n    md: '1rem', // this is base\n    lg: '1.125rem',\n    xl: '1.25rem',\n  },\n  shadows: {\n    sm: '0px 0.89px 1.78px 0px rgba(0, 0, 0, 0.06), 0px 0.8901px 2.67px 0px rgba(0, 0, 0, 0.10)',\n  },\n  respectReducedMotion: false,\n  cursorType: 'pointer',\n  other: {\n    // TODO: See if this should be converted to `rem`\n    spacing: {\n      xxs: '4px',\n      xs: '8px',\n      sm: '12px',\n      md: '16px',\n      big: '20px',\n      xbig: '24px',\n      xxbig: '28px',\n      xxxbig: '32px',\n      lg: '40px',\n      xl: '48px',\n      xxl: '64px',\n      xxxl: '80px',\n      huge: '96px',\n      xhuge: '128px',\n      xxhuge: '160px',\n      xxxhuge: '192px',\n    },\n  },\n});",
        "type": "MantineThemeOverride"
      },
      {
        "name": " vars",
        "text": "\n\nexport const vars = themeToVars(theme);",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/types.ts",
    "exports": [
      {
        "name": " TwBaseProps",
        "text": "\n\nexport interface TwBaseProps {\n  id?: string;\n  'data-testid'?: string;\n}",
        "type": "interface"
      },
      {
        "name": " TwPolymorphicComponent",
        "text": "\n\nexport interface TwPolymorphicComponent {\n  as?: React.ElementType<any>;\n}",
        "type": "interface"
      },
      {
        "name": " MantinePropsToRemove",
        "text": "\n\n/** Basic props to remove from each component - otherwise too much freedom */\nexport type MantinePropsToRemove =\n  | keyof GetStylesApiOptions\n  | keyof MantineStyleProps\n  | 'vars' // we can't allow people to manipulate the vars directly\n  | 'component';",
        "type": "| keyof GetStylesApiOptions\n  | keyof MantineStyleProps\n  | 'vars' // we can't allow people to manipulate the vars directly\n  | 'component'"
      },
      {
        "name": " Size",
        "text": " // remove this too for polymorphic components - we use as (because we want to be in full control of the polymorphic behavior)\n\nexport type Size = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 0;",
        "type": "'xs' | 'sm' | 'md' | 'lg' | 'xl' | 0"
      },
      {
        "name": " SpacingSize",
        "text": "\n\n// TODO: See if this is necessary\nexport type SpacingSize =\n  | 'xxs'\n  | 'xs'\n  | 'sm'\n  | 'md'\n  | 'big'\n  | 'xbig'\n  | 'xxbig'\n  | 'xxxbig'\n  | 'lg'\n  | 'xl'\n  | 'xxl'\n  | 'xxxl'\n  | 'huge'\n  | 'xhuge'\n  | 'xxhuge'\n  | 'xxxhuge';",
        "type": "| 'xxs'\n  | 'xs'\n  | 'sm'\n  | 'md'\n  | 'big'\n  | 'xbig'\n  | 'xxbig'\n  | 'xxxbig'\n  | 'lg'\n  | 'xl'\n  | 'xxl'\n  | 'xxxl'\n  | 'huge'\n  | 'xhuge'\n  | 'xxhuge'\n  | 'xxxhuge'"
      },
      {
        "name": " ShadelessColor",
        "text": "\n\n// lightModeColors and darkModeColors always have the same number of keys, so using one is ok\nexport type ShadelessColor = 'white' | 'black' | 'transparent';",
        "type": "'white' | 'black' | 'transparent'"
      },
      {
        "name": " FormattedColor",
        "text": "\nexport type FormattedColor = ShadelessColor | `${keyof typeof colors}.${NumRange<0, 10>}`;",
        "type": "ShadelessColor | `${keyof typeof colors}.${NumRange<0, 10>}`"
      },
      {
        "name": " TwSpacingConfig",
        "text": "\n\nexport type TwSpacingConfig = Record<SpacingSize, string>;",
        "type": "Record<SpacingSize, string>"
      },
      {
        "name": " EventHandler",
        "text": "\n\nexport type EventHandler<T extends React.HTMLAttributes<HTMLElement>> = PickStartsWith<\n  T,\n  `on${Capitalize<string>}`\n>;",
        "type": "PickStartsWith<\n  T,\n  `on${Capitalize<string>}`\n>"
      },
      {
        "name": " TWOnChange",
        "text": "\n\nexport type TWOnChange<T = any, E = HTMLInputElement> = (value: T, event: ChangeEvent<E>) => void;",
        "type": "(value: T, event: ChangeEvent<E>) => void"
      },
      {
        "name": " TwStyleSystemProps",
        "text": "\n\n/**\n * @description Hand picked props to allow controlled style flexibility that can be sent directly to Mantine.\n */\nexport interface TwStyleSystemProps {\n  m?: Size | 'auto';\n  my?: Size | 'auto';\n  mx?: Size | 'auto';\n  mt?: Size | 'auto';\n  mb?: Size | 'auto';\n  ml?: Size | 'auto';\n  mr?: Size | 'auto';\n  p?: Size;\n  py?: Size;\n  px?: Size;\n  pt?: Size;\n  pb?: Size;\n  pl?: Size;\n  pr?: Size;\n  bg?: FormattedColor;\n  c?: FormattedColor;\n  opacity?: CSSProperties['opacity'];\n  ff?: CSSProperties['fontFamily'];\n  fz?: Size;\n  fw?: CSSProperties['fontWeight'];\n  lts?: CSSProperties['letterSpacing'];\n  ta?: CSSProperties['textAlign'];\n  lh?: CSSProperties['lineHeight'];\n  fs?: CSSProperties['fontStyle'];\n  tt?: CSSProperties['textTransform'];\n  td?: CSSProperties['textDecoration'];\n  w?: CSSProperties['width'];\n  miw?: CSSProperties['minWidth'];\n  maw?: CSSProperties['maxWidth'];\n  h?: CSSProperties['height'];\n  mih?: CSSProperties['minHeight'];\n  mah?: CSSProperties['maxHeight'];\n  bgsz?: CSSProperties['backgroundSize'];\n  bgp?: CSSProperties['backgroundPosition'];\n  bgr?: CSSProperties['backgroundRepeat'];\n  bga?: CSSProperties['backgroundAttachment'];\n  pos?: CSSProperties['position'];\n  top?: CSSProperties['top'];\n  left?: CSSProperties['left'];\n  bottom?: CSSProperties['bottom'];\n  right?: CSSProperties['right'];\n  inset?: CSSProperties['inset'];\n  display?: CSSProperties['display'];\n}",
        "type": "interface"
      },
      {
        "name": " BreakpointMap",
        "text": "\n\n/**\n * @description Size to boundary map for responsive things usually. Would prefer using Size here, TODO...\n */\nexport type BreakpointMap = Record<string, Readonly<[number, number?]>>;",
        "type": "Record<string, Readonly<[number, number?]>>"
      },
      {
        "name": " TwCustomStyleSystemFields",
        "text": "\n\n/**\n * To create a new custom property, just add it here.  All components that use this const\n * either directly or through derived types will automatically get updated to being able to\n * use the added property.\n */\nexport const TwCustomStyleSystemFields = ensureKeysAreCSSProperties([\n  'cursor',\n  'border',\n  'borderTop',\n  'borderRight',\n  'borderLeft',\n  'borderBottom',\n  'borderRadius',\n  'overflow',\n  'transform',\n  'transition',\n] as const);",
        "type": "variable"
      },
      {
        "name": " isTwCustomStyleSystemField",
        "text": "\n\nexport const isTwCustomStyleSystemField = (\n  field: string\n): field is keyof TwCustomStyleSystemProps => {\n  // TODO: Find better solution for this\n  return TwCustomStyleSystemFieldsSet.has(field as any);\n};",
        "type": "variable"
      },
      {
        "name": " TwCustomStyleSystemProps",
        "text": "\n\n/**\n * @description Custom style system props\n */\nexport type TwCustomStyleSystemProps = {\n  [K in (typeof TwCustomStyleSystemFields)[number]]?: CSSProperties[K];\n};",
        "type": "{\n  [K in (typeof TwCustomStyleSystemFields)[number]]?: CSSProperties[K];\n}"
      },
      {
        "name": " IconName",
        "text": "\n\nexport type IconName = (typeof icons)[number];",
        "type": "(typeof icons)[number]"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/utility-types.ts",
    "exports": [
      {
        "name": " NumRange",
        "text": "/**\n * @desc Give you a range of numbers from F up to and not including T\n */\nexport type NumRange<F extends number, T extends number> = Exclude<Enumerate<T>, Enumerate<F>>;",
        "type": "Exclude<Enumerate<T>, Enumerate<F>>"
      },
      {
        "name": " PickStartsWith",
        "text": "\n\n/**\n * @desc Pick all keys from object or string union `T` that start with `Pattern`\n */\nexport type PickStartsWith<T, Pattern extends string> = T extends object\n  ? {\n      [K in keyof T as K extends `${Pattern}${string}` ? K : never]: T[K];\n    }\n  : T extends `${Pattern}${string}`\n  ? T\n  : never;",
        "type": "T extends object\n  ? {\n      [K in keyof T as K extends `${Pattern}${string}` ? K : never]: T[K];\n    }\n  : T extends `${Pattern}${string}`\n  ? T\n  : never"
      },
      {
        "name": " PickEndsWith",
        "text": "\n\n/**\n * @desc Pick all keys from object or string union `T` that end with `Pattern`\n */\nexport type PickEndsWith<T, Pattern extends string> = T extends object\n  ? {\n      [K in keyof T as K extends `${string}${Pattern}` ? K : never]: T[K];\n    }\n  : T extends `${string}${Pattern}`\n  ? T\n  : never;",
        "type": "T extends object\n  ? {\n      [K in keyof T as K extends `${string}${Pattern}` ? K : never]: T[K];\n    }\n  : T extends `${string}${Pattern}`\n  ? T\n  : never"
      },
      {
        "name": " PickIncludes",
        "text": "\n\n/**\n * @desc Pick all keys from object or string union `T` that contain `Pattern`\n */\nexport type PickIncludes<T, Pattern extends string> = T extends object\n  ? {\n      [K in keyof T as K extends `${string}${Pattern}${string}` ? K : never]: T[K];\n    }\n  : T extends `${string}${Pattern}${string}`\n  ? T\n  : never;",
        "type": "T extends object\n  ? {\n      [K in keyof T as K extends `${string}${Pattern}${string}` ? K : never]: T[K];\n    }\n  : T extends `${string}${Pattern}${string}`\n  ? T\n  : never"
      },
      {
        "name": " Nullable",
        "text": "\n\n/**\n * @desc Opposite of `NonNullable`\n */\nexport type Nullable<T> = T | null;",
        "type": "T | null"
      },
      {
        "name": " DeepNullable",
        "text": "\n\n/**\n * @desc Make all keys and sub-keys of all objects in `T` nullable\n */\nexport type DeepNullable<T extends object> = Nullable<{\n  [K in keyof T]: T[K] extends object ? Nullable<DeepNullable<T[K]>> : Nullable<T[K]>;\n}>;",
        "type": "Nullable<{\n  [K in keyof T]: T[K] extends object ? Nullable<DeepNullable<T[K]>> : Nullable<T[K]>;\n}>"
      },
      {
        "name": " DeepPartial",
        "text": "\n\n/**\n * @desc Make all keys and sub-keys of all objects in `T` partial/optional\n */\nexport type DeepPartial<T extends object> = {\n  [K in keyof T]?: T[K] extends object ? DeepPartial<T[K]> : T[K];\n};",
        "type": "{\n  [K in keyof T]?: T[K] extends object ? DeepPartial<T[K]> : T[K];\n}"
      },
      {
        "name": " DeepRequired",
        "text": "\n\n/**\n * @desc Make all keys and sub-keys of all objects in `T` required\n */\nexport type DeepRequired<T extends object> = Required<{\n  [K in keyof T]: T[K] extends object ? DeepRequired<T[K]> : Required<T[K]>;\n}>;",
        "type": "Required<{\n  [K in keyof T]: T[K] extends object ? DeepRequired<T[K]> : Required<T[K]>;\n}>"
      },
      {
        "name": " PropsFrom",
        "text": "\n\n/**\n * @desc Used to get the type of functional or class components if their props types\n * aren't available.\n */\nexport type PropsFrom<TComponent> = TComponent extends React.FC<infer Props>\n  ? Props\n  : TComponent extends React.Component<infer Props>\n  ? Props\n  : never;",
        "type": "TComponent extends React.FC<infer Props>\n  ? Props\n  : TComponent extends React.Component<infer Props>\n  ? Props\n  : never"
      },
      {
        "name": " Tuple",
        "text": "\n\n/**\n * @desc Used to define an array of a fixed length\n */\nexport type Tuple<T, Size extends number> = _Tuple<T, Size>;",
        "type": "_Tuple<T, Size>"
      },
      {
        "name": " GConstructor",
        "text": "\n\n/**\n * @desc Helps make a type for a constructor with specific constraints.\n */\nexport type GConstructor<T = {}> = new (...args: any[]) => T;",
        "type": "new (...args: any[]) => T"
      },
      {
        "name": " Override",
        "text": "\n\n/**\n * @desc Utility type \"function\".  Takes the first type, and overrides with the types of the keys in the second type.\n * It's sort of like taking the type of a library, omitting keys whose types you want to replace, and overriding them\n * with a different type **all in one line**.  This allows us to not have to declare new types when we don't want to.\n */\nexport type Override<T, R extends Partial<Record<keyof T, unknown>>> = {\n  [K in keyof T]: K extends keyof R ? R[K] : T[K];\n};",
        "type": "{\n  [K in keyof T]: K extends keyof R ? R[K] : T[K];\n}"
      },
      {
        "name": " Writeable",
        "text": "\n\n/**\n * @desc Allows us to take readonly types and make them not readonly\n */\nexport type Writeable<T> = { -readonly [P in keyof T]: T[P] };",
        "type": "{ -readonly [P in keyof T]: T[P] }"
      },
      {
        "name": " WithWriteable",
        "text": "\n\n/**\n * @desc Allows you to make specific fields writeable in the base type if they're readonly.\n */\nexport type WithWriteable<T extends object, K extends keyof T> = Prettify<\n  Omit<T, K> & Writeable<Pick<T, K>>\n>;",
        "type": "Prettify<\n  Omit<T, K> & Writeable<Pick<T, K>>\n>"
      },
      {
        "name": " Prettify",
        "text": "\n\n/**\n * @desc Sometimes a type can be a bit vague and hard to understand, especially if it's composed of multiple types.\n * Wrapping any type in this type allows us to see at first glance what fields are allowed/not allowed in the type\n * we're dealing with.\n */\nexport type Prettify<T> = { [K in keyof T]: T[K] } & {};",
        "type": "{ [K in keyof T]: T[K] } & {}"
      },
      {
        "name": " WithRequired",
        "text": "\n\n/**\n * @desc Allows you to require specific fields in the base type if they're not required.\n */\nexport type WithRequired<T extends object, K extends keyof T> = Prettify<T & Required<Pick<T, K>>>;",
        "type": "Prettify<T & Required<Pick<T, K>>>"
      },
      {
        "name": " WithPartial",
        "text": "\n\n/**\n * @desc Allows you to unrequire specific fields in the base type if they're required.\n */\nexport type WithPartial<T extends object, K extends keyof T> = Prettify<\n  Omit<T, K> & Partial<Pick<T, K>>\n>;",
        "type": "Prettify<\n  Omit<T, K> & Partial<Pick<T, K>>\n>"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/utils/ThemeToggle.tsx",
    "exports": [
      {
        "name": " ThemeToggle",
        "text": "\n\nexport const ThemeToggle = () => {\n  const [colorScheme, setColorScheme] = $colorScheme.useStore();\n\n  return (\n    <Switch\n      checked={colorScheme === 'dark'}\n      onColor=\"orange.4\"\n      offColor=\"gray.3\"\n      onChange={() => setColorScheme((p) => (p === 'light' ? 'dark' : 'light'))}\n    />\n  );\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/utils/commonPropGenerators.ts",
    "exports": [
      {
        "type": "function",
        "name": " getMarketingProps",
        "text": "/**\n * @description Very important function, which should be used in all components.  Automatically generates\n * required props for marketing for any component like the `data-marketing-target` attribute, which\n * marketing can use for product tours to know how to select any element.\n */\nexport function getMarketingProps(name: string) {\n  return {\n    'data-marketing-target': 'market-target-' + name,\n  };\n}",
        "parameters": [
          {
            "name": "name",
            "text": "name: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/utils/cx.ts",
    "exports": [
      {
        "type": "function",
        "name": " cx",
        "text": "\n\n/**\n * @description Utility function used to combine classes into a string.\n * Can help make conditional rendering more brief and less troublesome\n * instead of using template strings.\n */\nexport function cx(...classes: CxClass[]): string {\n  const classList: string[] = [];\n\n  for (const cls of classes) {\n    if (Array.isArray(cls)) {\n      classList.push(cx(...cls));\n      continue;\n    }\n\n    if (typeof cls !== 'object' || !cls) {\n      if (typeof cls !== 'string') continue;\n\n      classList.push(cls);\n      continue;\n    }\n\n    for (const className in cls) {\n      if (cls[className]) {\n        classList.push(className);\n      }\n    }\n  }\n\n  return classList.join(' ');\n}",
        "parameters": [
          {
            "name": "classes",
            "text": "...classes: CxClass[]",
            "type": "CxClass[]"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/utils/generateRandomUniqueId.ts",
    "exports": [
      {
        "name": " generateRandomUniqueId",
        "text": "export const generateRandomUniqueId = () => {\n  return Math.floor(Math.random() * Date.now()).toString(16);\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/utils/inputElementEvents.ts",
    "exports": [
      {
        "name": " wrapInputOnChange",
        "text": "\n\n// this will work for any input where event.target.value holds the interesting value\nexport const wrapInputOnChange =\n  (propsOnChange?: TWOnChange<string>) => (event: ChangeEvent<HTMLInputElement>) => {\n    if (!propsOnChange) return;\n    propsOnChange(event.target.value, event);\n  };",
        "type": "variable"
      },
      {
        "name": " wrapCheckboxOnChange",
        "text": "\n\nexport const wrapCheckboxOnChange =\n  (propsOnChange?: TWOnChange<boolean>) => (event: ChangeEvent<HTMLInputElement>) => {\n    if (!propsOnChange) return;\n    propsOnChange(event.target.checked, event);\n  };",
        "type": "variable"
      },
      {
        "name": " wrapImageInputOnChange",
        "text": "\n\nexport const wrapImageInputOnChange =\n  (propsOnChange?: TWOnChange<string>) => (event: ChangeEvent<HTMLInputElement>) => {\n    if (!propsOnChange) return;\n    propsOnChange(event.target.src, event);\n  };",
        "type": "variable"
      },
      {
        "name": " wrapRadioOnChange",
        "text": "\n\nexport const wrapRadioOnChange = () => {};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/utils/polymorphicFactory.tsx",
    "exports": [
      {
        "type": "function",
        "name": " polymorphicFactory",
        "text": "\n\n/**\n * HOF used to maintain our polymorphic structure when working with Mantine\n * polymorphic components. This is why 'component' is removed from the type.\n */\nexport function polymorphicFactory<Props>(\n  Component: React.ComponentType<Omit<Props, 'component'>>\n) {\n  return function <T extends React.ElementType = 'div'>({\n    as,\n    ...props\n  }: PolymorphicComponentProps<T, Props> & React.ComponentPropsWithoutRef<T>) {\n    const ComponentType: React.ElementType = as || 'div';\n    return <Component {...(props as any)} component={ComponentType} />;\n  };\n}",
        "parameters": [
          {
            "name": "Component",
            "text": "Component: React.ComponentType<Omit<Props, 'component'>>",
            "type": "React.ComponentType<Omit<Props, 'component'>>"
          }
        ]
      },
      {
        "type": "function",
        "name": " polymorphicFactoryWithRef",
        "text": "\n\n// TODO: Figure this out!!!\nexport function polymorphicFactoryWithRef<Props>(\n  Component: React.ComponentType<Omit<Props, 'component'> & { ref: React.Ref<any> }>\n) {\n  return forwardRef(\n    <T extends React.ElementType = 'div'>({\n      as,\n      ...props\n    }: PolymorphicComponentProps<T, Props> & React.ComponentPropsWithRef<T>) => {\n      const ComponentType: React.ElementType = as || 'div';\n      return <Component {...(props as any)} component={ComponentType} />;\n    }\n  );\n}",
        "parameters": [
          {
            "name": "Component",
            "text": "Component: React.ComponentType<Omit<Props, 'component'> & { ref: React.Ref<any> }>",
            "type": "React.ComponentType<Omit<Props, 'component'> & { ref: React.Ref<any> }>"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/utils/types.ts",
    "exports": [
      {
        "name": " NonFunction",
        "text": "export type NonFunction<T> = T extends Function ? never : T;",
        "type": "T extends Function ? never : T"
      },
      {
        "name": " Store",
        "text": "\n\nexport type Store<T = any> = {\n  /** Retrieve the value of the observed data */\n  get: () => T;\n  /** Set value of observed data on a global scope - everyone using the useStore or useDerived hooks is notified */\n  set: (val: NonFunction<T> | ((prev: T) => T)) => void;\n  /** Lets us subscribe to changes from the store. When an update occurs, the callback function is run. Returns an \"unsubscribe\" function to stop listening to updates. */\n  subscribe: (cb: (newVal: T, prevVal: T) => any) => () => void;\n  /** Hook that lets you listen to changes in the observed data and set the data globaly - use like useState */\n  useStore: () => [T, Store<T>['set']];\n  /** More of a convenience hook if you need to use some derived value from the store's current data - use like useSelector */\n  useDerived: <D>(cb: (val: T) => D) => D;\n};",
        "type": "{\n  /** Retrieve the value of the observed data */\n  get: () => T;\n  /** Set value of observed data on a global scope - everyone using the useStore or useDerived hooks is notified */\n  set: (val: NonFunction<T> | ((prev: T) => T)) => void;\n  /** Lets us subscribe to changes from the store. When an update occurs, the callback function is run. Returns an \"unsubscribe\" function to stop listening to updates. */\n  subscribe: (cb: (newVal: T, prevVal: T) => any) => () => void;\n  /** Hook that lets you listen to changes in the observed data and set the data globaly - use like useState */\n  useStore: () => [T, Store<T>['set']];\n  /** More of a convenience hook if you need to use some derived value from the store's current data - use like useSelector */\n  useDerived: <D>(cb: (val: T) => D) => D;\n}"
      },
      {
        "name": " StoreReturnTypes",
        "text": "\n\nexport type StoreReturnTypes<S extends Store[]> = {\n  [I in keyof S]: S[I] extends Store<infer U> ? U : never;\n};",
        "type": "{\n  [I in keyof S]: S[I] extends Store<infer U> ? U : never;\n}"
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/utils.tsx",
    "exports": [
      {
        "type": "function",
        "name": " isDefined",
        "text": "\n\nexport function isDefined<T>(x: T | null | undefined): x is T {\n  return x !== null && x !== undefined;\n}",
        "parameters": [
          {
            "name": "x",
            "text": "x: T | null | undefined",
            "type": "T | null | undefined"
          }
        ]
      },
      {
        "type": "function",
        "name": " extractCSSColor",
        "text": "\n\n/**\n * @description Extracts the valid CSS color corresponding to the FormattedColor provided based on the dynamic colors.\n * If no shade is provided, uses theme defined primary shade which should be 6.\n */\nexport function extractCSSColor(clr: FormattedColor): string {\n  if (isValidShadelessColor(clr)) {\n    if (clr === 'transparent') return TRANSPARENT;\n    return vars.colors[clr];\n  }\n\n  const [color, shade] = clr.split('.');\n\n  if (isNaN(+shade) || +shade > 9 || +shade < 0) {\n    return vars.colors[color]?.[PRIMARY_SHADE];\n  }\n\n  return vars.colors[color]?.[+shade as keyof (typeof vars.colors)[typeof color]];\n}",
        "parameters": [
          {
            "name": "clr",
            "text": "clr: FormattedColor",
            "type": "FormattedColor"
          }
        ]
      },
      {
        "type": "function",
        "name": " ensureKeysAreCSSProperties",
        "text": "\n\nexport function ensureKeysAreCSSProperties<T extends keyof React.CSSProperties>(\n  keys: ReadonlyArray<T>\n) {\n  return keys;\n}",
        "parameters": [
          {
            "name": "keys",
            "text": "keys: ReadonlyArray<T>",
            "type": "ReadonlyArray<T>"
          }
        ]
      },
      {
        "type": "function",
        "name": " extractAndMapCustomPropsToStyle",
        "text": "\n\n/**\n * @description Generally we try using overridden default mantine style props when trying to expose certain flexibility\n * for more custom styling, but in cases where some properties don't just exist in Mantine's style system, and we have\n * to add the styles ourselves, this function can come in handy.\n */\nexport function extractAndMapCustomPropsToStyle<T extends object>(\n  props: T\n): CustomStyleAndRestProps<T> {\n  const result: CustomStyleAndRestProps<T> = {\n    style: {},\n    rest: {} as Omit<T, keyof TwCustomStyleSystemProps>,\n  };\n\n  for (const key in props) {\n    if (isTwCustomStyleSystemField(key)) {\n      result.style[key] = String(props[key]);\n      continue;\n    }\n    // TODO: Find a better solution for this\n    (result.rest as any)[key] = props[key];\n  }\n\n  return result;\n}",
        "parameters": [
          {
            "name": "props",
            "text": "props: T",
            "type": "T"
          }
        ]
      },
      {
        "type": "function",
        "name": " extractIcon",
        "text": "\n\n/**\n * @description Can be used to always return an Icon element or null whether input is Icon or icon name\n */\nexport function extractIcon(\n  icon?: JSX.Element | IconName | null,\n  iconProps?: Omit<IconProps, 'name'>\n) {\n  if (!icon) return null;\n  if (typeof icon !== 'string') return icon;\n  return <Icon name={icon as IconName} {...iconProps} />;\n}",
        "parameters": [
          {
            "name": "icon",
            "text": "icon?: JSX.Element | IconName | null",
            "type": "JSX.Element | IconName | null"
          },
          {
            "name": "iconProps",
            "text": "iconProps?: Omit<IconProps, 'name'>",
            "type": "Omit<IconProps, 'name'>"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/ui-components/src/validators.ts",
    "exports": [
      {
        "name": " isValidShadelessColor",
        "text": "\n\nexport const isValidShadelessColor = (clr: string): clr is ShadelessColor => {\n  return clr === 'white' || clr === 'black' || clr === 'transparent';\n};",
        "type": "variable"
      },
      {
        "name": " isValidFormattedColor",
        "text": "\n\nexport const isValidFormattedColor = (clr: string): clr is FormattedColor => {\n  if (isValidShadelessColor(clr)) return true;\n\n  if (!clr.includes('.')) return false;\n\n  const [name, shade] = clr.split('.');\n  if (!(name in colors)) return false;\n\n  const shadeNum = Number(shade);\n  if (isNaN(shadeNum) || shadeNum < 0 || shadeNum > 9) return false;\n\n  return true;\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/activitySettings/getActivitiesByCalc.ts",
    "exports": [
      {
        "name": " getActivitiesByCalc",
        "text": "\n\nexport const getActivitiesByCalc = async <T extends ActivitySettings>(\n  arr: any[],\n  metaData: ActivityMetaData,\n  model: Model<T>,\n  isDeleted: (item: any) => boolean = null\n): Promise<ActivitySettings[]> => {\n  try {\n    const promises = arr.map(async (o): Promise<ActivitySettings> => {\n      let res: ActivitySettings = null;\n      const old: any = await getObjectHistory(o.id, metaData.level, model);\n      if (old) {\n        const diffObject: ActivityDiff = getActivityDiffObject(old, o);\n        res = diffObject ? { id: o.id, ...metaData, ...diffObject } : null;\n      } else {\n        res = {\n          id: o.id,\n          old: null,\n          new: o,\n          changes: null,\n          activityType: ActivityType.CREATED,\n          ...metaData,\n        };\n      }\n      if (res && isDeleted && isDeleted(o)) {\n        res = {\n          ...res,\n          activityType: ActivityType.DELETED,\n        };\n      }\n      return res;\n    });\n    const activities: ActivitySettings[] = await Promise.all(promises);\n    return activities.filter((o) => o);\n  } catch (error) {\n    logger.error('calcActivitiesChanges failed', { metaData, error });\n  }\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/activitySettings/getActivityDiffObject.ts",
    "exports": [
      {
        "name": " getActivityDiffObject",
        "text": "\n\nexport const getActivityDiffObject = (oldObj: any, newObj: any): ActivityDiff => {\n  const specificPaths: String[] = [];\n  const changes = deepDiff(oldObj, newObj);\n  const flatChanges = Object.entries(changes).map(([key, value]) => {\n    return { field: key, from: value['from'], to: value['to'] };\n  });\n  const filteredChanges = flatChanges.filter((value) => {\n    return !(\n      (value['from'] === null && value['to'] == undefined) ||\n      (value['to'] === null && value['from'] == undefined)\n    );\n  });\n  if (filteredChanges.length > 0) {\n    return {\n      old: oldObj,\n      new: newObj,\n      changes: filteredChanges,\n      activityType: ActivityType.UPDATED,\n    };\n  }\n  return null;\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/activitySettings/getObjectHistory.ts",
    "exports": [
      {
        "name": " getObjectHistory",
        "text": "\n\nexport const getObjectHistory = async <T extends ActivitySettings>(\n  id: string,\n  level: string,\n  model: Model<T>\n) => {\n  try {\n    const old: any = await model\n      .findOne({ id, level }, { new: 1 }, { sort: { updatedAt: -1 } })\n      .exec();\n    return old ? old.new : null;\n  } catch (e) {\n    logger.error(`getObjectHistory failed, id: ${id} level: ${level} error: ${e}`);\n  }\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/activitySettings/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/activitySettings/saveActivities.ts",
    "exports": [
      {
        "name": " saveActivities",
        "text": "\n\nexport const saveActivities = async (\n  activities: ActivitySettings[],\n  shopDomain: string,\n  model: Model<any>,\n  extendFilterField: string[] = []\n) => {\n  try {\n    const docsToUpsert = activities.map((doc) => {\n      const extendFilter: { [key: string]: any } = {};\n      extendFilterField.forEach((name) => {\n        extendFilter[name] = doc[name];\n      });\n      const filter = { id: doc.id, level: doc.level, ...extendFilter };\n      return {\n        replaceOne: {\n          filter: filter,\n          replacement: doc,\n          upsert: true,\n        },\n      };\n    });\n\n    logger.info(`saveActivities for shop: ${shopDomain} activities length: ${activities.length}`);\n\n    if (activities.length > 0) {\n      const res = await model.bulkWrite(docsToUpsert);\n\n      await callPubSub('new_activities_created', {\n        shopId: shopDomain,\n        serviceId,\n        activities: activities,\n      });\n    }\n  } catch (e) {\n    logger.error(`saveActivities failed,  shop_domain: ${shopDomain} error: ${e}`);\n  }\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/activitySettings/types.ts",
    "exports": [
      {
        "type": "enum",
        "name": " ActivityType",
        "text": "export enum ActivityType {\n  CREATED = 'create',\n  UPDATED = 'update',\n  DELETED = 'delete',\n}"
      },
      {
        "name": " ActivityDiff",
        "text": "\n\nexport interface ActivityDiff {\n  activityType: ActivityType;\n  new: any;\n  old: any;\n  changes: any;\n}",
        "type": "interface"
      },
      {
        "name": " ActivityMetaData",
        "text": "\n\nexport interface ActivityMetaData {\n  providerId?: string;\n  providerAccount: string;\n  shopDomain: string;\n  level: string;\n}",
        "type": "interface"
      },
      {
        "name": " ActivitySettings",
        "text": "\n\nexport interface ActivitySettings extends ActivityDiff, ActivityMetaData {\n  id: string;\n}",
        "type": "interface"
      }
    ]
  },
  {
    "file": "@tw/utils/addTaskToQueue.ts",
    "exports": [
      {
        "type": "function",
        "name": " getClient",
        "text": "\n\nexport function getClient(local?: boolean): CloudTasksClient {\n  const key = local ? 'local' : 'cloud';\n  if (!clients[key]) {\n    if (local) {\n      clients[key] = new CloudTasksClient({\n        port: 8026,\n        servicePath: localHost,\n        sslCreds: credentials.createInsecure(),\n      });\n    } else {\n      clients[key] = new CloudTasksClient();\n    }\n  }\n  return clients[key];\n}",
        "parameters": [
          {
            "name": "local",
            "text": "local?: boolean",
            "type": "boolean"
          }
        ]
      },
      {
        "type": "function",
        "name": " addTaskToQueue",
        "text": "\n\nexport async function addTaskToQueue(\n  queueName: string,\n  serviceId: string,\n  endpoint: string,\n  data: any,\n  additionalOptions: {\n    projectId?: string;\n    name?: string;\n    dispatchDeadline?: number;\n    scheduleTime?: number;\n    deployment?: string;\n    forceCloud?: boolean;\n    log?: boolean;\n    ignoreDuplicate?: boolean;\n  } = {}\n) {\n  const {\n    projectId = process.env.PROJECT_ID,\n    name = null,\n    dispatchDeadline,\n    scheduleTime,\n    deployment,\n    forceCloud,\n    log = true,\n    ignoreDuplicate = false,\n  } = additionalOptions;\n\n  const local = isLocal && !forceCloud;\n  const client = getClient(local);\n\n  const parent = client.queuePath(projectId, 'us-central1', queueName);\n  const { url, audience } = await getFullUrl(serviceId, projectId, endpoint, {\n    endpointType: 'authenticated',\n    local,\n    deployment,\n  });\n  const task: protos.google.cloud.tasks.v2.ITask = {\n    ...(name && { name: `${parent}/tasks/${name}` }),\n    httpRequest: {\n      httpMethod: 'POST',\n      url,\n      body: Buffer.from(JSON.stringify(data)),\n      headers: { 'Content-Type': 'application/json' },\n    },\n  };\n  if (!local) {\n    const serviceAccountEmail = await getServiceAccountEmail();\n    task.httpRequest.oidcToken = {\n      serviceAccountEmail: serviceAccountEmail,\n      audience: audience,\n    };\n  }\n  if (dispatchDeadline) {\n    task.dispatchDeadline = { seconds: dispatchDeadline };\n  }\n  if (scheduleTime) {\n    task.scheduleTime = { seconds: scheduleTime + Date.now() / 1000 };\n  }\n  const request: protos.google.cloud.tasks.v2.ICreateTaskRequest = { parent: parent, task: task };\n  // https://cloud.google.com/tasks/docs/reference/rest/v2/projects.locations.queues.tasks#Task\n  try {\n    const [response] = await client.createTask(request);\n    if (log) logger.info(`Created task ${response.name}`);\n    return response;\n  } catch (e) {\n    if (ignoreDuplicate && name && e?.code === 6) {\n      if (log) logger.info(`Duplicate task ignored ${name}`);\n      return;\n    }\n    logger.error(e);\n    throw e;\n  }\n}",
        "parameters": [
          {
            "name": "queueName",
            "text": "queueName: string",
            "type": "string"
          },
          {
            "name": "serviceId",
            "text": "serviceId: string",
            "type": "string"
          },
          {
            "name": "endpoint",
            "text": "endpoint: string",
            "type": "string"
          },
          {
            "name": "data",
            "text": "data: any",
            "type": "any"
          },
          {
            "name": "additionalOptions",
            "text": "additionalOptions: {\n    projectId?: string;\n    name?: string;\n    dispatchDeadline?: number;\n    scheduleTime?: number;\n    deployment?: string;\n    forceCloud?: boolean;\n    log?: boolean;\n    ignoreDuplicate?: boolean;\n  } = {}",
            "type": "{\n    projectId?: string;\n    name?: string;\n    dispatchDeadline?: number;\n    scheduleTime?: number;\n    deployment?: string;\n    forceCloud?: boolean;\n    log?: boolean;\n    ignoreDuplicate?: boolean;\n  }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/aggregateMetrics.ts",
    "exports": [
      {
        "name": " aggregateMetrics",
        "text": "\n\nexport const aggregateMetrics = (metricsResponse: ApiMetricsResponse): MetricsTableData => {\n  const { data } = metricsResponse || {};\n\n  const agg: MetricsTableData = data.reduce((acc, curr) => {\n    const forEntity = curr.metricsBreakdown.reduce((acc, curr) => {\n      return mergeAndSumObjectsToNumbersOnly([acc, curr.metrics]);\n    }, {});\n    return mergeAndSumObjectsToNumbersOnly([acc, forEntity]);\n  }, {});\n\n  return agg;\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/analytics/index.ts",
    "exports": [
      {
        "type": "function",
        "name": " trackEvent",
        "text": "\n\nexport function trackEvent(\n  event: string,\n  properties: { userId: string; shopId: string } & Record<string, any>,\n  options: {\n    skipPosthog?: boolean;\n    log?: boolean;\n  } = {\n    skipPosthog: false,\n    log: false,\n  }\n) {\n  const { userId, shopId, ...rest } = properties;\n  if (!options.skipPosthog) {\n    capture(userId, shopId, event, rest);\n  }\n  // add other analytics providers here\n  if (options.log) {\n    logger.info(\n      `[Event Tracker]: shopId=${shopId} userId=${userId} event=${event}: ${JSON.stringify(rest)}`\n    );\n  }\n}",
        "parameters": [
          {
            "name": "event",
            "text": "event: string",
            "type": "string"
          },
          {
            "name": "properties",
            "text": "properties: { userId: string; shopId: string } & Record<string, any>",
            "type": "{ userId: string; shopId: string } & Record<string, any>"
          },
          {
            "name": "options",
            "text": "options: {\n    skipPosthog?: boolean;\n    log?: boolean;\n  } = {\n    skipPosthog: false,\n    log: false,\n  }",
            "type": "{\n    skipPosthog?: boolean;\n    log?: boolean;\n  }"
          }
        ]
      },
      {
        "type": "function",
        "name": " trackPosthogEvent",
        "text": "\n\nexport function trackPosthogEvent(\n  distinctId: string,\n  event: string,\n  properties?: Record<string, any>,\n  options: {\n    skipPosthog?: boolean;\n    log?: boolean;\n  } = {\n    skipPosthog: false,\n    log: false,\n  }\n) {\n  if (!options.skipPosthog) {\n    captureGeneric(distinctId, event, properties);\n  }\n  if (options.log) {\n    logger.info(\n      `[Event Tracker]: distinctId=${distinctId} event=${event}: ${JSON.stringify(properties)}`\n    );\n  }\n  // add other analytics providers here\n}",
        "parameters": [
          {
            "name": "distinctId",
            "text": "distinctId: string",
            "type": "string"
          },
          {
            "name": "event",
            "text": "event: string",
            "type": "string"
          },
          {
            "name": "properties",
            "text": "properties?: Record<string, any>",
            "type": "Record<string, any>"
          },
          {
            "name": "options",
            "text": "options: {\n    skipPosthog?: boolean;\n    log?: boolean;\n  } = {\n    skipPosthog: false,\n    log: false,\n  }",
            "type": "{\n    skipPosthog?: boolean;\n    log?: boolean;\n  }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/analytics/posthog.ts",
    "exports": [
      {
        "type": "function",
        "name": " capture",
        "text": "\n\nexport function capture(\n  userId: string,\n  shopId: string,\n  event: string,\n  properties: Record<string, any> = {}\n) {\n  const obj = {\n    distinctId: userId,\n    groups: {\n      shop: shopId,\n    },\n    event,\n    properties,\n  };\n  if (!clientInitialized) {\n    eventQueue.push(obj);\n    return;\n  }\n  posthogClient.capture(obj);\n}",
        "parameters": [
          {
            "name": "userId",
            "text": "userId: string",
            "type": "string"
          },
          {
            "name": "shopId",
            "text": "shopId: string",
            "type": "string"
          },
          {
            "name": "event",
            "text": "event: string",
            "type": "string"
          },
          {
            "name": "properties",
            "text": "properties: Record<string, any> = {}",
            "type": "Record<string, any>"
          }
        ]
      },
      {
        "type": "function",
        "name": " captureGeneric",
        "text": "\n\nexport function captureGeneric(\n  distinctId: string,\n  event: string,\n  properties: Record<string, any> = {}\n) {\n  const obj = {\n    distinctId,\n    event,\n    properties,\n  };\n\n  if (!clientInitialized) {\n    eventQueue.push(obj);\n    return;\n  }\n  posthogClient.capture(obj);\n}",
        "parameters": [
          {
            "name": "distinctId",
            "text": "distinctId: string",
            "type": "string"
          },
          {
            "name": "event",
            "text": "event: string",
            "type": "string"
          },
          {
            "name": "properties",
            "text": "properties: Record<string, any> = {}",
            "type": "Record<string, any>"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/api/classValidator.ts",
    "exports": [
      {
        "type": "function",
        "name": " ApiProperty",
        "text": "\n\nexport function ApiProperty(options?: OpenAPIV3.SchemaObject) {\n  return JSONSchema(options as any);\n}",
        "parameters": [
          {
            "name": "options",
            "text": "options?: OpenAPIV3.SchemaObject",
            "type": "OpenAPIV3.SchemaObject"
          }
        ]
      },
      {
        "name": " IsStringOrNumber",
        "text": "\n\n@ValidatorConstraint()\nexport class IsStringOrNumber implements ValidatorConstraintInterface {\n  validate(text: any, args: ValidationArguments) {\n    return typeof text === 'number' || typeof text === 'string';\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return '($value) must be number or string';\n  }\n}",
        "type": " ValidatorConstraintInterface"
      },
      {
        "name": " IsStringOrNumberOrBoolean",
        "text": "\n\n@ValidatorConstraint()\nexport class IsStringOrNumberOrBoolean implements ValidatorConstraintInterface {\n  validate(text: any, args: ValidationArguments) {\n    return typeof text === 'number' || typeof text === 'string' || typeof text === 'boolean';\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return '($value) must be number or string or boolean';\n  }\n}",
        "type": " ValidatorConstraintInterface"
      },
      {
        "name": " IsBeforeOrEqualConstraint",
        "text": "\n\n@ValidatorConstraint({ name: 'isBeforeOrEqual', async: false })\nexport class IsBeforeOrEqualConstraint implements ValidatorConstraintInterface {\n  validate(propertyValue: string, args: ValidationArguments) {\n    return propertyValue <= args.object[args.constraints[0]];\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return `'${args.property}' must be before of equal to '${args.constraints[0]}'`;\n  }\n}",
        "type": " ValidatorConstraintInterface"
      },
      {
        "type": "specifier",
        "name": " Validate",
        "text": " Validate"
      },
      {
        "type": "specifier",
        "name": " Type",
        "text": " Type"
      }
    ]
  },
  {
    "file": "@tw/utils/api/index.ts",
    "exports": [
      {
        "type": "specifier",
        "name": " exportOpenApiFromNestJs",
        "text": " exportOpenApiFromNestJs"
      }
    ]
  },
  {
    "file": "@tw/utils/api/openApi.ts",
    "exports": [
      {
        "type": "function",
        "name": " exportOpenApiFromNestJs",
        "text": "\n\nexport function exportOpenApiFromNestJs(document) {\n  if (!isLocal) return;\n  const serviceId = process.env.SERVICE_ID;\n  const result = JSON.parse(JSON.stringify(document));\n  const newPaths = {};\n  const pathsWithService = {};\n  for (const path of Object.keys(result.paths)) {\n    const shortPath = removeServiceIdFromPath(serviceId, path);\n    newPaths[shortPath] = result.paths[path];\n    pathsWithService['/' + serviceId + path] = document.paths[path];\n    for (const method of Object.keys(newPaths[shortPath])) {\n      if (\n        !newPaths[shortPath][method].security?.length &&\n        !newPaths[shortPath][method].tags?.includes('x-open-endpoint')\n      ) {\n        delete newPaths[shortPath][method];\n      }\n      if (!Object.keys(newPaths[shortPath]).length) {\n        delete newPaths[shortPath];\n      }\n    }\n  }\n  result.paths = newPaths;\n  document.paths = pathsWithService;\n  const specAsYaml = yaml.stringify(result, { aliasDuplicateObjects: false, singleQuote: true });\n  if (serviceId !== 'api') fs.writeFileSync(openApiFilePath, specAsYaml);\n}",
        "parameters": [
          {
            "name": "document",
            "text": "document",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " exportOpenApiFromExpress",
        "text": "\n\nexport function exportOpenApiFromExpress(\n  routes: RouteMetaData[],\n  additionalConverters: ISchemaConverters\n) {\n  const schemas = validationMetadatasToSchemas({\n    classTransformerMetadataStorage: defaultMetadataStorage,\n    refPointerPrefix: '#/components/schemas/',\n    additionalConverters: {\n      IsStringOrNumber: {\n        oneOf: [{ type: 'string' }, { type: 'number' }],\n      },\n      ...additionalConverters,\n    },\n  });\n  // @ts-ignore\n  baseOpenApiDoc.components.schemas = schemas;\n  const paths: Record<string, Record<string, TwOperationObject>> = {};\n  for (const route of routes) {\n    transformExpressPathToOpenApi(route);\n    const method = route.method;\n    if (route?.metadata?.args?.authError) {\n      throw new Error(`The endpoint ${route.path} is not handling authorization!!`);\n    }\n    const apiConfigArgs: ApiConfigArgs & { parts: ('body' | 'query')[] } = route?.metadata?.args;\n    const transformedPath = transformExpressPathToOpenApi(route);\n    const path = getAlternativePath(transformedPath, apiConfigArgs) || transformedPath;\n    const interfaces = apiConfigArgs?.openApi?.interfaces;\n    if (!interfaces?.length) continue;\n    if (!paths[path]) paths[path] = {};\n    paths[path][method] = defaultOpenApiOperation(route.path, method, apiConfigArgs?.openApi);\n    paths[path][method].parameters = route.pathParams.map((p) => {\n      p.schema = { type: 'string' };\n      return p;\n    });\n    if (!apiConfigArgs) continue;\n    if (apiConfigArgs.parts.includes('body')) {\n      const className = apiConfigArgs.body.constructor.name;\n      paths[path][method].requestBody = {\n        required: true,\n        content: {\n          'application/json': {\n            schema: {\n              $ref: `#/components/schemas/${className}`,\n            },\n          },\n        },\n      };\n    }\n    if (apiConfigArgs.parts.includes('query')) {\n      const className = apiConfigArgs.query.constructor.name;\n      paths[path][method].parameters.push({\n        in: 'query',\n        name: className,\n        schema: {\n          $ref: `#/components/schemas/${className}`,\n        },\n        required: true,\n      });\n    }\n    if ('resBody' in apiConfigArgs) {\n      const className = apiConfigArgs.resBody.constructor.name;\n      paths[path][method].responses = {\n        200: {\n          description: 'A successful response',\n          content: {\n            'application/json': {\n              schema: {\n                $ref: `#/components/schemas/${className}`,\n              },\n            },\n          },\n        },\n      };\n    }\n    if ('rateLimits' in apiConfigArgs) {\n      addRateLimits(paths[path][method], apiConfigArgs.rateLimits);\n    }\n    if (apiConfigArgs.openApi?.websocket) {\n      paths[path][method]['x-tw'].websocket = true;\n    }\n\n    if (apiConfigArgs.openApi?.corsAllowAll) {\n      paths[path][method]['x-tw'].corsAllowAll = true;\n    }\n\n    paths[path][method] = { ...apiConfigArgs?.openApi?.operation, ...paths[path][method] };\n  }\n  for (const path of Object.keys(extraPaths)) {\n    for (const method of Object.keys(extraPaths[path])) {\n      if (!paths[path]) paths[path] = {};\n      paths[path][method] = extraPaths[path][method];\n    }\n  }\n\n  baseOpenApiDoc.paths = paths;\n  if (Object.keys(paths).length) {\n    const specAsYaml = yaml.stringify(baseOpenApiDoc, {\n      aliasDuplicateObjects: false,\n      singleQuote: true,\n    });\n    fs.writeFileSync(openApiFilePath, specAsYaml);\n  }\n}",
        "parameters": [
          {
            "name": "routes",
            "text": "routes: RouteMetaData[]",
            "type": "RouteMetaData[]"
          },
          {
            "name": "additionalConverters",
            "text": "additionalConverters: ISchemaConverters",
            "type": "ISchemaConverters"
          }
        ]
      },
      {
        "type": "function",
        "name": " addPathToOpenApi",
        "text": "\n\nexport function addPathToOpenApi(path: string, method: string, op: TwOperationObject) {\n  if (!extraPaths[path]) extraPaths[path] = {};\n  extraPaths[path][method] = op;\n}",
        "parameters": [
          {
            "name": "path",
            "text": "path: string",
            "type": "string"
          },
          {
            "name": "method",
            "text": "method: string",
            "type": "string"
          },
          {
            "name": "op",
            "text": "op: TwOperationObject",
            "type": "TwOperationObject"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/api/simpleEndpoint.ts",
    "exports": [
      {
        "type": "function",
        "name": " simpleEndpoint",
        "text": "\n\nexport function simpleEndpoint(fn: (any) => any) {\n  return async function simpleEndpoint(req: Request, res: Response) {\n    let args;\n    if (req.method === 'POST') {\n      args = req.body;\n    } else {\n      args = req.query;\n    }\n    res.json(await fn(args));\n  };\n}",
        "parameters": [
          {
            "name": "fn",
            "text": "fn: (any) => any",
            "type": "(any) => any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/api/utils.ts",
    "exports": [
      {
        "name": " baseOpenApiDoc",
        "text": "\n\nexport const baseOpenApiDoc: OpenAPIV3.Document = {\n  openapi: '3.0.0',\n  info: { title: serviceId, version: '1.0.0' },\n  paths: {},\n  components: { schemas: {} },\n};",
        "type": "OpenAPIV3.Document"
      },
      {
        "type": "function",
        "name": " defaultOpenApiOperation",
        "text": "\n\nexport function defaultOpenApiOperation(\n  path: string,\n  method: string,\n  openApi: OpenApi\n): OpenAPIV3.OperationObject & { 'x-tw' } {\n  const { security, overwriteExternalPath, interfaces, operation, deployment } = openApi || {};\n  const serviceId = process.env.SERVICE_ID;\n  return {\n    operationId:\n      operation?.operationId ||\n      path\n        .split('/')\n        .filter(Boolean)\n        .map((p) => {\n          if (p.startsWith(':')) p = p.replace(':', '');\n          return p;\n        })\n        .join('-') +\n        '-' +\n        method,\n    responses: {\n      200: {\n        description: 'A successful response',\n      },\n    },\n    security:\n      security &&\n      Object.keys(security)?.map((s) => {\n        return { [s]: security[s] };\n      }),\n    parameters: [],\n    tags: operation?.tags?.length ? operation?.tags : [serviceId],\n    'x-tw': {\n      pathPrefix: overwriteExternalPath?.prefix || serviceId,\n      serviceId,\n      interfaces,\n      deployment,\n    },\n  };\n}",
        "parameters": [
          {
            "name": "path",
            "text": "path: string",
            "type": "string"
          },
          {
            "name": "method",
            "text": "method: string",
            "type": "string"
          },
          {
            "name": "openApi",
            "text": "openApi: OpenApi",
            "type": "OpenApi"
          }
        ]
      },
      {
        "type": "function",
        "name": " getAlternativePath",
        "text": "\n\nexport function getAlternativePath(route: string, apiConfigArgs: ApiConfigArgs) {\n  if (apiConfigArgs?.openApi?.overwriteExternalPath) {\n    const alternativePath = apiConfigArgs.openApi.overwriteExternalPath;\n    let result;\n    if (alternativePath.path) result = alternativePath.path;\n    return result;\n  }\n}",
        "parameters": [
          {
            "name": "route",
            "text": "route: string",
            "type": "string"
          },
          {
            "name": "apiConfigArgs",
            "text": "apiConfigArgs: ApiConfigArgs",
            "type": "ApiConfigArgs"
          }
        ]
      },
      {
        "type": "function",
        "name": " getRateLimitPolicy",
        "text": "\n\nexport function getRateLimitPolicy(conf: RateLimitConfig) {\n  return conf.map((def) => `${def.quota};w=${def.window}`).join(', ');\n}",
        "parameters": [
          {
            "name": "conf",
            "text": "conf: RateLimitConfig",
            "type": "RateLimitConfig"
          }
        ]
      },
      {
        "type": "function",
        "name": " addRateLimits",
        "text": "\n\nexport function addRateLimits(op: TwOperationObject, conf: RateLimitConfig) {\n  for (let status in op.responses) {\n    const res = op.responses[status];\n    if (status === '429') {\n      res['headers'] = {\n        ...res['headers'],\n        ...rateLimitResponse['429']['headers'],\n      };\n    } else {\n      res['headers'] = {\n        ...res['headers'],\n        ...rateLimitHeaders(conf),\n      };\n    }\n  }\n  if (!('429' in op.responses)) {\n    op.responses = {\n      ...op.responses,\n      ...rateLimitResponse,\n    };\n  }\n  op['x-tw'].rateLimits = serializeConf(conf);\n}",
        "parameters": [
          {
            "name": "op",
            "text": "op: TwOperationObject",
            "type": "TwOperationObject"
          },
          {
            "name": "conf",
            "text": "conf: RateLimitConfig",
            "type": "RateLimitConfig"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/api/wrapper.ts",
    "exports": [
      {
        "type": "function",
        "name": " endpointWrapper",
        "text": "\n\nexport function endpointWrapper<P = any, R = any, B = any, Q = any>(\n  fn: (req: Request<P, R, B, Q>, res: Response, next?: NextFunction) => any\n) {\n  const wrapped = async function wrapper(\n    req: Request<P, R, B, Q>,\n    res: Response,\n    next: NextFunction\n  ) {\n    try {\n      const result = await fn(req, res, next);\n      // @ts-ignore\n      // isMiddleware is set in /express/middleware.ts\n      // allowAutoResponse in /express/expressRoutesParser.ts\n      if (!res.headersSent && !fn.isMiddleware && wrapped.allowAutoResponse) {\n        logger.warn(`endpointWrapper (${fn.name || '<anonymous>'}): no response sent.`);\n        if (!process.env.TW_ALLOW_AUTO_RESPONSE) return result;\n        if (result) {\n          return res.json(result);\n        } else {\n          return res.status(204).end();\n        }\n      }\n      return result;\n    } catch (e) {\n      logger.error('endpointWrapper', e);\n      addErrorMessageToDatadog(e);\n      if (!res.headersSent) {\n        // @ts-ignore\n        const traceId = req.traceId;\n        if (e instanceof HttpErrorResponse || isLocal) {\n          return res.status(e?.status || 500).json({ message: e?.message, traceId });\n        }\n        return res.status(500).json({ message: 'Internal Server Error', traceId });\n      } else {\n        res.end();\n      }\n    }\n  };\n  return wrapped;\n}",
        "parameters": [
          {
            "name": "fn",
            "text": "fn: (req: Request<P, R, B, Q>, res: Response, next?: NextFunction) => any",
            "type": "(req: Request<P, R, B, Q>, res: Response, next?: NextFunction) => any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/auth/check.ts",
    "exports": [
      {
        "type": "function",
        "name": " checkUserAccessToResource",
        "text": "\n\nexport async function checkUserAccessToResource(\n  user: FirebaseUser | HydraApp | undefined,\n  serviceId: ServicesIdsWithSensory,\n  accountIds: string | string[],\n  options?: { ignoreAdmin?: boolean }\n): Promise<CheckAuthResponse> {\n  const { ignoreAdmin } = options || {};\n  if (!user) return { result: true };\n  const accounts = (Array.isArray(accountIds) ? accountIds : [accountIds]).filter(Boolean);\n  if (!accounts.length || !serviceId) {\n    logger.warn('denied: ', { serviceId, accountIds });\n    return { result: false, message: 'Invalid Resource' };\n  }\n  if (user['admin'] && !(ignoreAdmin || Boolean(process.env.IGNORE_ADMIN))) {\n    return { result: true };\n  }\n  const authType = getAuthType(user);\n  const body: CheckAuthRequest = {\n    type: 'user',\n    serviceId,\n    accountIds,\n  };\n  body.id = user['sub'];\n  try {\n    if (authType === 'app') {\n      body.fromAccountId = user['ext']['claims']['accountId'];\n    }\n  } catch {\n    // for auth0\n    body.id = user['azp'];\n    body.type = 'app';\n  }\n  try {\n    const authResp = await callServiceEndpoint<CheckAuthResponse>('users', 'auth/check', body, {\n      method: 'GET',\n      log: false,\n    });\n    return authResp.data;\n  } catch (e) {\n    const authResp = e.response;\n    if (authResp?.data && authResp.status === 403) {\n      return authResp.data;\n    }\n    logger.error('checkUserAccessToResource', e);\n    throw e;\n  }\n}",
        "parameters": [
          {
            "name": "user",
            "text": "user: FirebaseUser | HydraApp | undefined",
            "type": "FirebaseUser | HydraApp | undefined"
          },
          {
            "name": "serviceId",
            "text": "serviceId: ServicesIdsWithSensory",
            "type": "ServicesIdsWithSensory"
          },
          {
            "name": "accountIds",
            "text": "accountIds: string | string[]",
            "type": "string | string[]"
          },
          {
            "name": "options",
            "text": "options?: { ignoreAdmin?: boolean }",
            "type": "{ ignoreAdmin?: boolean }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/auth/deny.ts",
    "exports": [
      {
        "type": "function",
        "name": " deny",
        "text": "\n\nexport function deny(res: Response, authResponse?: CheckAuthResponse) {\n  const { message = 'Access Denied', code = 403 } = authResponse || {};\n  return res.status(code).send(message);\n}",
        "parameters": [
          {
            "name": "res",
            "text": "res: Response",
            "type": "Response"
          },
          {
            "name": "authResponse",
            "text": "authResponse?: CheckAuthResponse",
            "type": "CheckAuthResponse"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/auth/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/auth/utils.ts",
    "exports": [
      {
        "type": "function",
        "name": " getAuthType",
        "text": "\n\nexport function getAuthType(user): AuthType {\n  if (user.firebase) return 'user';\n  return 'app';\n}",
        "parameters": [
          {
            "name": "user",
            "text": "user",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/authorization/README.md",
    "exports": []
  },
  {
    "file": "@tw/utils/authorization/addRelations.test.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/authorization/addRelations.ts",
    "exports": [
      {
        "name": " RelationParams",
        "text": "\n\nexport type RelationParams = {\n  subjectType: OnlyStringKeys<TWSchema>;\n  resourceType: OnlyStringKeys<TWSchema>;\n  relation: string;\n} & OnlyOne<{\n  resourceId: string;\n  resourceIds: string[];\n}> &\n  OnlyOne<{\n    subjectId: string;\n    subjectIds: string[];\n  }>;",
        "type": "{\n  subjectType: OnlyStringKeys<TWSchema>;\n  resourceType: OnlyStringKeys<TWSchema>;\n  relation: string;\n} & OnlyOne<{\n  resourceId: string;\n  resourceIds: string[];\n}> &\n  OnlyOne<{\n    subjectId: string;\n    subjectIds: string[];\n  }>"
      },
      {
        "name": " RelationValidationError",
        "text": "\n\nexport class RelationValidationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'SchemaValidationError';\n  }\n}",
        "type": " Error"
      },
      {
        "name": " AddAdminToAccountParams",
        "text": "\n\n// ADDERS\n//\n// take the form `add${Relation}To${ResourceType}`\n// e.g. addMemberToAccount\n// NOT addUserToAccount (user is a subject type, not a relation)\n\n// Adding multiple subjects to the same resource:\n//\n// e.g. addMemberToAccount({ accountId: '123', userIds: ['456', '789'] })\n\n// Account\n\n// addAdminToAccount({ accountId: '123', userId: '456' })\n// addAdminToAccount({ accountId: '123', groupId: '456' }) // all members of group 456 will be admins of account 123\nexport type AddAdminToAccountParams = BuildParams<'account', 'user' | 'group'>;",
        "type": "BuildParams<'account', 'user' | 'group'>"
      },
      {
        "name": " addAdminToAccount",
        "text": "\nexport const addAdminToAccount = buildAdder<AddAdminToAccountParams>('account', 'admin', [\n  'user',\n  'group',\n]);",
        "type": "variable"
      },
      {
        "name": " removeAdminFromAccount",
        "text": "\nexport const removeAdminFromAccount = buildRemover<AddAdminToAccountParams>('account', 'admin', [\n  'user',\n  'group',\n]);",
        "type": "variable"
      },
      {
        "name": " AddDataViewerToAccountParams",
        "text": "\n\nexport type AddDataViewerToAccountParams = BuildParams<'account', 'user' | 'group'>;",
        "type": "BuildParams<'account', 'user' | 'group'>"
      },
      {
        "name": " addDataViewerToAccount",
        "text": "\nexport const addDataViewerToAccount = buildAdder<AddDataViewerToAccountParams>(\n  'account',\n  'data_viewer',\n  ['user', 'group']\n);",
        "type": "variable"
      },
      {
        "name": " removeDataViewerFromAccount",
        "text": "\nexport const removeDataViewerFromAccount = buildRemover<AddDataViewerToAccountParams>(\n  'account',\n  'data_viewer',\n  ['user', 'group']\n);",
        "type": "variable"
      },
      {
        "name": " AddMemberToAccountParams",
        "text": "\n\nexport type AddMemberToAccountParams = BuildParams<'account', 'user' | 'group'>;",
        "type": "BuildParams<'account', 'user' | 'group'>"
      },
      {
        "name": " addMemberToAccount",
        "text": "\nexport const addMemberToAccount = buildAdder<AddMemberToAccountParams>('account', 'member', [\n  'user',\n  'group',\n]);",
        "type": "variable"
      },
      {
        "name": " removeMemberFromAccount",
        "text": "\nexport const removeMemberFromAccount = buildRemover<AddMemberToAccountParams>('account', 'member', [\n  'user',\n  'group',\n]);",
        "type": "variable"
      },
      {
        "name": " AddMemberToGroupParams",
        "text": "\n\n// Group\n\nexport type AddMemberToGroupParams = BuildParams<'group', 'user'>;",
        "type": "BuildParams<'group', 'user'>"
      },
      {
        "name": " addMemberToGroup",
        "text": "\nexport const addMemberToGroup = buildAdder<AddMemberToGroupParams>('group', 'member', 'user');",
        "type": "variable"
      },
      {
        "name": " removeMemberFromGroup",
        "text": "\nexport const removeMemberFromGroup = buildRemover<AddMemberToGroupParams>(\n  'group',\n  'member',\n  'user'\n);",
        "type": "variable"
      },
      {
        "name": " AddAdminToGroupParams",
        "text": "\n\nexport type AddAdminToGroupParams = BuildParams<'group', 'user'>;",
        "type": "BuildParams<'group', 'user'>"
      },
      {
        "name": " addAdminToGroup",
        "text": "\nexport const addAdminToGroup = buildAdder<AddAdminToGroupParams>('group', 'admin', 'user');",
        "type": "variable"
      },
      {
        "name": " removeAdminFromGroup",
        "text": "\nexport const removeAdminFromGroup = buildRemover<AddAdminToGroupParams>('group', 'admin', 'user');",
        "type": "variable"
      },
      {
        "name": " AddAdminToProviderParams",
        "text": "\n\n// Provider\n\nexport type AddAdminToProviderParams = BuildParams<'provider', 'user' | 'group'>;",
        "type": "BuildParams<'provider', 'user' | 'group'>"
      },
      {
        "name": " addAdminToProvider",
        "text": "\nexport const addAdminToProvider = buildAdder<AddAdminToProviderParams>('provider', 'admin', [\n  'user',\n  'group',\n]);",
        "type": "variable"
      },
      {
        "name": " removeAdminFromProvider",
        "text": "\nexport const removeAdminFromProvider = buildRemover<AddAdminToProviderParams>('provider', 'admin', [\n  'user',\n  'group',\n]);",
        "type": "variable"
      },
      {
        "name": " AddDataViewerToProviderParams",
        "text": "\n\nexport type AddDataViewerToProviderParams = BuildParams<'provider', 'user' | 'group'>;",
        "type": "BuildParams<'provider', 'user' | 'group'>"
      },
      {
        "name": " addDataViewerToProvider",
        "text": "\nexport const addDataViewerToProvider = buildAdder<AddDataViewerToProviderParams>(\n  'provider',\n  'data_viewer',\n  ['user', 'group']\n);",
        "type": "variable"
      },
      {
        "name": " removeDataViewerFromProvider",
        "text": "\nexport const removeDataViewerFromProvider = buildRemover<AddDataViewerToProviderParams>(\n  'provider',\n  'data_viewer',\n  ['user', 'group']\n);",
        "type": "variable"
      },
      {
        "name": " AddProviderToAccountParams",
        "text": "\n\nexport type AddProviderToAccountParams = BuildParams<'provider', 'account'>;",
        "type": "BuildParams<'provider', 'account'>"
      },
      {
        "name": " addProviderToAccount",
        "text": "\nexport const addProviderToAccount = buildAdder<AddProviderToAccountParams>(\n  'provider',\n  'account',\n  'account'\n);",
        "type": "variable"
      },
      {
        "name": " removeProviderFromAccount",
        "text": "\nexport const removeProviderFromAccount = buildRemover<AddProviderToAccountParams>(\n  'provider',\n  'account',\n  'account'\n);",
        "type": "variable"
      },
      {
        "name": " AddIntegrationToAccountParams",
        "text": "\n\n// Integration\n\nexport type AddIntegrationToAccountParams = BuildParams<'integration', 'account'>;",
        "type": "BuildParams<'integration', 'account'>"
      },
      {
        "name": " addIntegrationToAccount",
        "text": "\nexport const addIntegrationToAccount = buildAdder<AddIntegrationToAccountParams>(\n  'integration',\n  'account',\n  'account'\n);",
        "type": "variable"
      },
      {
        "name": " removeIntegrationFromAccount",
        "text": "\nexport const removeIntegrationFromAccount = buildRemover<AddIntegrationToAccountParams>(\n  'integration',\n  'account',\n  'account'\n);",
        "type": "variable"
      },
      {
        "name": " AddProviderToIntegrationParams",
        "text": "\n\nexport type AddProviderToIntegrationParams = BuildParams<'integration', 'provider'>;",
        "type": "BuildParams<'integration', 'provider'>"
      },
      {
        "name": " addProviderToIntegration",
        "text": "\nexport const addProviderToIntegration = buildAdder<AddProviderToIntegrationParams>(\n  'integration',\n  'provider',\n  'provider'\n);",
        "type": "variable"
      },
      {
        "name": " removeProviderFromIntegration",
        "text": "\nexport const removeProviderFromIntegration = buildRemover<AddProviderToIntegrationParams>(\n  'integration',\n  'provider',\n  'provider'\n);",
        "type": "variable"
      },
      {
        "name": " AddAdminToIntegrationParams",
        "text": "\n\nexport type AddAdminToIntegrationParams = BuildParams<'integration', 'user' | 'group'>;",
        "type": "BuildParams<'integration', 'user' | 'group'>"
      },
      {
        "name": " addAdminToIntegration",
        "text": "\nexport const addAdminToIntegration = buildAdder<AddAdminToIntegrationParams>(\n  'integration',\n  'admin',\n  ['user', 'group']\n);",
        "type": "variable"
      },
      {
        "name": " removeAdminFromIntegration",
        "text": "\nexport const removeAdminFromIntegration = buildRemover<AddAdminToIntegrationParams>(\n  'integration',\n  'admin',\n  ['user', 'group']\n);",
        "type": "variable"
      },
      {
        "name": " AddDataViewerToIntegrationParams",
        "text": "\n\nexport type AddDataViewerToIntegrationParams = BuildParams<'integration', 'user' | 'group'>;",
        "type": "BuildParams<'integration', 'user' | 'group'>"
      },
      {
        "name": " addDataViewerToIntegration",
        "text": "\nexport const addDataViewerToIntegration = buildAdder<AddDataViewerToIntegrationParams>(\n  'integration',\n  'data_viewer',\n  ['user', 'group']\n);",
        "type": "variable"
      },
      {
        "name": " removeDataViewerFromIntegration",
        "text": "\nexport const removeDataViewerFromIntegration = buildRemover<AddDataViewerToIntegrationParams>(\n  'integration',\n  'data_viewer',\n  ['user', 'group']\n);",
        "type": "variable"
      },
      {
        "name": " MakeDashboardPublicParams",
        "text": "\n\n// Dashboard\n// TODO: fix these they dont match the new product requirements\n\nexport type MakeDashboardPublicParams = BuildParams<'dashboard', 'account'>;",
        "type": "BuildParams<'dashboard', 'account'>"
      },
      {
        "name": " makeDashboardPublic",
        "text": "\nexport const makeDashboardPublic = buildAdder<MakeDashboardPublicParams>(\n  'dashboard',\n  'viewer',\n  'account'\n);",
        "type": "variable"
      },
      {
        "name": " MakeDashboardPrivateParams",
        "text": "\n\nexport type MakeDashboardPrivateParams = BuildParams<'dashboard', 'account'>;",
        "type": "BuildParams<'dashboard', 'account'>"
      },
      {
        "name": " makeDashboardPrivate",
        "text": "\nexport const makeDashboardPrivate = buildRemover<MakeDashboardPrivateParams>(\n  'dashboard',\n  'viewer',\n  'account'\n);",
        "type": "variable"
      },
      {
        "name": " AddAdminToDashboardParams",
        "text": "\n\nexport type AddAdminToDashboardParams = BuildParams<'dashboard', 'user'>;",
        "type": "BuildParams<'dashboard', 'user'>"
      },
      {
        "name": " addAdminToDashboard",
        "text": "\nexport const addAdminToDashboard = buildAdder<AddAdminToDashboardParams>(\n  'dashboard',\n  'admin',\n  'user'\n);",
        "type": "variable"
      },
      {
        "name": " AddEditorToDashboardParams",
        "text": "\n\nexport type AddEditorToDashboardParams = BuildParams<'dashboard', 'user'>;",
        "type": "BuildParams<'dashboard', 'user'>"
      },
      {
        "name": " addEditorToDashboard",
        "text": "\nexport const addEditorToDashboard = buildAdder<AddEditorToDashboardParams>(\n  'dashboard',\n  'editor',\n  'user'\n);",
        "type": "variable"
      },
      {
        "name": " AddViewerToDashboardParams",
        "text": "\n\nexport type AddViewerToDashboardParams = BuildParams<'dashboard', 'user'>;",
        "type": "BuildParams<'dashboard', 'user'>"
      },
      {
        "name": " addViewerToDashboard",
        "text": "\nexport const addViewerToDashboard = buildAdder<AddViewerToDashboardParams>(\n  'dashboard',\n  'viewer',\n  'user'\n);",
        "type": "variable"
      },
      {
        "type": "specifier",
        "name": " _test",
        "text": " _test"
      }
    ]
  },
  {
    "file": "@tw/utils/authorization/index.ts",
    "exports": [
      {
        "name": " SCHEMA",
        "text": "\n\nexport const SCHEMA: TWSchema = TW_SCHEMA;",
        "type": "TWSchema"
      },
      {
        "name": " SCHEMA_STRING",
        "text": "\nexport const SCHEMA_STRING = TW_SCHEMA_STRING;",
        "type": "variable"
      },
      {
        "type": "specifier",
        "name": " TWSchema",
        "text": " type TWSchema"
      }
    ]
  },
  {
    "file": "@tw/utils/authorization/integration.ts",
    "exports": [
      {
        "name": " AddNewIntegrationParams",
        "text": "\n\nexport type AddNewIntegrationParams = {\n  accountId: string;\n  providerId: string;\n  integrationId: string;\n};",
        "type": "{\n  accountId: string;\n  providerId: string;\n  integrationId: string;\n}"
      },
      {
        "name": " addNewIntegration",
        "text": "\n\nexport const addNewIntegration = async function _addNewIntegration(\n  params: AddNewIntegrationParams\n) {\n  // the order doesnt matter here, so we can use Promise.all\n  await Promise.all([\n    addIntegrationToAccount({\n      accountId: params.accountId,\n      integrationId: params.integrationId,\n    }),\n    addProviderToAccount({\n      accountId: params.accountId,\n      providerId: params.providerId,\n    }),\n    addProviderToIntegration({\n      integrationId: params.integrationId,\n      providerId: params.providerId,\n    }),\n  ]);\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/authorization/middleware.ts",
    "exports": [
      {
        "type": "function",
        "name": " getAuthorizationMiddleware",
        "text": "\n\nexport function getAuthorizationMiddleware<\n  Req extends Request = Request,\n  Res extends Response = Response,\n  Next extends NextFunction = NextFunction,\n>() {\n  return function authorizationMiddleware(req: Req, res: Res, next: Next) {\n    // TODO\n    next();\n  };\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/utils/authorization/schema/ACCOUNT.md",
    "exports": []
  },
  {
    "file": "@tw/utils/authorization/schema/BUSINESS_UNIT.md",
    "exports": []
  },
  {
    "file": "@tw/utils/authorization/schema/DASHBOARD.md",
    "exports": []
  },
  {
    "file": "@tw/utils/authorization/schema/GROUP.md",
    "exports": []
  },
  {
    "file": "@tw/utils/authorization/schema/INTEGRATION.md",
    "exports": []
  },
  {
    "file": "@tw/utils/authorization/schema/PROVIDER.md",
    "exports": []
  },
  {
    "file": "@tw/utils/authorization/schema/README.md",
    "exports": []
  },
  {
    "file": "@tw/utils/authorization/schema/USER.md",
    "exports": []
  },
  {
    "file": "@tw/utils/authorization/schema/account.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/authorization/schema/businessUnit.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/authorization/schema/common.ts",
    "exports": [
      {
        "name": " belongsToOneAccount",
        "text": "export const belongsToOneAccount = 'relation account: account' as const;",
        "type": "variable"
      },
      {
        "name": " userOrGroupMember",
        "text": "\n\nexport const userOrGroupMember = 'user | group#member' as const;",
        "type": "variable"
      },
      {
        "name": " hasManyAdmins",
        "text": "\n\nexport const hasManyAdmins = `relation admin: ${userOrGroupMember}` as const;",
        "type": "variable"
      },
      {
        "name": " hasManyDataViewers",
        "text": "\n\nexport const hasManyDataViewers = `relation data_viewer: ${userOrGroupMember}` as const;",
        "type": "variable"
      },
      {
        "name": " adminCanManage",
        "text": "\n\nexport const adminCanManage = `permission manage = admin` as const;",
        "type": "variable"
      },
      {
        "name": " accountManagerCanManage",
        "text": "\n\nexport const accountManagerCanManage = `permission manage = account->manage` as const;",
        "type": "variable"
      },
      {
        "name": " accountManagerOrAdminCanManage",
        "text": "\n\nexport const accountManagerOrAdminCanManage =\n  `permission manage = account->manage + admin` as const;",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/authorization/schema/dashboard.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/authorization/schema/group.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/authorization/schema/index.ts",
    "exports": [
      {
        "name": " TW_SCHEMA_STRING",
        "text": "\n\nexport const TW_SCHEMA_STRING = schema;",
        "type": "variable"
      },
      {
        "name": " TW_SCHEMA",
        "text": "\nexport const TW_SCHEMA = schemaAsObject;",
        "type": "variable"
      },
      {
        "name": " TWSchema",
        "text": "\nexport type TWSchema = typeof TW_SCHEMA;",
        "type": "typeof TW_SCHEMA"
      }
    ]
  },
  {
    "file": "@tw/utils/authorization/schema/integration.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/authorization/schema/provider.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/authorization/schema/translate.test.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/authorization/schema/translate.ts",
    "exports": [
      {
        "type": "function",
        "name": " translateSchema",
        "text": "\n\nexport function translateSchema(spiceDBString: string): Schema {\n  const definitions = spiceDBString\n    .split('definition')\n    .slice(1)\n    .map((s) => s.trim())\n    .map((s) => `definition ${s}`);\n  return definitions.reduce((acc, d) => ({ ...acc, ...translateDefinition(d) }), {});\n}",
        "parameters": [
          {
            "name": "spiceDBString",
            "text": "spiceDBString: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " checkTWSchema",
        "text": "\n\nexport function checkTWSchema(schema: Schema) {\n  for (let key of Object.keys(schema)) {\n    if (!(TWSpiceResources as any).includes(key)) {\n      throw new Error(`Spice schema has an invalid resource: ${key}!`);\n    }\n  }\n  for (let required of TWSpiceResources) {\n    if (!schema[required]) {\n      throw new Error(`Spice schema is missing a resource: ${required}!`);\n    }\n  }\n}",
        "parameters": [
          {
            "name": "schema",
            "text": "schema: Schema",
            "type": "Schema"
          }
        ]
      },
      {
        "name": " _test",
        "text": "\n\nexport const _test = {\n  translateDefinition,\n  translatePermission,\n  translateRelation,\n  getName,\n  getRelations,\n  getPermissions,\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/authorization/schema/user.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/authorization/types.ts",
    "exports": [
      {
        "type": "specifier",
        "name": "\n  Definition",
        "text": "\n  Definition"
      },
      {
        "type": "specifier",
        "name": "\n  Permission",
        "text": "\n  Permission"
      },
      {
        "type": "specifier",
        "name": "\n  Permissions",
        "text": "\n  Permissions"
      },
      {
        "type": "specifier",
        "name": "\n  Relation",
        "text": "\n  Relation"
      },
      {
        "type": "specifier",
        "name": "\n  Relations",
        "text": "\n  Relations"
      },
      {
        "type": "specifier",
        "name": "\n  Schema",
        "text": "\n  Schema"
      },
      {
        "type": "specifier",
        "name": "\n  SpiceSchemaString",
        "text": "\n  SpiceSchemaString"
      },
      {
        "type": "specifier",
        "name": "\n  ResourceRelationKeys",
        "text": "\n  ResourceRelationKeys"
      },
      {
        "type": "specifier",
        "name": "\n  ResourcePermissionKeys",
        "text": "\n  ResourcePermissionKeys"
      },
      {
        "type": "specifier",
        "name": "\n  ValidRelationSubjects",
        "text": "\n  ValidRelationSubjects"
      },
      {
        "type": "specifier",
        "name": "\n  ValidPermissionSubjects",
        "text": "\n  ValidPermissionSubjects"
      },
      {
        "type": "specifier",
        "name": "\n  AnySchemaRelationName",
        "text": "\n  AnySchemaRelationName"
      }
    ]
  },
  {
    "file": "@tw/utils/authorization/validate.test.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/authorization/validate.ts",
    "exports": [
      {
        "type": "function",
        "name": " validateOneRelation",
        "text": "\n\nexport function validateOneRelation({\n  subjectId,\n  subjectType,\n  resourceId,\n  resourceType,\n  relation,\n}: Omit<RelationParams, 'subjectIds'>) {\n  const errors: string[] = [];\n  if (!resourceType) {\n    errors.push('Resource type is required');\n  }\n  if (!relation) {\n    errors.push('Relation is required');\n  }\n  if (!subjectType) {\n    errors.push('Subject type is required');\n  }\n  if (!resourceId) {\n    errors.push('Resource id is required');\n  }\n  if (!subjectId) {\n    errors.push('Subject id is required');\n  }\n  if (errors.length) {\n    return errors;\n  }\n  if (!TW_SCHEMA[resourceType]) {\n    return [`No resource type ${resourceType} in authorization schema`];\n  }\n  if (!TW_SCHEMA[resourceType]?.['relations']?.[relation]) {\n    return [`No relation ${relation} on resource type ${resourceType}`];\n  }\n  if (!TW_SCHEMA[subjectType]) {\n    return [`No subject type ${subjectType} in authorization schema`];\n  }\n  if (!TW_SCHEMA[resourceType]?.['relations']?.[relation]?.[subjectType]) {\n    return [\n      `Subject type ${subjectType} is not valid for relation ${relation} in resource type ${resourceType}`,\n    ];\n  }\n  return errors;\n}",
        "parameters": [
          {
            "name": "{\n  subjectId,\n  subjectType,\n  resourceId,\n  resourceType,\n  relation,\n}",
            "text": "{\n  subjectId,\n  subjectType,\n  resourceId,\n  resourceType,\n  relation,\n}: Omit<RelationParams, 'subjectIds'>",
            "type": "Omit<RelationParams, 'subjectIds'>"
          }
        ]
      },
      {
        "type": "function",
        "name": " validateRelations",
        "text": "\n\nexport function validateRelations({\n  subjectIds,\n  subjectId,\n  subjectType,\n  resourceId,\n  resourceType,\n  relation,\n}: RelationParams) {\n  subjectIds = [...(subjectIds || []), subjectId].map((id) => id ?? '');\n  return subjectIds\n    .map((id) => {\n      if (!id) {\n        return ['Subject id is required'];\n      }\n      return validateOneRelation({\n        subjectId: id,\n        subjectType,\n        resourceId,\n        resourceType,\n        relation,\n      });\n    })\n    .flat();\n}",
        "parameters": [
          {
            "name": "{\n  subjectIds,\n  subjectId,\n  subjectType,\n  resourceId,\n  resourceType,\n  relation,\n}",
            "text": "{\n  subjectIds,\n  subjectId,\n  subjectType,\n  resourceId,\n  resourceType,\n  relation,\n}: RelationParams",
            "type": "RelationParams"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/authorizeUser.ts",
    "exports": [
      {
        "type": "function",
        "name": " authorizeUser",
        "text": "\n\nexport async function authorizeUser(perm: string, headers: any, func: any, params: any[] = []) {\n  const admin = await initializeFirebaseApp(Admin);\n  let user = await admin.auth().verifyIdToken(headers.authorization.split('Bearer ')[1]);\n\n  const usersInShop = await admin.firestore().collection('users').doc(user.uid).get();\n\n  const roles = usersInShop.data()?.shops[headers.shop_domain].accessRoles || [];\n\n  console.log('roles', roles);\n  if (roles.includes(perm)) {\n    return func(...params);\n  } else {\n    return false;\n  }\n}",
        "parameters": [
          {
            "name": "perm",
            "text": "perm: string",
            "type": "string"
          },
          {
            "name": "headers",
            "text": "headers: any",
            "type": "any"
          },
          {
            "name": "func",
            "text": "func: any",
            "type": "any"
          },
          {
            "name": "params",
            "text": "params: any[] = []",
            "type": "any[]"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/axios/client.ts",
    "exports": [
      {
        "name": " axiosInterceptors",
        "text": "\n\nexport const axiosInterceptors = {\n  request: [],\n  response: [],\n};",
        "type": "variable"
      },
      {
        "type": "function",
        "name": " getAxiosClient",
        "text": "\n\nexport function getAxiosClient(\n  args: {\n    axiosRetryConfig?: IAxiosRetryConfig;\n    keepAlive?: boolean;\n    axiosOptions?: CreateAxiosDefaults;\n  } = {}\n): AxiosInstance {\n  const { axiosRetryConfig, keepAlive, axiosOptions } = args;\n  const options: CreateAxiosDefaults = {\n    httpsAgent,\n    httpAgent,\n    timeout: defaultTimeout,\n    ...axiosOptions,\n  };\n\n  if (keepAlive) {\n    options.httpsAgent = keepAliveHttpsAgent;\n    options.httpAgent = keepAliveAgent;\n  }\n  const client = axios.create(options);\n  for (const interceptor of axiosInterceptors.request) {\n    client.interceptors.request.use(interceptor);\n  }\n  for (const interceptor of axiosInterceptors.response) {\n    client.interceptors.response.use(interceptor);\n  }\n\n  axiosRetry(client, {\n    onRetry: (retryCount, error, requestConfig) => {\n      logger.error(\n        `axiosRetry: doing retry ${retryCount} on error: ${error}, url: ${requestConfig.url}`\n      );\n    },\n    retries: isLocal ? 0 : 3,\n    retryCondition: (error) => {\n      return (\n        [408, 429, 502, 503, 504].includes(error?.response?.status) || error?.code === 'ECONNRESET'\n      );\n    },\n    ...axiosRetryConfig,\n  });\n\n  return client;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n    axiosRetryConfig?: IAxiosRetryConfig;\n    keepAlive?: boolean;\n    axiosOptions?: CreateAxiosDefaults;\n  } = {}",
            "type": "{\n    axiosRetryConfig?: IAxiosRetryConfig;\n    keepAlive?: boolean;\n    axiosOptions?: CreateAxiosDefaults;\n  }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/axios/error.ts",
    "exports": [
      {
        "type": "function",
        "name": " makePrettyAxiosError",
        "text": "\n\nexport function makePrettyAxiosError(error: AxiosError | any) {\n  if (!error.response) {\n    return error;\n  }\n  const { response } = error;\n  const { data, status, statusText } = response;\n  const pretty = new Error();\n  pretty.message =\n    typeof data === 'string'\n      ? data\n      : `${error.message} [${status} ${statusText}]: ${JSON.stringify(data, null, 2)}`;\n  pretty.stack = error.stack;\n  return pretty;\n}",
        "parameters": [
          {
            "name": "error",
            "text": "error: AxiosError | any",
            "type": "AxiosError | any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/axios/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/bigtable/client.ts",
    "exports": [
      {
        "type": "function",
        "name": " getBigtableClient",
        "text": "\n\nexport function getBigtableClient(args?: { projectId: string }) {\n  const project = args?.projectId || projectId;\n  if (!storageClients[project]) {\n    storageClients[project] = new Bigtable({ projectId: project });\n  }\n  return storageClients[project];\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args?: { projectId: string }",
            "type": "{ projectId: string }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/bigtable/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/bq/client.ts",
    "exports": [
      {
        "type": "function",
        "name": " getBQClient",
        "text": "\n\nexport function getBQClient(args: { projectId?: string } = {}) {\n  const { projectId = bqResourceProject } = args;\n  if (clients[projectId]) return clients[projectId];\n  const bigquery = new BigQuery({ projectId });\n  clients[projectId] = bigquery;\n  bigquery.query = (async (...args) => {\n    let span: Span;\n    const context = getStoreKey('context');\n    const logParams = getStoreKey('logParams');\n    const resourceName = context.req?.route?.path || logParams.wsEventName;\n    let referer;\n    if (context.req?.headers?.referer) {\n      referer = new URL(context.req.headers.referer).pathname;\n    }\n    const appComponent = calculateAppComponent(referer);\n    const jobTimeoutMs = context.uf ? 1000 * 60 * 2 : undefined;\n    const shopId = logParams.shopId\n      ? logParams.shopId.split('.myshopify.com')[0].replaceAll('.', '-').toLowerCase().slice(0, 62)\n      : 'unknown';\n    let options: Query = {\n      jobTimeoutMs,\n      labels: {\n        'shop-id': shopId,\n      },\n    };\n    if (typeof args[0] === 'string') {\n      options = {\n        ...options,\n        query: args[0],\n        ...args[1],\n      };\n    } else {\n      options = {\n        ...options,\n        ...args[0],\n      };\n    }\n\n    if (tracer) {\n      span = tracer.startSpan('bq.job', {\n        childOf: tracer.scope().active(),\n        tags: {\n          'resource.name': resourceName || 'bq.job',\n          'service.name': `${serviceId}-bq`,\n          'tw.shopId': logParams.shopId,\n          'tw.traceId': context.traceId,\n          'tw.userId': logParams.userId,\n          'tw.referer': referer,\n          'tw.appComponent': appComponent,\n          'bq.bq_project_id': projectId,\n          component: 'bq',\n        },\n      });\n      span.setBaggageItem('service.name', `${serviceId}-bq`);\n    }\n    return safeActivateSpan(span, async () => {\n      let jobId;\n      const timer = new Timer();\n      let success = true;\n      try {\n        timer.start();\n        const [job] = await bigquery.createQueryJob(options);\n        jobId = job.id;\n        const [res] = await job.getQueryResults();\n        timer.end();\n        return [res, job];\n      } catch (e) {\n        success = false;\n        jobId = e.response?.jobReference?.jobId;\n        if (tracer) {\n          addErrorMessageToDatadog(e);\n        }\n        logger.error(e);\n        throw e;\n      } finally {\n        bigquery\n          .job(jobId)\n          .getMetadata()\n          .then((metadata) => {\n            // https://cloud.google.com/bigquery/docs/reference/rest/v2/Job\n            try {\n              if (span) {\n                const statistics = metadata[0].statistics || {};\n                const query = statistics.query || {};\n                const shuffleOutputBytes = calculateShuffleOutputBytes(query);\n                const tablesAsList = getReferencedTables(query);\n                const tables = tablesAsList.join(':');\n                const cacheHit = query.cacheHit || false;\n                const biEngineMode = calculateBiEngineMode(statistics?.query);\n                const uf = String(context.uf);\n                const ddTags = {\n                  bq_project_id: projectId,\n                  resource_name: resourceName,\n                  cache_hit: cacheHit,\n                  tables: crypto.createHash('md5').update(tables).digest('hex'),\n                  success: String(success),\n                  biEngineMode,\n                  uf,\n                  referer,\n                  appComponent,\n                };\n                span.setTag('bq.uf', uf);\n                span.setTag('bq.jobId', jobId);\n                span.setTag('bq.tables', tables);\n                span.setTag('bq.cache_hit', String(cacheHit));\n                span.setTag('bq.success', success);\n                span.setTag('bq.bi_engine_mode', biEngineMode);\n                span.setTag(\n                  'tw.jobMetadata',\n                  `http://devops.srv.whale3.io/bq/job?projectId=${projectId}&jobId=${jobId}`\n                );\n                span.setTag(\n                  'tw.jobInfo',\n                  `https://console.cloud.google.com/bigquery?project=${projectId}&j=bq:US:${jobId}&page=queryresults`\n                );\n                const { ghostTime, totalTime, queueTime, finalExecutionTime } =\n                  calculateQueryTimes(statistics);\n                const twTotalTime = timer.elapsed().ms;\n                const increments = {\n                  'bq.jobs': 1,\n                  'bq.total_bytes_processed': statistics.totalBytesProcessed || 0,\n                  'bq.estimated_max_slots': calculateEstimatedMaxSlots(query),\n                  'bq.tw_total_time_ms': twTotalTime,\n                  'bq.total_slot_ms': statistics.totalSlotMs,\n                  'bq.ghost_time_ms': ghostTime,\n                  'bq.total_time_ms': totalTime,\n                  'bq.final_execution_duration_ms': finalExecutionTime,\n                  'bq.queued_time_ms': queueTime,\n                  'bq.shuffle_output_bytes': shuffleOutputBytes,\n                };\n                submitDDMetrics({\n                  metrics: increments,\n                  metricType: 'increment',\n                  tags: ddTags,\n                });\n                if (!isLocal)\n                  callPubSub(\n                    'bigquery-job-stats',\n                    {\n                      shopId: logParams.shopId,\n                      userId: logParams.userId,\n                      userEmail: context.req?.user?.email || context.socket?.user?.email,\n                      jobId,\n                      traceId: context.traceId,\n                      resourceName,\n                      bqProjectId: projectId,\n                      serviceId,\n                      uf: context.uf,\n                      referer,\n                      twTotalTime,\n                      success,\n                    },\n                    {},\n                    { batching: { maxMessages: 100, maxMilliseconds: 10 * 1000 } }\n                  ).catch((e) => {\n                    logger.error(e);\n                  });\n                span.finish();\n              }\n            } catch (e) {\n              logger.error(e);\n              if (span) span.finish();\n            }\n          })\n          .catch(() => {});\n      }\n    });\n  }) as any;\n  return bigquery;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { projectId?: string } = {}",
            "type": "{ projectId?: string }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/bq/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/bq/utils.ts",
    "exports": [
      {
        "type": "function",
        "name": " getReferencedTables",
        "text": "export function getReferencedTables(query: any) {\n  const referencedTables = query?.referencedTables || [];\n  const referencedTableNames = referencedTables.map((t) => t.tableId);\n  const uniqueTables = [...new Set(referencedTableNames)];\n  return uniqueTables.sort();\n}",
        "parameters": [
          {
            "name": "query",
            "text": "query: any",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " calculateQueryTimes",
        "text": "\n\nexport function calculateQueryTimes(statistics: any) {\n  const ghostTime =\n    statistics?.endTime - statistics?.startTime - statistics?.finalExecutionDurationMs;\n  const totalTime = statistics?.endTime - statistics?.creationTime;\n  const queueTime = statistics?.startTime - statistics?.creationTime;\n  const finalExecutionTime = statistics?.finalExecutionDurationMs;\n  return { ghostTime, totalTime, queueTime, finalExecutionTime };\n}",
        "parameters": [
          {
            "name": "statistics",
            "text": "statistics: any",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " calculateShuffleOutputBytes",
        "text": "\n\nexport function calculateShuffleOutputBytes(query: any) {\n  return query?.queryPlan?.reduce((acc, plan) => acc + Number(plan.shuffleOutputBytes), 0);\n}",
        "parameters": [
          {
            "name": "query",
            "text": "query: any",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " calculateBiEngineMode",
        "text": "\n\nexport function calculateBiEngineMode(query: any) {\n  return query?.biEngineStatistics?.biEngineMode || 'disabled';\n}",
        "parameters": [
          {
            "name": "query",
            "text": "query: any",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " calculateAppComponent",
        "text": "\n\nexport function calculateAppComponent(referer: string): string {\n  if (referer === undefined) {\n    return 'unknown';\n  }\n  if (referer == '/chat') {\n    return 'chat';\n  }\n  if (referer.startsWith('/dashboards')) {\n    return 'dashboards';\n  }\n  if (referer == '/sql-editor') {\n    return 'sql-editor';\n  }\n  return '2.0';\n}",
        "parameters": [
          {
            "name": "referer",
            "text": "referer: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " calculateEstimatedMaxSlots",
        "text": "\n\nexport function calculateEstimatedMaxSlots(query: any) {\n  return (\n    query?.timeline?.reduce((max, obj) => {\n      return Number(obj?.activeUnits) > max ? Number(obj?.activeUnits) : max;\n    }, Number(query?.timeline[0]?.activeUnits || 0)) || 0\n  );\n}",
        "parameters": [
          {
            "name": "query",
            "text": "query: any",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/callPubSub.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/callServiceEndpoint.ts",
    "exports": [
      {
        "type": "function",
        "name": " callServiceEndpoint",
        "text": "\n\nexport async function callServiceEndpoint<R = any, T = any>(\n  serviceId: string,\n  endpoint: string,\n  params: T,\n  options: {\n    projectId?: string;\n    method?: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH';\n    headers?: Partial<IncomingHttpHeaders>;\n    axiosRetryConfig?: IAxiosRetryConfig;\n    log?: boolean;\n    forceCloud?: boolean;\n    bearerToken?: string;\n    params?: any;\n    deployment?: string;\n    stack?: string;\n    localPort?: number;\n    keepAlive?: boolean;\n    axiosInstance?: AxiosInstance;\n    timeout?: number; // ms\n  } = {}\n): Promise<AxiosResponse<R, T>> {\n  const {\n    log = true,\n    axiosRetryConfig,\n    forceCloud,\n    bearerToken,\n    deployment,\n    stack,\n    axiosInstance,\n    keepAlive = true,\n    timeout,\n  } = options;\n  const local = isLocal && !forceCloud;\n  const logParams = getStoreKey('logParams');\n  const context = getStoreKey('context');\n  const { baseUrl, audience } = await getBaseUrl(\n    serviceId,\n    options?.projectId || process.env.PROJECT_ID,\n    {\n      local,\n      deployment,\n      stack,\n      localPort: options.localPort,\n      useUfDeployment: context.uf,\n    }\n  );\n  const client = axiosInstance || getAxiosClient({ axiosRetryConfig, keepAlive });\n  const url = baseUrl + '/' + endpoint;\n  const method = options?.method || 'POST';\n\n  if (log)\n    logger.info(\n      `${isLocal ? new Date().toISOString() + ': ' : ''}requesting internal url: ${url} [${method}]`\n    );\n\n  try {\n    const requestOptions: AxiosRequestConfig = {\n      url,\n      method,\n      params: options.params || {},\n      timeout,\n    };\n    if (method === 'GET') {\n      requestOptions.params = options.params || params;\n    } else {\n      requestOptions.data = params;\n    }\n\n    if (isLocal && forceCloud) {\n      requestOptions.params.forceCloud = 'true';\n    }\n\n    const addedHeaders: Partial<IncomingHttpHeaders> = {};\n    if (logParams.shopId) addedHeaders['x-tw-shop-id'] = logParams.shopId;\n    if (context.traceId) addedHeaders['X-Cloud-Trace-Context'] = context.traceId + '/0;o=1';\n    if (context.uf) addedHeaders['x-tw-uf'] = 'true';\n    if (context.req?.headers['referer']) addedHeaders['referer'] = context.req.headers['referer'];\n\n    if (audience) {\n      addedHeaders['authorization'] = `Bearer ${bearerToken || (await getIdToken(audience))}`;\n    }\n\n    if (!options.headers?.['user-agent']) {\n      addedHeaders['user-agent'] = `${process.env.SERVICE_ID}/${process.env.TW_VERSION}`;\n    }\n\n    requestOptions.headers = {\n      ...addedHeaders,\n      'x-tw-service-id': process.env.SERVICE_ID,\n      ...options.headers,\n    };\n    const response = await client.request<any, AxiosResponse<R, T>>(requestOptions);\n    if (log) logger.info(`${isLocal ? new Date().toISOString() + ': ' : ''}done request to ${url}`);\n    return response;\n  } catch (err) {\n    if (isLocal && err.code === '404') {\n      logger.error(`Got 404 when trying to call ${serviceId}, Service might not be running`);\n      return err;\n    }\n    logger.error(`callServiceEndpoint: Error calling ${url}`, isLocal ? '' : prettyAxiosError(err));\n    throw err;\n  }\n}",
        "parameters": [
          {
            "name": "serviceId",
            "text": "serviceId: string",
            "type": "string"
          },
          {
            "name": "endpoint",
            "text": "endpoint: string",
            "type": "string"
          },
          {
            "name": "params",
            "text": "params: T",
            "type": "T"
          },
          {
            "name": "options",
            "text": "options: {\n    projectId?: string;\n    method?: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH';\n    headers?: Partial<IncomingHttpHeaders>;\n    axiosRetryConfig?: IAxiosRetryConfig;\n    log?: boolean;\n    forceCloud?: boolean;\n    bearerToken?: string;\n    params?: any;\n    deployment?: string;\n    stack?: string;\n    localPort?: number;\n    keepAlive?: boolean;\n    axiosInstance?: AxiosInstance;\n    timeout?: number; // ms\n  } = {}",
            "type": "{\n    projectId?: string;\n    method?: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH';\n    headers?: Partial<IncomingHttpHeaders>;\n    axiosRetryConfig?: IAxiosRetryConfig;\n    log?: boolean;\n    forceCloud?: boolean;\n    bearerToken?: string;\n    params?: any;\n    deployment?: string;\n    stack?: string;\n    localPort?: number;\n    keepAlive?: boolean;\n    axiosInstance?: AxiosInstance;\n    timeout?: number; // ms\n  }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/cleanString.ts",
    "exports": [
      {
        "type": "function",
        "name": " cleanString",
        "text": "export function cleanString(val: any) {\n  if (typeof val === 'string') {\n    return val\n      .replaceAll('\\\\\\\\u0000', '')\n      .replaceAll('\\\\u0000', '')\n      .replaceAll('\\u0000', '')\n      .trim();\n  } else if (typeof val === 'number') {\n    return val;\n  } else {\n    return val || null;\n  }\n}",
        "parameters": [
          {
            "name": "val",
            "text": "val: any",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/clickhouse/client.ts",
    "exports": [
      {
        "type": "function",
        "name": " getClickHouseClient",
        "text": "\n\nexport async function getClickHouseClient(args: { name: string }): Promise<ClickHouseClient> {\n  const config = await getClickhouseConnectionConfig(args);\n  return createClient(config);\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { name: string }",
            "type": "{ name: string }"
          }
        ]
      },
      {
        "type": "function",
        "name": " getClickhouseSecret",
        "text": "\n\nexport async function getClickhouseSecret(name: string) {\n  return JSON.parse(await getSecretFromManager(`${name}-clickhouse`));\n}",
        "parameters": [
          {
            "name": "name",
            "text": "name: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " getClickhouseConnectionConfig",
        "text": "\n\nexport async function getClickhouseConnectionConfig(args?: {\n  name: string;\n  replicaName?: string;\n}): Promise<NodeClickHouseClientConfigOptions> {\n  const { name = 'sonic-cluster', replicaName } = args || {};\n  const secret = await getClickhouseSecret(name);\n  const domain = replicaName\n    ? secret.replicas.find((r: any) => r.name === replicaName).domain\n    : secret.clickhouseTcpDomain;\n  const config = {\n    url: `http://${domain}:8123`,\n    username: secret.username,\n    password: secret.password,\n  };\n  return config;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args?: {\n  name: string;\n  replicaName?: string;\n}",
            "type": "{\n  name: string;\n  replicaName?: string;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/clickhouse/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/clock.test.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/clock.ts",
    "exports": [
      {
        "type": "function",
        "name": " monotonic",
        "text": "export function monotonic(\n  opt: {\n    nanoseconds?: boolean;\n  } = {}\n): number {\n  const time = process.hrtime.bigint();\n  return opt.nanoseconds ? Number(time) : Math.floor(Number(time) / 1000000); // convert to milliseconds\n}",
        "parameters": [
          {
            "name": "opt",
            "text": "opt: {\n    nanoseconds?: boolean;\n  } = {}",
            "type": "{\n    nanoseconds?: boolean;\n  }"
          }
        ]
      },
      {
        "name": " Timer",
        "text": "\n\nexport class Timer {\n  marks: { name: string; timestamp: number; duration: number }[] = [];\n  start_time: bigint;\n  end_time: bigint;\n  ms: number;\n  nanoseconds: number;\n  running: boolean;\n  constructor() {\n    this.ms = 0;\n    this.nanoseconds = 0;\n  }\n  start() {\n    if (this.running) {\n      throw new Error('Timer is already running');\n    }\n    this.start_time = process.hrtime.bigint();\n    this.running = true;\n    return this;\n  }\n  end() {\n    if (!this.running) return this;\n    this.end_time = process.hrtime.bigint();\n    let elapsed = Number(this.end_time - this.start_time);\n    this.nanoseconds += elapsed;\n    this.ms += elapsed / 1000000;\n    this.running = false;\n    return this;\n  }\n  elapsed() {\n    if (!this.running) return { ms: this.ms, nanoseconds: this.nanoseconds };\n    const elapsed = Number(process.hrtime.bigint() - this.start_time);\n    return {\n      nanoseconds: elapsed,\n      ms: elapsed / 1000000,\n    };\n  }\n  mark(name: string) {\n    if (!this.running) return this;\n    const prevIdx = this.marks.length - 1;\n    const elapsed = this.elapsed().nanoseconds;\n    this.marks.push({\n      name,\n      timestamp: elapsed,\n      duration: elapsed - (prevIdx >= 0 ? this.marks[prevIdx].timestamp : 0),\n    });\n    return this;\n  }\n  marksData(ns: boolean = false) {\n    const roundTo = ns ? 'nanosecond' : 'millisecond';\n    return this.marks.reduce((acc, { name, duration }) => {\n      return { ...acc, [name]: { ms: duration / 1000000, nanoseconds: duration } };\n    }, {});\n  }\n  log(ns: boolean = false) {\n    if (this.running) this.end();\n    const roundTo = ns ? 'nanosecond' : 'millisecond';\n    return [\n      ...this.marks.map(({ name, duration }) => {\n        return `${name}= ${formatDurationNanoseconds(duration, { roundTo })}`;\n      }),\n      `Total= ${formatDurationNanoseconds(this.nanoseconds, { roundTo })}`,\n    ].join('; ');\n  }\n  reset() {\n    this.start_time = 0n;\n    this.end_time = 0n;\n    this.ms = 0;\n    this.nanoseconds = 0;\n    this.running = false;\n    return this;\n  }\n  duration({ roundTo, long }: { roundTo?: (typeof granularities)[number]; long?: boolean } = {}) {\n    return formatDurationNanoseconds(this.nanoseconds, { roundTo, long });\n  }\n}",
        "type": "class"
      },
      {
        "type": "function",
        "name": " formatDurationNanoseconds",
        "text": "\n\nexport function formatDurationNanoseconds(\n  ns: number,\n  { roundTo, long }: { roundTo?: (typeof granularities)[number]; long?: boolean } = {}\n) {\n  const round = roundTo ? granularities.indexOf(roundTo) : -1;\n  const time = granularities.reduce((acc, key, i) => {\n    acc[key] = 0;\n    return acc;\n  }, {});\n  granularities.reduce((left, key, i) => {\n    if (round > -1 && i > round) return left;\n    if (round === i) {\n      time[key] = Math.round(left / amounts[i]);\n      left = 0;\n    } else if (round === -1 && i === granularities.length - 1) {\n      time[key] = left / amounts[i];\n      left = 0;\n    } else {\n      const units = Math.floor(left / amounts[i]);\n      time[key] = units;\n      left = left - units * amounts[i];\n    }\n    return left;\n  }, ns);\n  return Object.entries(time)\n    .filter(([key, val], i) => (val !== 0 || i === round) && (round === -1 || i <= round))\n    .map(([key, val]: [string, number], i) => `${val}${long ? longKey(key, val) : shortKey(key)}`)\n    .join(long ? ', ' : ' ');\n}",
        "parameters": [
          {
            "name": "ns",
            "text": "ns: number",
            "type": "number"
          },
          {
            "name": "{ roundTo, long }",
            "text": "{ roundTo, long }: { roundTo?: (typeof granularities)[number]; long?: boolean } = {}",
            "type": "{ roundTo?: (typeof granularities)[number]; long?: boolean }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/cloudRun/cloudRunServices.ts",
    "exports": [
      {
        "type": "function",
        "name": " getCloudRunServiceUrl",
        "text": "\n\nexport async function getCloudRunServiceUrl(\n  serviceName: string,\n  projectId: string = process.env.PROJECT_ID\n): Promise<string> {\n  const cloudRunServices = await cloudRunServicesCache.fetch('cloudRunServices', {\n    allowStale: true,\n  });\n  const service = cloudRunServices[projectId][serviceName];\n  return service?.status?.address?.url;\n}",
        "parameters": [
          {
            "name": "serviceName",
            "text": "serviceName: string",
            "type": "string"
          },
          {
            "name": "projectId",
            "text": "projectId: string = process.env.PROJECT_ID",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/compliance/dataDeletion.ts",
    "exports": [
      {
        "name": " DataDeletionParams",
        "text": "\n\nexport type DataDeletionParams = { shopId: string; requestId: string; shopCreatedAt: Date };",
        "type": "{ shopId: string; requestId: string; shopCreatedAt: Date }"
      },
      {
        "name": " ErrorResponse",
        "text": "\n\nexport type ErrorResponse = {\n  canBeRetried?: boolean;\n  errorMessage?: string;\n};",
        "type": "{\n  canBeRetried?: boolean;\n  errorMessage?: string;\n}"
      },
      {
        "name": " DataDeletionEndpointArgs",
        "text": "\n\nexport type DataDeletionEndpointArgs = {\n  endpoint?: string;\n  handler: (args: DataDeletionParams) => Promise<string>;\n  errorHandler?: (error: any, context: DataDeletionParams) => Promise<ErrorResponse>;\n} & ({ router: Router; app?: never } | { app: Express; router?: never });",
        "type": "{\n  endpoint?: string;\n  handler: (args: DataDeletionParams) => Promise<string>;\n  errorHandler?: (error: any, context: DataDeletionParams) => Promise<ErrorResponse>;\n} & ({ router: Router; app?: never } | { app: Express; router?: never })"
      },
      {
        "type": "function",
        "name": " createDataDeletionEndpoint",
        "text": "\n\n// To use:\n//\n// pass this function the router, the handler function, and optionally the errorHandler function\n//\n// * the handler function should return a string message on success (e.g. '173 Rows deleted successfully')\n//\n// * the errorHandler function should return an object with canBeRetried and errorMessage properties\n//   - e.g. the shopId is somehow invalid, error can't be retried: { canBeRetried: false, errorMessage: 'Invalid shopId' }\n//      - in this case, the pubsub subscription will not call the endpoint again, but the data deletion error topic will be called\n//        and the message will be handled by the compliance service\n//   - e.g. the shopId is valid, but the database is down, error can be retried: { canBeRetried: true, errorMessage: 'DB Connection error' }\n//      - in this case, the pubsub subscription will call the endpoint on your service again\n//   - note that `canBeRetried` defaults to true if not provided\nexport function createDataDeletionEndpoint(args: DataDeletionEndpointArgs) {\n  async function _dataDeletionEndpoint(req: Request, res: Response) {\n    const shopCreatedAt = new Date(req.body.data.shopCreatedAt);\n    const payload = {\n      ...req.body.data,\n      shopCreatedAt,\n    } as DataDeletionParams;\n    await callDataDeletionBeginTopic(payload);\n    let error: boolean = false;\n    let successMessage: string;\n    try {\n      successMessage = await args.handler(payload);\n      await callDataDeletionSuccessTopic(req.body as DataDeletionParams, successMessage);\n      res.sendStatus(204);\n    } catch (e: any) {\n      const { canBeRetried = true, errorMessage = 'Error' } = args.errorHandler\n        ? await args.errorHandler(e, payload)\n        : { canBeRetried: true };\n      logger.error({ err: e, canBeRetried, errorMessage }, 'Error deleting data');\n      if (!canBeRetried) {\n        await callDataDeletionFailureTopic(payload, errorMessage);\n        res.sendStatus(204); // ACK -- won't retry\n      } else {\n        res.sendStatus(500); // NACK -- will retry\n      }\n    }\n  }\n  const router = args.router || args.app;\n  router.post(args.endpoint || '/delete-data-request', endpointWrapper(_dataDeletionEndpoint));\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: DataDeletionEndpointArgs",
            "type": "DataDeletionEndpointArgs"
          }
        ]
      },
      {
        "type": "function",
        "name": " callDataDeletionBeginTopic",
        "text": "\n\nexport async function callDataDeletionBeginTopic(args: DataDeletionParams) {\n  return await callPubSub(compliance.DATA_DELETION_BEGIN_TOPIC, {\n    ...args,\n    serviceId,\n    beginAt: new Date().toISOString(),\n  });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: DataDeletionParams",
            "type": "DataDeletionParams"
          }
        ]
      },
      {
        "type": "function",
        "name": " callDataDeletionSuccessTopic",
        "text": "\n\nexport async function callDataDeletionSuccessTopic(args: DataDeletionParams, message?: string) {\n  return await callPubSub(compliance.DATA_DELETION_SUCCESS_TOPIC, {\n    ...args,\n    serviceId,\n    successAt: new Date().toISOString(),\n    message: message || `Service ${serviceId} successfully deleted data for shop ${args.shopId}`,\n  });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: DataDeletionParams",
            "type": "DataDeletionParams"
          },
          {
            "name": "message",
            "text": "message?: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " callDataDeletionFailureTopic",
        "text": "\n\nexport async function callDataDeletionFailureTopic(\n  args: DataDeletionParams,\n  errorMessage?: string\n) {\n  return await callPubSub(compliance.DATA_DELETION_FAILURE_TOPIC, {\n    ...args,\n    serviceId,\n    failureAt: new Date().toISOString(),\n    error: errorMessage || `Service ${serviceId} failed to delete data for shop ${args.shopId}`,\n  });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: DataDeletionParams",
            "type": "DataDeletionParams"
          },
          {
            "name": "errorMessage",
            "text": "errorMessage?: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/compliance/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/constants.ts",
    "exports": [
      {
        "name": " traceIdFieldName",
        "text": "export const traceIdFieldName = 'logging.googleapis.com/trace';",
        "type": "variable"
      },
      {
        "name": " twContextSymbol",
        "text": "\n\nexport const twContextSymbol = Symbol.for('__tw_context__');",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/datadog/helpers.ts",
    "exports": [
      {
        "type": "function",
        "name": " addErrorMessageToDatadog",
        "text": "\n\nexport function addErrorMessageToDatadog(error: Error) {\n  if (tracer) {\n    try {\n      tracer.scope().active().setTag('error.message', error.message);\n      tracer.scope().active().setTag('error.stack', error.stack);\n    } catch {}\n  }\n}",
        "parameters": [
          {
            "name": "error",
            "text": "error: Error",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/datadog/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/datadog/metrics.ts",
    "exports": [
      {
        "type": "function",
        "name": " submitDDMetrics",
        "text": "\n\nexport async function submitDDMetrics(args: {\n  metrics: Record<string, number>;\n  metricType: 'increment' | 'decrement' | 'distribution' | 'gauge';\n  tags?: { [tag: string]: string | number };\n  span?: Span;\n}) {\n  const { metrics, metricType, span } = args;\n  const tags = { project_id: projectId, ...args.tags };\n  Object.keys(tags).forEach((key) => tags[key] === undefined && delete tags[key]);\n  if (tracer) {\n    for (const [stat, value] of Object.entries(metrics)) {\n      tracer.dogstatsd[metricType](`tw.${stat}`, value, tags);\n      if (span) {\n        span.setTag(stat, String(value));\n      }\n    }\n  }\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  metrics: Record<string, number>;\n  metricType: 'increment' | 'decrement' | 'distribution' | 'gauge';\n  tags?: { [tag: string]: string | number };\n  span?: Span;\n}",
            "type": "{\n  metrics: Record<string, number>;\n  metricType: 'increment' | 'decrement' | 'distribution' | 'gauge';\n  tags?: { [tag: string]: string | number };\n  span?: Span;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/datadog/tracing.ts",
    "exports": [
      {
        "name": " tracer",
        "text": "\n\nexport let tracer: Tracer;",
        "type": "Tracer"
      },
      {
        "type": "function",
        "name": " loadDataDog",
        "text": "\n\nexport function loadDataDog(\n  args: { tracerOptions?: TracerOptions; disableDataDog?: boolean } = {}\n) {\n  let { tracerOptions = {}, disableDataDog } = args;\n  const {\n    profiling = isProd && !process.env.IS_SPOT ? true : false,\n    runtimeMetrics = isProd && !process.env.IS_SPOT ? true : false,\n  } = tracerOptions;\n  const envOptions = process.env['TW_DD_CONFIG'];\n  if (((isLocal || !isK8s) && !process.env.DD) || envOptions === '\"false\"' || disableDataDog) {\n    console.log('not initing dd.');\n    return;\n  }\n  tracer = require('dd-trace').tracer;\n\n  let options: TracerOptions = {\n    startupLogs: true,\n    profiling,\n    sampleRate: 1,\n    flushInterval: 10000,\n    logInjection: false,\n    runtimeMetrics,\n    env: projectId,\n    service: serviceId,\n    version: process.env.TW_VERSION || '1.0.0',\n    tags: {\n      triplewhale_com_deployment:\n        process.env.TW_DEPLOYMENT || (isLocal ? process.env.USER : 'unknown'),\n      'pulumi-stack': process.env.PULUMI_STACK_NAME,\n      'pulumi-project': process.env.PULUMI_PROJECT_NAME,\n      'tw.hostname': process.env.HOSTNAME || process.env.USER,\n    },\n  };\n\n  if (envOptions) {\n    try {\n      options = { ...options, ...JSON.parse(envOptions) };\n    } catch {}\n  }\n  if (tracerOptions) {\n    options = { ...options, ...tracerOptions };\n  }\n\n  if (isLocal) console.log('initing dd with options: ', options);\n\n  tracer.init(options);\n\n  tracer.use('express', {\n    blocklist: ['/ping'],\n    middleware: false,\n    hooks: {\n      request: (span, req, res) => {\n        span.addTags({\n          'http.size': req?.socket?.bytesWritten,\n        });\n      },\n    },\n  });\n  return tracer;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { tracerOptions?: TracerOptions; disableDataDog?: boolean } = {}",
            "type": "{ tracerOptions?: TracerOptions; disableDataDog?: boolean }"
          }
        ]
      },
      {
        "type": "function",
        "name": " safeActivateSpan",
        "text": "\n\nexport function safeActivateSpan(span: Span, fn: (...args: any[]) => unknown) {\n  if (span && tracer) {\n    return tracer.scope().activate(span, fn);\n  }\n  return fn();\n}",
        "parameters": [
          {
            "name": "span",
            "text": "span: Span",
            "type": "Span"
          },
          {
            "name": "fn",
            "text": "fn: (...args: any[]) => unknown",
            "type": "(...args: any[]) => unknown"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/decodePubSubMessage.ts",
    "exports": [
      {
        "type": "function",
        "name": " decodePubSubMessage",
        "text": "export function decodePubSubMessage(body: any): { data: any; attributes?: any } {\n  // push\n  if (body.message?.data) {\n    let data = Buffer.from(body.message.data, 'base64').toString('utf-8');\n    try {\n      data = JSON.parse(data);\n    } catch (e) {}\n    return {\n      data,\n      attributes: body.message.attributes,\n    };\n  }\n  // pull, if someone pushed a falsey value as push, default to obj\n  return {\n    data: JSON.parse(Buffer.from(body.data, 'base64').toString('utf-8')) || {},\n    attributes: body.attributes || {},\n  };\n}",
        "parameters": [
          {
            "name": "body",
            "text": "body: any",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/deepDiff.ts",
    "exports": [
      {
        "type": "function",
        "name": " deepDiff",
        "text": "\n\nexport function deepDiff(fromObject: any, toObject: any, specificPaths?: string[]) {\n  const changes = {};\n  const buildPath = (path, __, key) => (_.isUndefined(path) ? key : `${path}.${key}`);\n\n  let obj1 = {};\n  let obj2 = {};\n  if (_.isArray(specificPaths) && !_.isEmpty(specificPaths)) {\n    for (const path of specificPaths) {\n      if (_.has(fromObject, path)) {\n        _.set(obj1, path, _.get(fromObject, path));\n      } else if (_.has(toObject, path)) {\n        changes[path] = { to: _.get(toObject, path) };\n      }\n      if (_.has(toObject, path)) {\n        _.set(obj2, path, _.get(toObject, path));\n      } else if (_.has(fromObject, path)) {\n        changes[path] = { from: _.get(fromObject, path) };\n      }\n    }\n  } else {\n    obj1 = fromObject;\n    obj2 = toObject;\n  }\n\n  const walk = (fromObject, toObject, path?) => {\n    for (const key of _.keys(fromObject)) {\n      const currentPath = buildPath(path, fromObject, key);\n      if (!_.has(toObject, key)) {\n        changes[currentPath] = { from: _.get(fromObject, key) };\n      }\n    }\n\n    for (const [key, to] of _.entries(toObject)) {\n      const currentPath = buildPath(path, toObject, key);\n      if (!_.has(fromObject, key)) {\n        changes[currentPath] = { to };\n      } else {\n        const from = _.get(fromObject, key);\n        if (!_.isEqual(from, to)) {\n          if (_.isObjectLike(to) && _.isObjectLike(from)) {\n            walk(from, to, currentPath);\n          } else {\n            changes[currentPath] = { from, to };\n          }\n        }\n      }\n    }\n  };\n\n  walk(obj1, obj2);\n\n  return changes;\n}",
        "parameters": [
          {
            "name": "fromObject",
            "text": "fromObject: any",
            "type": "any"
          },
          {
            "name": "toObject",
            "text": "toObject: any",
            "type": "any"
          },
          {
            "name": "specificPaths",
            "text": "specificPaths?: string[]",
            "type": "string[]"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/demoShop/getRealShopId.ts",
    "exports": [
      {
        "type": "function",
        "name": " getRealShopId",
        "text": "\n\nexport async function getRealShopId(shopId: string, user: FirebaseUser | undefined) {\n  try {\n    if (!user?.admin || !shopId) {\n      return shopId;\n    }\n    const realShopId = await fetchRealShopId(shopId);\n    return realShopId;\n  } catch (error) {\n    logger.error('Error getting real shop id', { error, shopId });\n    return shopId;\n  }\n}",
        "parameters": [
          {
            "name": "shopId",
            "text": "shopId: string",
            "type": "string"
          },
          {
            "name": "user",
            "text": "user: FirebaseUser | undefined",
            "type": "FirebaseUser | undefined"
          }
        ]
      },
      {
        "type": "function",
        "name": " fetchRealShopId",
        "text": "\n\nexport async function fetchRealShopId(shopId: string) {\n  try {\n    const { isDemoShop, sourceDemoShop } = await getShopData(shopId, {\n      fields: ['isDemoShop', 'sourceDemoShop'],\n    });\n\n    if (isDemoShop && sourceDemoShop) {\n      return sourceDemoShop;\n    }\n  } catch (error) {\n    logger.error('Error fetching real shop id', { error, shopId });\n  }\n  return shopId;\n}",
        "parameters": [
          {
            "name": "shopId",
            "text": "shopId: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/demoShop/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/distributeInteger.ts",
    "exports": [
      {
        "name": " distributeInteger",
        "text": "export const distributeInteger = (_total: number, divider: number): number[] => {\n  const group: number[] = [];\n  if (divider === 0) {\n    group.push(0);\n  } else {\n    let sign = _total >= 0 ? 1 : -1;\n    let total = Math.abs(_total);\n    let rest = total % divider;\n    let result = total / divider;\n\n    for (let i = 0; i < divider; i++) {\n      if (rest-- > 0) {\n        group.push(Math.ceil(result) * sign);\n      } else {\n        group.push(Math.floor(result) * sign);\n      }\n    }\n  }\n  return group;\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/dns.ts",
    "exports": [
      {
        "name": " cacheable",
        "text": "\n\nexport const cacheable = new CacheableLookup();",
        "type": "variable"
      },
      {
        "name": " httpAgent",
        "text": "\n\nexport const httpAgent = new http.Agent({\n  lookup: cacheable.lookup,\n});",
        "type": "variable"
      },
      {
        "name": " httpsAgent",
        "text": "\n\nexport const httpsAgent = new https.Agent({\n  lookup: cacheable.lookup,\n});",
        "type": "variable"
      },
      {
        "name": " keepAliveAgent",
        "text": "\n\nexport const keepAliveAgent = new http.Agent({\n  lookup: cacheable.lookup,\n  keepAlive: true,\n  noDelay: true,\n});",
        "type": "variable"
      },
      {
        "name": " keepAliveHttpsAgent",
        "text": "\n\nexport const keepAliveHttpsAgent = new https.Agent({\n  lookup: cacheable.lookup,\n  keepAlive: true,\n  noDelay: true,\n});",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/escapeRegExp.ts",
    "exports": [
      {
        "type": "function",
        "name": " escapeRegExp",
        "text": "export function escapeRegExp(text) {\n  return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n}",
        "parameters": [
          {
            "name": "text",
            "text": "text",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/express/apiConfig.ts",
    "exports": [
      {
        "name": " Interfaces",
        "text": "\n\nexport type Interfaces = ('client' | 'public')[];",
        "type": "('client' | 'public')[]"
      },
      {
        "name": " TwOperationObject",
        "text": "\n\nexport type TwOperationObject = Partial<OpenAPIV3.OperationObject> & {\n  'x-google-backend'?: any;\n  'x-tw'?: {\n    corsAllowAll?: boolean;\n    websocket?: boolean;\n    pathPrefix?: string;\n    serviceId?: string;\n    interfaces?: Interfaces;\n    rateLimits?: string;\n  };\n};",
        "type": "Partial<OpenAPIV3.OperationObject> & {\n  'x-google-backend'?: any;\n  'x-tw'?: {\n    corsAllowAll?: boolean;\n    websocket?: boolean;\n    pathPrefix?: string;\n    serviceId?: string;\n    interfaces?: Interfaces;\n    rateLimits?: string;\n  };\n}"
      },
      {
        "name": " OverwriteExternalPath",
        "text": "\n\nexport type OverwriteExternalPath = {\n  path?: string;\n  prefix?: string;\n};",
        "type": "{\n  path?: string;\n  prefix?: string;\n}"
      },
      {
        "name": " OpenApi",
        "text": "\n\nexport type OpenApi = {\n  interfaces?: Interfaces;\n  security?: {\n    hydra?: string[];\n    firebase?: string[];\n    apiKey?: string[];\n    trendsFirebase?: string[];\n    firebaseSession?: string[];\n  };\n  operation?: TwOperationObject;\n  overwriteExternalPath?: OverwriteExternalPath;\n  deployment?: string;\n  websocket?: boolean;\n  corsAllowAll?: boolean;\n};",
        "type": "{\n  interfaces?: Interfaces;\n  security?: {\n    hydra?: string[];\n    firebase?: string[];\n    apiKey?: string[];\n    trendsFirebase?: string[];\n    firebaseSession?: string[];\n  };\n  operation?: TwOperationObject;\n  overwriteExternalPath?: OverwriteExternalPath;\n  deployment?: string;\n  websocket?: boolean;\n  corsAllowAll?: boolean;\n}"
      },
      {
        "name": " ServicesIdsWithSensory",
        "text": "\n\nexport type ServicesIdsWithSensory =\n  | ServicesIds\n  | typeof sensoryIntegrationService\n  | typeof sensoryCredentialService\n  | typeof sensoryMaster;",
        "type": "| ServicesIds\n  | typeof sensoryIntegrationService\n  | typeof sensoryCredentialService\n  | typeof sensoryMaster"
      },
      {
        "name": " ApiConfigArgs",
        "text": "\n\nexport type ApiConfigArgs<B = any, P = any, Q = any, R = any> = {\n  body?: B;\n  query?: Q;\n  resBody?: R;\n  validate?: boolean;\n  openApi?: OpenApi;\n  rateLimits?: RateLimitConfig;\n  auth?: {\n    serviceId: ServicesIdsWithSensory | ((req: Request<P, R, B, Q>) => ServicesIdsWithSensory);\n    accountIds: (string | string[]) | ((req: Request<P, R, B, Q>) => string | string[]);\n    relation?: string; // not implemented\n  };\n  authorization?:\n    | (AuthConfig[] | AuthConfig)\n    | ((req: Request<P, R, B, Q>) => AuthConfig | AuthConfig[]);\n  validatorOptions?: ValidatorOptions;\n  classTransformOptions?: ClassTransformOptions;\n  logValidationErrors?: boolean;\n  selfAuth?: boolean;\n  requireClaims?: FirebaseClaim[];\n  ignoreAdmin?: boolean;\n};",
        "type": "{\n  body?: B;\n  query?: Q;\n  resBody?: R;\n  validate?: boolean;\n  openApi?: OpenApi;\n  rateLimits?: RateLimitConfig;\n  auth?: {\n    serviceId: ServicesIdsWithSensory | ((req: Request<P, R, B, Q>) => ServicesIdsWithSensory);\n    accountIds: (string | string[]) | ((req: Request<P, R, B, Q>) => string | string[]);\n    relation?: string; // not implemented\n  };\n  authorization?:\n    | (AuthConfig[] | AuthConfig)\n    | ((req: Request<P, R, B, Q>) => AuthConfig | AuthConfig[]);\n  validatorOptions?: ValidatorOptions;\n  classTransformOptions?: ClassTransformOptions;\n  logValidationErrors?: boolean;\n  selfAuth?: boolean;\n  requireClaims?: FirebaseClaim[];\n  ignoreAdmin?: boolean;\n}"
      },
      {
        "type": "function",
        "name": " apiConfig",
        "text": "\n\nexport function apiConfig<B = any, P = any, Q = any, R = any>(\n  args: ApiConfigArgs<B, P, Q, R>\n): RequestHandler<P, R, B, Q> {\n  const {\n    validatorOptions = { whitelist: true },\n    classTransformOptions,\n    auth,\n    validate = false,\n    logValidationErrors,\n    requireClaims,\n    ignoreAdmin,\n  } = args;\n\n  const parts = ['body', 'query'].filter((k) => args[k]);\n  args['parts'] = parts;\n  args['authError'] =\n    Object.keys(args.openApi?.security || {}).length &&\n    !auth &&\n    !args.authorization &&\n    !requireClaims?.length &&\n    !args.selfAuth;\n\n  async function apiConfigMiddleware(req: Request<P, R, B, Q>, res: Response, next: NextFunction) {\n    const errors = [];\n    if (validate) {\n      for (const part of parts) {\n        try {\n          const classObject = plainToInstance(\n            args[part].constructor,\n            req[part],\n            classTransformOptions\n          );\n          await validateOrReject(classObject, validatorOptions);\n        } catch (e) {\n          logger.warn('failed validation');\n          errors.push(...e);\n        }\n      }\n    }\n    if (!errors.length) {\n      if (!req['user']) {\n        return next();\n      }\n      if (requireClaims?.length) {\n        for (const claim of requireClaims) {\n          if (!req['user'][claim]) {\n            return deny(res);\n          }\n        }\n      }\n      if (auth) {\n        let serviceId = auth.serviceId;\n        let accountIds = auth.accountIds;\n        if (typeof serviceId === 'function') serviceId = serviceId(req);\n        if (typeof accountIds === 'function') accountIds = accountIds(req);\n        if (\n          !(\n            await checkUserAccessToResource(\n              (req as any as RequestWithUser).user,\n              serviceId,\n              accountIds,\n              {\n                ignoreAdmin: ignoreAdmin,\n              }\n            )\n          ).result\n        ) {\n          return deny(res);\n        }\n      } else if (args.authorization) {\n        let authorization = args.authorization;\n        if (typeof authorization === 'function') {\n          const funcRes = authorization(req);\n          authorization = Array.isArray(funcRes) ? funcRes : [funcRes];\n        } else {\n          if (!Array.isArray(authorization)) {\n            authorization = [authorization];\n          }\n        }\n        const results = await Promise.all(\n          authorization.map(async (authConfig) => {\n            return (\n              await checkUserAccessToResource(\n                (req as any as RequestWithUser).user,\n                authConfig.serviceId,\n                authConfig.accountIds,\n                {\n                  ignoreAdmin: ignoreAdmin,\n                }\n              )\n            ).result;\n          })\n        );\n        if (!results.every(Boolean)) {\n          return deny(res);\n        }\n      }\n      return next();\n    }\n    if (logValidationErrors) logger.warn(`validation errors: ${errors}`);\n    const code = 400;\n    return res.status(code).json({\n      error: true,\n      code,\n      message: 'Validation failed',\n      errors: formatClassValidatorErrors(errors),\n    });\n  }\n  const func = endpointWrapper(apiConfigMiddleware);\n  func['metadata'] = { args };\n\n  return func;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: ApiConfigArgs<B, P, Q, R>",
            "type": "ApiConfigArgs<B, P, Q, R>"
          }
        ]
      },
      {
        "name": " formatClassValidatorErrors",
        "text": "\n\nexport const formatClassValidatorErrors = (errors: ValidationError[]): string[] => {\n  const formattedErrors = errors.map((error) => {\n    if (error.children?.length) {\n      return formatClassValidatorErrors(error.children)\n        .concat(Object.values(error.constraints))\n        .flat();\n    }\n    return Object.values(error.constraints);\n  });\n  return [].concat(...formattedErrors.flat());\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/express/bootRouters.ts",
    "exports": [
      {
        "type": "function",
        "name": " bootRouters",
        "text": "\n\nexport async function bootRouters(args: {\n  defaultRouter: () => Promise<Router>;\n  app: Application;\n  routers?: Record<string, () => Promise<Router>>;\n}) {\n  const { routers = {}, defaultRouter, app } = args;\n  if (isLocal) {\n    app.use(await defaultRouter());\n    for (const deploymentName of Object.keys(routers)) {\n      app.use(await routers[deploymentName]());\n    }\n    return;\n  }\n  let deploymentName = process.env.K_SERVICE || process.env.TW_DEPLOYMENT;\n  const isDefault = serviceId === deploymentName;\n  if (!isK8s && !isDefault) {\n    // service mod\n    deploymentName = deploymentName.replace(`${serviceId}-`, '');\n  }\n  if (isDefault) {\n    app.use(await defaultRouter());\n    return;\n  }\n  if (routers[deploymentName]) {\n    app.use(await routers[deploymentName]());\n  } else {\n    throw Error('deployment invalid');\n  }\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  defaultRouter: () => Promise<Router>;\n  app: Application;\n  routers?: Record<string, () => Promise<Router>>;\n}",
            "type": "{\n  defaultRouter: () => Promise<Router>;\n  app: Application;\n  routers?: Record<string, () => Promise<Router>>;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/express/concurrencyLimit.ts",
    "exports": [
      {
        "type": "function",
        "name": " concurrencyLimit",
        "text": "\n\nexport function concurrencyLimit(limit: number, mode: 'queue' | 'throttle' = 'throttle') {\n  let current = 0;\n  const queue: { req: Request; res: Response; next: NextFunction }[] = [];\n  function finishReq() {\n    current--;\n    if (mode === 'queue' && queue.length) {\n      queue.shift().next();\n    }\n  }\n  function handleConcurrencyLimit(req: Request, res: Response, next: NextFunction) {\n    res.on('close', () => {\n      if (mode === 'throttle' && res[IGNORE]) {\n        return;\n      }\n      finishReq();\n    });\n\n    if (current < limit) {\n      current++;\n      return next();\n    }\n    if (mode === 'throttle') {\n      logger.debug(`concurrencyLimit throttling req, ${current} ${limit}`);\n      res[IGNORE] = true;\n      return res.status(429).send('Reached max current.');\n    }\n    if (mode === 'queue') {\n      logger.debug(`concurrencyLimit queuing req, ${current} ${limit}`);\n      queue.push({ req, res, next });\n    }\n  }\n  return handleConcurrencyLimit;\n}",
        "parameters": [
          {
            "name": "limit",
            "text": "limit: number",
            "type": "number"
          },
          {
            "name": "mode",
            "text": "mode: 'queue' | 'throttle' = 'throttle'",
            "type": "'queue' | 'throttle'"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/express/demoToRealShopMiddleware.ts",
    "exports": [
      {
        "type": "function",
        "name": " demoToRealShopMiddleware",
        "text": "\n\nexport function demoToRealShopMiddleware(_shopId?: (req) => string) {\n  async function replaceDemoShop(req: RequestWithUser, res: Response, next: NextFunction) {\n    const user = req.user;\n    if (!user?.admin) {\n      return next();\n    }\n    const shopId = !_shopId ? req.headers?.[TW_SHOP_ID_HEADER]?.toString() : _shopId(req);\n    if (!shopId) {\n      return next();\n    }\n    const realShopId = await getRealShopId(shopId, user);\n\n    if (realShopId !== shopId) {\n      req.body = JSON.parse(JSON.stringify(req.body).replace(new RegExp(shopId, 'g'), realShopId));\n\n      if (req.query) {\n        Object.keys(req.query).forEach((key) => {\n          if (typeof req.query[key] === 'string') {\n            req.query[key] = req.query[key].toString().replace(new RegExp(shopId, 'g'), realShopId);\n          }\n        });\n      }\n\n      if (req.headers[TW_SHOP_ID_HEADER]) {\n        req.headers[TW_SHOP_ID_HEADER] = realShopId;\n      }\n    }\n    next();\n  }\n  return endpointWrapper(replaceDemoShop);\n}",
        "parameters": [
          {
            "name": "_shopId",
            "text": "_shopId?: (req) => string",
            "type": "(req) => string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/express/errors.ts",
    "exports": [
      {
        "name": " HttpErrorResponse",
        "text": "export class HttpErrorResponse extends Error {\n  constructor(error, public status) {\n    super(error.message);\n  }\n}",
        "type": " Error"
      }
    ]
  },
  {
    "file": "@tw/utils/express/expressRoutesParser.ts",
    "exports": [
      {
        "type": "function",
        "name": " parseExpressApp",
        "text": "\n\nexport function parseExpressApp(app: Express): RouteMetaData[] {\n  return new ExpressPathParser(app).appPaths;\n}",
        "parameters": [
          {
            "name": "app",
            "text": "app: Express",
            "type": "Express"
          }
        ]
      },
      {
        "type": "function",
        "name": " transformExpressPathToOpenApi",
        "text": "\n\nexport function transformExpressPathToOpenApi(path: RouteMetaData): string {\n  let result = path.path;\n  path.pathParams.forEach((param: Parameter) => {\n    result = result.replace(`:${param.name}`, `{${param.name}}`);\n  });\n  return result;\n}",
        "parameters": [
          {
            "name": "path",
            "text": "path: RouteMetaData",
            "type": "RouteMetaData"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/express/featureFlagMiddleware.ts",
    "exports": [
      {
        "type": "function",
        "name": " featureFlagMiddleware",
        "text": "\n\nexport function featureFlagMiddleware<B = any, P = any, Q = any, R = any>(args: {\n  dateRange: (req: Request<P, R, B, Q>) => DateRangeLimitData;\n}): RequestHandler<P, R, B, Q> {\n  const { dateRange } = args;\n\n  async function validateDateRange(req: Request<P, R, B, Q>, res: Response, next: NextFunction) {\n\n    if (!(req as any).user) {\n      return next();\n    }\n\n    if (dateRange) {\n      const { start, shopId } = dateRange(req);\n      if (start && shopId) {\n        try {\n          const { data } = await callServiceEndpoint<FeatureFlagResultProperties>(\n            'subscription-manager',\n            `features/feature-flag-config/${shopId}/${FeatureFlag.LIMIT_LOOKBACK_FF}`,\n            null,\n            { method: 'GET' }\n          );\n\n          const { numericLimit: limitInMonth } = data ?? {};\n\n\n          if (limitInMonth) {\n            try {\n              const momentStart = moment(start);\n              const earliestDate = moment().subtract(limitInMonth, 'month').startOf('day');\n              if (momentStart?.isBefore(earliestDate)) {\n                logger.warn(\n                  `featureFlagValidation LIMIT_LOOKBACK_FF deny: ${earliestDate.format()} < ${momentStart.format()}`\n                );\n                return deny(res, {\n                  message: 'Date range exceeds plan limitation',\n                  result: false,\n                });\n              }\n            } catch (e) {\n              logger.error(`featureFlagValidation LIMIT_LOOKBACK_FF error on converting dates: ${e}`);\n            }\n          }\n        } catch (e) {\n          logger.error(`featureFlagValidation LIMIT_LOOKBACK_FF error: ${e}`);\n        }\n      }\n    }\n    return next();\n  }\n\n  return endpointWrapper(validateDateRange);\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  dateRange: (req: Request<P, R, B, Q>) => DateRangeLimitData;\n}",
            "type": "{\n  dateRange: (req: Request<P, R, B, Q>) => DateRangeLimitData;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/express/getExpressApp.ts",
    "exports": [
      {
        "type": "function",
        "name": " getExpressApp",
        "text": "\n\nexport function getExpressApp(\n  args: {\n    autoOpenApi?: boolean;\n    jsonSchemaAdditionalConverters?: ISchemaConverters;\n    middlewareConfig?: MiddleWareConfig;\n    terminator?: boolean;\n    noTimeout?: boolean;\n    enableDebugEndpoint?: boolean;\n  } = {}\n): { app: Express; router: Router; server: http.Server; httpTerminator: HttpTerminator } {\n  const {\n    autoOpenApi = true,\n    jsonSchemaAdditionalConverters,\n    middlewareConfig,\n    terminator = true,\n    noTimeout,\n    enableDebugEndpoint,\n  } = args;\n\n  const PORT = process.env.PORT || 8080;\n  let httpTerminator: HttpTerminator;\n  const app = express();\n  app.disable('x-powered-by');\n  const server = http.createServer(app);\n  const router = express.Router();\n\n  server.on('listening', (port) => {\n    logger.info('listening');\n    const expressPaths = parseExpressApp(app);\n    if (isLocal && autoOpenApi)\n      exportOpenApiFromExpress(expressPaths, jsonSchemaAdditionalConverters);\n    logger.info(\n      `server started, routes: ${expressPaths.map((p) => p.path).join(', ')}, port: ${port || PORT}`\n    );\n    process.env.STARTUP_DONE = 'true';\n  });\n\n  addMiddleWares(app, middlewareConfig);\n\n  app.all('/ping', ping);\n  if (enableDebugEndpoint) {\n    app.all('/_debug', devopsDebug);\n  }\n  if (terminator) {\n    const timeout =\n      process.env.gracefulTerminationTimeout !== undefined\n        ? Number(process.env.gracefulTerminationTimeout)\n        : 3600 * 1000;\n    httpTerminator = createHttpTerminator({\n      server,\n      app,\n      gracefulTerminationTimeout: timeout,\n    });\n    process.on('SIGTERM', async () => {\n      if (!server.listening) return;\n      process.env.TW_TERMINATING = 'true';\n      logger.warn(`SIGTERM signal received: draining HTTP server, timeout: ${timeout}ms`);\n      if (!process.env.K_SERVICE && !isLocal) {\n        logger.info(`process.env.K_SERVICE is not set, sleeping 30s`);\n        // thats what knative does in the queue proxy\n        await sleep(30 * 1000);\n      }\n      const requests = [...httpTerminator.sockets]\n        .map((socket) => {\n          // @ts-ignore\n          const req = socket?._httpMessage?.req as IncomingMessage & {\n            traceId: string;\n            originalUrl: string;\n          };\n          // no req means its a keep alive socket\n          if (!req) return;\n          return {\n            url: req.originalUrl,\n            traceId: req.traceId,\n          };\n        })\n        .filter(Boolean);\n      logger.info({\n        message: `drain report`,\n        socketsCount: httpTerminator.sockets.size,\n        requests,\n        requestsCount: requests?.length,\n      });\n      httpTerminator\n        .terminate()\n        .then(() => {\n          logger.debug('HTTP server closed');\n          process.exit(0);\n        })\n        .catch((err) => {\n          logger.debug('HTTP server close error', err);\n          process.exit(1);\n        });\n    });\n  } else {\n    process.on('SIGTERM', () => {\n      logger.info(`SIGTERM signal received: ignoring`);\n    });\n  }\n  if (noTimeout || process.env.TW_NO_TIMEOUT || process.env.K_SERVICE) {\n    server.timeout = 0;\n    // https://connectreport.com/blog/tuning-http-keep-alive-in-node-js\n    server.keepAliveTimeout = 0;\n  }\n  // https://expressjs.com/en/api.html#app.listen\n  app.listen = (port) => {\n    if (process.env.TW_NO_SERVER) return;\n    app.use((err: any, _req: Request, res: Response, next) => {\n      if (err && err.code === 'ECONNABORTED') {\n        logger.warn(err);\n        res.status(400).end();\n      } else next(err);\n    });\n    return server.listen(port || PORT);\n  };\n  return { app, router, server, httpTerminator };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n    autoOpenApi?: boolean;\n    jsonSchemaAdditionalConverters?: ISchemaConverters;\n    middlewareConfig?: MiddleWareConfig;\n    terminator?: boolean;\n    noTimeout?: boolean;\n    enableDebugEndpoint?: boolean;\n  } = {}",
            "type": "{\n    autoOpenApi?: boolean;\n    jsonSchemaAdditionalConverters?: ISchemaConverters;\n    middlewareConfig?: MiddleWareConfig;\n    terminator?: boolean;\n    noTimeout?: boolean;\n    enableDebugEndpoint?: boolean;\n  }"
          }
        ]
      },
      {
        "name": " RequestWithUser",
        "text": "\n\nexport type RequestWithUser = Request & { user?: FirebaseUser | HydraApp | undefined };",
        "type": "Request & { user?: FirebaseUser | HydraApp | undefined }"
      },
      {
        "type": "specifier",
        "name": " Express",
        "text": " Express"
      },
      {
        "type": "specifier",
        "name": " Router",
        "text": " Router"
      },
      {
        "type": "specifier",
        "name": " Request",
        "text": " Request"
      },
      {
        "type": "specifier",
        "name": " Response",
        "text": " Response"
      },
      {
        "type": "specifier",
        "name": " NextFunction",
        "text": " NextFunction"
      },
      {
        "type": "specifier",
        "name": " RequestHandler",
        "text": " RequestHandler"
      }
    ]
  },
  {
    "file": "@tw/utils/express/index.ts",
    "exports": [
      {
        "type": "specifier",
        "name": " PubsubRequest",
        "text": " PubsubRequest"
      },
      {
        "type": "specifier",
        "name": " PubsubPushReqBody",
        "text": " PubsubPushReqBody"
      }
    ]
  },
  {
    "file": "@tw/utils/express/logging.ts",
    "exports": [
      {
        "name": " CloudLoggingHttpRequest",
        "text": "\n\n// https://github.com/googleapis/nodejs-logging/blob/main/src/middleware/express/make-middleware.ts\n\nexport interface CloudLoggingHttpRequest {\n  requestMethod?: string;\n  requestUrl?: string;\n  requestSize?: number;\n  status?: number;\n  responseSize?: number;\n  userAgent?: string;\n  remoteIp?: string;\n  serverIp?: string;\n  referer?: string;\n  latency?: string;\n  cacheLookup?: boolean;\n  cacheHit?: boolean;\n  cacheValidatedWithOriginServer?: boolean;\n  cacheFillBytes?: number;\n  protocol?: string;\n}",
        "type": "interface"
      },
      {
        "type": "function",
        "name": " removeFalsyProperties",
        "text": "\n\nexport function removeFalsyProperties(obj) {\n  for (const key in obj) {\n    if (!obj[key]) {\n      delete obj[key];\n    }\n  }\n  return obj;\n}",
        "parameters": [
          {
            "name": "obj",
            "text": "obj",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " createAccessLoggingMiddleware",
        "text": "\n\nexport function createAccessLoggingMiddleware(\n  args: MiddleWareConfig['accessLogging']['args'] = {}\n) {\n  const { logLevel = 'info', logPing = false, logAtStart } = args;\n  const accessLogger = getLogger({ options: { level: logLevel, name: 'access-logs' } });\n  return function accessLogging(req: Request, res: ServerResponse, next: NextFunction) {\n    if (!logPing && req.url === '/ping') {\n      return next();\n    }\n    const timer = new Timer().start();\n    if (logAtStart) {\n      const httpRequest = makeHttpRequestData(req, res, 0);\n      accessLogger[logLevel]({ httpRequest });\n    } else {\n      onFinished(res, () => {\n        const httpRequest = makeHttpRequestData(req, res, timer.end().ms);\n        let level = 'info';\n        if (res.statusCode && res.statusCode >= 500) {\n          level = 'error';\n        } else if (res.statusCode && res.statusCode >= 400) {\n          level = 'warn';\n        }\n        accessLogger[level]({ httpRequest });\n      });\n    }\n    next();\n  };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: MiddleWareConfig['accessLogging']['args'] = {}",
            "type": "MiddleWareConfig['accessLogging']['args']"
          }
        ]
      },
      {
        "type": "function",
        "name": " traceLogsLink",
        "text": "\n\nexport function traceLogsLink(traceId: string, projectId: string): string {\n  return `${logsLinkBase};query=trace%3D%22projects%2F${projectId}%2Ftraces%2F${traceId}%22;${logsLinkSuffix(\n    projectId\n  )}`;\n}",
        "parameters": [
          {
            "name": "traceId",
            "text": "traceId: string",
            "type": "string"
          },
          {
            "name": "projectId",
            "text": "projectId: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " logsLinkFilter",
        "text": "\n\nexport function logsLinkFilter(filter: Record<string, string>, projectId: string): string {\n  let filterString = '';\n  for (let [key, value] of Object.entries(filter)) {\n    if (!filter[key]) continue;\n    if (!['trace', 'labels', 'resource'].includes(key.split('.')[0])) {\n      key = `jsonPayload.${key}`;\n    }\n    filterString += `${key}=\"${value}\"\\n`;\n  }\n  return `${logsLinkBase};query=${encodeURIComponent(filterString)};${logsLinkSuffix(projectId)}`;\n}",
        "parameters": [
          {
            "name": "filter",
            "text": "filter: Record<string, string>",
            "type": "Record<string, string>"
          },
          {
            "name": "projectId",
            "text": "projectId: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/express/middleware.ts",
    "exports": [
      {
        "name": " healthChecks",
        "text": "\n\nexport const healthChecks: (() => Promise<boolean>)[] = [];",
        "type": "(() => Promise<boolean>)[]"
      },
      {
        "name": " middlewares",
        "text": "\n\n// the order of middlewares is important\nexport const middlewares: MiddleWareConfig = {\n  enableCors: {\n    enabled: true,\n    middleware: enableCors,\n    isFunction: true,\n  },\n  bodyParser: { enabled: true, middleware: express.json({ limit: '50mb' }) },\n  generalReqValidators: { enabled: false, middleware: globalReqValidatorMiddleware },\n  decodePubsub: { enabled: true, middleware: decodePubsub },\n  decodeUser: { enabled: true, middleware: decodeUser },\n  addContextMiddleware: { enabled: true, middleware: addContextMiddleware, isFunction: true },\n  removeServiceIdPrefix: { enabled: true, middleware: removeServiceIdPrefix },\n  downloadFileData: { enabled: true, middleware: downloadFileData },\n  enableCompression: { enabled: true, middleware: enableCompression, isFunction: true },\n  accessLogging: { enabled: false, middleware: createAccessLoggingMiddleware, isFunction: true },\n};",
        "type": "MiddleWareConfig"
      },
      {
        "type": "function",
        "name": " addMiddleWares",
        "text": "\n\nexport function addMiddleWares(app: express.Application, userConfig: MiddleWareConfig) {\n  Object.entries(middlewares).forEach(([key, value]) => {\n    const enabled = userConfig?.[key]?.enabled ?? value.enabled;\n    const args = userConfig?.[key]?.args ?? (value as any).args;\n    if (enabled) {\n      let middleware = value.middleware;\n      if (value.isFunction) {\n        middleware = (value.middleware as any)(args);\n      }\n      // @ts-ignore\n      // this will disable auto wrap in /runtime/index.ts\n      // and disable auto response in /api/wrapper.ts\n      middleware.isMiddleware = true;\n      if (value.wrap) {\n        middleware = endpointWrapper(middleware);\n      }\n      app.use(middleware);\n    }\n  });\n}",
        "parameters": [
          {
            "name": "app",
            "text": "app: express.Application",
            "type": "express.Application"
          },
          {
            "name": "userConfig",
            "text": "userConfig: MiddleWareConfig",
            "type": "MiddleWareConfig"
          }
        ]
      },
      {
        "type": "function",
        "name": " removeServiceIdPrefix",
        "text": "\n\nexport function removeServiceIdPrefix(req: Request, _res: Response, next: NextFunction) {\n  req.url = removeServiceIdFromPath(process.env.SERVICE_ID, req.url);\n  next();\n}",
        "parameters": [
          {
            "name": "req",
            "text": "req: Request",
            "type": "Request"
          },
          {
            "name": "_res",
            "text": "_res: Response",
            "type": "Response"
          },
          {
            "name": "next",
            "text": "next: NextFunction",
            "type": "NextFunction"
          }
        ]
      },
      {
        "type": "function",
        "name": " decodePubsub",
        "text": "\n\nexport function decodePubsub(req: Request, _res: Response, next: NextFunction) {\n  if (isPubsubReq(req) && Object.keys(req.body).length) {\n    (req.body as PubsubPushReqBody) = {\n      ...req.body?.message,\n      ...decodePubSubMessage(req.body),\n      subscription: req.body?.subscription,\n    };\n  }\n  next();\n}",
        "parameters": [
          {
            "name": "req",
            "text": "req: Request",
            "type": "Request"
          },
          {
            "name": "_res",
            "text": "_res: Response",
            "type": "Response"
          },
          {
            "name": "next",
            "text": "next: NextFunction",
            "type": "NextFunction"
          }
        ]
      },
      {
        "type": "function",
        "name": " downloadFileData",
        "text": "\n\nexport async function downloadFileData(req: Request, res: Response, next: NextFunction) {\n  const { fileContentFieldName } = req.query;\n\n  if (fileContentFieldName) {\n    const { body } = req;\n    const fileFieldName = fileContentFieldName as keyof typeof FileContentFieldNames;\n    const attributes = body?.attributes || body?.message?.attributes || {};\n    if (fileFieldName !== 'none') {\n      const { bucketId, objectId, objectGeneration: generation } = attributes;\n      if (!bucketId || !objectId) {\n        // not a notification message\n        logger.warn('no bucketId or objectId in attributes');\n        return next();\n      }\n      try {\n        const data = await downloadFile(bucketId, objectId, { generation });\n        body[fileFieldName] = data;\n      } catch (error) {\n        logger.error(`Failed to download file ${bucketId}/${objectId} `, {\n          error,\n          body,\n          query: req.query,\n        });\n        return res.status(500).send('not ok');\n      }\n    }\n  }\n  return next();\n}",
        "parameters": [
          {
            "name": "req",
            "text": "req: Request",
            "type": "Request"
          },
          {
            "name": "res",
            "text": "res: Response",
            "type": "Response"
          },
          {
            "name": "next",
            "text": "next: NextFunction",
            "type": "NextFunction"
          }
        ]
      },
      {
        "type": "function",
        "name": " ping",
        "text": "\n\nexport async function ping(_req: Request, res: Response) {\n  const message = `pong from ${serviceId}`;\n  if (process.env.TW_TERMINATING) {\n    return res.status(500).send('terminating');\n  }\n  if (healthChecks.length) {\n    const results = await Promise.all(healthChecks.map((fn) => fn()));\n    if (results.some((r) => !r)) {\n      return res.status(500).send('health failed');\n    }\n  }\n  return res.send(message);\n}",
        "parameters": [
          {
            "name": "_req",
            "text": "_req: Request",
            "type": "Request"
          },
          {
            "name": "res",
            "text": "res: Response",
            "type": "Response"
          }
        ]
      },
      {
        "type": "function",
        "name": " devopsDebug",
        "text": "\n\nexport function devopsDebug(_req: Request, res: Response) {\n  return res.json({ K8S: getK8sPodInfo() });\n}",
        "parameters": [
          {
            "name": "_req",
            "text": "_req: Request",
            "type": "Request"
          },
          {
            "name": "res",
            "text": "res: Response",
            "type": "Response"
          }
        ]
      },
      {
        "type": "function",
        "name": " decodeUser",
        "text": "\n\nexport function decodeUser(req: Request, _res: Response, next: NextFunction) {\n  const b64user = req.headers['x-apigateway-api-userinfo'] as string;\n  if (b64user) {\n    try {\n      req['user'] = JSON.parse(Buffer.from(b64user, 'base64').toString());\n    } catch (e) {\n      logger.warn(`failed to decode user, ${e}`);\n    }\n  }\n  next();\n}",
        "parameters": [
          {
            "name": "req",
            "text": "req: Request",
            "type": "Request"
          },
          {
            "name": "_res",
            "text": "_res: Response",
            "type": "Response"
          },
          {
            "name": "next",
            "text": "next: NextFunction",
            "type": "NextFunction"
          }
        ]
      },
      {
        "type": "function",
        "name": " addContextMiddleware",
        "text": "\n\nexport function addContextMiddleware(args: MiddleWareConfig['addContextMiddleware']['args'] = {}) {\n  function contextMiddleware(\n    req: Request & { traceId?: string },\n    res: Response,\n    next: NextFunction\n  ) {\n    asyncLocalStorage.run({}, () => {\n      const logParams = getStoreKey('logParams');\n      let shopId =\n        req.header('x-tw-shop-id') ||\n        (req.query?.shopId as string) ||\n        (req.query?.shopDomain as string);\n      if (!shopId) {\n        if (req.method === 'POST') {\n          // pubsub messages have the payload in the body.data field\n          const body = req.body?.data || req.body;\n          shopId = body?.shopId || body?.shopDomain || body?.shop;\n        }\n      }\n      logParams.shopId = shopId;\n      if (req.query.isPubsub === 'true') {\n        logParams.pubSubMessageId = req.body?.messageId;\n      }\n      const fullTraceId = req.header('x-cloud-trace-context');\n      const traceId = fullTraceId?.split('/')[0] || createTraceId();\n      if (traceId) {\n        logParams[traceIdFieldName] = createTraceField(traceId);\n      }\n      req.traceId = traceId;\n      setStoreKey('context', { traceId, uf: req.headers['x-tw-uf'] === 'true', req });\n      if (req.user) {\n        logParams.userId = req.user.sub;\n        // add traceId to requests from the client\n      }\n      if (!res.headersSent) {\n        res.set('x-tw-trace-id', traceId);\n      }\n      if (tracer && !args.noDDTags) {\n        try {\n          tracer\n            .scope()\n            .active()\n            .addTags({\n              origin: req.headers.origin,\n              'tw.logs': traceLogsLink(traceId, projectId),\n              'tw.traceId': traceId,\n              'tw.shopId': shopId,\n              'tw.userId': logParams.userId,\n            });\n        } catch {}\n      }\n      next();\n    });\n  }\n\n  return contextMiddleware;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: MiddleWareConfig['addContextMiddleware']['args'] = {}",
            "type": "MiddleWareConfig['addContextMiddleware']['args']"
          }
        ]
      },
      {
        "type": "function",
        "name": " enableCors",
        "text": "\n\nexport function enableCors(args: MiddleWareConfig['enableCors']['args'] = {}) {\n  const options: cors.CorsOptions = {\n    credentials: true,\n    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n    preflightContinue: false,\n    optionsSuccessStatus: 204,\n  };\n  if (!args.allowAll) {\n    options.origin = (origin, callback) => {\n      if (\n        origins.some((o) => origin?.endsWith(o)) ||\n        !origin ||\n        origin.split(':')[1]?.endsWith('localhost')\n      ) {\n        callback(null, true);\n      } else {\n        callback(null, false);\n      }\n    };\n  }\n  return cors(options);\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: MiddleWareConfig['enableCors']['args'] = {}",
            "type": "MiddleWareConfig['enableCors']['args']"
          }
        ]
      },
      {
        "type": "function",
        "name": " enableCompression",
        "text": "\n\nexport function enableCompression(args: MiddleWareConfig['enableCompression']['args'] = {}) {\n  return compression({ threshold: '512kb', ...args.options });\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: MiddleWareConfig['enableCompression']['args'] = {}",
            "type": "MiddleWareConfig['enableCompression']['args']"
          }
        ]
      },
      {
        "type": "function",
        "name": " addMiddleWaresToNestJs",
        "text": "\n\nexport function addMiddleWaresToNestJs(app, additionalOptions: { nestBodyParser?: boolean } = {}) {\n  const { nestBodyParser } = additionalOptions;\n  if (nestBodyParser) {\n    app.getHttpAdapter().registerParserMiddleware();\n  } else {\n    app.use(express.json({ limit: '50mb' }));\n  }\n  app.use(addContextMiddleware());\n  app.use(removeServiceIdPrefix);\n  app.all('/ping', ping);\n  app.use(decodePubsub);\n  app.use(decodeUser);\n  app.use(enableCors());\n}",
        "parameters": [
          {
            "name": "app",
            "text": "app",
            "type": "any"
          },
          {
            "name": "additionalOptions",
            "text": "additionalOptions: { nestBodyParser?: boolean } = {}",
            "type": "{ nestBodyParser?: boolean }"
          }
        ]
      },
      {
        "type": "function",
        "name": " requireClaim",
        "text": "\n\nexport function requireClaim(claim: FirebaseClaim) {\n  return (req: RequestWithUser, res: Response, next: NextFunction) => {\n    const user = req.user;\n    if (!user) return next();\n    if (!user[claim]) return deny(res);\n    next();\n  };\n}",
        "parameters": [
          {
            "name": "claim",
            "text": "claim: FirebaseClaim",
            "type": "FirebaseClaim"
          }
        ]
      },
      {
        "type": "function",
        "name": " globalReqValidatorMiddleware",
        "text": "\n\nexport function globalReqValidatorMiddleware(req: Request, res: Response, next: NextFunction) {\n  const paramToCheck = ['start', 'end', 'endDate', 'startDate', 'date'];\n\n  const reqData = (req.body ?? req.query ?? req.params ?? {}) as { [key in string]: string };\n\n  Object.entries(reqData).forEach(([key, value]) => {\n    if (paramToCheck.includes(key)) {\n      const date = new Date(value);\n      if (date.toString() === 'Invalid Date') {\n        return res.status(400).json({\n          message: `Invalid date format for ${key}`,\n        });\n      }\n    }\n  });\n\n  next();\n}",
        "parameters": [
          {
            "name": "req",
            "text": "req: Request",
            "type": "Request"
          },
          {
            "name": "res",
            "text": "res: Response",
            "type": "Response"
          },
          {
            "name": "next",
            "text": "next: NextFunction",
            "type": "NextFunction"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/express/rateLimitMiddleware.test.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/express/rateLimitMiddleware.ts",
    "exports": [
      {
        "name": " RateLimitMiddlewareOptions",
        "text": "\n\nexport type RateLimitMiddlewareOptions = {\n  throwOnError?: boolean;\n  redisHost?: string;\n  dryRun?: boolean;\n  omitHeaders?: boolean;\n};",
        "type": "{\n  throwOnError?: boolean;\n  redisHost?: string;\n  dryRun?: boolean;\n  omitHeaders?: boolean;\n}"
      },
      {
        "type": "function",
        "name": " rateLimitMiddleware",
        "text": "\n\nexport function rateLimitMiddleware<\n  Req extends Request = RequestWithUser,\n  Res extends Response = Response,\n>(\n  conf: RateLimitConfig<Req>,\n  opt: RateLimitMiddlewareOptions = {\n    throwOnError: false,\n    dryRun: false,\n    omitHeaders: false,\n    redisHost: undefined,\n  }\n) {\n  if (!redis) {\n    initRedisClient(opt.redisHost).catch((e) => {\n      logger.error('Failed to initialize redis client: ' + e.message);\n      if (opt.throwOnError) {\n        // will be unhandled promise rejection and crash the app\n        throw e;\n      }\n      logger.error('Rate limiter will not work');\n      return;\n    });\n  }\n  return async function rateLimiter(req: Req, res: Res, next: NextFunction): Promise<void> {\n    const reqUser =\n      req.user?.sub ||\n      (req.query?.userId as string) ||\n      (req.headers['x-forwarded-for'] as string)?.split(',')?.[0];\n    const answers = (\n      await Promise.all(\n        conf.map(async (p) => {\n          let userId: string;\n          try {\n            const { window, quota, condition, user } = p;\n            userId = (user && user(req)) || reqUser;\n            if (!userId) {\n              return;\n            }\n            if (condition && !condition(req)) {\n              return;\n            }\n            const key = getRateLimitKey(userId, req.path, window);\n\n            // TODO: make redis calls atomic\n            const count = await redis.incr(key);\n\n            if (count === 1) {\n              const now = clock.monotonic();\n              const end = now + window * 1000;\n              const duration = end - now;\n              await Promise.all([\n                redis.expire(key, window),\n                redis.set(`${key}:window_end`, end, { EX: duration }), // seconds!\n              ]);\n            }\n            const resetTime = +(await redis.get(`${key}:window_end`));\n            const now = clock.monotonic();\n            const diff = Math.ceil((resetTime - now) / 1000);\n            return {\n              count,\n              secondsUntilReset: diff,\n              userId,\n              window: p.window,\n              quota: p.quota,\n            };\n          } catch (e) {\n            logger.error(e);\n            if (opt.throwOnError) {\n              throw e;\n            }\n            return {\n              count: NaN,\n              secondsUntilReset: NaN,\n              userId,\n              window: p.window,\n              quota: p.quota,\n              error: e,\n            };\n          }\n        })\n      )\n    ).filter(Boolean);\n    if (!answers.length) {\n      return next();\n    }\n    const violations = answers.filter((a) => a.count > a.quota);\n    if (violations.length) {\n      const longestDiff = Math.max(...violations.map((v) => +v.secondsUntilReset));\n      if (!opt.omitHeaders) {\n        res.header('Retry-After', '' + longestDiff);\n        res.header('RateLimit-Policy', getPolicyFromConf(conf));\n      }\n      if (opt.dryRun) {\n        logger.debug({\n          message: 'Dry run rate limit violation',\n          violations,\n        });\n        return next();\n      }\n      res.status(429).send('Too Many Requests');\n      return;\n    }\n    if (!opt.omitHeaders) {\n      answers.forEach((a) =>\n        res.header(\n          'RateLimit',\n          `limit=${a.quota}, remaining=${a.quota - a.count}, reset=${a.secondsUntilReset}`\n        )\n      );\n      res.header('RateLimit-Policy', getPolicyFromConf(conf));\n    }\n    next();\n  };\n}",
        "parameters": [
          {
            "name": "conf",
            "text": "conf: RateLimitConfig<Req>",
            "type": "RateLimitConfig<Req>"
          },
          {
            "name": "opt",
            "text": "opt: RateLimitMiddlewareOptions = {\n    throwOnError: false,\n    dryRun: false,\n    omitHeaders: false,\n    redisHost: undefined,\n  }",
            "type": "RateLimitMiddlewareOptions"
          }
        ]
      },
      {
        "type": "function",
        "name": " serializeConf",
        "text": "\n\nexport function serializeConf(conf: RateLimitConfig): string {\n  return JSON.stringify(\n    conf.map((p) => ({\n      window: p.window,\n      quota: p.quota,\n      ...(p.condition && { condition: p.condition?.toString() }),\n      ...(p.user && { user: p.user?.toString() }),\n    }))\n  );\n}",
        "parameters": [
          {
            "name": "conf",
            "text": "conf: RateLimitConfig",
            "type": "RateLimitConfig"
          }
        ]
      },
      {
        "type": "function",
        "name": " parseConf",
        "text": "\n\nexport function parseConf(conf: string): RateLimitConfig {\n  return JSON.parse(conf).map((p) => ({\n    window: p.window,\n    quota: p.quota,\n    ...(p.condition && { condition: Function(`return ${p.condition}`)() }),\n    ...(p.user && { user: Function(`return ${p.user}`)() }),\n  }));\n}",
        "parameters": [
          {
            "name": "conf",
            "text": "conf: string",
            "type": "string"
          }
        ]
      },
      {
        "name": " _test",
        "text": "\n\nexport const _test = {\n  getPolicyFromConf,\n  getRateLimitKey,\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/express/types.ts",
    "exports": [
      {
        "name": " Route",
        "text": "\n\nexport interface Route extends ExpressInterfaces.IRoute {\n  stack: Layer[];\n  metadata?: any;\n  name: string;\n}",
        "type": "interface"
      },
      {
        "name": " Layer",
        "text": "\n\nexport interface Layer {\n  handle?: Route | Router;\n  stack: Layer[];\n  route: Route;\n  name: string;\n  params?: ExpressInterfaces.PathParams;\n  path?: string;\n  keys: Key[];\n  regexp: ExpressRegex;\n  method: string;\n}",
        "type": "interface"
      },
      {
        "name": " ExpressRegex",
        "text": "\n\nexport interface ExpressRegex extends RegExp {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  fast_slash: boolean;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  fast_star: boolean;\n}",
        "type": "interface"
      },
      {
        "name": " RouteMetaData",
        "text": "\n\nexport interface RouteMetaData {\n  path: string;\n  pathParams: Parameter[];\n  method: string;\n  metadata?: any;\n  handle?: Layer['handle'];\n}",
        "type": "interface"
      },
      {
        "name": " Parameter",
        "text": "\n\nexport interface Parameter {\n  in: string;\n  name: string;\n  required: boolean;\n  [key: string]: any;\n}",
        "type": "interface"
      },
      {
        "name": " Key",
        "text": "\n\nexport interface Key {\n  name: string;\n  optional: boolean;\n  offset: number;\n}",
        "type": "interface"
      },
      {
        "name": " MiddleWareConfig",
        "text": "\n\nexport type MiddleWareConfig = {\n  enableCors?: BaseMiddlewareConfig & { args?: { allowAll?: boolean } };\n  bodyParser?: BaseMiddlewareConfig;\n  decodePubsub?: BaseMiddlewareConfig;\n  decodeUser?: BaseMiddlewareConfig;\n  contextMiddleware?: BaseMiddlewareConfig;\n  removeServiceIdPrefix?: BaseMiddlewareConfig;\n  downloadFileData?: BaseMiddlewareConfig;\n  accessLogging?: BaseMiddlewareConfig & {\n    args?: {\n      logLevel?: LogLevel;\n      logPing?: boolean;\n      logAtStart?: boolean;\n    };\n  };\n  enableCompression?: BaseMiddlewareConfig & {\n    args?: { options?: CompressionOptions };\n  };\n  addContextMiddleware?: BaseMiddlewareConfig & {\n    args?: { noDDTags?: boolean };\n  };\n  generalReqValidators?:BaseMiddlewareConfig\n};",
        "type": "{\n  enableCors?: BaseMiddlewareConfig & { args?: { allowAll?: boolean } };\n  bodyParser?: BaseMiddlewareConfig;\n  decodePubsub?: BaseMiddlewareConfig;\n  decodeUser?: BaseMiddlewareConfig;\n  contextMiddleware?: BaseMiddlewareConfig;\n  removeServiceIdPrefix?: BaseMiddlewareConfig;\n  downloadFileData?: BaseMiddlewareConfig;\n  accessLogging?: BaseMiddlewareConfig & {\n    args?: {\n      logLevel?: LogLevel;\n      logPing?: boolean;\n      logAtStart?: boolean;\n    };\n  };\n  enableCompression?: BaseMiddlewareConfig & {\n    args?: { options?: CompressionOptions };\n  };\n  addContextMiddleware?: BaseMiddlewareConfig & {\n    args?: { noDDTags?: boolean };\n  };\n  generalReqValidators?:BaseMiddlewareConfig\n}"
      },
      {
        "name": " PubsubPushReqBody",
        "text": "\n\nexport interface PubsubPushReqBody<T = any> {\n  attributes: Record<string, string>;\n  data: T;\n  messageId: string;\n  message_id: string;\n  publishTime: string;\n  publish_time: string;\n  subscription: string;\n}",
        "type": "interface"
      },
      {
        "name": " PubsubRequest",
        "text": "\nexport interface PubsubRequest<P = any, R = any, B = any, Q = any>\n  extends Request<P, R, PubsubPushReqBody, Q> {}",
        "type": "interface"
      }
    ]
  },
  {
    "file": "@tw/utils/express/utils.ts",
    "exports": [
      {
        "type": "function",
        "name": " removeServiceIdFromPath",
        "text": "export function removeServiceIdFromPath(serviceId, path) {\n  let result = path;\n  const urlParts = path.split('/');\n  if (urlParts[1] === serviceId) {\n    urlParts[1] = '';\n    urlParts.shift();\n    result = urlParts.join('/');\n  }\n  return result;\n}",
        "parameters": [
          {
            "name": "serviceId",
            "text": "serviceId",
            "type": "any"
          },
          {
            "name": "path",
            "text": "path",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/extractProductHandleFromUrl.ts",
    "exports": [
      {
        "name": " extractProductHandleFromUrl",
        "text": "\n\nexport const extractProductHandleFromUrl = (url: string) => {\n  if (!validUrl(url)) {\n    return '';\n  }\n  const urlObj = new URL(url);\n  const { pathname } = urlObj;\n  const pathParts = pathname.split('/');\n\n  if (pathParts.includes('products')) {\n    return pathParts.pop();\n  }\n\n  // if (pathParts.includes('collections')) {\n  //   return pathParts.pop();\n  // }\n\n  return '';\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/featureFlags/getFFChangePubSubHandler.ts",
    "exports": [
      {
        "name": " getFFChangePubSubHandler",
        "text": "\n\n/**\n * @description Each time a shop changes its plan or gets an addon, a pubsub is emitted from the subscription manager\n * with an object of type `FeatureFlagDiffValueMap`.  Multiple services listen to this pub sub and run their changes\n * based on that object.  This function takes in a map of feature flags and their corresponding `FFChangeHandler`\n * callbacks.  If one of the updated feature flags from the diff exists in the provided map, the callback for that\n * feature flag will be run.  Otherwise, it's ignored.\n */\nexport const getFFChangePubSubHandler =\n  (featureFlagHandlerMap: FFChangeHandlerMap) => async (req: Request, res: Response) => {\n    const { shopId, featureFlagDiffMap }: FFChangedDTO = req.body.data;\n    logger.info('featureFlagChanged', { shopId, featureFlagDiffMap });\n\n    try {\n      const changes = Object.keys(featureFlagHandlerMap).map((featureFlag: FeatureFlag) => {\n        // ignore if featureFlag doesn't exist in diff map or is undefined\n        if (!featureFlagDiffMap[featureFlag]) return;\n\n        const diffValue = featureFlagDiffMap[featureFlag];\n        const changeHandler = featureFlagHandlerMap[featureFlag];\n        return changeHandler(shopId, diffValue);\n      });\n\n      await Promise.all(changes);\n    } catch (err) {\n      // This is just extra precaution - errors should be handled in the provided callbacks.\n      logger.error('Error in ff change pubsub handler:>>', err.message, err);\n    } finally {\n      return res.send();\n    }\n  };",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/featureFlags/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/fetcher/checkPeriod.ts",
    "exports": [
      {
        "type": "function",
        "name": " checkPeriod",
        "text": "\n\nexport async function checkPeriod(periodRequest: dataHealthRequest) {\n  // @ts-ignore\n  const {\n    shopId,\n    start,\n    end,\n    jobId,\n    jobType,\n    healthCheckType = HealthCheckType.AdsMetrics,\n    accountIds,\n  } = periodRequest;\n  const serviceHealthCheckConf = services[periodRequest.serviceId].healthCheckConf;\n\n  logger.info(\n    `checkPeriod ${jobId ? `jobId ${jobId}` : ''} ${\n      jobType ? `jobType ${jobType}` : ''\n    } shopId ${shopId} start ${start} end ${end}`\n  );\n\n  async function checkDayInternal(accountId: string, day: string) {\n    const list = [];\n    const isInternalDeltaError = (dataA, dataB) => {\n      const factor = 0.005;\n      const { spend: spendA } = dataA || {};\n      const { spend: spendB } = dataB || {};\n      return Math.abs(spendA / spendB - 1) > factor;\n    };\n    try {\n      const checkParam: MetricsQueryStringParams = {\n        start: day,\n        end: day,\n        service_id: periodRequest.serviceId,\n        data_type: 'ads-metrics',\n        forceBigTable: true, // TODO temp until the data will be updated in BQ\n        shopId,\n        account_ids: [accountId],\n        granularity: 'total',\n      };\n\n      const { data: dayFamilyCheck } = await callServiceEndpoint<\n        ApiMetricsResponse,\n        MetricsQueryStringParams\n      >(\n        'metrics-table',\n        'get-metrics',\n        {\n          ...checkParam,\n          family: 'day',\n        },\n        { method: 'POST' }\n      );\n\n      const { data: hoursFamilyCheck } = await callServiceEndpoint<\n        ApiMetricsResponse,\n        MetricsQueryStringParams\n      >(\n        'metrics-table',\n        'get-metrics',\n        {\n          ...checkParam,\n          family: 'hours',\n        },\n        { method: 'POST' }\n      );\n\n      return {\n        hoursFamilyCheck,\n        dayFamilyCheck,\n        check: !isInternalDeltaError(\n          hoursFamilyCheck.data[0]?.metricsBreakdown[0]?.metrics,\n          dayFamilyCheck.data[0]?.metricsBreakdown[0]?.metrics\n        ),\n      };\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async function checkPeriodData(shopData, period: periodObject) {\n    const allAccounts = services[periodRequest.serviceId].getAccounts(shopData);\n    const accounts = allAccounts.filter(\n      (acc) => !accountIds || !accountIds.length || accountIds.includes(acc.id)\n    );\n    if (moment(period.start).isSame(period.end)) {\n      const checkPromises = accounts.map(async (acc) => {\n        return await checkDayInternal(acc.id, period.start);\n      });\n\n      const accountCheck = await Promise.all(checkPromises);\n\n      let hasInternalDelta = false;\n      accountCheck.forEach((c) => {\n        if (!c.check) hasInternalDelta = true;\n      });\n\n      if (hasInternalDelta) return CHECK_STATUS.INTERNAL_DELTA;\n    }\n\n    const params: dataHealthRequest = {\n      serviceId: periodRequest.serviceId,\n      shopId,\n      start: period.start,\n      sendSlack: false,\n      softImport: false,\n      jobId: periodRequest.jobId,\n      end: period.end,\n      factor: periodRequest.factor,\n      healthCheckType,\n      accountIds,\n    };\n\n    let healthStatus: Record<ServicesIds, DataHealthFullReport[]>;\n    try {\n      healthStatus = (\n        await callServiceEndpoint<Record<ServicesIds, DataHealthFullReport[]>, dataHealthRequest>(\n          'internal',\n          'data-health-check',\n          params,\n          {\n            method: 'POST',\n          }\n        )\n      ).data;\n    } catch (e) {\n      throw e;\n    }\n    if (!healthStatus?.[periodRequest.serviceId]) return CHECK_STATUS.UNKNOWN;\n\n    for (const { id } of accounts) {\n      const accountHealthStatus: DataHealthFullReport = healthStatus?.[\n        periodRequest.serviceId\n      ]?.find((x) => x.accountId === id);\n\n      if (!accountHealthStatus) {\n        logger.warn(\n          `shop ${shopId} account ${id} ${jobId ? `jobId ${jobId}` : ''} check for start ${\n            period.start\n          } end ${period.end} is unknown!`\n        );\n        return CHECK_STATUS.UNKNOWN;\n      }\n      if (\n        accountHealthStatus &&\n        isDeltaError(\n          accountHealthStatus,\n          periodRequest.factor,\n          moment(period.end).diff(period.start, 'days'),\n          undefined\n        )\n      ) {\n        const notEmptyFields = Object.keys(accountHealthStatus.fieldsComparison).some(\n          (field) => accountHealthStatus.fieldsComparison[field].internal\n        );\n        if (!notEmptyFields) {\n          logger.warn(\n            `shop ${shopId} account ${id} ${jobId ? `jobId ${jobId}` : ''} check for start ${\n              period.start\n            } end ${period.end} internal data is ZERO!`\n          );\n          return CHECK_STATUS.INTERNAL_ZERO;\n        }\n\n        logger.warn(\n          `shop ${shopId} account ${id} ${jobId ? `jobId ${jobId}` : ''} check for start ${\n            period.start\n          } end ${period.end} is with DELTA!`\n        );\n        return CHECK_STATUS.DELTA;\n      }\n    }\n\n    logger.info(\n      `shop ${shopId} ${jobId ? `jobId ${jobId}` : ''} check for start ${period.start} end ${\n        period.end\n      } is GOOD!`\n    );\n    return CHECK_STATUS.GOOD;\n  }\n\n  const shopData = await getShopData(shopId, { mongo: periodRequest?.jobType !== 'initial' });\n\n  let stack: periodObject[] = [];\n  let newStack: periodObject[] = [];\n  let deltaDaysList: importDay[] = [];\n  let periodsList: any[] = [];\n\n  const dateRangeLimit = services[serviceId].dateRangeLimit;\n\n  if (dateRangeLimit) {\n    let periodStart = moment(start);\n    let periodEnd = moment(end);\n\n    while (periodStart <= periodEnd) {\n      let partialPeriodEnd = moment\n        .min(periodEnd, moment(periodStart).add(dateRangeLimit - 1, 'days'))\n        .clone();\n\n      stack.push({\n        start: periodStart.format('YYYY-MM-DD'),\n        end: partialPeriodEnd.format('YYYY-MM-DD'),\n      });\n      periodStart = partialPeriodEnd.add(1, 'days');\n    }\n  } else {\n    stack.push({ start, end });\n  }\n\n  async function runSinglePeriodCheck(period: periodObject) {\n    const daysDiff = moment(period.end).diff(moment(period.start), 'days');\n\n    try {\n      let periodStatus: CHECK_STATUS = await checkPeriodData(shopData, period);\n      periodsList.push({ ...period, status: periodStatus });\n      switch (periodStatus) {\n        case CHECK_STATUS.GOOD:\n          return;\n        // continue;\n        case CHECK_STATUS.UNKNOWN:\n        case CHECK_STATUS.INTERNAL_ZERO:\n          const days = moment(period.end).diff(moment(period.start), 'days');\n          for (let i = 0; i <= days; i++) {\n            deltaDaysList.push({\n              day: moment(period.end).subtract(i, 'days').format('YYYY-MM-DD'),\n              status: periodStatus,\n            });\n          }\n          if (periodStatus === CHECK_STATUS.INTERNAL_ZERO) return;\n          else {\n            logger.warn(\n              `can't get health status for ${shopId} ${jobId ? `jobId ${jobId}` : ''} start ${\n                period.start\n              } end ${period.end}. return all period with status UNKNOWN.`\n            );\n            return;\n            // throw `can't get health status for ${shopId} ${jobId ? `jobId ${jobId}` : ''} start ${\n            //   period.start\n            // } end ${period.end}`;\n          }\n\n        // continue;\n      }\n\n      switch (daysDiff) {\n        // not neccery becouse the next option, we not adding single day period to the stack\n        case 0:\n          deltaDaysList.push({ day: period.start, status: periodStatus });\n          return;\n      }\n    } catch (e) {\n      throw e;\n    }\n\n    const splitPeriodDay = moment(period.start).add(Math.floor(daysDiff / 2), 'days');\n\n    newStack.push({ start: period.start, end: splitPeriodDay.format('YYYY-MM-DD') });\n    newStack.push({ start: splitPeriodDay.add(1, 'days').format('YYYY-MM-DD'), end: period.end });\n  }\n\n  logger.info(\n    `checkPeriod: start checking. isSerialPeriodsChecks: ${serviceHealthCheckConf?.isSerialPeriodsChecks}`,\n    { shopId, jobId }\n  );\n\n  while (stack.length > 0) {\n    if (serviceHealthCheckConf?.isSerialPeriodsChecks) {\n      for (const period of stack) {\n        await runSinglePeriodCheck(period);\n      }\n    } else {\n      const promises = stack.map(async (period: periodObject) => runSinglePeriodCheck(period));\n      await Promise.all(promises);\n    }\n\n    stack = newStack;\n    newStack = [];\n  }\n  const daysDiff = moment(end).diff(moment(start), 'days') + 1;\n\n  logger.info(\n    `shopId ${shopId} ${\n      jobId ? `jobId ${jobId}` : ''\n    } days in period: ${daysDiff}. periods checks: ${periodsList.length}. days with delta: ${\n      deltaDaysList.length\n    }`\n  );\n\n  return {\n    deltaDaysList: deltaDaysList.sort((a, b) => {\n      return b.day.localeCompare(a.day);\n    }),\n    periodsList,\n  };\n}",
        "parameters": [
          {
            "name": "periodRequest",
            "text": "periodRequest: dataHealthRequest",
            "type": "dataHealthRequest"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/fetcher/endpointHandlers.ts",
    "exports": [
      {
        "type": "function",
        "name": " startJob",
        "text": "\n\nexport async function startJob(args: startJobOptions): Promise<startJobResponse> {\n  const req: Request = args.req as any;\n  const {\n    defaultEndpoint = 'import-day-data',\n    queueName = `${serviceId}-import-day-data`,\n    endpoints,\n  } = args;\n\n  const data = req.body.data as FetchChunkData;\n  const taskName = req.headers['x-cloudtasks-taskname'];\n  const logger = getJobLogger(data, taskName);\n\n  logger.info('start job request');\n  const jobManagerData = await getJob(data.jobID);\n  // if (jobManagerData?.status === 'in_progress') {\n  //   logger.warn(\n  //     `${serviceId} start-job shop ${data.shopDomain} jobID ${data.jobID} already running ignoring this call`\n  //   );\n  //   throw `${serviceId} start-job shop ${data.shopDomain} jobID ${data.jobID} already running ignoring this call`;\n  // }\n\n  if (serviceId !== req.body.attributes['serviceId']) {\n    logger.warn(`expected service id ${serviceId} but got: ${req.body.attributes['serviceId']}`);\n    throw new Error(\n      `expected service id ${serviceId} but got: ${req.body.attributes['serviceId']}`\n    );\n  }\n\n  const endpoint =\n    endpoints?.find((ep) => ep.conditionString === data[ep.conditionField])?.endpoint ||\n    defaultEndpoint;\n\n  logger.info(`checkBefore from api ${data.checkBefore} jobId ${data.jobID}`);\n\n  if (data.jobType === 'initial' && data.checkBefore) {\n    try {\n      const timestamp = new Date().getTime();\n      logger.info(\n        `start initial import for shop ${data.shopDomain} checkPeriod before jobId ${data.jobID}`\n      );\n      await updateJob(data.jobID, {\n        status: 'in_progress',\n      });\n\n      const { deltaDaysList, periodsList } = await checkPeriod({\n        shopId: data.shopDomain,\n        start: moment(data.day).subtract(data.total, 'days').format('YYYY-MM-DD'),\n        end: data.day,\n        jobId: data.jobID,\n        jobType: data.jobType,\n        serviceId: serviceId,\n        healthCheckType: data.healthCheckType,\n        accountIds: data.accountIds,\n      });\n\n      logger.info(\n        `Initial import for shop ${data.shopDomain} jobId ${\n          data.jobID\n        } checkPeriod before done #days ${deltaDaysList.length} days:${JSON.stringify(\n          deltaDaysList\n        )} , Took: ${new Date().getTime() - timestamp}ms`\n      );\n      logger.info(\n        `Initial import for shop ${data.shopDomain} jobId ${\n          data.jobID\n        } checkPeriod before done, periodsList ${JSON.stringify(periodsList)}`\n      );\n\n      if (deltaDaysList.length === 0) {\n        logger.info(\n          `Finish import for shop ${data.shopDomain} jobId ${data.jobID} 0 days to import`\n        );\n      }\n\n      await updateJob(data.jobID, {\n        total: deltaDaysList.length,\n      });\n\n      data.days = deltaDaysList;\n      data.day = null;\n      data.total = null;\n      data.checkBefore = false;\n    } catch (e) {\n      logger.error(\n        `error while checkPeriod before for shop ${data.shopDomain} jobid ${data.jobID}`,\n        e\n      );\n    }\n  }\n\n  return { data, endpoint, queueName };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: startJobOptions",
            "type": "startJobOptions"
          }
        ]
      },
      {
        "type": "function",
        "name": " importDayFetcher",
        "text": "\n\nexport async function importDayFetcher(\n  req: Request,\n  res: Response,\n  fetchFunction: (args: any) => Promise<any>\n) {\n  let body = req.body as FetchChunkData;\n  const queueName = req.headers['x-cloudtasks-queuename'] as string;\n  const taskName = req.headers['x-cloudtasks-taskname'];\n  let { shopData } = body;\n  const { jobType, index, shopDomain, jobID, dataType, forceExternalFetch, days, accountIds } =\n    body;\n  shopData = shopData ?? (await getShopData(shopDomain, { mongo: jobType !== 'initial' }));\n  let { total, day } = body;\n  const logger = getJobLogger(body, taskName);\n  let timer;\n\n  const preconditionResult = await checkPrecondition(req);\n  if (!preconditionResult.continue) {\n    logger.info(\n      `Precondition continue for jobID ${jobID} shopDomain ${shopDomain} will not import`\n    );\n    return res.send('ok');\n  }\n\n  try {\n    if (days && total) {\n      const message = `when using days, total and day are manage internally, don't send them jobID ${jobID}`;\n      logger.error(message);\n      const result = await onFailure(req);\n      return res.status(418).send(result);\n    }\n\n    if (!total && days) {\n      if (days.length === 0) {\n        // in case the health check find 0 days to import - just close the job\n        logger.info(`import day JobId ${jobID} shopDomain ${shopDomain} days is 0 done the job`);\n        await onSuccess(req);\n        return res.send('ok');\n      }\n      total = days.length;\n      (day as any) = days[index - 1]?.day ?? days[index - 1];\n      logger.debug(`import day ${day} index ${index} days ${JSON.stringify(days)} JobId ${jobID}`);\n      logger.info(`import day ${day} index ${index} JobId ${jobID}`);\n    }\n\n    if (!shopDomain) {\n      const message = `error no shopDomain (${shopData}) JobId ${jobID}`;\n      logger.error(message);\n      const result = await onFailure(req);\n      return res.status(418).send(result);\n    }\n\n    await updateJob(jobID, {\n      currentIndex: index,\n      status: 'in_progress',\n      shopDomain,\n      jobType,\n    });\n\n    logger.info(\n      `starting import day shopDomain ${shopDomain} day ${day} type ${jobType} jobId ${jobID}`\n    );\n\n    let checkBefore: boolean = body.checkBefore !== false;\n    if (days) {\n      checkBefore = days[index - 1]?.status === CHECK_STATUS.UNKNOWN || false;\n    }\n\n    await retry(\n      async () => {\n        logger.info(\n          `Calling fetchFunction import day shopDomain ${shopDomain} day ${day} total ${total} type ${jobType} jobId ${jobID} checkBefore ${checkBefore}`\n        );\n        await fetchFunction({ ...body, total, day, checkBefore });\n      },\n      {\n        retries: 1,\n        maxTimeout: 2 * 60 * 1000, // max 2 minutes between retries\n        onRetry: (e) => {\n          let msg;\n          try {\n            msg = JSON.stringify(e);\n          } catch {}\n          logger.warn(`Doing retry on error jobId ${jobID}: ${msg ?? e}`);\n        },\n      }\n    );\n    await updateLastImport(shopDomain, serviceId, day ? moment(day).toDate() : moment().toDate());\n    await onSuccess(req);\n    return res.send('ok');\n  } catch (e) {\n    logger.warn(\n      `importDayFetcher general error shopDomain ${shopDomain} jobID ${jobID} jobType ${jobType}:  error: ${JSON.stringify(\n        e\n      )}`\n    );\n    clearTimeout(timer);\n    const result = await onFailure(req, e);\n    return res.status(418).send(result);\n  }\n}",
        "parameters": [
          {
            "name": "req",
            "text": "req: Request",
            "type": "Request"
          },
          {
            "name": "res",
            "text": "res: Response",
            "type": "Response"
          },
          {
            "name": "fetchFunction",
            "text": "fetchFunction: (args: any) => Promise<any>",
            "type": "(args: any) => Promise<any>"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/fetcher/facebookGetValueFromAction.ts",
    "exports": [
      {
        "name": " facebookGetValueFromAction",
        "text": "\n\nexport const facebookGetValueFromAction = (\n  data: FacebookActionStat,\n  attributionWindow: string[]\n) => {\n  if (!data) return 0;\n  let val = 0;\n  attributionWindow.forEach((window) => {\n    if (data[window]) {\n      val += +data[window] || 0;\n    }\n  });\n  return val;\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/fetcher/getAccountsWithDelta.ts",
    "exports": [
      {
        "name": " getAccountsWithDelta",
        "text": "\n\nexport const getAccountsWithDelta = async (\n  checkBefore: boolean,\n  serviceId: ServicesIds,\n  shopDomain: string,\n  day: string,\n  accounts: any[],\n  jobID: string\n) => {\n  let accountsWithDelta;\n  const params: dataHealthRequest = {\n    serviceId,\n    shopId: shopDomain,\n    start: day,\n    sendSlack: false,\n    softImport: false,\n    end: day,\n    accountIds: accounts.map(({ id }) => id),\n  };\n  if (!checkBefore) {\n    return accounts;\n  }\n  let healthCheckOk = true;\n  let healthStatus: Record<ServicesIds, DataHealthFullReport[]>;\n  try {\n    logger.info(`healthStatus check before reimport day ${day} shop ${shopDomain} jobID ${jobID}`);\n    healthStatus = (\n      await callServiceEndpoint<Record<ServicesIds, DataHealthFullReport[]>, dataHealthRequest>(\n        'internal',\n        'data-health-check',\n        params,\n        {\n          method: 'POST',\n        }\n      )\n    ).data;\n  } catch (e) {\n    healthCheckOk = false;\n    logger.error(\n      `ERROR healthStatus check before reimport day ${day} shop ${shopDomain} jobID ${jobID} error: ${e.message}`\n    );\n  }\n\n  accountsWithDelta = accounts.filter(({ id }) => {\n    const accountHealthStatus: DataHealthFullReport = healthStatus?.[serviceId]?.find(\n      (x) => x.accountId === id\n    );\n    if (\n      healthCheckOk &&\n      accountHealthStatus &&\n      !isDeltaError(\n        accountHealthStatus,\n        undefined, // factor, default 0.01\n        undefined, // diffDays, default 1\n        1\n      )\n    ) {\n      logger.info(\n        `Nothing change for account ${id} day ${day} shop ${shopDomain} jobID ${jobID} will not import, continue`\n      );\n      return false;\n    } else {\n      return true;\n    }\n  });\n\n  return accountsWithDelta;\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/fetcher/healthCheck.ts",
    "exports": [
      {
        "name": " isDeltaError",
        "text": "\n\nexport const isDeltaError = (\n  fullReport: DataHealthFullReport,\n  factor: number = 0.03,\n  diffDays: number = 0,\n  minDelta?: number,\n  healthCheckType: HealthCheckType = HealthCheckType.AdsMetrics\n) => {\n  const logExtraData = {\n    shopId: fullReport.shopId,\n    factor,\n    diffDays,\n    minDelta,\n    serviceId: fullReport.serviceId,\n  };\n  logger.info(`isDeltaError: started.`, logExtraData);\n\n  const serviceHealthCheckConf = services[fullReport.serviceId].healthCheckConf?.fields;\n\n  if (!serviceHealthCheckConf) {\n    logger.warn(`isDeltaError: health-check conf is not defined for service.`, logExtraData);\n    return false;\n  }\n  const criticalFields = Object.entries(serviceHealthCheckConf).filter(\n    ([_, field]) => field.isCritical\n  );\n\n  factor = factor / (diffDays + 1);\n\n  for (const [field, conf] of criticalFields) {\n    const fieldMinDelta = minDelta || conf.minDelta || DEFAULT_MIN_DELTA;\n    const internalNum = fullReport.fieldsComparison[field]?.internal;\n    const delta = fullReport.fieldsComparison[field]?.delta;\n\n    if (\n      internalNum === undefined ||\n      internalNum === null ||\n      delta === undefined ||\n      delta === null\n    ) {\n      logger.info(`isDeltaError: field: ${field}, return true undefined checking.`, logExtraData);\n      return true;\n    }\n    if (!internalNum && Math.abs(delta) > 0) {\n      logger.info(\n        `isDeltaError: field: ${field}, return true internal 0 or null but not delta.`,\n        logExtraData\n      );\n      return true;\n    }\n    const actualCheck =\n      Math.abs(+delta?.toFixed(2) / +internalNum?.toFixed(2)) > factor &&\n      Math.abs(delta) >= fieldMinDelta;\n    if (actualCheck) {\n      logger.info(\n        `isDeltaError: field: ${field}, Math.abs(+delta?.toFixed(2) / +num?.toFixed(2)) = ${Math.abs(\n          +delta?.toFixed(2) / +internalNum?.toFixed(2)\n        )} \n                  > factor = ${factor} = ${\n          Math.abs(+delta?.toFixed(2) / +internalNum?.toFixed(2)) > factor\n        } && Math.abs(delta) \n                  >= ${fieldMinDelta} = ${\n          Math.abs(delta) >= fieldMinDelta\n        } equal - res ${actualCheck}.`,\n        logExtraData\n      );\n      return true;\n    }\n  }\n\n  logger.info(`isDeltaError: ended. return false end of the function.`, logExtraData);\n  return false;\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/fetcher/index.ts",
    "exports": [
      {
        "name": " preconditionResult",
        "text": "\n\nexport type preconditionResult = { continue: boolean; message?: any; timer?: NodeJS.Timeout };",
        "type": "{ continue: boolean; message?: any; timer?: NodeJS.Timeout }"
      },
      {
        "type": "function",
        "name": " checkPrecondition",
        "text": "\n\nexport async function checkPrecondition(\n  req: Request,\n  args?: { timeoutHandle?: number }\n): Promise<preconditionResult> {\n  const body = req.body as FetchChunkData;\n  const retryCount = +req.headers['x-cloudtasks-taskretrycount'];\n  const taskName = req.headers['x-cloudtasks-taskname'];\n  const { jobType, index, shopDomain, jobID, shopData, day, dataType } = body;\n  const { timeoutHandle } = args || {};\n  let timer: NodeJS.Timeout;\n  const logger = getJobLogger(body, taskName);\n\n  const jobManagerData = await getJob(jobID);\n\n  // when starting `index` is 1 and jobManagerData.currentIndex is 0\n\n  // Check if canceled\n  if (jobManagerData.requestCancel) {\n    await updateJob(jobID, {\n      status: 'done',\n      canceledAt: Date.now(),\n      successful: false,\n      shopDomain,\n      jobType,\n    });\n    const message = `job was canceled jobID ${jobID}`;\n    logger.warn(message);\n    return { continue: false, message };\n  }\n\n  // check if duplicate\n  if (jobManagerData.currentIndex === index) {\n    // might still be a retry\n    if (retryCount === 0) {\n      const message = `this might be a duplicate jobID ${jobID}`;\n      logger.warn(message);\n      return { continue: false, message };\n    }\n  }\n\n  // check starting at earlier index then current\n  if (index < jobManagerData.currentIndex) {\n    // this will choke wild forks\n    const message = `got a request to start with index ${index} but job manager is already on ${jobManagerData.currentIndex} jobID ${jobID}`;\n    logger.warn(message);\n    return { continue: false, message };\n  }\n\n  // Check if forked due to timeout ;)\n  if (retryCount > 0 && req.headers['x-cloudtasks-taskpreviousresponse'] === '0') {\n    // we have a retry that is not a 4xx or 5xx error so if current index was started we\n    // prob had a timeout\n    if (jobManagerData.currentIndex === index) {\n      // https://cloud.google.com/tasks/docs/creating-http-target-tasks#handler\n      const message = `We got a retry that is a fork, not retrying. jobID ${jobID} headers: ${JSON.stringify(\n        req.headers\n      )}`;\n      logger.error(message);\n      return { continue: false, message };\n    }\n    logger.info(`network related retry jobID ${jobID}`);\n  }\n  if (\n    !isProviderConnectedToShop(\n      await getShopData(shopDomain, { mongo: jobType !== 'initial' }),\n      serviceId\n    )\n  ) {\n    await updateJob(jobID, {\n      status: 'failed',\n      failedAt: Date.now(),\n      successful: false,\n      shopDomain,\n      jobType,\n    });\n    const message = `No ${serviceId} Access Token or Accounts for shop ${shopDomain} jobID ${jobID}`;\n    logger.info(message);\n    return { continue: false, message };\n  }\n\n  if (timeoutHandle) {\n    timer = preRequestTimeout(timeoutHandle, async () => {\n      const jobManagerData = await getJob(jobID);\n\n      if (!(jobManagerData.currentIndex === index)) {\n        // this is mostly for shopify products that run in a single loop, and we do not want to\n        // restart them, if they fail so be it.\n        // this does work for the rest bcuz most of the times when we get a timeout, it's not bcuz\n        // the job is still runinng but bcuz it got stuck and will never recover,\n        // but sometimes imports might take morw than an hour, just something to keep\n        // in mind.\n        logger.warn(\n          `getting close to timeout, but job manager has different index, ${jobManagerData.currentIndex} ${index} jobID ${jobID}`\n        );\n        return;\n      }\n\n      logger.warn(\n        `very close to timeout so updating job and resending current task jobID ${jobID}`\n      );\n      await updateJob(jobID, { currentIndex: index - 1 });\n      // recall this\n      await callImport(req, body, day, index);\n    });\n  }\n  logger.info(`precondition ${shopDomain} day ${day} type ${jobType} jobID ${jobID}`);\n  req['timer'] = timer;\n  return { continue: true, timer };\n}",
        "parameters": [
          {
            "name": "req",
            "text": "req: Request",
            "type": "Request"
          },
          {
            "name": "args",
            "text": "args?: { timeoutHandle?: number }",
            "type": "{ timeoutHandle?: number }"
          }
        ]
      },
      {
        "type": "function",
        "name": " onSuccess",
        "text": "\n\nexport async function onSuccess(req: Request) {\n  const body = req.body as FetchChunkData;\n  const taskName = req.headers['x-cloudtasks-taskname'];\n  const { jobType, index, shopDomain, jobID, day, days } = body;\n  let { total } = body;\n  const logger = getJobLogger(body, taskName);\n\n  if (req['timer']) clearTimeout(req['timer']);\n\n  if (days?.length) {\n    total = days?.length;\n  }\n\n  // Check if done\n  if (index >= total) {\n    if (jobType === 'initial') {\n      try {\n        await callServiceEndpoint(\n          'internal',\n          'data-health-check/recheck-health-by-reports',\n          { jobId: jobID },\n          { method: 'POST' }\n        );\n      } catch (error) {\n        logger.error(`error updating data health report after job done ${jobID}`, { error });\n      }\n    }\n    await updateJob(jobID, {\n      status: 'done',\n      finishedAt: Date.now(),\n      successful: true,\n      shopDomain,\n      jobType,\n    });\n    logger.info(`done job jobId ${jobID}`);\n    return { success: true };\n  }\n\n  // call next\n\n  const nextDay = days ? null : moment(day).subtract(1, 'days').format('YYYY-MM-DD');\n  // const nextDay = moment(day).subtract(1, 'days').format('YYYY-MM-DD');\n  logger.info(\n    `import nextDay shopDomain ${shopDomain} nextDay ${\n      days ? days[index].day : nextDay\n    } type ${jobType} jobId ${jobID}`\n  );\n\n  await callImport(req, body, nextDay, index + 1);\n  logger.info(`finished import`);\n}",
        "parameters": [
          {
            "name": "req",
            "text": "req: Request",
            "type": "Request"
          }
        ]
      },
      {
        "type": "function",
        "name": " onFailure",
        "text": "\n\nexport async function onFailure(req: Request, e?) {\n  const body = req.body as FetchChunkData;\n  const taskName = req.headers['x-cloudtasks-taskname'];\n  const { jobType, shopDomain, jobID } = body;\n  const logger = getJobLogger(body, taskName);\n  if (req['timer']) clearTimeout(req['timer']);\n  await updateJob(jobID, {\n    successful: false,\n    status: 'failed',\n    failedAt: Date.now(),\n    shopDomain,\n    jobType,\n  });\n  if (e) {\n    logger.error(\n      `onFailure shopDomain ${shopDomain} jobID ${jobID} jobType ${jobType},  error: ${JSON.stringify(\n        e\n      )}`\n    );\n  }\n  return { success: false };\n}",
        "parameters": [
          {
            "name": "req",
            "text": "req: Request",
            "type": "Request"
          },
          {
            "name": "e",
            "text": "e?",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/fetcher/utils.ts",
    "exports": [
      {
        "type": "function",
        "name": " updateJobIndex",
        "text": "\n\nexport async function updateJobIndex(jobID, index, shopDomain, jobType) {\n  return await updateJob(jobID, {\n    currentIndex: index,\n    status: 'in_progress',\n    shopDomain,\n    jobType,\n  });\n}",
        "parameters": [
          {
            "name": "jobID",
            "text": "jobID",
            "type": "any"
          },
          {
            "name": "index",
            "text": "index",
            "type": "any"
          },
          {
            "name": "shopDomain",
            "text": "shopDomain",
            "type": "any"
          },
          {
            "name": "jobType",
            "text": "jobType",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " getJob",
        "text": "\n\nexport async function getJob(jobID: string): Promise<SingleJob> {\n  return (\n    await callServiceEndpoint<SingleJob>(\n      'job-manager',\n      `jobs/${jobID}`,\n      {},\n      { method: 'GET', log: false }\n    )\n  ).data;\n}",
        "parameters": [
          {
            "name": "jobID",
            "text": "jobID: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " updateJob",
        "text": "\n\nexport async function updateJob(jobID: string, update) {\n  return (\n    await callServiceEndpoint('job-manager', `jobs/${jobID}`, update, { method: 'PUT', log: false })\n  ).data;\n}",
        "parameters": [
          {
            "name": "jobID",
            "text": "jobID: string",
            "type": "string"
          },
          {
            "name": "update",
            "text": "update",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " getJobLogger",
        "text": "\n\nexport function getJobLogger(jobData: any, taskName?) {\n  const { jobID, index, shopDomain, dataType, day, jobType } = jobData;\n  const loggerOptions = {\n    name: jobID || 'unknown',\n    jobID,\n    index,\n    day,\n    jobType: jobType || 'unknown',\n    shopDomain,\n    serviceId,\n    dataType,\n  };\n  if (taskName) {\n    loggerOptions['taskName'] = taskName;\n  }\n  const logger = getLogger({ options: loggerOptions });\n  return logger;\n}",
        "parameters": [
          {
            "name": "jobData",
            "text": "jobData: any",
            "type": "any"
          },
          {
            "name": "taskName",
            "text": "taskName?",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " preRequestTimeout",
        "text": "\n\nexport function preRequestTimeout(timeoutHandle, handleTimeout: () => any) {\n  const timer = setTimeout(handleTimeout, timeoutHandle);\n  return timer;\n}",
        "parameters": [
          {
            "name": "timeoutHandle",
            "text": "timeoutHandle",
            "type": "any"
          },
          {
            "name": "handleTimeout",
            "text": "handleTimeout: () => any",
            "type": "() => any"
          }
        ]
      },
      {
        "type": "function",
        "name": " callImport",
        "text": "\n\nexport async function callImport(req: Request, body: FetchChunkData, day, index) {\n  const { shopDomain, jobID, dataType, days } = body;\n  const queueName = req.headers['x-cloudtasks-queuename'] as string;\n\n  await addTaskToQueue(\n    queueName,\n    serviceId,\n    `${req.path}?day=${\n      days ? days[index - 1].day : day\n    }&shop=${shopDomain}&dataType=${dataType}&jobID=${jobID}`,\n    {\n      ...req.body,\n      day: day,\n      index: index,\n    },\n    { dispatchDeadline: 1800, deployment: process.env.TW_DEPLOYMENT }\n  );\n}",
        "parameters": [
          {
            "name": "req",
            "text": "req: Request",
            "type": "Request"
          },
          {
            "name": "body",
            "text": "body: FetchChunkData",
            "type": "FetchChunkData"
          },
          {
            "name": "day",
            "text": "day",
            "type": "any"
          },
          {
            "name": "index",
            "text": "index",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/filters/buildCondition.ts",
    "exports": [
      {
        "type": "function",
        "name": " buildCollectionCondition",
        "text": "\n\nexport function buildCollectionCondition({\n  collectionName,\n  subCollectionName,\n  propertyFieldName,\n  propertyType,\n  comparator,\n  values,\n}: {\n  collectionName: string;\n  subCollectionName?: string;\n  propertyFieldName: string;\n  propertyType: FilterPropertyType;\n  comparator: FilterComparator;\n  values;\n}): string {\n  if (propertyFieldName === 'count') {\n    return buildCondition({\n      propertyFieldName: `ARRAY_LENGTH(${collectionName})`,\n      propertyType,\n      comparator,\n      values,\n    });\n  }\n\n  const valueCondition = buildCondition({ propertyFieldName, propertyType, comparator, values });\n  const unnestExpression = `UNNEST(${collectionName}) ${\n    subCollectionName ? `, UNNEST(${subCollectionName})` : ''\n  } ${subCollectionName || collectionName}`;\n  const countExpression = `SELECT COUNT(${propertyFieldName}) FROM ${unnestExpression} where ${valueCondition}`;\n\n  if (isNegativeComparator(comparator)) {\n    return `(${countExpression}) = ARRAY_LENGTH(${collectionName})`;\n  } else {\n    return `(${countExpression}) > 0`;\n  }\n}",
        "parameters": [
          {
            "name": "{\n  collectionName,\n  subCollectionName,\n  propertyFieldName,\n  propertyType,\n  comparator,\n  values,\n}",
            "text": "{\n  collectionName,\n  subCollectionName,\n  propertyFieldName,\n  propertyType,\n  comparator,\n  values,\n}: {\n  collectionName: string;\n  subCollectionName?: string;\n  propertyFieldName: string;\n  propertyType: FilterPropertyType;\n  comparator: FilterComparator;\n  values;\n}",
            "type": "{\n  collectionName: string;\n  subCollectionName?: string;\n  propertyFieldName: string;\n  propertyType: FilterPropertyType;\n  comparator: FilterComparator;\n  values;\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " buildCondition",
        "text": "\n\nexport function buildCondition({\n  propertyFieldName,\n  propertyType,\n  comparator,\n  values,\n}: {\n  propertyFieldName: string;\n  propertyType: FilterPropertyType;\n  comparator: FilterComparator;\n  values;\n}): string {\n  let value = handleValueSpecialChars(values.value, comparator);\n\n  switch (comparator) {\n    case FilterComparator.EQUAL:\n      if (propertyType === FilterPropertyType.STRING) value = `'${value}'`;\n      return `${propertyFieldName} = ${value}`;\n    case FilterComparator.NOT_EQUAL:\n      if (propertyType === FilterPropertyType.STRING) value = `'${value}'`;\n      return `${propertyFieldName} <> ${value}`;\n    case FilterComparator.GREATER_THAN:\n      return `${propertyFieldName} > ${value}`;\n    case FilterComparator.LESS_THAN:\n      return `${propertyFieldName} < ${value}`;\n    case FilterComparator.CONTAIN:\n      return `lower(${propertyFieldName}) LIKE '%${value.toLocaleLowerCase()}%'`;\n    case FilterComparator.NOT_CONTAIN:\n      return `lower(${propertyFieldName}) NOT LIKE '%${value.toLocaleLowerCase()}%'`;\n    case FilterComparator.START_WITH:\n      return `lower(${propertyFieldName}) LIKE '${value.toLocaleLowerCase()}%'`;\n    case FilterComparator.NOT_START_WITH:\n      return `lower(${propertyFieldName}) NOT LIKE '${value.toLocaleLowerCase()}%'`;\n    case FilterComparator.END_WITH:\n      return `lower(${propertyFieldName}) LIKE '%${value.toLocaleLowerCase()}'`;\n    case FilterComparator.NOT_END_WITH:\n      return `lower(${propertyFieldName}) NOT LIKE '%${value.toLocaleLowerCase()}'`;\n    case FilterComparator.IS_IN:\n      return `${propertyFieldName} IN ('${value.join(\"','\")}')`;\n    case FilterComparator.IS_NOT_IN:\n      return `${propertyFieldName} NOT IN ('${value.join(\"','\")}')`;\n    case FilterComparator.IS_SET:\n      return `${propertyFieldName} IS NOT NULL`;\n    case FilterComparator.IS_NOT_SET:\n      return `${propertyFieldName} IS NULL`;\n    case FilterComparator.IS:\n      return `${propertyFieldName} = true`;\n    case FilterComparator.IS_NOT:\n      return `${propertyFieldName} = false`;\n\n    // array fields (repeated_string)\n    case FilterComparator.ARRAY_CONTAINS:\n      return `'${value}' IN UNNEST(${propertyFieldName})`;\n    case FilterComparator.ARRAY_NOT_CONTAINS:\n      return `'${value}' NOT IN UNNEST(${propertyFieldName})`;\n\n    // Date\n    case FilterComparator.OVER_ALL_TIME:\n      return 'true';\n    case FilterComparator.BETWEEN:\n      return `DATE(${propertyFieldName}, shop_timezone) BETWEEN '${values.value1}' AND '${values.value2}'`;\n    case FilterComparator.BEFORE:\n      return `DATE(${propertyFieldName}, shop_timezone) < '${value}'`;\n    case FilterComparator.AFTER:\n      return `DATE(${propertyFieldName}, shop_timezone) > '${value}'`;\n    case FilterComparator.WITHIN:\n      const largerValue = values.value1 > values.value2 ? values.value1 : values.value2;\n      const smallerValue = values.value1 < values.value2 ? values.value1 : values.value2;\n      return `DATE(${propertyFieldName}, shop_timezone) BETWEEN DATE(DATE_ADD(CURRENT_DATETIME(shop_timezone), INTERVAL -${smallerValue} ${values.unit})) AND DATE(DATE_ADD(CURRENT_DATETIME(shop_timezone), INTERVAL -${largerValue} ${values.unit}))`;\n    case FilterComparator.UNDER:\n      return `DATE(${propertyFieldName}, shop_timezone) > DATE_ADD(CURRENT_DATETIME(), INTERVAL -${value} ${values.unit})`;\n    case FilterComparator.OVER:\n      return `DATE(${propertyFieldName}, shop_timezone) < DATE_ADD(CURRENT_DATETIME(), INTERVAL -${value} ${values.unit})`;\n  }\n}",
        "parameters": [
          {
            "name": "{\n  propertyFieldName,\n  propertyType,\n  comparator,\n  values,\n}",
            "text": "{\n  propertyFieldName,\n  propertyType,\n  comparator,\n  values,\n}: {\n  propertyFieldName: string;\n  propertyType: FilterPropertyType;\n  comparator: FilterComparator;\n  values;\n}",
            "type": "{\n  propertyFieldName: string;\n  propertyType: FilterPropertyType;\n  comparator: FilterComparator;\n  values;\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " handleValueSpecialChars",
        "text": "\n\nexport function handleValueSpecialChars(value, comparator?: FilterComparator) {\n  const replace = (val) => {\n    const newVal = val.replace(/\\'/g, \"\\\\'\");\n    if (comparator === FilterComparator.CONTAIN || comparator === FilterComparator.NOT_CONTAIN) {\n      return newVal.replace(/_/g, '\\\\_');\n    }\n    return newVal;\n  };\n\n  if (typeof value === 'string') {\n    return replace(value);\n  }\n\n  if (Array.isArray(value)) {\n    return value.map((val) => {\n      if (typeof val === 'string') {\n        return replace(val);\n      }\n\n      return val;\n    });\n  }\n\n  return value;\n}",
        "parameters": [
          {
            "name": "value",
            "text": "value",
            "type": "any"
          },
          {
            "name": "comparator",
            "text": "comparator?: FilterComparator",
            "type": "FilterComparator"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/filters/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/fs/backupCollection.ts",
    "exports": [
      {
        "name": " backupFsCollection",
        "text": "\n\nexport const backupFsCollection = async (\n  collectionName: string,\n  includeSubCollections: boolean = true\n) => {\n  logger.info(\n    `Backing up collection ${collectionName} to GCS, includeSubCollections: ${includeSubCollections}`\n  );\n  const data: { [docId: string]: any } = {};\n  try {\n    const collectionSnapshot = await firestore().collection(collectionName).get();\n    const limit = pLimit(100);\n    await Promise.all(\n      collectionSnapshot.docs.map(async (doc) =>\n        limit(async () => {\n          const docData = doc.data();\n\n          if (includeSubCollections) {\n            const subCollectionRef = await doc.ref.listCollections();\n            const subCollections = {};\n            await Promise.all(\n              subCollectionRef.map(async (sub) => {\n                const subCollectionData: { [subdocId: string]: any } = {};\n                const subCollectionSnapshot = await sub.get();\n                subCollectionSnapshot.forEach((subDoc) => {\n                  subCollectionData[subDoc.id] = subDoc.data();\n                });\n                subCollections[sub.id] = subCollectionData;\n              })\n            );\n            docData.subCollections = subCollections;\n          }\n\n          data[doc.id] = docData;\n        })\n      )\n    );\n\n    const options: SaveOptions = {\n      contentType: 'application/json',\n    };\n    await saveToBucket(\n      `${collectionName}-docs-backups-${process.env.PROJECT_ID}`,\n      `${collectionName}.json`,\n      data,\n      options\n    );\n    logger.info(`Backup of collection ${collectionName} to GCS completed`);\n  } catch (error) {\n    logger.error(`Error while backing up collection ${collectionName} to GCS`, error);\n    throw error;\n  }\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/fs/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/fs/restoreCollection.ts",
    "exports": [
      {
        "name": " restoreFsCollection",
        "text": "\n\nexport const restoreFsCollection = async (\n  collectionName: string,\n  restoredCollectionData: {\n    [docId: string]: { [key: string]: any };\n  }\n) => {\n  try {\n    const batchArray: firestore.WriteBatch[] = [];\n    const BATCH_SIZE = 500; // Firestore batch write limit\n    let operationCounter = 0;\n    let batchIndex = 0;\n    batchArray.push(firestore().batch());\n\n    const promises = [];\n\n    for (const [docId, docData] of Object.entries(restoredCollectionData)) {\n      const docRef = firestore().collection(collectionName).doc(docId);\n      const { subCollections, ...rest } = docData as any;\n      batchArray[batchIndex].set(docRef, rest, { merge: true });\n      operationCounter++;\n\n      if (subCollections) {\n        for (const [subCollectionName, subDocs] of Object.entries(subCollections)) {\n          for (const [subDocId, subDocData] of Object.entries(subDocs)) {\n            const subDocRef = docRef.collection(subCollectionName).doc(subDocId);\n            batchArray[batchIndex].set(subDocRef, subDocData, { merge: true });\n            operationCounter++;\n\n            if (operationCounter >= BATCH_SIZE) {\n              batchArray.push(firestore().batch());\n              batchIndex++;\n              operationCounter = 0;\n            }\n          }\n        }\n      }\n    }\n\n    batchArray.forEach((batch) => promises.push(batch.commit()));\n    await Promise.all(promises);\n\n    logger.info(`Firestore collection restored successfully ${collectionName}.`);\n  } catch (error) {\n    logger.error('Error while restoring Firestore collection', { error, collectionName });\n    throw new Error('Error while restoring Firestore collection');\n  }\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/gcp/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/gcp/metadata.ts",
    "exports": [
      {
        "type": "function",
        "name": " getCloudRunInstanceId",
        "text": "\n\nexport async function getCloudRunInstanceId(): Promise<string> {\n  const { data } = await callMetadataServer('/computeMetadata/v1/instance/id');\n  return data;\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " getServiceAccountEmail",
        "text": "\n\nexport async function getServiceAccountEmail(): Promise<string> {\n  if (!serviceAccountEmail) {\n    if (isLocal) {\n      serviceAccountEmail = await getGCPClientEmail();\n      if (!serviceAccountEmail) {\n        serviceAccountEmail = `${projectIdTonumber[projectId]}-compute@developer.gserviceaccount.com`;\n      }\n    } else {\n      const { data } = await callMetadataServer(\n        '/computeMetadata/v1/instance/service-accounts/default/email'\n      );\n      serviceAccountEmail = data;\n    }\n  }\n  return serviceAccountEmail;\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " checkIfPreempted",
        "text": "\n\nexport async function checkIfPreempted() {\n  const { data } = await callMetadataServer('/computeMetadata/v1/instance/preempted', true);\n  logger.info(`Preempted data: ${data}`);\n  return data === 'TRUE';\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/utils/gcp/token.ts",
    "exports": [
      {
        "type": "function",
        "name": " getIdToken",
        "text": "\n\nexport async function getIdToken(audience: string): Promise<string> {\n  const token: string = await idTokensCache.fetch(audience, { allowStale: false });\n  return token;\n}",
        "parameters": [
          {
            "name": "audience",
            "text": "audience: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " getGCPClientEmail",
        "text": "\n\nexport async function getGCPClientEmail(): Promise<string> {\n  if (!authClient) authClient = new GoogleAuth();\n  const credentials = await authClient.getCredentials();\n  return credentials.client_email;\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " getAccessToken",
        "text": "\n\nexport function getAccessToken() {\n  if (!authClient) authClient = new GoogleAuth();\n  return authClient.getAccessToken();\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/utils/gcs/client.ts",
    "exports": [
      {
        "type": "function",
        "name": " getStorageClient",
        "text": "\n\nexport function getStorageClient(\n  opts: { forceCloud?: boolean; storageOptions?: Partial<StorageOptions> } = {}\n) {\n  const forceCloud = opts.forceCloud || process.env.FORCE_CLOUD === 'true';\n  const key = forceCloud ? 'forceCloud' : 'plain';\n  if (!storageClients[key]) {\n    const options: StorageOptions = {\n      projectId: process.env.PROJECT_ID,\n      ...opts.storageOptions,\n    };\n    if (isLocal && !forceCloud) options.apiEndpoint = 'http://localhost:8086';\n    storageClients[key] = new Storage(options);\n  }\n  return storageClients[key];\n}",
        "parameters": [
          {
            "name": "opts",
            "text": "opts: { forceCloud?: boolean; storageOptions?: Partial<StorageOptions> } = {}",
            "type": "{ forceCloud?: boolean; storageOptions?: Partial<StorageOptions> }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/gcs/download.ts",
    "exports": [
      {
        "type": "function",
        "name": " downloadFile",
        "text": "\n\nexport async function downloadFile(\n  bucketName: string,\n  name: string,\n  additionalOptions?: { forceCloud?: boolean; generation?: number }\n) {\n  const client = getStorageClient({ forceCloud: additionalOptions?.forceCloud });\n  const dataAsString = (\n    await client\n      .bucket(bucketName)\n      .file(name, { generation: additionalOptions?.generation })\n      .download()\n  )[0].toString();\n  const data = JSON.parse(dataAsString);\n  return data;\n}",
        "parameters": [
          {
            "name": "bucketName",
            "text": "bucketName: string",
            "type": "string"
          },
          {
            "name": "name",
            "text": "name: string",
            "type": "string"
          },
          {
            "name": "additionalOptions",
            "text": "additionalOptions?: { forceCloud?: boolean; generation?: number }",
            "type": "{ forceCloud?: boolean; generation?: number }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/gcs/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/gcs/upload.ts",
    "exports": [
      {
        "type": "function",
        "name": " saveToBucket",
        "text": "\n\nexport async function saveToBucket<T>(\n  bucketName: string,\n  filename: string,\n  data: T,\n  options: SaveOptions,\n  bucketOptions?: BucketOptions,\n  additionalOptions?: { forceCloud: boolean },\n  storageOptions?: Partial<StorageOptions>\n) {\n  const storageClient = getStorageClient({\n    forceCloud: additionalOptions?.forceCloud,\n    storageOptions,\n  });\n  // https://github.com/googleapis/google-cloud-node/issues/654\n  if (process.env.IS_LOCAL) {\n    options.validation = false;\n  }\n  const bucket = storageClient.bucket(bucketName, bucketOptions);\n  const stringData = typeof(data) === 'string' ? data : JSON.stringify(data);\n  return await bucket.file(filename).save(stringData, {\n    // we want to support upload in 8 KB/s (1 Kb/s very slow), so:\n    timeout: 120000 /* 120 seconds per chunk */,\n    // chunkSize: 1024 * 1024 /* 1MB per chunk */,\n\n    ...options,\n  });\n}",
        "parameters": [
          {
            "name": "bucketName",
            "text": "bucketName: string",
            "type": "string"
          },
          {
            "name": "filename",
            "text": "filename: string",
            "type": "string"
          },
          {
            "name": "data",
            "text": "data: T",
            "type": "T"
          },
          {
            "name": "options",
            "text": "options: SaveOptions",
            "type": "SaveOptions"
          },
          {
            "name": "bucketOptions",
            "text": "bucketOptions?: BucketOptions",
            "type": "BucketOptions"
          },
          {
            "name": "additionalOptions",
            "text": "additionalOptions?: { forceCloud: boolean }",
            "type": "{ forceCloud: boolean }"
          },
          {
            "name": "storageOptions",
            "text": "storageOptions?: Partial<StorageOptions>",
            "type": "Partial<StorageOptions>"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/generateDates.ts",
    "exports": [
      {
        "type": "function",
        "name": " getGeneratedHours",
        "text": "\n\nexport function getGeneratedHours(day: string, timezone: string) {\n  const hoursArray: string[] = [];\n  let currentTime = moment.tz(day, timezone).startOf('day');\n  const isToday = moment.tz(day, timezone).isSame(moment().tz(timezone), 'day');\n  const endTime = isToday ? moment().tz(timezone) : moment.tz(day, timezone).endOf('day');\n  while (currentTime <= endTime) {\n    hoursArray.push(moment.tz(currentTime, timezone).format('YYYY-MM-DDTHH'));\n    currentTime = moment.tz(currentTime, timezone).add(1, 'hour');\n  }\n  return hoursArray;\n}",
        "parameters": [
          {
            "name": "day",
            "text": "day: string",
            "type": "string"
          },
          {
            "name": "timezone",
            "text": "timezone: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " getGeneratedDates",
        "text": "\n\nexport function getGeneratedDates(\n  startDate: string,\n  endDate: string,\n  granularity: 'hour' | 'day' | 'week' | 'month',\n  timezone: string\n) {\n  if (granularity === 'hour') return getGeneratedHours(startDate, timezone);\n  const dateArray: string[] = [];\n  let currentDate = moment.tz(startDate, timezone);\n  const stopDate = moment.tz(endDate, timezone);\n  const momentGranularity = granularity === 'week' ? 'isoWeek' : granularity;\n  while (currentDate <= stopDate) {\n    dateArray.push(\n      moment.tz(currentDate, timezone).startOf(momentGranularity).format('YYYY-MM-DD')\n    );\n    currentDate = moment.tz(currentDate, timezone).add(1, granularity);\n  }\n  return dateArray;\n}",
        "parameters": [
          {
            "name": "startDate",
            "text": "startDate: string",
            "type": "string"
          },
          {
            "name": "endDate",
            "text": "endDate: string",
            "type": "string"
          },
          {
            "name": "granularity",
            "text": "granularity: 'hour' | 'day' | 'week' | 'month'",
            "type": "'hour' | 'day' | 'week' | 'month'"
          },
          {
            "name": "timezone",
            "text": "timezone: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/getAllUsersForShop.ts",
    "exports": [
      {
        "name": " getAllUserIdsForShop",
        "text": "\n\n/**\n *\n * @param shop shop id\n * @param includeAdmin should we include fake 'admin' id user (admin is not a real user but admin users has access to all shops so maybe we want to include it in the list)\n * @returns array of user ids\n */\nexport const getAllUserIdsForShop = async (\n  shop: string,\n  includeAdmin = false\n): Promise<string[]> => {\n  const users = await firestore().collection('shops').doc(shop).collection('users').get();\n  let allUsers = toArray(users).map((user) => user.id);\n\n  if (includeAdmin) {\n    allUsers.concat('admin');\n  }\n\n  return allUsers;\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/getBaseUrl.ts",
    "exports": [
      {
        "type": "function",
        "name": " getBaseUrl",
        "text": "\n\nexport async function getBaseUrl(\n  serviceId: string,\n  projectId: string,\n  opts?: GetBaseUrlOptions\n): Promise<{ baseUrl: string; audience?: string; serviceEntry?: ServiceConfig }> {\n  const { local, endpointType, deployment, stack, localPort, useUfDeployment } = opts || {};\n  if (local) {\n    return { baseUrl: `http://${localHost}${localPort ? `:${localPort}` : ''}/${serviceId}` };\n  }\n  const serviceEntry = await getServiceEntry(serviceId, projectId, stack);\n  if (serviceEntry && serviceEntry.version >= 2) {\n    let serviceEntryDeployment = serviceEntry.deployments[deployment || serviceId];\n    if (useUfDeployment) {\n      serviceEntryDeployment = serviceEntry.deployments['uf'] || serviceEntryDeployment;\n    }\n    if (!serviceEntryDeployment) {\n      // fallback to default if deployment is not found\n      serviceEntryDeployment = serviceEntry.deployments[serviceId];\n    }\n    if (endpointType && serviceEntryDeployment.endpoints?.[endpointType]) {\n      return {\n        baseUrl: serviceEntryDeployment.endpoints[endpointType].url,\n        audience: serviceEntryDeployment.endpoints[endpointType].audience,\n        serviceEntry,\n      };\n    }\n    if (\n      isK8s &&\n      serviceEntryDeployment.endpoints?.['cluster-local']?.cluster === process.env.TW_CLUSTER\n    ) {\n      return {\n        baseUrl: serviceEntryDeployment.endpoints['cluster-local'].url,\n        serviceEntry,\n      };\n    }\n    if (serviceEntryDeployment.endpoints?.internal) {\n      return {\n        baseUrl: serviceEntryDeployment.endpoints.internal.url,\n        serviceEntry,\n      };\n    }\n    if (serviceEntryDeployment.endpoints?.open) {\n      return {\n        baseUrl: serviceEntryDeployment.endpoints.open.url,\n        serviceEntry,\n      };\n    }\n    // deployed to cloud run only\n    return {\n      baseUrl: serviceEntryDeployment.endpoints.authenticated.url,\n      audience: serviceEntryDeployment.endpoints.authenticated.audience,\n      serviceEntry,\n    };\n  }\n  const baseUrl = await getCloudRunServiceUrl(serviceId, projectId);\n  return { baseUrl, audience: baseUrl, serviceEntry };\n}",
        "parameters": [
          {
            "name": "serviceId",
            "text": "serviceId: string",
            "type": "string"
          },
          {
            "name": "projectId",
            "text": "projectId: string",
            "type": "string"
          },
          {
            "name": "opts",
            "text": "opts?: GetBaseUrlOptions",
            "type": "GetBaseUrlOptions"
          }
        ]
      },
      {
        "type": "function",
        "name": " getFullUrl",
        "text": "\n\nexport async function getFullUrl(\n  serviceId: string,\n  projectId: string,\n  endpoint: string,\n  opts?: GetBaseUrlOptions\n) {\n  if (endpoint.startsWith('/')) {\n    endpoint = endpoint.slice(1);\n  }\n  const { baseUrl, audience } = await getBaseUrl(serviceId, projectId, opts);\n  const url = `${baseUrl}/${endpoint}`;\n  return { url, audience, baseUrl };\n}",
        "parameters": [
          {
            "name": "serviceId",
            "text": "serviceId: string",
            "type": "string"
          },
          {
            "name": "projectId",
            "text": "projectId: string",
            "type": "string"
          },
          {
            "name": "endpoint",
            "text": "endpoint: string",
            "type": "string"
          },
          {
            "name": "opts",
            "text": "opts?: GetBaseUrlOptions",
            "type": "GetBaseUrlOptions"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/getEarliestDate.ts",
    "exports": [
      {
        "name": " getEarliestDate",
        "text": "\n\nexport const getEarliestDate = (date: firebase.firestore.Timestamp) => {\n  const m = moment.unix(date?.seconds || (date as any)?._seconds || undefined);\n  if (m.isValid()) {\n    return m;\n  }\n  return null;\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/getOrder.ts",
    "exports": [
      {
        "type": "function",
        "name": " getOrder",
        "text": "\n\nexport async function getOrder(shopId: string, id: string): Promise<FullShopifyOrder> {\n  const orders =\n    (\n      await callServiceEndpoint('shopify', 'mongo/get-orders', {\n        id,\n        shopId,\n      })\n    ).data || [];\n  return orders.length > 0 ? (orders[0] as FullShopifyOrder) : null;\n}",
        "parameters": [
          {
            "name": "shopId",
            "text": "shopId: string",
            "type": "string"
          },
          {
            "name": "id",
            "text": "id: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " getOrders",
        "text": "\n\nexport async function getOrders<T extends Partial<FullShopifyOrder>>(\n  shopId: string,\n  ids: string[],\n  fields: (keyof T)[],\n  limit?: number\n): Promise<T[]> {\n  const orders =\n    (\n      await callServiceEndpoint('shopify', 'mongo/get-orders', {\n        shopId,\n        ids,\n        fields,\n        ...(limit && { limit }),\n      })\n    ).data || [];\n  return orders as T[];\n}",
        "parameters": [
          {
            "name": "shopId",
            "text": "shopId: string",
            "type": "string"
          },
          {
            "name": "ids",
            "text": "ids: string[]",
            "type": "string[]"
          },
          {
            "name": "fields",
            "text": "fields: (keyof T)[]",
            "type": "(keyof T)[]"
          },
          {
            "name": "limit",
            "text": "limit?: number",
            "type": "number"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/getServiceAccountData.ts",
    "exports": [
      {
        "type": "function",
        "name": " getServiceAccountData",
        "text": "\n\nexport async function getServiceAccountData(\n  accountId: string,\n  serviceId?: string\n): Promise<IntegrationAccountData> {\n  if (!serviceId) {\n    serviceId = process.env.SERVICE_ID;\n  }\n  const { data } = await callServiceEndpoint<IntegrationAccountData>(\n    serviceId,\n    'getAccountData',\n    { id: accountId },\n    { method: 'POST' }\n  );\n  return data || null;\n}",
        "parameters": [
          {
            "name": "accountId",
            "text": "accountId: string",
            "type": "string"
          },
          {
            "name": "serviceId",
            "text": "serviceId?: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/getShopData.ts",
    "exports": [
      {
        "type": "function",
        "name": " getShop",
        "text": "\n\nexport function getShop(shopDomain: string) {\n  return firestore().collection('shops').doc(shopDomain);\n}",
        "parameters": [
          {
            "name": "shopDomain",
            "text": "shopDomain: string",
            "type": "string"
          }
        ]
      },
      {
        "name": " setTrendsShop",
        "text": "\nexport const setTrendsShop = async (shopDomain: string, userId: string, dataToSet) => {\n  await setShop(shopDomain, userId, { ...dataToSet, isTrendsShop: true });\n};",
        "type": "variable"
      },
      {
        "type": "function",
        "name": " setShop",
        "text": "\n\nexport async function setShop(shopDomain: string, userId: string, dataToSet: {}) {\n  const shopRef = firestore().collection('shops').doc(shopDomain);\n  const doc = await shopRef.get();\n  if (!doc.exists) {\n    await shopRef.set(\n      {\n        ...dataToSet,\n        timezone: 'America/Los_Angeles',\n        currency: 'USD',\n        created_at: firestore.FieldValue.serverTimestamp(),\n        subscriptionActive: true,\n      },\n      { merge: true }\n    );\n    await shopRef.collection(`users`).doc(userId).set({ creator: true });\n    const userRef = firestore().collection('users').doc(userId);\n    const userDoc = await userRef.get();\n    await userRef.update({\n      shops: {\n        ...userDoc.data()?.shops,\n        [shopDomain]: { roles: ['owner'] },\n      },\n    });\n  } else {\n    await shopRef.update(dataToSet);\n  }\n}",
        "parameters": [
          {
            "name": "shopDomain",
            "text": "shopDomain: string",
            "type": "string"
          },
          {
            "name": "userId",
            "text": "userId: string",
            "type": "string"
          },
          {
            "name": "dataToSet",
            "text": "dataToSet: {}",
            "type": "{}"
          }
        ]
      },
      {
        "name": " sensoryProviderConvertResponse",
        "text": "\n\nexport const sensoryProviderConvertResponse: (providerResponse: Provider[]) => {\n  [key in ServicesIds]: { integrations: Integration[]; credentials: ProviderCredential[] };\n} = (providerResponse: Provider[]) => {\n  return providerResponse.reduce((acc, provider) => {\n    const { integrations, id, credentials } = provider;\n    return {\n      ...acc,\n      [id]: {\n        integrations,\n        credentials,\n      },\n    };\n  }, {} as { [key in ServicesIds]: { integrations: Integration[]; credentials: ProviderCredential[] } });\n};",
        "type": "(providerResponse: Provider[]) => {\n  [key in ServicesIds]: { integrations: Integration[]; credentials: ProviderCredential[] };\n}"
      },
      {
        "type": "function",
        "name": " getShopData",
        "text": "\n\nexport async function getShopData<\n  T extends boolean = false,\n  R = T extends true ? ShopWithSensory : Shop\n>(\n  shopId: string,\n  args?: { fields?: (keyof Shop)[]; mongo?: boolean },\n  includeSensory: T = false as T,\n  includePixel: boolean = false\n): Promise<R> {\n  if (!shopId) throw new Error('shopId is required');\n  const { fields = [], mongo = true } = args || {};\n\n  let shopCall, sensoryCall, pixelCall;\n  if (includeSensory) {\n    sensoryCall = callServiceEndpoint<Provider[]>(\n      'account-manager',\n      `integrations/providers/${shopId}`,\n      null,\n      { method: 'GET' }\n    );\n  } else {\n    sensoryCall = Promise.resolve(null);\n  }\n  if (includePixel) {\n    pixelCall = firestore()\n      .collection('shops')\n      .doc(shopId)\n      .collection('pixel_install_status')\n      .doc('pixel_install_status')\n      .get();\n  } else {\n    pixelCall = Promise.resolve(null);\n  }\n\n  if (mongo || fields.length) {\n    shopCall = callServiceEndpoint<Shop[]>(\n      'users',\n      'get-shops',\n      { id: shopId, fields },\n      { method: 'POST', log: false }\n    );\n\n    const [shopRes, sensoryRes, pixelRes] = await Promise.all([shopCall, sensoryCall, pixelCall]);\n    if (shopRes.data.length > 0) {\n      const shop = shopRes.data[0];\n      if (includePixel) {\n        shop.pixel_install_status = pixelRes.data();\n      }\n      if (includeSensory) {\n        return { ...shop, sensory: sensoryProviderConvertResponse(sensoryRes.data) } as R;\n      }\n      return shop as R;\n    } else {\n      return {} as R;\n    }\n  } else {\n    shopCall = getShop(shopId).get();\n    const [shopRes, sensoryRes, pixelRes] = await Promise.all([shopCall, sensoryCall, pixelCall]);\n    if (shopRes.exists) {\n      const shop = shopRes.data();\n      const result = {\n        ...shop,\n        id: shopId,\n      };\n      if (includePixel) {\n        result.pixel_install_status = pixelRes.data();\n      }\n      if (includeSensory) {\n        result.sensory = sensoryProviderConvertResponse(sensoryRes.data);\n      }\n      return result as R;\n    } else {\n      return {} as R;\n    }\n  }\n}",
        "parameters": [
          {
            "name": "shopId",
            "text": "shopId: string",
            "type": "string"
          },
          {
            "name": "args",
            "text": "args?: { fields?: (keyof Shop)[]; mongo?: boolean }",
            "type": "{ fields?: (keyof Shop)[]; mongo?: boolean }"
          },
          {
            "name": "includeSensory",
            "text": "includeSensory: T = false as T",
            "type": "T"
          },
          {
            "name": "includePixel",
            "text": "includePixel: boolean = false",
            "type": "boolean"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/hashString.ts",
    "exports": [
      {
        "type": "function",
        "name": " hashString",
        "text": "export function hashString(str: string) {\n  let hash = 0;\n  if (str.length == 0) return '';\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  return Math.abs(hash).toString();\n}",
        "parameters": [
          {
            "name": "str",
            "text": "str: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/influencers.ts",
    "exports": [
      {
        "name": " createUtmCampaign",
        "text": "export const createUtmCampaign = (influencer) => {\n  return influencer.campaign ? `${influencer.name}-${influencer.campaign}` : influencer.name;\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/initializeFirebaseApp.ts",
    "exports": [
      {
        "type": "function",
        "name": " initializeFirebaseApp",
        "text": "\n\nexport function initializeFirebaseApp(\n  otherAdmin,\n  additionalOptions: { options?: AppOptions; name?: string } = {}\n): admin.app.App {\n  const { options = {}, name } = additionalOptions;\n  options.projectId = projectId;\n  // initializeFirebaseApp is now used to get the default app\n  // in some places\n\n  if (!name && otherAdmin.apps.length > 0) {\n    return otherAdmin.apps[0];\n  }\n\n  const app: admin.app.App = otherAdmin.initializeApp(options, name);\n\n  if (process.env.IS_LOCAL) {\n    // when using a link we have to init here too\n    try {\n      admin.initializeApp(options, name);\n    } catch {\n      // prob not a link\n      console.log('admin not reinitialized');\n    }\n  }\n\n  return app;\n}",
        "parameters": [
          {
            "name": "otherAdmin",
            "text": "otherAdmin",
            "type": "any"
          },
          {
            "name": "additionalOptions",
            "text": "additionalOptions: { options?: AppOptions; name?: string } = {}",
            "type": "{ options?: AppOptions; name?: string }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/integrationFetcher/checkPeriod.ts",
    "exports": [
      {
        "type": "function",
        "name": " checkPeriod",
        "text": "\n\nexport async function checkPeriod(periodRequest: IntegrationDataHealthRequest)\n{\n  const { accountId, start, end, jobId } = periodRequest;\n  const serviceHealthCheckConf = services[periodRequest.serviceId].healthCheckConf;\n\n  logger.info(\n    `checkPeriod ${jobId ? `jobId ${jobId}` : ''} accountId ${accountId} start ${start} end ${end}`\n  );\n\n  async function checkDayInternal(accountId: string, day: string) {\n    const list = [];\n    const isInternalDeltaError = (dataA, dataB) => {\n      const factor = 0.005;\n      const { spend: spendA } = dataA || {};\n      const { spend: spendB } = dataB || {};\n      return Math.abs(spendA / spendB - 1) > factor;\n    };\n    try {\n      const checkParam: MetricsQueryStringParams = {\n        start: day,\n        end: day,\n        service_id: periodRequest.serviceId,\n        data_type: 'ads-metrics',\n        account_ids: [accountId],\n        granularity: 'total',\n        forceBigTable: true\n      };\n\n      const { data: dayFamilyCheck } = await callServiceEndpoint<\n        ApiMetricsResponse,\n        MetricsQueryStringParams\n      >(\n        'metrics-table',\n        'get-metrics',\n        {\n          ...checkParam,\n          family: 'day'\n        },\n        { method: 'POST' }\n      );\n\n      const { data: hoursFamilyCheck } = await callServiceEndpoint<\n        ApiMetricsResponse,\n        MetricsQueryStringParams\n      >(\n        'metrics-table',\n        'get-metrics',\n        {\n          ...checkParam,\n          family: 'hours'\n        },\n        { method: 'POST' }\n      );\n\n      return {\n        hoursFamilyCheck,\n        dayFamilyCheck,\n        check: !isInternalDeltaError(\n          hoursFamilyCheck.data[0]?.metricsBreakdown[0]?.metrics,\n          dayFamilyCheck.data[0]?.metricsBreakdown[0]?.metrics\n        )\n      };\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async function checkPeriodData(accountId, period: periodObject) {\n    const accountCheck = await checkDayInternal(accountId, period.start);\n\n    if (!accountCheck.check) {\n      return CHECK_STATUS.INTERNAL_DELTA;\n    }\n\n    const params: IntegrationDataHealthRequest = {\n      serviceId: periodRequest.serviceId,\n      accountId,\n      start: period.start,\n      sendSlack: false,\n      softImport: false,\n      // @ts-ignore\n      jobId: periodRequest.jobId,\n      end: period.end,\n      factor: periodRequest.factor\n    };\n\n    let healthStatus: Record<ServicesIds, IntegrationDataHealthFullReport[]>;\n    try {\n      healthStatus = (\n        await callServiceEndpoint<\n          Record<ServicesIds, IntegrationDataHealthFullReport[]>,\n          IntegrationDataHealthRequest\n        >('internal', 'data-health-check', params, {\n          method: 'POST'\n        })\n      ).data;\n    } catch (e) {\n      throw e;\n    }\n    if (!healthStatus?.[periodRequest.serviceId]) return CHECK_STATUS.UNKNOWN;\n\n    const accountHealthStatus: IntegrationDataHealthFullReport = healthStatus?.[\n      periodRequest.serviceId\n      ]?.find((x) => x.accountId === accountId);\n\n    if (!accountHealthStatus) {\n      logger.warn(\n        `accountId ${accountId} account ${accountId} ${\n          jobId ? `jobId ${jobId}` : ''\n        } check for start ${period.start} end ${period.end} is unknown!`\n      );\n      return CHECK_STATUS.UNKNOWN;\n    }\n    if (\n      accountHealthStatus &&\n      isDeltaError(\n        accountHealthStatus,\n        periodRequest.factor,\n        moment(period.end).diff(period.start, 'days')\n      )\n    ) {\n      const notEmptyFields = Object.keys(accountHealthStatus.fieldsComparison).some(\n        (field) => accountHealthStatus.fieldsComparison[field].internal\n      );\n      if (!notEmptyFields) {\n        logger.warn(\n          `accountId ${accountId} account ${accountId} ${\n            jobId ? `jobId ${jobId}` : ''\n          } check for start ${period.start} end ${period.end} internal data is ZERO!`\n        );\n        return CHECK_STATUS.INTERNAL_ZERO;\n      }\n\n      logger.warn(\n        `accountId ${accountId} account ${accountId} ${\n          jobId ? `jobId ${jobId}` : ''\n        } check for start ${period.start} end ${period.end} is with DELTA!`\n      );\n      return CHECK_STATUS.DELTA;\n    }\n\n    logger.info(\n      `accountId ${accountId} ${jobId ? `jobId ${jobId}` : ''} check for start ${\n        period.start\n      } end ${period.end} is GOOD!`\n    );\n    return CHECK_STATUS.GOOD;\n  }\n\n  const accountData = await getServiceAccountData(accountId);\n\n  let stack: periodObject[] = [];\n  let newStack: periodObject[] = [];\n  let deltaDaysList: importDay[] = [];\n  let periodsList: any[] = [];\n\n  const dateRangeLimit = services[serviceId].dateRangeLimit;\n\n  if (dateRangeLimit) {\n    let periodStart = moment(start);\n    let periodEnd = moment(end);\n\n    while (periodStart <= periodEnd) {\n      let partialPeriodEnd = moment\n        .min(periodEnd, moment(periodStart).add(dateRangeLimit - 1, 'days'))\n        .clone();\n\n      stack.push({\n        start: periodStart.format('YYYY-MM-DD'),\n        end: partialPeriodEnd.format('YYYY-MM-DD')\n      });\n      periodStart = partialPeriodEnd.add(1, 'days');\n    }\n  } else {\n    stack.push({ start, end });\n  }\n\n  async function runSinglePeriodCheck(period: periodObject) {\n    const daysDiff = moment(period.end).diff(moment(period.start), 'days');\n\n    try {\n      let periodStatus: CHECK_STATUS = await checkPeriodData(accountData, period);\n      periodsList.push({ ...period, status: periodStatus });\n      switch (periodStatus) {\n        case CHECK_STATUS.GOOD:\n          return;\n        // continue;\n        case CHECK_STATUS.UNKNOWN:\n        case CHECK_STATUS.INTERNAL_ZERO:\n          const days = moment(period.end).diff(moment(period.start), 'days');\n          for (let i = 0; i <= days; i++) {\n            deltaDaysList.push({\n              day: moment(period.end).subtract(i, 'days').format('YYYY-MM-DD'),\n              status: periodStatus\n            });\n          }\n          if (periodStatus === CHECK_STATUS.INTERNAL_ZERO) return;\n          else {\n            logger.warn(\n              `can't get health status for accountId ${accountId} ${\n                jobId ? `jobId ${jobId}` : ''\n              } start ${period.start} end ${period.end}. return all period with status UNKNOWN.`\n            );\n            return;\n            // throw `can't get health status for ${shopId} ${jobId ? `jobId ${jobId}` : ''} start ${\n            //   period.start\n            // } end ${period.end}`;\n          }\n\n        // continue;\n      }\n\n      switch (daysDiff) {\n        // not neccery becouse the next option, we not adding single day period to the stack\n        case 0:\n          deltaDaysList.push({ day: period.start, status: periodStatus });\n          return;\n      }\n    } catch (e) {\n      throw e;\n    }\n\n    const splitPeriodDay = moment(period.start).add(Math.floor(daysDiff / 2), 'days');\n\n    newStack.push({ start: period.start, end: splitPeriodDay.format('YYYY-MM-DD') });\n    newStack.push({ start: splitPeriodDay.add(1, 'days').format('YYYY-MM-DD'), end: period.end });\n  }\n\n  logger.info(\n    `checkPeriod: start checking. isSerialPeriodsChecks: ${serviceHealthCheckConf?.isSerialPeriodsChecks}`,\n    { accountId, jobId }\n  );\n\n  while (stack.length > 0) {\n    if (serviceHealthCheckConf?.isSerialPeriodsChecks) {\n      for (const period of stack) {\n        await runSinglePeriodCheck(period);\n      }\n    } else {\n      const promises = stack.map(async (period: periodObject) => runSinglePeriodCheck(period));\n      await Promise.all(promises);\n    }\n\n    stack = newStack;\n    newStack = [];\n  }\n  const daysDiff = moment(end).diff(moment(start), 'days') + 1;\n\n  logger.info(\n    `accountId ${accountId} ${\n      jobId ? `jobId ${jobId}` : ''\n    } days in period: ${daysDiff}. periods checks: ${periodsList.length}. days with delta: ${\n      deltaDaysList.length\n    }`\n  );\n  return {\n    deltaDaysList: deltaDaysList.sort((a, b) => {\n      return b.day.localeCompare(a.day);\n    }),\n    periodsList\n  };\n}",
        "parameters": [
          {
            "name": "periodRequest",
            "text": "periodRequest: IntegrationDataHealthRequest",
            "type": "IntegrationDataHealthRequest"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/integrationFetcher/endpointHandlers.ts",
    "exports": [
      {
        "type": "function",
        "name": " startJob",
        "text": "\n\nexport async function startJob(args: startJobOptions): Promise<IntegrationStartJobResponse> {\n  const req: Request = args.req as any;\n  const {\n    defaultEndpoint = 'import-day-data',\n    queueName = `${serviceId}-import-day-data`,\n    endpoints,\n  } = args;\n\n  const data = req.body.data as IntegrationFetchChunkData;\n  const taskName = req.headers['x-cloudtasks-taskname'];\n  const logger = getJobLogger(data, taskName);\n\n  logger.info('start job request');\n  const jobManagerData = await getJob(data.jobID);\n\n  if (serviceId !== req.body.attributes['serviceId']) {\n    logger.warn(`expected service id ${serviceId} but got: ${req.body.attributes['serviceId']}`);\n    throw new Error(\n      `expected service id ${serviceId} but got: ${req.body.attributes['serviceId']}`\n    );\n  }\n  if (serviceId !== data.serviceId) {\n    logger.warn(\n      `expected service id ${serviceId} but got accountData service id: ${req.body.attributes['serviceId']}`\n    );\n    throw new Error(\n      `expected service id ${serviceId} but got accountData service id: ${req.body.attributes['serviceId']}`\n    );\n  }\n\n  const endpoint =\n    endpoints?.find((ep) => ep.conditionString === data[ep.conditionField])?.endpoint ||\n    defaultEndpoint;\n\n  logger.info(`checkBefore from api ${data.checkBefore} jobId ${data.jobID}`);\n\n  if (data.jobType === 'initial' && data.checkBefore) {\n    try {\n      const timestamp = new Date().getTime();\n      logger.info(\n        `start initial import for service ${data.serviceId} accountId ${data.accountId} checkPeriod before jobId ${data.jobID}`\n      );\n      await updateJob(data.jobID, {\n        status: 'in_progress',\n      });\n\n      const { deltaDaysList, periodsList } = await checkPeriod({\n        accountId: data.accountId,\n        start: moment(data.day).subtract(data.total, 'days').format('YYYY-MM-DD'),\n        end: data.day,\n        jobId: data.jobID,\n        serviceId: serviceId,\n      });\n\n      logger.info(\n        `Initial import for accountId ${data.accountId} jobId ${\n          data.jobID\n        } checkPeriod before done #days ${deltaDaysList.length} days:${JSON.stringify(\n          deltaDaysList\n        )} , Took: ${new Date().getTime() - timestamp}ms`\n      );\n      logger.info(\n        `Initial import for accountId ${data.accountId} jobId ${\n          data.jobID\n        } checkPeriod before done, periodsList ${JSON.stringify(periodsList)}`\n      );\n\n      if (deltaDaysList.length === 0) {\n        logger.info(\n          `Finish import for accountId ${data.accountId} jobId ${data.jobID} 0 days to import`\n        );\n      }\n\n      await updateJob(data.jobID, {\n        total: deltaDaysList.length,\n      });\n\n      data.days = deltaDaysList;\n      data.day = null;\n      data.total = null;\n      data.checkBefore = false;\n    } catch (e) {\n      logger.error(\n        `error while checkPeriod before for accountId ${data.accountId} jobid ${data.jobID}`,\n        e\n      );\n    }\n  }\n\n  return { data, endpoint, queueName };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: startJobOptions",
            "type": "startJobOptions"
          }
        ]
      },
      {
        "type": "function",
        "name": " importDayFetcher",
        "text": "\n\nexport async function importDayFetcher(\n  req: Request,\n  res: Response,\n  fetchFunction: (args: any) => Promise<any>\n) {\n  let body = req.body as IntegrationFetchChunkData;\n  const queueName = req.headers['x-cloudtasks-queuename'] as string;\n  const taskName = req.headers['x-cloudtasks-taskname'];\n  let { accountData } = body;\n  const { jobType, index, accountId, jobID, dataType, forceExternalFetch, days } = body;\n  accountData = accountData ?? (await getServiceAccountData(accountId));\n  let { total, day } = body;\n  const logger = getJobLogger(body, taskName);\n  let timer;\n\n  const preconditionResult = await checkPrecondition(req);\n  if (!preconditionResult.continue) return res.send('ok');\n\n  try {\n    if (days && total) {\n      const message = `when using days, total and day are manage internally, don't send them jobID ${jobID}`;\n      logger.error(message, accountData);\n      const result = await onFailure(req);\n      return res.status(418).send(result);\n    }\n\n    if (!total && days) {\n      if (days.length === 0) {\n        // in case the health check find 0 days to import - just close the job\n        logger.info(`import day JobId ${jobID} accountId ${accountId} days is 0 done the job`);\n        await onSuccess(req);\n        return res.send('ok');\n      }\n      total = days.length;\n      (day as any) = days[index - 1]?.day ?? days[index - 1];\n      logger.info(\n        `import accountId ${accountId} day ${day} index ${index} days ${JSON.stringify(\n          days\n        )} JobId ${jobID}`\n      );\n    }\n\n    if (!accountId) {\n      const message = `error no accountId (${accountId}) JobId ${jobID}`;\n      logger.error(message);\n      const result = await onFailure(req);\n      return res.status(418).send(result);\n    }\n\n    await updateJob(jobID, {\n      currentIndex: index,\n      status: 'in_progress',\n      accountId,\n      jobType,\n    });\n\n    logger.info(\n      `starting import day accountId ${accountId} day ${day} type ${jobType} jobId ${jobID}`\n    );\n\n    let checkBefore: boolean = body.checkBefore !== false;\n    if (days) {\n      checkBefore = days[index - 1]?.status === CHECK_STATUS.UNKNOWN || false;\n    }\n\n    await retry(\n      async () => {\n        logger.info(\n          `Calling fetchFunction import day accountId ${accountId} day ${day} total ${total} type ${jobType} jobId ${jobID} checkBefore ${checkBefore}`\n        );\n        await fetchFunction({ ...body, total, day, checkBefore });\n      },\n      {\n        retries: 1,\n        maxTimeout: 2 * 60 * 1000, // max 2 minutes between retries\n        onRetry: (e) => {\n          let msg;\n          try {\n            msg = JSON.stringify(e);\n          } catch {}\n          logger.warn(`Doing retry on error jobId ${jobID}: ${msg ?? e}`);\n        },\n      }\n    );\n    try {\n      await updateServiceLastUpdated(\n        accountId,\n        serviceId,\n        day ? moment(day).toISOString() : moment().toISOString()\n      );\n    } catch (e) {\n      logger.error(`importDayFetcher updateServiceLastUpdated failed ERROR `, e);\n    }\n    await onSuccess(req);\n    return res.send('ok');\n  } catch (e) {\n    logger.warn(\n      `importDayFetcher general error accountId ${accountId} jobID ${jobID} jobType ${jobType}:  error:`,\n      e\n    );\n    clearTimeout(timer);\n    const result = await onFailure(req, e);\n    return res.status(418).send(result);\n  }\n}",
        "parameters": [
          {
            "name": "req",
            "text": "req: Request",
            "type": "Request"
          },
          {
            "name": "res",
            "text": "res: Response",
            "type": "Response"
          },
          {
            "name": "fetchFunction",
            "text": "fetchFunction: (args: any) => Promise<any>",
            "type": "(args: any) => Promise<any>"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/integrationFetcher/getAccountsWithDelta.ts",
    "exports": [
      {
        "name": " getAccountsWithDelta",
        "text": "\n\nexport const getAccountsWithDelta = async (checkBefore: boolean, serviceId: ServicesIds, shopDomain: string, day: string, accounts: any[], jobID: string) => {\n  let accountsWithDelta;\n  const params: dataHealthRequest = {\n    serviceId,\n    shopId: shopDomain,\n    start: day,\n    sendSlack: false,\n    softImport: false,\n    end: day\n  };\n  if (!checkBefore) {\n    return accounts;\n  }\n  let healthCheckOk = true;\n  let healthStatus: Record<ServicesIds, DataHealthFullReport[]>;\n  try {\n    logger.info(\n      `healthStatus check before reimport day ${day} shop ${shopDomain} jobID ${jobID}`\n    );\n    healthStatus = (\n      await callServiceEndpoint<Record<ServicesIds, DataHealthFullReport[]>, dataHealthRequest>(\n        'internal',\n        'data-health-check',\n        params,\n        {\n          method: 'POST'\n        }\n      )\n    ).data;\n  } catch (e) {\n    healthCheckOk = false;\n    logger.error(\n      `ERROR healthStatus check before reimport day ${day} shop ${shopDomain} jobID ${jobID} error: ${e.message}`\n    );\n  }\n\n  accountsWithDelta = accounts.filter(({ id }) => {\n    const accountHealthStatus: DataHealthFullReport = healthStatus?.[serviceId]?.find((x) => x.accountId === id);\n    if (\n      healthCheckOk &&\n      accountHealthStatus &&\n      !isDeltaError(\n        accountHealthStatus,\n        undefined, // factor, default 0.01\n        undefined, // diffDays, default 1\n        1\n      )\n    ) {\n      logger.info(\n        `Nothing change for account ${id} day ${day} shop ${shopDomain} jobID ${jobID} will not import, continue`\n      );\n      return false;\n    } else {\n      return true;\n    }\n  });\n\n  return accountsWithDelta;\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/integrationFetcher/healthCheck.ts",
    "exports": [
      {
        "name": " isDeltaError",
        "text": "\n\nexport const isDeltaError = (\n  fullReport: IntegrationDataHealthFullReport,\n  factor: number = 0.03,\n  diffDays: number = 0,\n  minDelta?: number\n) => {\n  const logExtraData = {\n    accountId: fullReport.accountId,\n    factor,\n    diffDays,\n    minDelta,\n    serviceId: fullReport.serviceId,\n  };\n  logger.info(`isDeltaError: started.`, logExtraData);\n\n  const serviceHealthCheckConf = services[fullReport.serviceId].healthCheckConf?.fields;\n\n  if (!serviceHealthCheckConf) {\n    logger.warn(`isDeltaError: health-check conf is not defined for service.`, logExtraData);\n    return false;\n  }\n  const criticalFields = Object.entries(serviceHealthCheckConf).filter(\n    ([_, field]) => field.isCritical\n  );\n\n  factor = factor / (diffDays + 1);\n\n  for (const [field, conf] of criticalFields) {\n    const fieldMinDelta = minDelta || conf.minDelta || DEFAULT_MIN_DELTA;\n    const internalNum = fullReport.fieldsComparison[field]?.internal;\n    const delta = fullReport.fieldsComparison[field]?.delta;\n\n    if (\n      internalNum === undefined ||\n      internalNum === null ||\n      delta === undefined ||\n      delta === null\n    ) {\n      logger.info(`isDeltaError: field: ${field}, return true undefined checking.`, logExtraData);\n      return true;\n    }\n    if (!internalNum && Math.abs(delta) > 0) {\n      logger.info(\n        `isDeltaError: field: ${field}, return true internal 0 or null but not delta.`,\n        logExtraData\n      );\n      return true;\n    }\n    const actualCheck =\n      Math.abs(+delta?.toFixed(2) / +internalNum?.toFixed(2)) > factor &&\n      Math.abs(delta) >= fieldMinDelta;\n    if (actualCheck) {\n      logger.info(\n        `isDeltaError: field: ${field}, Math.abs(+delta?.toFixed(2) / +num?.toFixed(2)) = ${Math.abs(\n          +delta?.toFixed(2) / +internalNum?.toFixed(2)\n        )} \n                  > factor = ${factor} = ${\n          Math.abs(+delta?.toFixed(2) / +internalNum?.toFixed(2)) > factor\n        } && Math.abs(delta) \n                  >= ${fieldMinDelta} = ${\n          Math.abs(delta) >= fieldMinDelta\n        } equal - res ${actualCheck}.`,\n        logExtraData\n      );\n      return true;\n    }\n  }\n\n  logger.info(`isDeltaError: ended. return false end of the function.`, logExtraData);\n  return false;\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/integrationFetcher/index.ts",
    "exports": [
      {
        "name": " preconditionResult",
        "text": "\n\nexport type preconditionResult = { continue: boolean; message?: any; timer?: NodeJS.Timeout };",
        "type": "{ continue: boolean; message?: any; timer?: NodeJS.Timeout }"
      },
      {
        "type": "function",
        "name": " checkPrecondition",
        "text": "\n\nexport async function checkPrecondition(\n  req: Request,\n  args?: { timeoutHandle?: number }\n): Promise<preconditionResult> {\n  const body = req.body as IntegrationFetchChunkData;\n  const retryCount = +req.headers['x-cloudtasks-taskretrycount'];\n  const taskName = req.headers['x-cloudtasks-taskname'];\n  const { jobType, index, accountId, jobID, accountData, day, dataType } = body;\n  const { timeoutHandle } = args || {};\n  let timer: NodeJS.Timeout;\n  const logger = getJobLogger(body, taskName);\n\n  const jobManagerData = await getJob(jobID);\n\n  // when starting `index` is 1 and jobManagerData.currentIndex is 0\n\n  // Check if canceled\n  if (jobManagerData.requestCancel) {\n    await updateJob(jobID, {\n      status: 'done',\n      canceledAt: Date.now(),\n      successful: false,\n      accountId,\n      jobType,\n    });\n    const message = `job was canceled jobID ${jobID}`;\n    logger.warn(message);\n    return { continue: false, message };\n  }\n\n  // check if duplicate\n  if (jobManagerData.currentIndex === index) {\n    // might still be a retry\n    if (retryCount === 0) {\n      const message = `this might be a duplicate jobID ${jobID}`;\n      logger.warn(message);\n      return { continue: false, message };\n    }\n  }\n\n  // check starting at earlier index then current\n  if (index < jobManagerData.currentIndex) {\n    // this will choke wild forks\n    const message = `got a request to start with index ${index} but job manager is already on ${jobManagerData.currentIndex} jobID ${jobID}`;\n    logger.warn(message);\n    return { continue: false, message };\n  }\n\n  // Check if forked due to timeout ;)\n  if (retryCount > 0 && req.headers['x-cloudtasks-taskpreviousresponse'] === '0') {\n    // we have a retry that is not a 4xx or 5xx error so if current index was started we\n    // prob had a timeout\n    if (jobManagerData.currentIndex === index) {\n      // https://cloud.google.com/tasks/docs/creating-http-target-tasks#handler\n      const message = `We got a retry that is a fork, not retrying. jobID ${jobID} headers: ${JSON.stringify(\n        req.headers\n      )}`;\n      logger.error(message);\n      return { continue: false, message };\n    }\n    logger.info(`network related retry jobID ${jobID}`);\n  }\n\n  // TODO: check if we need this\n  // if (!(await getIsServiceConnected(await getShopData(shopDomain), serviceId))) {\n  //   const message = `No ${serviceId} Access Token or Accounts for shop ${shopDomain} jobID ${jobID}`;\n  //   logger.info(message);\n  //   return { continue: false, message };\n  // }\n\n  if (timeoutHandle) {\n    timer = preRequestTimeout(timeoutHandle, async () => {\n      const jobManagerData = await getJob(jobID);\n\n      if (!(jobManagerData.currentIndex === index)) {\n        // this is mostly for shopify products that run in a single loop, and we do not want to\n        // restart them, if they fail so be it.\n        // this does work for the rest bcuz most of the times when we get a timeout, it's not bcuz\n        // the job is still runinng but bcuz it got stuck and will never recover,\n        // but sometimes imports might take morw than an hour, just something to keep\n        // in mind.\n        logger.warn(\n          `getting close to timeout, but job manager has different index, ${jobManagerData.currentIndex} ${index} jobID ${jobID}`\n        );\n        return;\n      }\n\n      logger.warn(\n        `very close to timeout so updating job and resending current task jobID ${jobID}`\n      );\n      await updateJob(jobID, { currentIndex: index - 1 });\n      // recall this\n      await callImport(req, body, day, index);\n    });\n  }\n  logger.info(`precondition ${accountId} day ${day} type ${jobType} jobID ${jobID}`);\n  req['timer'] = timer;\n  return { continue: true, timer };\n}",
        "parameters": [
          {
            "name": "req",
            "text": "req: Request",
            "type": "Request"
          },
          {
            "name": "args",
            "text": "args?: { timeoutHandle?: number }",
            "type": "{ timeoutHandle?: number }"
          }
        ]
      },
      {
        "type": "function",
        "name": " onSuccess",
        "text": "\n\nexport async function onSuccess(req: Request) {\n  const body = req.body as IntegrationFetchChunkData;\n  const taskName = req.headers['x-cloudtasks-taskname'];\n  const { jobType, index, accountId, jobID, day, days } = body;\n  let { total } = body;\n  const logger = getJobLogger(body, taskName);\n\n  if (req['timer']) clearTimeout(req['timer']);\n\n  if (days?.length) {\n    total = days?.length;\n  }\n\n  // Check if done\n  if (index >= total) {\n    await updateJob(jobID, {\n      status: 'done',\n      finishedAt: Date.now(),\n      successful: true,\n      accountId,\n      jobType,\n    });\n    logger.info(`done job jobId ${jobID}`);\n    return { success: true };\n  }\n\n  // call next\n\n  const nextDay = days ? null : moment(day).subtract(1, 'days').format('YYYY-MM-DD');\n  // const nextDay = moment(day).subtract(1, 'days').format('YYYY-MM-DD');\n  logger.info(\n    `import nextDay shopDomain ${accountId} nextDay ${\n      days ? days[index].day : nextDay\n    } type ${jobType} jobId ${jobID}`\n  );\n\n  await callImport(req, body, nextDay, index + 1);\n  logger.info(`finished import`);\n}",
        "parameters": [
          {
            "name": "req",
            "text": "req: Request",
            "type": "Request"
          }
        ]
      },
      {
        "type": "function",
        "name": " onFailure",
        "text": "\n\nexport async function onFailure(req: Request, e?) {\n  const body = req.body as IntegrationFetchChunkData;\n  const taskName = req.headers['x-cloudtasks-taskname'];\n  const { jobType, accountId, jobID } = body;\n  const logger = getJobLogger(body, taskName);\n  if (req['timer']) clearTimeout(req['timer']);\n  await updateJob(jobID, {\n    successful: false,\n    status: 'failed',\n    failedAt: Date.now(),\n    accountId,\n    jobType,\n  });\n  if (e) {\n    logger.error(`onFailure accountId ${accountId} jobID ${jobID} jobType ${jobType},  error:`, e);\n  }\n  return { success: false };\n}",
        "parameters": [
          {
            "name": "req",
            "text": "req: Request",
            "type": "Request"
          },
          {
            "name": "e",
            "text": "e?",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/integrationFetcher/utils.ts",
    "exports": [
      {
        "type": "function",
        "name": " updateJobIndex",
        "text": "\n\nexport async function updateJobIndex(jobID, index, shopDomain, jobType) {\n  return await updateJob(jobID, {\n    currentIndex: index,\n    status: 'in_progress',\n    shopDomain,\n    jobType,\n  });\n}",
        "parameters": [
          {
            "name": "jobID",
            "text": "jobID",
            "type": "any"
          },
          {
            "name": "index",
            "text": "index",
            "type": "any"
          },
          {
            "name": "shopDomain",
            "text": "shopDomain",
            "type": "any"
          },
          {
            "name": "jobType",
            "text": "jobType",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " getJob",
        "text": "\n\nexport async function getJob(jobID: string): Promise<SingleIntegrationJob> {\n  return (\n    await callServiceEndpoint<SingleIntegrationJob>(\n      'job-manager',\n      `integration/jobs/${jobID}`,\n      {},\n      { method: 'GET' }\n    )\n  ).data;\n}",
        "parameters": [
          {
            "name": "jobID",
            "text": "jobID: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " updateJob",
        "text": "\n\nexport async function updateJob(jobID: string, update) {\n  return (\n    await callServiceEndpoint('job-manager', `integration/jobs/${jobID}`, update, { method: 'PUT' })\n  ).data;\n}",
        "parameters": [
          {
            "name": "jobID",
            "text": "jobID: string",
            "type": "string"
          },
          {
            "name": "update",
            "text": "update",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " getJobLogger",
        "text": "\n\nexport function getJobLogger(jobData: any, taskName?) {\n  const { jobID, index, accountId, dataType, day } = jobData;\n  const loggerOptions = {\n    name: jobID || 'unknown',\n    jobID,\n    index,\n    day,\n    accountId,\n    serviceId,\n    dataType,\n  };\n  if (taskName) {\n    loggerOptions['taskName'] = taskName;\n  }\n  const logger = getLogger({ options: loggerOptions });\n  return logger;\n}",
        "parameters": [
          {
            "name": "jobData",
            "text": "jobData: any",
            "type": "any"
          },
          {
            "name": "taskName",
            "text": "taskName?",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " preRequestTimeout",
        "text": "\n\nexport function preRequestTimeout(timeoutHandle, handleTimeout: () => any) {\n  const timer = setTimeout(handleTimeout, timeoutHandle);\n  return timer;\n}",
        "parameters": [
          {
            "name": "timeoutHandle",
            "text": "timeoutHandle",
            "type": "any"
          },
          {
            "name": "handleTimeout",
            "text": "handleTimeout: () => any",
            "type": "() => any"
          }
        ]
      },
      {
        "type": "function",
        "name": " callImport",
        "text": "\n\nexport async function callImport(req: Request, body: IntegrationFetchChunkData, day, index) {\n  const { accountId, jobID, dataType, days } = body;\n  const queueName = req.headers['x-cloudtasks-queuename'] as string;\n\n  await addTaskToQueue(\n    queueName,\n    serviceId,\n    `${req.path}?day=${\n      days ? days[index - 1].day : day\n    }&accountId=${accountId}&dataType=${dataType}&jobID=${jobID}`,\n    {\n      ...req.body,\n      day: day,\n      index: index,\n    },\n    { dispatchDeadline: 1800 }\n  );\n}",
        "parameters": [
          {
            "name": "req",
            "text": "req: Request",
            "type": "Request"
          },
          {
            "name": "body",
            "text": "body: IntegrationFetchChunkData",
            "type": "IntegrationFetchChunkData"
          },
          {
            "name": "day",
            "text": "day",
            "type": "any"
          },
          {
            "name": "index",
            "text": "index",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " updateServiceLastUpdated",
        "text": "\n\nexport async function updateServiceLastUpdated(\n  accountId: string,\n  serviceId?: string,\n  lastUpdated?: string\n): Promise<void> {\n  if (!serviceId) {\n    serviceId = process.env.SERVICE_ID;\n  }\n  await callServiceEndpoint<void>(\n    serviceId,\n    'update-account-last-updated',\n    { id: accountId, lastUpdated: lastUpdated || moment().toISOString() },\n    { method: 'POST' }\n  );\n}",
        "parameters": [
          {
            "name": "accountId",
            "text": "accountId: string",
            "type": "string"
          },
          {
            "name": "serviceId",
            "text": "serviceId?: string",
            "type": "string"
          },
          {
            "name": "lastUpdated",
            "text": "lastUpdated?: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/integrations/getRedisKey.ts",
    "exports": [
      {
        "type": "function",
        "name": " getIntegrationsRedisKey",
        "text": "export default function getIntegrationsRedisKey(provider_id: string, state) {\n  return `integration#${provider_id}#oauth-states#${state}`;\n}",
        "parameters": [
          {
            "name": "provider_id",
            "text": "provider_id: string",
            "type": "string"
          },
          {
            "name": "state",
            "text": "state",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/integrations/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/integrations/sensory.ts",
    "exports": [
      {
        "type": "function",
        "name": " getBucket",
        "text": "\n\nexport function getBucket() {\n  return `data-lake-sensory-${projectId}`;\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/utils/isTruthy.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/jsonl.ts",
    "exports": [
      {
        "name": " fromJsonArrayToJsonL",
        "text": "export const fromJsonArrayToJsonL = (jsonArray: any[]): string => {\n  return jsonArray.map((x) => JSON.stringify(x)).join('\\n');\n};",
        "type": "variable"
      },
      {
        "name": " fromJsonLToJsonArray",
        "text": "\n\nexport const fromJsonLToJsonArray = (jsonl: string): any[] => {\n  return jsonl.split('\\n').map(x=>JSON.parse(x))\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/k8s/env.ts",
    "exports": [
      {
        "type": "function",
        "name": " getK8sPodInfo",
        "text": "\n\nexport function getK8sPodInfo() {\n  if (Object.keys(podInfo).length) return podInfo;\n  try {\n    const labels = envToObject(fs.readFileSync(`${mount}/labels`).toString());\n    const annotations = envToObject(fs.readFileSync(`${mount}/annotations`).toString());\n    podInfo['labels'] = labels;\n    podInfo['annotations'] = annotations;\n  } catch {}\n  return podInfo;\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/utils/k8s/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/k8s/pubsub.ts",
    "exports": [
      {
        "type": "function",
        "name": " pubsubPullToPush",
        "text": "\n\nexport async function pubsubPullToPush(args: {\n  subscriptions: { id: string; flowControl: FlowControlOptions; endpoint: string }[];\n}) {\n  const { subscriptions } = args;\n  for (const subscription of subscriptions) {\n    try {\n      await pullPubSubMessages(\n        subscription.id,\n        async (message) => {\n          try {\n            logger.info(message.id);\n            let payload = Buffer.from(message.data).toString();\n            try {\n              payload = JSON.parse(payload);\n            } catch {}\n            await callServiceEndpoint(\n              serviceId,\n              subscription.endpoint,\n              { data: payload },\n              {\n                method: 'POST',\n              }\n            );\n            message.ack();\n          } catch (e) {\n            logger.error(e);\n            message.nack();\n          }\n        },\n        {\n          forceCloud: true,\n          subscriptionOptions: { flowControl: subscription.flowControl },\n        }\n      );\n    } catch (e) {\n      logger.error('failed pull', e);\n    }\n  }\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  subscriptions: { id: string; flowControl: FlowControlOptions; endpoint: string }[];\n}",
            "type": "{\n  subscriptions: { id: string; flowControl: FlowControlOptions; endpoint: string }[];\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/logger.ts",
    "exports": [
      {
        "type": "function",
        "name": " getLogger",
        "text": "\n\nexport function getLogger(args?: {\n  options?: Omit<LoggerOptions, 'name'>;\n  throttleArgs?: ThrottleArgs;\n}): bunyan {\n  let { options = {}, throttleArgs } = args || {};\n  let { level, name = process.env.SERVICE_ID || 'none' } = options as LoggerOptions;\n  if (!throttleArgs && process.env.LOG_THROTTLE) {\n    try {\n      throttleArgs = JSON.parse(process.env.LOG_THROTTLE);\n    } catch (e) {\n      console.error('failed to parse LOG_THROTTLE');\n    }\n  }\n  level = level || (process.env.LOG_LEVEL as LogLevel);\n  if (!level) {\n    if (isLocal) {\n      level = 'trace';\n    } else if (isStaging) {\n      level = 'debug';\n    } else {\n      level = 'info';\n    }\n  }\n  const streams: bunyan.Stream[] = [{ type: 'raw', stream: decoratedStream({ throttleArgs }) }];\n  const logger = bunyan.createLogger({\n    streams,\n    ...options,\n    level,\n    name,\n    serializers: { err: bunyan.stdSerializers.err },\n  });\n  return logger;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args?: {\n  options?: Omit<LoggerOptions, 'name'>;\n  throttleArgs?: ThrottleArgs;\n}",
            "type": "{\n  options?: Omit<LoggerOptions, 'name'>;\n  throttleArgs?: ThrottleArgs;\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " setLogContext",
        "text": "\n\nexport function setLogContext(logContext: Record<string, any>, args?: { addToDD?: boolean }) {\n  const logParams = getStoreKey('logParams');\n  Object.assign(logParams, logContext);\n  const parentLogParams = getStoreKey('context').parentLogParams;\n  if (parentLogParams) {\n    Object.assign(parentLogParams, logContext);\n  }\n  if (args?.addToDD && tracer) {\n    tracer.scope().active().addTags(logContext);\n  }\n}",
        "parameters": [
          {
            "name": "logContext",
            "text": "logContext: Record<string, any>",
            "type": "Record<string, any>"
          },
          {
            "name": "args",
            "text": "args?: { addToDD?: boolean }",
            "type": "{ addToDD?: boolean }"
          }
        ]
      },
      {
        "name": " logger",
        "text": "\n\nexport const logger: bunyan = getLogger();",
        "type": "bunyan"
      },
      {
        "name": " Bunyan",
        "text": "\n\nexport type Bunyan = bunyan;",
        "type": "bunyan"
      },
      {
        "type": "specifier",
        "name": " LoggerOptions",
        "text": " LoggerOptions"
      },
      {
        "type": "specifier",
        "name": " LogLevel",
        "text": " LogLevel"
      },
      {
        "type": "specifier",
        "name": " LogLevelString",
        "text": " LogLevelString"
      }
    ]
  },
  {
    "file": "@tw/utils/mapCamelToSnake.ts",
    "exports": [
      {
        "type": "function",
        "name": " mapCamelToSnake",
        "text": "\n\nexport function mapCamelToSnake<SrcType, DestType extends Record<string, any>>(\n  obj: SrcType\n): DestType {\n  const result: Partial<DestType> = {};\n  Object.keys(obj).forEach((key) => {\n    const value = (obj as any)[key];\n    if (value !== undefined) {\n      const snakeKey = camelToSnake(key);\n      (result as any)[snakeKey] = value;\n    }\n  });\n  return result as DestType;\n}",
        "parameters": [
          {
            "name": "obj",
            "text": "obj: SrcType",
            "type": "SrcType"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/mergeAndSumObjectNumbersOnly.ts",
    "exports": [
      {
        "name": " mergeAndSumObjectsToNumbersOnly",
        "text": "export const mergeAndSumObjectsToNumbersOnly: any = (objects: any[]) => {\n  const res = {};\n  objects.forEach((obj) => {\n    Object.entries(obj).forEach(([key, value]) => {\n      if (isNaN(Number(value))) {\n        return;\n      }\n      if (!res[key]) {\n        res[key] = 0;\n      }\n      res[key] += Number(value) || 0;\n    });\n  });\n  return res;\n};",
        "type": "any"
      }
    ]
  },
  {
    "file": "@tw/utils/mongodb/connect.ts",
    "exports": [
      {
        "name": " connections",
        "text": "\n\nexport let connections: { [key: string]: Connection } = {};",
        "type": "{ [key: string]: Connection }"
      },
      {
        "type": "function",
        "name": " connectToMongoDb",
        "text": "\n\nexport async function connectToMongoDb(args?: {\n  autoIndex?: boolean;\n  useLocal?: boolean;\n  name?: string;\n  setAsDefault?: boolean;\n  defaultDb?: string;\n  connectionOptions?: ConnectOptions;\n  connectionString?: string;\n}) {\n  let connectionRetries = 0;\n  let {\n    autoIndex,\n    useLocal,\n    name,\n    setAsDefault = true,\n    defaultDb = process.env.SERVICE_ID,\n    connectionOptions = {},\n    connectionString = getSecret('MONGODB_URL'),\n  } = args || {};\n\n  if (!name) name = 'default';\n  if (connections[name]) {\n    logger.warn('mongodb: already connected');\n    return connections[name];\n  }\n\n  if (isLocal && useLocal) {\n    connectionString = `mongodb://localhost:27017/${defaultDb}`;\n  }\n\n  if (!connectionString) return;\n\n  const options: mongoose.ConnectOptions = {\n    authSource: 'admin',\n    family: 4,\n    autoIndex: autoIndex ? autoIndex : false,\n    retryWrites: true,\n    writeConcern: { w: 'majority' },\n    ...connectionOptions,\n  };\n\n  while (connectionRetries < 10) {\n    let connection: Connection;\n    try {\n      if (!connections[name]) {\n        if (setAsDefault) {\n          mongoose.connect(connectionString, options);\n          connection = mongoose.connection;\n        } else {\n          connection = mongoose.createConnection(connectionString, options);\n        }\n        connections[name] = connection;\n        await connection.asPromise();\n      } else {\n        connection = connections[name];\n        await connection.getClient()?.connect();\n        connection.setClient(connection.getClient());\n      }\n      logger.info(`MongoDB Connected: ${connection.host}`);\n      return connection;\n    } catch (e) {\n      logger.error('MONGODB connection error: ', e);\n      await sleep(1000);\n      connectionRetries++;\n    }\n  }\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args?: {\n  autoIndex?: boolean;\n  useLocal?: boolean;\n  name?: string;\n  setAsDefault?: boolean;\n  defaultDb?: string;\n  connectionOptions?: ConnectOptions;\n  connectionString?: string;\n}",
            "type": "{\n  autoIndex?: boolean;\n  useLocal?: boolean;\n  name?: string;\n  setAsDefault?: boolean;\n  defaultDb?: string;\n  connectionOptions?: ConnectOptions;\n  connectionString?: string;\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " getConnection",
        "text": "\n\nexport function getConnection(name = 'default'): Connection {\n  return connections[name] || mongoose.connection;\n}",
        "parameters": [
          {
            "name": "name",
            "text": "name = 'default'",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/mongodb/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/notifications/index.ts",
    "exports": [
      {
        "type": "function",
        "name": " trackNotificationEvent",
        "text": "\n\nexport async function trackNotificationEvent(\n  action: keyof typeof notificationEvents,\n  userId: string,\n  shopId: string,\n  notificationId: string,\n  platform: string,\n  topic: string,\n  subtopic: string\n): Promise<void> {\n  trackEvent(\n    'notifications',\n    {\n      userId,\n      shopId,\n      action: notificationEvents[action],\n      notificationId,\n      platform,\n      topic,\n      subtopic,\n    },\n    {\n      skipPosthog: false,\n      log: isLocal || isStaging,\n    }\n  );\n}",
        "parameters": [
          {
            "name": "action",
            "text": "action: keyof typeof notificationEvents",
            "type": "keyof typeof notificationEvents"
          },
          {
            "name": "userId",
            "text": "userId: string",
            "type": "string"
          },
          {
            "name": "shopId",
            "text": "shopId: string",
            "type": "string"
          },
          {
            "name": "notificationId",
            "text": "notificationId: string",
            "type": "string"
          },
          {
            "name": "platform",
            "text": "platform: string",
            "type": "string"
          },
          {
            "name": "topic",
            "text": "topic: string",
            "type": "string"
          },
          {
            "name": "subtopic",
            "text": "subtopic: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/object.test.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/object.ts",
    "exports": [
      {
        "type": "function",
        "name": " merge",
        "text": "export function merge<OutputType = any>(...objects: any[]): OutputType {\n  const result = {};\n  for (const object of objects) {\n    for (const key in object) {\n      if (object.hasOwnProperty(key)) {\n        const value = object[key];\n        if (typeof value === 'object') {\n          result[key] = merge(result[key], value);\n        } else {\n          result[key] = value;\n        }\n      }\n    }\n  }\n  return result as OutputType;\n}",
        "parameters": [
          {
            "name": "objects",
            "text": "...objects: any[]",
            "type": "any[]"
          }
        ]
      },
      {
        "type": "function",
        "name": " definedKeys",
        "text": "\n\nexport function definedKeys(obj: any) {\n  return Object.keys(obj).reduce((acc, key) => {\n    if (obj[key] !== undefined) {\n      acc.push(key);\n    }\n    return acc;\n  }, []);\n}",
        "parameters": [
          {
            "name": "obj",
            "text": "obj: any",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " nonEmptyKeys",
        "text": "\n\nexport function nonEmptyKeys(obj: any) {\n  return Object.keys(obj).reduce((acc, key) => {\n    if (obj[key] !== null && obj[key] !== undefined) {\n      acc.push(key);\n    }\n    return acc;\n  }, []);\n}",
        "parameters": [
          {
            "name": "obj",
            "text": "obj: any",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/os/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/os/runProcess.ts",
    "exports": [
      {
        "type": "function",
        "name": " runCommand",
        "text": "\n\nexport function runCommand(args: {\n  command: string;\n  commandArgs?: string[];\n  additionalArgs?: SpawnOptions;\n  log?: boolean;\n  onData?: (data: string) => void;\n  onClose?: (code: number) => void;\n}): Promise<{ stdout: string; stderr: string }> {\n  const { command, commandArgs, additionalArgs, log, onData, onClose } = args;\n  const promise = new Promise<{ stdout: string; stderr: string }>((resolve, reject) => {\n    let result = { stdout: '', stderr: '' };\n    const stdioInherit = additionalArgs?.stdio?.includes('inherit');\n    const serviceProc = spawn(command, commandArgs, {\n      shell: process.platform == 'win32',\n      ...additionalArgs,\n    });\n\n    if (!stdioInherit) {\n      serviceProc.stdout.on('data', (data) => {\n        const str = data.toString();\n        if (onData) onData(str);\n        result.stdout += str;\n      });\n\n      serviceProc.stderr.on('data', (data) => {\n        const str = data.toString();\n        if (onData) onData(str);\n        result.stderr += str;\n      });\n\n      serviceProc.on('close', (code) => {\n        if (onClose) onClose(code);\n        if (code !== 0 && result.stderr) {\n          reject(result);\n        } else {\n          resolve(result);\n        }\n      });\n    }\n  });\n  return promise;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  command: string;\n  commandArgs?: string[];\n  additionalArgs?: SpawnOptions;\n  log?: boolean;\n  onData?: (data: string) => void;\n  onClose?: (code: number) => void;\n}",
            "type": "{\n  command: string;\n  commandArgs?: string[];\n  additionalArgs?: SpawnOptions;\n  log?: boolean;\n  onData?: (data: string) => void;\n  onClose?: (code: number) => void;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/otel/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/otel/metrics.ts",
    "exports": [
      {
        "name": " OTEL_URL",
        "text": "\n\nexport const OTEL_URL = `http://${\n  process.env.TW_OTEL_NODE === '1'\n    ? process.env.K8S_HOST_IP\n    : `${\n        isStaging ? 'stg.' : ''\n      }saber-otel.pipelines-cluster.us-central1.otel.internal.triplestack.io`\n}`;",
        "type": "variable"
      },
      {
        "name": " otelSDK",
        "text": "\n\nexport let otelSDK: NodeSDK;",
        "type": "NodeSDK"
      },
      {
        "type": "function",
        "name": " setupOtel",
        "text": "\n\nexport function setupOtel() {\n  const tags = {\n    env: projectId,\n    service: serviceId,\n    'service.name': serviceId,\n    version: process.env.TW_VERSION || '1.0.0',\n    triplewhale_com_deployment: process.env.TW_DEPLOYMENT || process.env.USER,\n    hostname: os.hostname(),\n    'pulumi-stack': process.env.PULUMI_STACK_NAME,\n    'pulumi-project': process.env.PULUMI_PROJECT_NAME,\n  };\n\n  const extendedAttributesFunctions = [\n    {\n      classObj: CounterInstrument,\n      functionName: 'add',\n      argIndex: 1,\n    },\n    {\n      classObj: ObservableResultImpl,\n      functionName: 'observe',\n      argIndex: 1,\n    },\n  ];\n\n  for (const { classObj, functionName, argIndex } of extendedAttributesFunctions) {\n    const originalFunc = classObj.prototype[functionName];\n\n    classObj.prototype[functionName] = function (...args) {\n      args[argIndex] = { ...args[argIndex], ...tags };\n      return originalFunc.call(this, ...args);\n    };\n  }\n\n  const metricReader = new PeriodicExportingMetricReader({\n    exporter: new OTLPMetricExporter({\n      url: OTEL_URL + ':4317/v1/metrics',\n    }),\n    exportIntervalMillis: 5000,\n    exportTimeoutMillis: 4000,\n  });\n\n  const traceExporter = new OTLPTraceExporter({ url: OTEL_URL + ':4317/v1/traces' });\n\n  otelSDK = new NodeSDK({\n    resource: new Resource(tags),\n    traceExporter,\n    metricReader,\n    sampler: new TraceIdRatioBasedSampler(0.1),\n  });\n  otelSDK.start();\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " getOtelMeter",
        "text": "\n\nexport function getOtelMeter(name: string = 'default') {\n  return opentelemetry.metrics.getMeter(name);\n}",
        "parameters": [
          {
            "name": "name",
            "text": "name: string = 'default'",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " getOtelTracer",
        "text": "\n\nexport function getOtelTracer(name: string = 'default') {\n  return opentelemetry.trace.getTracer(name);\n}",
        "parameters": [
          {
            "name": "name",
            "text": "name: string = 'default'",
            "type": "string"
          }
        ]
      },
      {
        "name": " otelTrace",
        "text": "\n\nexport const otelTrace = opentelemetry.trace;",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/performance/createCluster.ts",
    "exports": [
      {
        "type": "function",
        "name": " createCluster",
        "text": "\n\nexport function createCluster(mainFunction, args?: { workers?: number }) {\n  const { workers = 1 } = args || {};\n  if (cluster.isPrimary && !isLocal) {\n    logger.info(`Primary (pid:${process.pid}) started. Launching ${workers} workers.`);\n\n    // Fork workers.\n    for (let i = 0; i < workers; i++) {\n      cluster.fork();\n    }\n\n    cluster.on('exit', (worker, code, signal) => {\n      logger.warn(\n        `worker (pid:${worker.process.pid}) exited with code ${code} and signal ${signal}`\n      );\n      if (!Object.keys(cluster.workers).length) {\n        logger.error('All workers exited, exiting...');\n        process.exit(1);\n      }\n    });\n\n    process.on('SIGTERM', () => {\n      logger.info('Received SIGTERM, terminating workers...');\n      for (const id in cluster.workers) {\n        cluster.workers[id].kill('SIGTERM');\n      }\n    });\n  } else {\n    logger.info(`Worker (pid:${process.pid}) started`);\n    mainFunction();\n  }\n}",
        "parameters": [
          {
            "name": "mainFunction",
            "text": "mainFunction",
            "type": "any"
          },
          {
            "name": "args",
            "text": "args?: { workers?: number }",
            "type": "{ workers?: number }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/performance/eventLoop.ts",
    "exports": [
      {
        "type": "function",
        "name": " eventLoopMonitor",
        "text": "\n\nexport function eventLoopMonitor(thresholdMs: number = 100) {\n  const cache = new Map<number, [number, number]>();\n  function before(asyncId: number) {\n    cache.set(asyncId, process.hrtime());\n  }\n\n  function after(asyncId: number) {\n    const cached = cache.get(asyncId);\n    if (cached == null) {\n      return;\n    }\n    cache.delete(asyncId);\n\n    const ms = process.hrtime(cached)[0];\n    if (ms > thresholdMs) {\n      logger.warn(`Event loop was blocked for ${ms}ms`);\n\n      if (tracer) {\n        const span = tracer.startSpan('EventLoopBlock', {\n          childOf: tracer.scope().active(),\n          startTime: new Date().getTime() - ms,\n          tags: {\n            hostname: os.hostname(),\n          },\n        });\n        span.finish();\n      }\n    }\n  }\n\n  const asyncHook = createHook({ before, after });\n\n  asyncHook.enable();\n  return asyncHook;\n}",
        "parameters": [
          {
            "name": "thresholdMs",
            "text": "thresholdMs: number = 100",
            "type": "number"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/performance/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/performance/lruCahce.ts",
    "exports": [
      {
        "type": "function",
        "name": " createLruCache",
        "text": "\n\nexport function createLruCache<T extends (...args: any[]) => any>(args: {\n  options?: Partial<LRUCache.Options<any, any, any>>;\n  func: T;\n  encode: (...args: Parameters<T>) => string;\n}) {\n  const { options, func, encode } = args;\n  const cache = new LRUCache({\n    ttl: 5 * 60 * 1000, // 1 minute\n    max: 10000,\n    ttlAutopurge: false,\n    ignoreFetchAbort: true,\n    allowStaleOnFetchAbort: true,\n    ...options,\n  });\n  const fetch = async (...args: Parameters<T>) => {\n    const key = encode(...args);\n    let res = cache.get(key);\n    if (res) return res;\n    res = await func(...args);\n    cache.set(key, res);\n    return res;\n  };\n  return { cache, fetch };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  options?: Partial<LRUCache.Options<any, any, any>>;\n  func: T;\n  encode: (...args: Parameters<T>) => string;\n}",
            "type": "{\n  options?: Partial<LRUCache.Options<any, any, any>>;\n  func: T;\n  encode: (...args: Parameters<T>) => string;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/performance/threads.ts",
    "exports": [
      {
        "type": "function",
        "name": " runInWorkerThread",
        "text": "\n\nexport function runInWorkerThread(func, ...args) {\n  return new Promise((resolve, reject) => {\n    const worker = new Worker(\n      `\n      const { parentPort } = require('worker_threads');\n      parentPort.once('message', args => {\n        try {\n          const result = (${func})(...args);\n          parentPort.postMessage({ result });\n        } catch (error) {\n          parentPort.postMessage({ error: error.message });\n        }\n      });\n    `,\n      { eval: true }\n    );\n\n    worker.on('message', ({ result, error }) => {\n      if (error) {\n        reject(new Error(error));\n      } else {\n        resolve(result);\n      }\n    });\n\n    worker.on('error', reject);\n    worker.on('exit', (code) => {\n      if (code !== 0) {\n        reject(new Error(`Worker stopped with exit code ${code}`));\n      }\n    });\n\n    worker.postMessage(args);\n  });\n}",
        "parameters": [
          {
            "name": "func",
            "text": "func",
            "type": "any"
          },
          {
            "name": "args",
            "text": "...args",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/pg/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/pg/monitoring.ts",
    "exports": [
      {
        "type": "function",
        "name": " monitorPGPools",
        "text": "\n\nexport function monitorPGPools() {\n  if (tracer) {\n    setInterval(() => {\n      const data = Object.entries(pools).map(([k, v]) => {\n        const metrics = {\n          'pg.pool_total_count': v.totalCount,\n          'pg.pool_idle_count': v.idleCount,\n          'pg.pool_waiting_count': v.waitingCount,\n        };\n        const tags = {\n          pg_host: k,\n          // @ts-ignore\n          pg_name: v.name || k,\n        };\n        return { metrics, tags };\n      });\n      for (const { metrics, tags } of data) {\n        submitDDMetrics({\n          metrics,\n          metricType: 'gauge',\n          tags,\n        });\n      }\n    }, 10000);\n  }\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/utils/pg/pool.ts",
    "exports": [
      {
        "name": " pools",
        "text": "\n\nexport const pools: Record<string, Pool> = {};",
        "type": "Record<string, Pool>"
      },
      {
        "type": "function",
        "name": " getPGPool",
        "text": "\n\nexport function getPGPool(args: { name?: string; config: PoolConfig }): Pool {\n  const { config, name } = args;\n  const conf = getPGConnectionConfig(config);\n  const databaseKey = conf.database ? `:${conf.database}` : '';\n  const key = `${conf.host}:${conf.port}${databaseKey}:${conf.statement_timeout || 0}`;\n  if (pools[key]) return pools[key];\n  const pool = new Pool({\n    idleTimeoutMillis: 30000,\n    max: 100,\n    ...conf,\n  });\n  // @ts-ignore\n  pool.name = name || conf.host;\n  pool.on('error', (err) => {\n    logger.error('PG: Unexpected error on idle client', err);\n  });\n  pools[key] = pool;\n  return pool;\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: { name?: string; config: PoolConfig }",
            "type": "{ name?: string; config: PoolConfig }"
          }
        ]
      },
      {
        "type": "function",
        "name": " getPGConnectionConfig",
        "text": "\n\nexport function getPGConnectionConfig(config: PoolConfig): ConnectionConfig {\n  return {\n    port: 5432,\n    connectionTimeoutMillis: 1000,\n    application_name: `tw-${serviceId}`,\n    keepAlive: true,\n    ...config,\n  };\n}",
        "parameters": [
          {
            "name": "config",
            "text": "config: PoolConfig",
            "type": "PoolConfig"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/pg/tags.ts",
    "exports": [
      {
        "type": "function",
        "name": " addTags",
        "text": "\n\nexport function addTags(sql: string, tags?: Record<GCPTags, string>): string {\n  const allTags = { ...tags };\n  const context = getStoreKey('context');\n  if (context.req) {\n    allTags.action = context.req.method;\n    allTags.framework = 'express';\n    allTags.route = context.req?.route?.path;\n  }\n  // https://google.github.io/sqlcommenter/spec/#format\n  const tagsString = Object.entries(allTags)\n    .map(([key, value]) => `${key}=${encodeURI(value)}`)\n    .join(',');\n  return `${sql} /* ${tagsString} */`;\n}",
        "parameters": [
          {
            "name": "sql",
            "text": "sql: string",
            "type": "string"
          },
          {
            "name": "tags",
            "text": "tags?: Record<GCPTags, string>",
            "type": "Record<GCPTags, string>"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/pgConvertNamedParams.ts",
    "exports": [
      {
        "type": "function",
        "name": " convertNamedParams",
        "text": "\nexport function convertNamedParams(parameterizedSql: string, params: Record<string, any>) {\n  const [text, values] = Object.entries(params).reduce(\n    (acc, [key, value]) => {\n      const [sql, array, index] = acc;\n      if (!sql.includes(`:${key}`)) {\n        return acc;\n      }\n      return [\n        sql.replaceAll(`:${key}`, `$${index}`),\n        [...array, value],\n        index + 1,\n      ] as QueryReducerArray;\n    },\n    [parameterizedSql, [], 1] as QueryReducerArray\n  );\n  return { text, values };\n}",
        "parameters": [
          {
            "name": "parameterizedSql",
            "text": "parameterizedSql: string",
            "type": "string"
          },
          {
            "name": "params",
            "text": "params: Record<string, any>",
            "type": "Record<string, any>"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/pixel/SimpleCycle2.ts",
    "exports": [
      {
        "name": " mimeZipPrefix",
        "text": "\n\n\nexport const mimeZipPrefix = `data:application/zip;base92,`;",
        "type": "variable"
      },
      {
        "type": "function",
        "name": " sicy2",
        "text": "\nexport function sicy2() {\n    return sicyCache || (sicyCache = sicy2generator());\n}",
        "parameters": []
      }
    ]
  },
  {
    "file": "@tw/utils/pixel/base62_92.ts",
    "exports": [
      {
        "name": " letters92",
        "text": "export const letters92 = `!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_abcdefghijklmnopqrstuvwxyz{|}~`;",
        "type": "variable"
      },
      {
        "type": "function",
        "name": " num2base62",
        "text": "\nexport function num2base62(n: number) {\n    let r = '';\n    while (n) {\n        const v = n % radix;\n        // console.log({ n, v, r });\n        r = letters[v] + r;\n        n = (n - v) / radix;\n    }\n    return r;\n}",
        "parameters": [
          {
            "name": "n",
            "text": "n: number",
            "type": "number"
          }
        ]
      },
      {
        "type": "function",
        "name": " num2base92",
        "text": "\nexport function num2base92(n: number) {\n    if (n === 0) return letters92[0];\n    let r = '';\n    while (n) {\n        const v = n % radix92;\n        // console.log({ n, v, r });\n        r = letters92[v] + r;\n        n = (n - v) / radix92;\n    }\n    return r;\n}",
        "parameters": [
          {
            "name": "n",
            "text": "n: number",
            "type": "number"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/pixel/decodeJa3.ts",
    "exports": [
      {
        "type": "function",
        "name": " decodeJa3",
        "text": "\n\nexport function decodeJa3(s: string | null) {\n    const ret = { pwd: ``, cont: ``, decoded: `` };\n    const err = { ...ret, decoded: `error` };\n    if (s === null) {\n        console.log(`decodeJa3(\"${s}\") nothing to decode`);\n        return err;\n    }\n    try {\n        const pwdStr = s.slice(0, 9);\n        // tslint:disable-next-line: radix\n        const pwd = parseInt(pwdStr);\n        const cont = s.slice(9);\n        let roll = pwd,\n            r = '';\n        for (let i = 0; i < cont.length; ++i) {\n            roll = lcg(roll);\n            const c = roll % SAFE_ROLL;\n            //console.log({ i, roll, c });\n            r += String.fromCharCode(cont.charCodeAt(i) - c);\n        }\n        return { pwd, cont, decoded: r };\n    } catch (e: any) {\n        console.error(`decodeJa3(\"${s}\") error:`, e.message);\n        return err;\n    }\n}",
        "parameters": [
          {
            "name": "s",
            "text": "s: string | null",
            "type": "string | null"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/pixel/formats.ts",
    "exports": [
      {
        "type": "function",
        "name": " str2hex",
        "text": "export function str2hex(str: string, joiner = `:`) {\n    return str.split(``).map(a => a.charCodeAt(0).toString(16)).join(joiner);\n}",
        "parameters": [
          {
            "name": "str",
            "text": "str: string",
            "type": "string"
          },
          {
            "name": "joiner",
            "text": "joiner = `:`",
            "type": "any"
          }
        ]
      },
      {
        "type": "function",
        "name": " hex2str",
        "text": "\nexport function hex2str(hex: string, joiner = `:`) {\n    return hex.split(joiner).map(a => String.fromCharCode(parseInt(a, 16))).join(``);\n}",
        "parameters": [
          {
            "name": "hex",
            "text": "hex: string",
            "type": "string"
          },
          {
            "name": "joiner",
            "text": "joiner = `:`",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/pixel/id.ts",
    "exports": [
      {
        "type": "function",
        "name": " timeFromId",
        "text": "\n\nexport function timeFromId(id: string) {\n    if (!isValidId(id)) return -1;\n    return parseInt(id.slice(0, 9), 36);\n}",
        "parameters": [
          {
            "name": "id",
            "text": "id: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " genId",
        "text": "\n\nexport function genId(tail = 3, timestamp = 0, seed: number | null = null, randStr: string | null = null) {\n    const rand = mulberry32(seedIfNeeded32(seed));\n    return () => {\n        // function log(a: string) { if (!dumped) trace(() => a); }\n        let tailStr = ``;\n        while (tailStr.length < tail) tailStr += (randStr || num2base62(rand()));\n        // log(`tail target length is ${tail}, str is ${tailStr} of length ${tailStr.length}`);\n        let d = (timestamp || Date.now()).toString(36);\n        if (d.length < 9) d = `0` + d;\n        const preId = `${d}${tailStr.slice(0, tail)}`;\n        // log(`result: ${preId}${checksum(preId)} (made of ${preId} and ${checksum(preId)})`);\n        // dumped = true;\n        return `${preId}${checksum(preId)}`;\n    }\n}",
        "parameters": [
          {
            "name": "tail",
            "text": "tail = 3",
            "type": "any"
          },
          {
            "name": "timestamp",
            "text": "timestamp = 0",
            "type": "any"
          },
          {
            "name": "seed",
            "text": "seed: number | null = null",
            "type": "number | null"
          },
          {
            "name": "randStr",
            "text": "randStr: string | null = null",
            "type": "string | null"
          }
        ]
      },
      {
        "type": "function",
        "name": " isValidId",
        "text": "\nexport function isValidId(candidate: string) {\n    // console.log(`checksum for ${candidate.slice(-checksumSize)} is ${checksum(candidate.slice(-checksumSize))}\\nfull: ${candidate}`);\n\n    return candidate.slice(-checksumSize) == checksum(candidate.slice(0, -checksumSize));\n}",
        "parameters": [
          {
            "name": "candidate",
            "text": "candidate: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " sliceWithHash",
        "text": "\n\nexport function sliceWithHash(str: string, length: number, hashSize = 1) {\n    if (str.length <= length) return str;\n    return str.slice(0, length) + checksum(str.slice(length), hashSize);\n}",
        "parameters": [
          {
            "name": "str",
            "text": "str: string",
            "type": "string"
          },
          {
            "name": "length",
            "text": "length: number",
            "type": "number"
          },
          {
            "name": "hashSize",
            "text": "hashSize = 1",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/pixel/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/pixel/lewHash.ts",
    "exports": [
      {
        "type": "function",
        "name": " lewHash32",
        "text": "\n\nexport function lewHash32(key: string, size: number) {\n    const hash = Array(size).fill(1981),\n        // tslint:disable-next-line: no-bitwise\n        limitToBits = (x: number, bits: number) => x & (2 ** bits - 1),\n        pass = (acc: number, val: number) => {\n            // tslint:disable-next-line: no-bitwise\n            acc += val; acc += acc << 10; acc ^= acc >> 6;\n            return acc;\n        };\n    let i = key.length;\n    while (i--) {\n        const b = i % size;\n        hash[b] = pass(hash[b], key.charCodeAt(i));\n    }\n    for (let u = size - 1; u >= 0; --u)\n        for (i = 1; i < size; ++i) {\n            hash[i] = pass(hash[i], hash[u]);\n            hash[u] = pass(hash[u], hash[i]);\n        }\n    if (hash.length == 1) return [limitToBits(hash[0], 32)];\n    return hash.map((x, i) => limitToBits(x, 32));\n}",
        "parameters": [
          {
            "name": "key",
            "text": "key: string",
            "type": "string"
          },
          {
            "name": "size",
            "text": "size: number",
            "type": "number"
          }
        ]
      },
      {
        "type": "function",
        "name": " lewHashStr",
        "text": "\nexport function lewHashStr(key: string, size: number) {\n    return lewHash32(key, size).map((a) => pad(num2base92(a), 5)).join(``);\n}",
        "parameters": [
          {
            "name": "key",
            "text": "key: string",
            "type": "string"
          },
          {
            "name": "size",
            "text": "size: number",
            "type": "number"
          }
        ]
      },
      {
        "type": "function",
        "name": " lewHashStr36",
        "text": "\nexport function lewHashStr36(key: string, size: number) {\n    return lewHash32(key, size).map((a) => pad(a.toString(36), 6)).join(``);\n}",
        "parameters": [
          {
            "name": "key",
            "text": "key: string",
            "type": "string"
          },
          {
            "name": "size",
            "text": "size: number",
            "type": "number"
          }
        ]
      },
      {
        "type": "function",
        "name": " lewHashB6",
        "text": "\n\n//export function lewHashB4(s: string) { return lewHashStr(s, 4); }\nexport function lewHashB6(s: string) { return lewHashStr(s, 6); }",
        "parameters": [
          {
            "name": "s",
            "text": "s: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/pixel/rand.ts",
    "exports": [
      {
        "type": "function",
        "name": " mulberry32",
        "text": "export function mulberry32(a: number) {\n    return () => {\n        let t = (a += 0x6d2b79f5);\n        // tslint:disable-next-line: no-bitwise\n        t = Math.imul(t ^ (t >>> 15), t | 1);\n        // tslint:disable-next-line: no-bitwise\n        t ^= t + Math.imul(t ^ (t >>> 7), t | 61);\n        // tslint:disable-next-line: no-bitwise\n        return (t ^ (t >>> 14)) >>> 0;\n    };\n}",
        "parameters": [
          {
            "name": "a",
            "text": "a: number",
            "type": "number"
          }
        ]
      },
      {
        "type": "function",
        "name": " mulberry01",
        "text": "\nexport function mulberry01(a: number) {\n    const m = mulberry32(a);\n    return () => m() / (2 ** 32);\n}",
        "parameters": [
          {
            "name": "a",
            "text": "a: number",
            "type": "number"
          }
        ]
      },
      {
        "type": "function",
        "name": " seedIfNeeded32",
        "text": "\nexport function seedIfNeeded32(probablySeed: number | null = null) {\n    return probablySeed !== null\n        ? probablySeed\n        : Math.floor(Math.random() * (2 ** 32));\n}",
        "parameters": [
          {
            "name": "probablySeed",
            "text": "probablySeed: number | null = null",
            "type": "number | null"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/promise.test.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/promise.ts",
    "exports": [
      {
        "type": "function",
        "name": " allLimit",
        "text": "\n\nexport async function allLimit<Input = any, Result = any>(\n  limit: number,\n  inputs: Input[] | Generator<Input>,\n  mapFn?: (arg: Input) => Promise<Result>,\n  options: {\n    timeoutMs?: number; // per promise\n    timeoutError?: Error;\n    totalTimeoutMs?: number; // for all Promises\n    totalTimeoutError?: Error;\n    requireSuccess?: boolean; // if one promise rejects, stop all and throw - DEFAULT FALSE!\n  } = {}\n): Promise<Result[]> {\n  let results = [];\n  let iterator: Iterable<[number, Input]> = (function* () {\n    let index = 0;\n    for (let input of inputs) {\n      yield [index++, input];\n    }\n  })();\n  let error: Error = null;\n  async function workerProcess(\n    iterable: Iterable<[number, Input | Promise<Result>]>,\n    workerId: number\n  ): Promise<void> {\n    try {\n      if (iterable !== iterator) {\n        throw new Error('iterable mismatch');\n      }\n      for (let [index, input] of iterable) {\n        if (error) {\n          break;\n        }\n        let promise: Promise<Result>;\n        try {\n          if (typeof mapFn === 'function') {\n            promise = mapFn(input as Input);\n          } else {\n            promise = input as Promise<Result>;\n          }\n          results[index] = await (options.timeoutMs\n            ? timeout(options.timeoutMs, promise, options.timeoutError)\n            : promise);\n        } catch (e) {\n          if (options.requireSuccess) {\n            error = e instanceof Error ? e : new Error(e);\n            break;\n          }\n          results[index] = e;\n        }\n      }\n    } catch (e) {\n      e.message = `promiseAllLimit worker ${workerId} failed: ${e.message}`;\n      throw e;\n    }\n  }\n\n  const concurrency = Array(limit)\n    .fill(iterator)\n    .map((iterable, worker) => workerProcess(iterable, worker));\n  const done = Promise.allSettled(concurrency);\n  await (options.totalTimeoutMs\n    ? timeout(options.totalTimeoutMs, done, options.totalTimeoutError)\n    : done);\n  if (error) {\n    throw error;\n  }\n  return results;\n}",
        "parameters": [
          {
            "name": "limit",
            "text": "limit: number",
            "type": "number"
          },
          {
            "name": "inputs",
            "text": "inputs: Input[] | Generator<Input>",
            "type": "Input[] | Generator<Input>"
          },
          {
            "name": "mapFn",
            "text": "mapFn?: (arg: Input) => Promise<Result>",
            "type": "(arg: Input) => Promise<Result>"
          },
          {
            "name": "options",
            "text": "options: {\n    timeoutMs?: number; // per promise\n    timeoutError?: Error;\n    totalTimeoutMs?: number; // for all Promises\n    totalTimeoutError?: Error;\n    requireSuccess?: boolean; // if one promise rejects, stop all and throw - DEFAULT FALSE!\n  } = {}",
            "type": "{\n    timeoutMs?: number; // per promise\n    timeoutError?: Error;\n    totalTimeoutMs?: number; // for all Promises\n    totalTimeoutError?: Error;\n    requireSuccess?: boolean; // if one promise rejects, stop all and throw - DEFAULT FALSE!\n  }"
          }
        ]
      },
      {
        "type": "function",
        "name": " timeout",
        "text": "\n\nexport async function timeout<T = any>(\n  timeoutMs: number,\n  promise: Promise<T>,\n  timeoutError?: Error\n): Promise<T> {\n  let timeout: NodeJS.Timeout;\n  return Promise.race([\n    promise,\n    new Promise((_, reject) => {\n      timeout = setTimeout(\n        () => reject(timeoutError || new Error(`promise timeout after ${timeoutMs} ms`)),\n        timeoutMs\n      );\n    }),\n  ]).then((result: T) => {\n    clearTimeout(timeout);\n    return result;\n  });\n}",
        "parameters": [
          {
            "name": "timeoutMs",
            "text": "timeoutMs: number",
            "type": "number"
          },
          {
            "name": "promise",
            "text": "promise: Promise<T>",
            "type": "Promise<T>"
          },
          {
            "name": "timeoutError",
            "text": "timeoutError?: Error",
            "type": "Error"
          }
        ]
      },
      {
        "type": "function",
        "name": " allObject",
        "text": "\n\nexport async function allObject(\n  object: Record<string, Promise<any> | any>\n): Promise<Record<string, any>> {\n  let results: Record<string, any> = {};\n  for (let [key, promise] of Object.entries(object)) {\n    try {\n      results[key] = await promise;\n    } catch (e) {\n      results[key] = e;\n    }\n  }\n  return results;\n}",
        "parameters": [
          {
            "name": "object",
            "text": "object: Record<string, Promise<any> | any>",
            "type": "Record<string, Promise<any> | any>"
          }
        ]
      },
      {
        "type": "function",
        "name": " chain",
        "text": "\n\nexport async function chain<R = any>(\n  promiseFactories:\n    | [...((args: any | undefined) => Promise<any>)[], (args: any | undefined) => Promise<R>]\n    | Generator<any, Promise<R>, unknown>\n    | AsyncGenerator<any, R, unknown>\n): Promise<R> {\n  try {\n    let result: Awaited<any>;\n    for await (let factory of promiseFactories) {\n      if (typeof factory === 'function') {\n        result = await factory(result);\n      } else {\n        result = (await factory) as Promise<any | R>;\n      }\n    }\n    return result;\n  } catch (e) {\n    e.message = `chain failed: ${e.message}`;\n    throw e;\n  }\n}",
        "parameters": [
          {
            "name": "promiseFactories",
            "text": "promiseFactories:\n    | [...((args: any | undefined) => Promise<any>)[], (args: any | undefined) => Promise<R>]\n    | Generator<any, Promise<R>, unknown>\n    | AsyncGenerator<any, R, unknown>",
            "type": "| [...((args: any | undefined) => Promise<any>)[], (args: any | undefined) => Promise<R>]\n    | Generator<any, Promise<R>, unknown>\n    | AsyncGenerator<any, R, unknown>"
          }
        ]
      },
      {
        "type": "function",
        "name": " serial",
        "text": "\n\nexport async function serial<Input = any, Result = any>(\n  inputs: Input[] | Generator<Input>,\n  mapFn?: (arg: Input) => Promise<Result>,\n  options: {\n    timeoutMs?: number; // per promise\n    timeoutError?: Error;\n    totalTimeoutMs?: number; // for all Promises\n    totalTimeoutError?: Error;\n    requireSuccess?: boolean; // if one promise rejects, stop all and throw - DEFAULT FALSE!\n  } = {}\n): Promise<any[]> {\n  let results = [];\n  let iterator: Iterable<[number, Input]> = (function* () {\n    let index = 0;\n    for (let input of inputs) {\n      yield [index++, input];\n    }\n  })();\n  async function _serialLoop() {\n    try {\n      for (let [index, input] of iterator) {\n        let promise: Promise<Result>;\n        try {\n          if (typeof mapFn === 'function') {\n            promise = mapFn(input as Input);\n          } else {\n            promise = input as Promise<Result>;\n          }\n          results[index] = await (options.timeoutMs\n            ? timeout(options.timeoutMs, promise, options.timeoutError)\n            : promise);\n        } catch (e) {\n          if (options.requireSuccess) {\n            let error = e instanceof Error ? e : new Error(e);\n            throw error;\n          }\n          results[index] = e;\n        }\n      }\n    } catch (e) {\n      e.message = `promise.serial failed: ${e.message}`;\n      throw e;\n    }\n  }\n  const done = _serialLoop().catch((e) => {\n    throw e;\n  });\n  await (options.totalTimeoutMs\n    ? timeout(options.totalTimeoutMs, done, options.totalTimeoutError)\n    : done);\n  return results;\n}",
        "parameters": [
          {
            "name": "inputs",
            "text": "inputs: Input[] | Generator<Input>",
            "type": "Input[] | Generator<Input>"
          },
          {
            "name": "mapFn",
            "text": "mapFn?: (arg: Input) => Promise<Result>",
            "type": "(arg: Input) => Promise<Result>"
          },
          {
            "name": "options",
            "text": "options: {\n    timeoutMs?: number; // per promise\n    timeoutError?: Error;\n    totalTimeoutMs?: number; // for all Promises\n    totalTimeoutError?: Error;\n    requireSuccess?: boolean; // if one promise rejects, stop all and throw - DEFAULT FALSE!\n  } = {}",
            "type": "{\n    timeoutMs?: number; // per promise\n    timeoutError?: Error;\n    totalTimeoutMs?: number; // for all Promises\n    totalTimeoutError?: Error;\n    requireSuccess?: boolean; // if one promise rejects, stop all and throw - DEFAULT FALSE!\n  }"
          }
        ]
      },
      {
        "name": " Waiter",
        "text": "\n\nexport class Waiter<T = void> {\n  private promise: Promise<T>;\n  private _resolve: (args: T | PromiseLike<T>) => void;\n  private _reject: (e: Error) => void;\n  private interval: NodeJS.Timeout;\n\n  constructor(\n    options: {\n      condition?: () => any | null;\n      timeoutMs?: number;\n    } = {}\n  ) {\n    this.promise = new Promise<T>((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n    this.interval = setInterval(() => {\n      if (options.condition) {\n        const result = options.condition();\n        if (result) {\n          this.continue(result);\n        }\n      }\n    }, 1000);\n  }\n\n  continue(args: T | PromiseLike<T>) {\n    clearInterval(this.interval);\n    this._resolve(args);\n  }\n\n  done() {\n    return this.promise;\n  }\n}",
        "type": "class"
      }
    ]
  },
  {
    "file": "@tw/utils/providers.ts",
    "exports": [
      {
        "name": " serviceToAccounts",
        "text": "\n\nexport type serviceToAccounts = {\n  [key in ServicesIds]: { id: string; providerAccount: string; integrationId?: string }[];\n};",
        "type": "{\n  [key in ServicesIds]: { id: string; providerAccount: string; integrationId?: string }[];\n}"
      },
      {
        "type": "function",
        "name": " getShopAccountIds",
        "text": "\n\nexport function getShopAccountIds(shopId: string): Promise<serviceToAccounts>;",
        "parameters": [
          {
            "name": "shopId",
            "text": "shopId: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " getShopAccountIds",
        "text": "\n\nexport function getShopAccountIds(\n  shopId: string,\n  providerId: ServicesIds\n): Promise<{ id: string; providerAccount: string }[]>;",
        "parameters": [
          {
            "name": "shopId",
            "text": "shopId: string",
            "type": "string"
          },
          {
            "name": "providerId",
            "text": "providerId: ServicesIds",
            "type": "ServicesIds"
          }
        ]
      },
      {
        "type": "function",
        "name": " getShopAccountIds",
        "text": "\n\nexport async function getShopAccountIds(shopId: string, providerId?: ServicesIds) {\n  const shopData = await getShopData(shopId, undefined, true);\n  if (providerId) {\n    return getAllAccountsIdsByService(shopData!)[providerId];\n  } else {\n    return getAllAccountsIdsByService(shopData!);\n  }\n}",
        "parameters": [
          {
            "name": "shopId",
            "text": "shopId: string",
            "type": "string"
          },
          {
            "name": "providerId",
            "text": "providerId?: ServicesIds",
            "type": "ServicesIds"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/pubsub/client.ts",
    "exports": [
      {
        "type": "function",
        "name": " getPubSubClient",
        "text": "\n\nexport function getPubSubClient(opts?: {\n  forceCloud?: boolean;\n  new?: boolean;\n  projectId?: string;\n}) {\n  const { projectId = process.env.GCLOUD_PROJECT } = opts || {};\n  const forceCloud = opts.forceCloud || process.env.FORCE_CLOUD === 'true';\n  const key = forceCloud ? 'forceCloud' : 'plain';\n  if (!pubsubClients[key] || opts.new) {\n    const options: ClientConfig = {\n      projectId,\n    };\n    if (isLocal && !forceCloud) options.apiEndpoint = 'http://localhost:8065';\n    pubsubClients[key] = new PubSub(options);\n  }\n  return pubsubClients[key];\n}",
        "parameters": [
          {
            "name": "opts",
            "text": "opts?: {\n  forceCloud?: boolean;\n  new?: boolean;\n  projectId?: string;\n}",
            "type": "{\n  forceCloud?: boolean;\n  new?: boolean;\n  projectId?: string;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/pubsub/debug.ts",
    "exports": [
      {
        "name": " DEBUG_STORAGE_BUCKET",
        "text": "\n\nexport const DEBUG_STORAGE_BUCKET = `message-debug-${projectId}`;",
        "type": "variable"
      },
      {
        "name": " RequestWithPubsubDebug",
        "text": "\n\nexport interface RequestWithPubsubDebug extends PubsubRequest {\n  debug: () => Promise<void>;\n}",
        "type": "interface"
      },
      {
        "type": "function",
        "name": " debugPubsubMiddleware",
        "text": "\n\nexport function debugPubsubMiddleware(topicName: string) {\n  return async function _debugPubsubMiddleware(req: Request, res: Response, next: NextFunction) {\n    const message = req.body;\n    (req as any).debug = async function () {\n      return await debugPubsubMessage(topicName, message);\n    };\n    next();\n  };\n}",
        "parameters": [
          {
            "name": "topicName",
            "text": "topicName: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " debugPubsubMessage",
        "text": "\n\nexport async function debugPubsubMessage(\n  topicName: string,\n  message: PubsubPushReqBody,\n  options: { throw?: boolean } = {}\n): Promise<void> {\n  try {\n    const response = await callPubSub(\n      'pubsub-save-debug',\n      { ...message, topicName },\n      {},\n      { forceCloud: true }\n    );\n  } catch (e) {\n    logger.error(`Error sending message to debug topic: ${e.message}`);\n    if (options.throw) {\n      throw e;\n    }\n  }\n}",
        "parameters": [
          {
            "name": "topicName",
            "text": "topicName: string",
            "type": "string"
          },
          {
            "name": "message",
            "text": "message: PubsubPushReqBody",
            "type": "PubsubPushReqBody"
          },
          {
            "name": "options",
            "text": "options: { throw?: boolean } = {}",
            "type": "{ throw?: boolean }"
          }
        ]
      },
      {
        "type": "function",
        "name": " replayMessagesToPubSub",
        "text": "\n\nexport async function replayMessagesToPubSub({\n  bucketName,\n  topicName,\n  filter,\n  folderName,\n  options = {},\n}: {\n  bucketName: string;\n  topicName?: string;\n  filter?: (message: any) => boolean;\n  folderName?: string;\n  options?: DebugPubsubOptions;\n}): Promise<void> {\n  async function replayPublishMessage(file: PubsubDelivery) {\n    const { subscription, message } = file;\n    if (!filter || filter(message)) {\n      topicName = topicName || message.attributes?.topicName;\n      if (!options.keepTrace) {\n        delete message.attributes?.traceId;\n      }\n      message.attributes = {\n        ...message.attributes,\n        isReplay: 'true',\n      };\n      await callPubSub(topicName, message.data, message.attributes);\n    }\n  }\n  return await streamMessagesFromBucket({\n    bucketName,\n    topicName,\n    options,\n    folderName,\n    callback: replayPublishMessage,\n  });\n}",
        "parameters": [
          {
            "name": "{\n  bucketName,\n  topicName,\n  filter,\n  folderName,\n  options = {},\n}",
            "text": "{\n  bucketName,\n  topicName,\n  filter,\n  folderName,\n  options = {},\n}: {\n  bucketName: string;\n  topicName?: string;\n  filter?: (message: any) => boolean;\n  folderName?: string;\n  options?: DebugPubsubOptions;\n}",
            "type": "{\n  bucketName: string;\n  topicName?: string;\n  filter?: (message: any) => boolean;\n  folderName?: string;\n  options?: DebugPubsubOptions;\n}"
          }
        ]
      },
      {
        "type": "function",
        "name": " replayMessagesToEndpoint",
        "text": "\n\n// prefer replayMessagesToPubSub when possible over this, to emulate actual behavior\nexport async function replayMessagesToEndpoint({\n  bucketName,\n  topicName,\n  folderName,\n  serviceId,\n  endpoint,\n  filter,\n  options = {},\n}: {\n  bucketName: string;\n  topicName?: string;\n  folderName?: string;\n  serviceId: string;\n  endpoint: string;\n  filter?: (message: any) => boolean;\n  options?: DebugPubsubOptions;\n}) {\n  async function callEndpoint(file: PubsubDelivery) {\n    const { subscription, message } = file;\n    if (!filter || filter(message)) {\n      // prefer this if you're using this function!\n      if (endpoint.endsWith('isPubsub=true')) {\n        if (!options.keepTrace) {\n          delete message.attributes?.traceId;\n        }\n        message.attributes = {\n          ...message.attributes,\n          isReplay: 'true',\n        };\n        await callServiceEndpoint(\n          serviceId,\n          endpoint,\n          {\n            subscription,\n            message: {\n              ...message,\n              data: Buffer.from(JSON.stringify(message.data)).toString('base64'),\n            },\n          },\n          { forceCloud: true }\n        );\n      } else {\n        await callServiceEndpoint(\n          serviceId,\n          endpoint,\n          { subscription, ...message },\n          { forceCloud: true }\n        );\n      }\n    }\n  }\n  return await streamMessagesFromBucket({\n    bucketName,\n    folderName,\n    topicName,\n    options,\n    callback: callEndpoint,\n  });\n}",
        "parameters": [
          {
            "name": "{\n  bucketName,\n  topicName,\n  folderName,\n  serviceId,\n  endpoint,\n  filter,\n  options = {},\n}",
            "text": "{\n  bucketName,\n  topicName,\n  folderName,\n  serviceId,\n  endpoint,\n  filter,\n  options = {},\n}: {\n  bucketName: string;\n  topicName?: string;\n  folderName?: string;\n  serviceId: string;\n  endpoint: string;\n  filter?: (message: any) => boolean;\n  options?: DebugPubsubOptions;\n}",
            "type": "{\n  bucketName: string;\n  topicName?: string;\n  folderName?: string;\n  serviceId: string;\n  endpoint: string;\n  filter?: (message: any) => boolean;\n  options?: DebugPubsubOptions;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/pubsub/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/pubsub/pull.ts",
    "exports": [
      {
        "type": "function",
        "name": " pullPubSubMessages",
        "text": "\n\nexport function pullPubSubMessages(\n  subscriptionName: string,\n  handler: (message: Message) => any,\n  additionalOptions?: {\n    forceCloud?: boolean;\n    subscriptionOptions?: SubscriptionOptions;\n    newClient?: boolean;\n    projectId?: string;\n  }\n) {\n  const {\n    forceCloud,\n    subscriptionOptions = {},\n    projectId = proj,\n    newClient,\n  } = additionalOptions || {};\n\n  if (!subscriptionName.startsWith('projects/')) {\n    subscriptionName = `projects/${projectId}/subscriptions/${subscriptionName}`;\n  }\n\n  if (isLocal) {\n    subscriptionOptions.flowControl = {\n      maxMessages: 1,\n    };\n  }\n\n  const pubSubClient = getPubSubClient({ forceCloud, projectId, new: newClient });\n  const subscription = pubSubClient.subscription(subscriptionName, subscriptionOptions);\n\n  subscription.on('message', handler);\n\n  subscription.on('error', (e) => {\n    logger.error('failed pull', e);\n  });\n\n  return subscription;\n}",
        "parameters": [
          {
            "name": "subscriptionName",
            "text": "subscriptionName: string",
            "type": "string"
          },
          {
            "name": "handler",
            "text": "handler: (message: Message) => any",
            "type": "(message: Message) => any"
          },
          {
            "name": "additionalOptions",
            "text": "additionalOptions?: {\n    forceCloud?: boolean;\n    subscriptionOptions?: SubscriptionOptions;\n    newClient?: boolean;\n    projectId?: string;\n  }",
            "type": "{\n    forceCloud?: boolean;\n    subscriptionOptions?: SubscriptionOptions;\n    newClient?: boolean;\n    projectId?: string;\n  }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/pubsub/send.ts",
    "exports": [
      {
        "name": " batching",
        "text": "\n\n// NOTE: pubsub will wait until at least one of the conditions is true:\nexport const batching = {\n  maxBytes: 1024 * 1024, // 1MB\n  maxMessages: 1000,\n  maxMilliseconds: 100,\n};",
        "type": "variable"
      },
      {
        "type": "function",
        "name": " callPubSub",
        "text": "\n\n/**\n * Calls the Pub/Sub service to publish a message to a topic.\n *\n * @param topicName - The name of the topic to publish the message to.\n * @param payload - The payload of the message.\n * @param attributes - Additional attributes to attach to the message.\n * @param additionalOptions - Additional options for publishing the message.\n * @returns A Promise that resolves to the message ID of the published message.\n * @throws If there is an error while publishing the message.\n */\nexport async function callPubSub<T = any>(\n  topicName: string,\n  payload: T,\n  attributes: Record<string, string> = {},\n  additionalOptions?: {\n    batching?: {\n      maxBytes?: number;\n      maxMessages?: number;\n      maxMilliseconds?: number;\n    };\n    forceCloud?: boolean;\n    log?: boolean;\n    topic?: Topic;\n  }\n): Promise<string> {\n  const { batching, forceCloud, log = false } = additionalOptions || {};\n  const pubSubClient = getPubSubClient({ forceCloud });\n  const context = getStoreKey('context');\n  if (context?.traceId) attributes.traceId = context.traceId;\n\n  let topic: Topic;\n\n  if (additionalOptions?.topic) {\n    topic = additionalOptions.topic;\n  } else if (batching) {\n    // https://cloud.google.com/pubsub/quotas#resource_limits\n    const maxBytes = 1024 * 1024 * 10;\n    const maxMessages = 1000;\n    batching.maxBytes = Math.min(batching.maxBytes || maxBytes, maxBytes);\n    batching.maxMessages = Math.min(batching.maxMessages || maxMessages, maxMessages);\n    if (!batchingTopics[topicName]) {\n      batchingTopics[topicName] = pubSubClient.topic(topicName, { batching });\n    }\n    topic = batchingTopics[topicName];\n  } else {\n    if (!topics[topicName]) {\n      topics[topicName] = pubSubClient.topic(topicName);\n    }\n    topic = topics[topicName];\n  }\n  try {\n    const dataBuffer = Buffer.from(JSON.stringify(payload));\n    const messageId = await topic.publishMessage({ data: dataBuffer, attributes });\n    if (log) logger.info(`published message: ${messageId}`);\n    return messageId;\n  } catch (e) {\n    // Error: Total timeout of API google.pubsub.v1.Publisher exceeded 60000 milliseconds before any response was received.\n    // recreate client\n    if (e instanceof GoogleError) {\n      logger.info(`callPubSub recreating client`);\n      healthChecks.push(async () => false);\n      getPubSubClient({ new: true });\n    }\n    logger.error(`callPubSub ${topicName}, ${e}`);\n    throw e;\n  }\n}",
        "parameters": [
          {
            "name": "topicName",
            "text": "topicName: string",
            "type": "string"
          },
          {
            "name": "payload",
            "text": "payload: T",
            "type": "T"
          },
          {
            "name": "attributes",
            "text": "attributes: Record<string, string> = {}",
            "type": "Record<string, string>"
          },
          {
            "name": "additionalOptions",
            "text": "additionalOptions?: {\n    batching?: {\n      maxBytes?: number;\n      maxMessages?: number;\n      maxMilliseconds?: number;\n    };\n    forceCloud?: boolean;\n    log?: boolean;\n    topic?: Topic;\n  }",
            "type": "{\n    batching?: {\n      maxBytes?: number;\n      maxMessages?: number;\n      maxMilliseconds?: number;\n    };\n    forceCloud?: boolean;\n    log?: boolean;\n    topic?: Topic;\n  }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/realtime.ts",
    "exports": [
      {
        "type": "function",
        "name": " sendMessageToClient",
        "text": "\n\nexport function sendMessageToClient<D = any>(event: RealtimeEvent<D>) {\n  let channel = event.scope;\n  if (event.account) {\n    channel += `:${event.account}`;\n  }\n  if (!socketIo) {\n    createEmitter();\n  }\n  socketIo.to(channel).emit('message', event);\n}",
        "parameters": [
          {
            "name": "event",
            "text": "event: RealtimeEvent<D>",
            "type": "RealtimeEvent<D>"
          }
        ]
      },
      {
        "type": "function",
        "name": " sendMessageToClientPubsub",
        "text": "\n\nexport function sendMessageToClientPubsub<D = any>(event: RealtimeEvent<D>) {\n  return callPubSub('send-realtime-message', event);\n}",
        "parameters": [
          {
            "name": "event",
            "text": "event: RealtimeEvent<D>",
            "type": "RealtimeEvent<D>"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/redisClient.ts",
    "exports": [
      {
        "name": " RedisClient",
        "text": "\n\nexport type RedisClient = ReturnType<typeof createClient>;",
        "type": "ReturnType<typeof createClient>"
      },
      {
        "name": " redisClients",
        "text": "\n\nexport let redisClients: Record<string, RedisClient> = {};",
        "type": "Record<string, RedisClient>"
      },
      {
        "type": "function",
        "name": " getRedisClient",
        "text": "\n\n/**\n * Returns a Redis client instance.\n * @param host - The host of the Redis server.\n * @param additionalOptions - Additional options for the Redis client.\n * @param additionalOptions.singleClient - If true, returns a single Redis client instance for the specified name.\n * @param additionalOptions.name - The name of the Redis client instance.\n * @returns The Redis client instance.\n */\nexport function getRedisClient(\n  host,\n  additionalOptions: { singleClient?: boolean; name?: string; forceCloud?: boolean } = {}\n): RedisClient {\n  const { singleClient, name = 'default' } = additionalOptions;\n  const forceCloud = additionalOptions.forceCloud || process.env.FORCE_CLOUD === 'true';\n  if (singleClient && redisClients[name]) return redisClients[name];\n  const options: RedisClientOptions = {\n    url: `redis://${isLocal && !forceCloud ? localHost : host}:6379`,\n  };\n\n  const client = createClient(options);\n  client.on('error', (err) => {\n    if (isLocal) {\n      if (logged[name]) return;\n      logged[name] = true;\n    }\n    logger.error(`Redis error <${options.url}>:`, err);\n  });\n  client.on('ready', () => {\n    logger.info(`Redis ready <${options.url}>`);\n  });\n  client.on('reconnecting', () => {\n    if (isLocal) {\n      if (logged[name]) return;\n      logged[name] = true;\n    }\n    logger.info(`Redis reconnecting <${options.url}>`);\n  });\n  if (singleClient) {\n    redisClients[name] = client;\n    redisClients[name].connect();\n  }\n  return client;\n}",
        "parameters": [
          {
            "name": "host",
            "text": "host",
            "type": "any"
          },
          {
            "name": "additionalOptions",
            "text": "additionalOptions: { singleClient?: boolean; name?: string; forceCloud?: boolean } = {}",
            "type": "{ singleClient?: boolean; name?: string; forceCloud?: boolean }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/retry.ts",
    "exports": [
      {
        "type": "function",
        "name": " retry",
        "text": "\n\nexport async function retry(fn, opts?: asyncRetry.Options) {\n  return await asyncRetry(\n    async () => {\n      return await fn();\n    },\n    {\n      retries: 3,\n      maxTimeout: 10000,\n      onRetry: (e) => {\n        logger.warn(`doing retry on error: ${e}`);\n      },\n      ...opts,\n    }\n  );\n}",
        "parameters": [
          {
            "name": "fn",
            "text": "fn",
            "type": "any"
          },
          {
            "name": "opts",
            "text": "opts?: asyncRetry.Options",
            "type": "asyncRetry.Options"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/runtime/index.ts",
    "exports": [
      {
        "type": "function",
        "name": " initRuntime",
        "text": "\n\nexport function initRuntime(\n  args: {\n    disableDataDog?: boolean;\n    tracerOptions?: TracerOptions;\n    monitorEventLoop?: boolean;\n    expressAutoWrap?: boolean;\n  } = {}\n) {\n  if (didInit) {\n    return require('../datadog/tracing').tracer;\n  }\n  didInit = true;\n  if (process.env.TW_DD && process.env.IS_LOCAL) {\n    throw Error(\n      'initRuntime must be the first import and the function must be called before the other imports!'\n    );\n  }\n  const { tracerOptions, monitorEventLoop, expressAutoWrap = true, disableDataDog } = args;\n  const tracer = loadDataDog({ tracerOptions, disableDataDog });\n  require('../otel').setupOtel();\n  if (monitorEventLoop) {\n    eventLoopMonitor();\n  }\n  wrapExpress = expressAutoWrap;\n  return { tracer };\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n    disableDataDog?: boolean;\n    tracerOptions?: TracerOptions;\n    monitorEventLoop?: boolean;\n    expressAutoWrap?: boolean;\n  } = {}",
            "type": "{\n    disableDataDog?: boolean;\n    tracerOptions?: TracerOptions;\n    monitorEventLoop?: boolean;\n    expressAutoWrap?: boolean;\n  }"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/safeDivide.ts",
    "exports": [
      {
        "type": "function",
        "name": " safeDivide",
        "text": "export function safeDivide(numerator: number, denominator: number) {\n  if (!numerator || !denominator) {\n    return 0;\n  }\n  if (!isFinite(numerator) || !isFinite(denominator)) {\n    return 0;\n  }\n  return (numerator / denominator) || 0;\n}",
        "parameters": [
          {
            "name": "numerator",
            "text": "numerator: number",
            "type": "number"
          },
          {
            "name": "denominator",
            "text": "denominator: number",
            "type": "number"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/saveMediaItem.ts",
    "exports": [
      {
        "name": " saveMediaItem",
        "text": "\n\nexport const saveMediaItem = async (\n  shop: string,\n  fileName: string,\n  fileType: string,\n  publicUrl: string,\n  source: MediaSource,\n  serviceId: string,\n  fileSize: string,\n  docIdToUpdate: string,\n  customId?: string,\n  metadata?: any\n) => {\n  const now = firestore.FieldValue.serverTimestamp();\n  const objToSave: any = {\n    name: fileName,\n    media_type: fileType,\n    url: publicUrl,\n    updated_at: now,\n    serviceId: serviceId,\n    fileSize: fileSize,\n    source: source,\n    customId: customId ? customId : null,\n  };\n  if (metadata?.tags) {\n    objToSave.tags = metadata?.tags;\n  }\n  await firestore()\n    .collection('shops')\n    .doc(shop)\n    .collection('media_assets')\n    .doc(docIdToUpdate)\n    .set(objToSave, { merge: true });\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/saveStreamToBucket.ts",
    "exports": [
      {
        "type": "function",
        "name": " saveStreamToBucket",
        "text": "\n\nexport async function saveStreamToBucket<T = any>(\n  bucketName: string,\n  filename: string,\n  url: T,\n  options: SaveOptions\n) {\n  const storageClient = getStorageClient();\n  // https://github.com/googleapis/google-cloud-node/issues/654\n  if (process.env.IS_LOCAL) {\n    options.validation = false;\n  }\n  const bucket = storageClient.bucket(bucketName);\n  // @ts-ignore\n  const res = await fetch(url);\n  const buffer = Buffer.from(await res.arrayBuffer());\n  await bucket.file(filename).save(buffer, options);\n  return filename;\n}",
        "parameters": [
          {
            "name": "bucketName",
            "text": "bucketName: string",
            "type": "string"
          },
          {
            "name": "filename",
            "text": "filename: string",
            "type": "string"
          },
          {
            "name": "url",
            "text": "url: T",
            "type": "T"
          },
          {
            "name": "options",
            "text": "options: SaveOptions",
            "type": "SaveOptions"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/secrets/downloadScript.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/secrets/getFromManager.ts",
    "exports": [
      {
        "type": "function",
        "name": " getSecretFromManager",
        "text": "\n\nexport async function getSecretFromManager(\n  name: string,\n  version: string = 'latest'\n): Promise<string> {\n  if (!name.startsWith('projects/')) {\n    name = `projects/${process.env.PROJECT_ID}/secrets/${name}/versions/${version}`;\n  }\n  const client = new SecretManagerServiceClient();\n  const [accessResponse] = await client.accessSecretVersion({\n    name: name,\n  });\n  return accessResponse.payload.data.toString();\n}",
        "parameters": [
          {
            "name": "name",
            "text": "name: string",
            "type": "string"
          },
          {
            "name": "version",
            "text": "version: string = 'latest'",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/secrets/getSecret.ts",
    "exports": [
      {
        "name": " secretsPath",
        "text": "\nexport const secretsPath = '/etc/secrets/store';",
        "type": "variable"
      },
      {
        "type": "function",
        "name": " getSecret",
        "text": "\n\nexport function getSecret(key: string): any {\n  secrets = secrets || loadSecrets();\n  if (isLocal) {\n    return process.env[key] || secrets[key];\n  }\n  return secrets[key] || process.env[key];\n}",
        "parameters": [
          {
            "name": "key",
            "text": "key: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/secrets/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/sendFirebaseEmail.ts",
    "exports": [
      {
        "name": " Attachment",
        "text": "\n\nexport type Attachment = {\n  filname: string;\n  content: string;\n  path?: string;\n  href?: string;\n  httpHeaders?: any;\n  contentType?: string;\n  contentDisposition: string;\n  cid?: string;\n  encoding?: string;\n  headers?: any;\n};",
        "type": "{\n  filname: string;\n  content: string;\n  path?: string;\n  href?: string;\n  httpHeaders?: any;\n  contentType?: string;\n  contentDisposition: string;\n  cid?: string;\n  encoding?: string;\n  headers?: any;\n}"
      },
      {
        "name": " SendFirebaseEmailData",
        "text": "\n\nexport type SendFirebaseEmailData = {\n  to: string | string[];\n  from?: string;\n  cc?: string | string[];\n  bcc?: string | string[];\n  replyTo?: string;\n  toUids?: string[]; // recipient Uids\n  ccUids?: string[];\n  bccUids?: string[];\n  message: {\n    subject: string;\n    html?: string;\n    text?: string;\n    amp?: string;\n    messageId?: string;\n    attachments?: Attachment[];\n  };\n  headers?: any;\n};",
        "type": "{\n  to: string | string[];\n  from?: string;\n  cc?: string | string[];\n  bcc?: string | string[];\n  replyTo?: string;\n  toUids?: string[]; // recipient Uids\n  ccUids?: string[];\n  bccUids?: string[];\n  message: {\n    subject: string;\n    html?: string;\n    text?: string;\n    amp?: string;\n    messageId?: string;\n    attachments?: Attachment[];\n  };\n  headers?: any;\n}"
      },
      {
        "type": "function",
        "name": " sendFirebaseEmail",
        "text": "\n\nexport async function sendFirebaseEmail(data: SendFirebaseEmailData, extraData: any = {}) {\n  data.from = data.from || `TripleWhale${isStaging ? ' Staging' : ''} <noreply@triplewhale.com>`;\n  return await firestore()\n    .collection('email')\n    .add({\n      ...data,\n      createdAt: firestore.FieldValue.serverTimestamp(),\n      ...extraData,\n    });\n}",
        "parameters": [
          {
            "name": "data",
            "text": "data: SendFirebaseEmailData",
            "type": "SendFirebaseEmailData"
          },
          {
            "name": "extraData",
            "text": "extraData: any = {}",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/service/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/service/parseServiceTargetUrl.ts",
    "exports": [
      {
        "type": "function",
        "name": " parseServiceTargetUrl",
        "text": "export function parseServiceTargetUrl(path: string) {\n  const pathParts = path.split('/').filter(Boolean);\n  let servicePart = pathParts.shift();\n  let deployment;\n  let stack;\n  if (servicePart?.includes('.')) {\n    [deployment, servicePart] = servicePart.split('.');\n  }\n  if (servicePart?.includes('_')) {\n    [servicePart, stack] = servicePart.split('_');\n  }\n  const serviceId = servicePart;\n  path = pathParts.join('/');\n  if (path.startsWith('/')) path = path.slice(1);\n  return { serviceId, path, deployment, stack };\n}",
        "parameters": [
          {
            "name": "path",
            "text": "path: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/service/serviceEntry.ts",
    "exports": [
      {
        "type": "function",
        "name": " getServiceEntry",
        "text": "\n\nexport async function getServiceEntry(\n  serviceId: string,\n  projectId: string,\n  stack?: string\n): Promise<ServiceConfig> {\n  const key = `${serviceId}#${projectId}#${stack || projectId}`;\n  let service: ServiceConfig = await serviceConfigs.fetch(key, { allowStale: true });\n  return service;\n}",
        "parameters": [
          {
            "name": "serviceId",
            "text": "serviceId: string",
            "type": "string"
          },
          {
            "name": "projectId",
            "text": "projectId: string",
            "type": "string"
          },
          {
            "name": "stack",
            "text": "stack?: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/shop/deleteIntegrationStateFromShop.ts",
    "exports": [
      {
        "type": "function",
        "name": " deleteIntegrationStateFromShop",
        "text": "\n\nexport async function deleteIntegrationStateFromShop(\n  shopId: string,\n  providerId: string,\n  integrationId: string\n): Promise<void> {\n  try {\n    const shopRef = getShop(shopId);\n    await shopRef.set(\n      {\n        providers: {\n          [providerId]: {\n            integrations: {\n              [integrationId]: firestore.FieldValue.delete(),\n            },\n          },\n        },\n      },\n      { merge: true }\n    );\n    logger.info(`deleteIntegrationStateFromShop account ${integrationId}:`, {\n      shopId,\n      providerId,\n      integrationId,\n    });\n  } catch (error) {\n    logger.error(`deleteIntegrationStateFromShop failed account ${integrationId}:`, {\n      error,\n      shopId,\n      providerId,\n      integrationId,\n    });\n  }\n}",
        "parameters": [
          {
            "name": "shopId",
            "text": "shopId: string",
            "type": "string"
          },
          {
            "name": "providerId",
            "text": "providerId: string",
            "type": "string"
          },
          {
            "name": "integrationId",
            "text": "integrationId: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/shop/deleteProviderStateFromShop.ts",
    "exports": [
      {
        "type": "function",
        "name": " deleteProviderStateFromShop",
        "text": "\n\nexport async function deleteProviderStateFromShop(\n  shopId: string,\n  providerId: string\n): Promise<void> {\n  try {\n    const shopRef = getShop(shopId);\n    await shopRef.set(\n      {\n        providers: {\n          [providerId]: firestore.FieldValue.delete(),\n        },\n      },\n      { merge: true }\n    );\n    logger.info(`deleteProviderStateFromShop success`, {\n      shopId,\n      providerId,\n    });\n  } catch (error) {\n    logger.error(`deleteProviderStateFromShop failed`, {\n      error,\n      shopId,\n      providerId,\n    });\n  }\n}",
        "parameters": [
          {
            "name": "shopId",
            "text": "shopId: string",
            "type": "string"
          },
          {
            "name": "providerId",
            "text": "providerId: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " deleteProviderErrorFromShop",
        "text": "\n\nexport async function deleteProviderErrorFromShop(\n  shopId: string,\n  providerId: string\n): Promise<void> {\n  try {\n    const shopRef = getShop(shopId);\n    await shopRef.set(\n      {\n        providers: {\n          [providerId]: {\n            integrations: {\n              error: firestore.FieldValue.delete(),\n            },\n          },\n        },\n      },\n      { merge: true }\n    );\n    logger.info(`deleteProviderErrorFromShop success`, {\n      shopId,\n      providerId,\n    });\n  } catch (error) {\n    logger.error(`deleteProviderErrorFromShop failed`, {\n      error,\n      shopId,\n      providerId,\n    });\n  }\n}",
        "parameters": [
          {
            "name": "shopId",
            "text": "shopId: string",
            "type": "string"
          },
          {
            "name": "providerId",
            "text": "providerId: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/shop/getShopActiveStatus.ts",
    "exports": [
      {
        "type": "function",
        "name": " getShopActiveStatus",
        "text": "\n\nexport async function getShopActiveStatus(shopId: string, shopData?: any): Promise<boolean> {\n    try {\n        let shop;\n        if (!shopData) {\n            const { data } = await callServiceEndpoint<any>(\n              'users',\n              'get-shops',\n              { id: shopId, fields: ['subscriptionActive'] },\n              { method: 'POST', log: false }\n            );\n            shop = data[0] || null;\n        } else {\n            shop = shopData;\n        }\n        return shop.subscriptionActive;\n    } catch (err) {\n        return false;\n    }\n}",
        "parameters": [
          {
            "name": "shopId",
            "text": "shopId: string",
            "type": "string"
          },
          {
            "name": "shopData",
            "text": "shopData?: any",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/shop/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/shop/isProviderConnectedToShop.ts",
    "exports": [
      {
        "type": "function",
        "name": " isProviderConnectedToShop",
        "text": "\n\nexport function isProviderConnectedToShop(shopData: Shop, providerId: ServicesIds): boolean {\n  try {\n    if (!shopData) {\n      logger.warn(`isProviderConnectedToShop: shopData is undefined`, { providerId });\n      throw new Error('shopData is undefined');\n    }\n\n    if (services[providerId].getShopProviderStatus) {\n      const providerStatus = services[providerId].getShopProviderStatus(shopData);\n      return (\n        providerStatus.status != ShopProviderStatusEnum.disconnected && !providerStatus.errorMessage\n      );\n    }\n\n    if (services[providerId].getAccessToken && !services[providerId].getAccessToken(shopData)) {\n      logger.info(\n        `isProviderConnectedToShop: shop has no AccessToken: ${shopData.id} serviceId: ${providerId}`\n      );\n      return false;\n    }\n\n    if (!services[providerId].getAccounts(shopData)?.length) {\n      logger.info(`isProviderConnectedToShop: shop has no Accounts, serviceId: ${providerId}`);\n      return false;\n    }\n\n    if (services[providerId].getIsConnected && !services[providerId].getIsConnected(shopData)) {\n      logger.info(\n        `isProviderConnectedToShop: shop has invalid connection, providerId: ${providerId}`\n      );\n      return false;\n    }\n  } catch (error) {\n    logger.error('isProviderConnectedToShop failed', { providerId, error });\n  }\n\n  return true;\n}",
        "parameters": [
          {
            "name": "shopData",
            "text": "shopData: Shop",
            "type": "Shop"
          },
          {
            "name": "providerId",
            "text": "providerId: ServicesIds",
            "type": "ServicesIds"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/shop/saveIntegrationStatusForShop.ts",
    "exports": [
      {
        "type": "function",
        "name": " saveIntegrationStatusForShop",
        "text": "\n\nexport async function saveIntegrationStatusForShop(\n  shopId: string,\n  providerId: string,\n  integrationId: string,\n  status: ShopIntegrationStatusEnum,\n  errorMessage?: string\n): Promise<void> {\n  try {\n    const shopRef = getShop(shopId);\n    const integrationUpdate = {\n      status,\n    };\n\n    if (errorMessage) {\n      integrationUpdate['error'] = {\n        errorMessage,\n        createdAt: firestore.FieldValue.serverTimestamp(),\n      };\n    }\n    await shopRef.set(\n      {\n        providers: {\n          [providerId]: {\n            integrations: {\n              [integrationId]: integrationUpdate,\n            },\n          },\n        },\n      },\n      { merge: true }\n    );\n    logger.info(`saveIntegrationStatusForShop account ${integrationId}:`, {\n      shopId,\n      providerId,\n      integrationId,\n      status,\n    });\n    if (status == ShopIntegrationStatusEnum.error) {\n      const connectionErrorMsg = errorMessage ? `Connection Error:  ${errorMessage}` : '';\n      await callPubSub('new_activities_created', {\n        shopId,\n        serviceId: 'triple-whale',\n        activities: [\n          {\n            type: 'update',\n            date: new Date(),\n            serviceId: 'triple-whale',\n            annotation: false,\n            shopId,\n            entity: 'integration',\n            source: providerId,\n            title: 'Integration Connection Error',\n            description: `${startCase(\n              providerId\n            )} Connection Error - Please Reconnect, ${connectionErrorMsg}`,\n            id: `triple-whale_${providerId}_integration_connection_error_${new Date()}`,\n          },\n        ],\n      });\n    }\n  } catch (error) {\n    logger.error(`saveIntegrationStatusForShop failed account ${integrationId}:`, {\n      error,\n      shopId,\n      providerId,\n      integrationId,\n      status,\n    });\n  }\n}",
        "parameters": [
          {
            "name": "shopId",
            "text": "shopId: string",
            "type": "string"
          },
          {
            "name": "providerId",
            "text": "providerId: string",
            "type": "string"
          },
          {
            "name": "integrationId",
            "text": "integrationId: string",
            "type": "string"
          },
          {
            "name": "status",
            "text": "status: ShopIntegrationStatusEnum",
            "type": "ShopIntegrationStatusEnum"
          },
          {
            "name": "errorMessage",
            "text": "errorMessage?: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/shopServices.ts",
    "exports": [
      {
        "type": "function",
        "name": " getShopServiceDoc",
        "text": " //temp - till all services will support InvalidConnection\n\nexport function getShopServiceDoc(shopDomain: string, serviceId: ServicesIds) {\n  logger.info(`getShopServiceDoc: ${shopDomain} ${serviceId}`);\n  return firestore().collection('shops').doc(shopDomain).collection('services').doc(serviceId);\n}",
        "parameters": [
          {
            "name": "shopDomain",
            "text": "shopDomain: string",
            "type": "string"
          },
          {
            "name": "serviceId",
            "text": "serviceId: ServicesIds",
            "type": "ServicesIds"
          }
        ]
      },
      {
        "type": "function",
        "name": " getShopServiceData",
        "text": "\n\nexport async function getShopServiceData(\n  shopDomain: string,\n  serviceId: ServicesIds\n): Promise<ShopServiceData> {\n  return (await getShopServiceDoc(shopDomain, serviceId).get()).data() as ShopServiceData;\n}",
        "parameters": [
          {
            "name": "shopDomain",
            "text": "shopDomain: string",
            "type": "string"
          },
          {
            "name": "serviceId",
            "text": "serviceId: ServicesIds",
            "type": "ServicesIds"
          }
        ]
      },
      {
        "type": "function",
        "name": " getIsServiceConnected",
        "text": "\n\nexport async function getIsServiceConnected(\n  shopData: Shop,\n  serviceId: ServicesIds\n): Promise<boolean> {\n  let isConnected: boolean = true;\n\n  try {\n    if (!shopData) {\n      logger.warn(`getIsServiceConnected: shopData is undefined`, { serviceId });\n      return isConnected;\n    }\n    if (!services[serviceId].getAccessToken(shopData)) {\n      logger.info(\n        `getIsServiceConnected: shop has no AccessToken: ${shopData.id} serviceId: ${serviceId}`\n      );\n      return false;\n    }\n\n    if (!services[serviceId].getAccounts(shopData)?.length) {\n      logger.info(`getIsServiceConnected: shop has no Accounts, serviceId: ${serviceId}`);\n      return false;\n    }\n    let accounts: { [accountId: string]: ServiceAccountData };\n\n    if (servicesSupported.includes(serviceId)) {\n      try {\n        accounts = (await getShopServiceData(shopData.id, serviceId))?.accounts;\n        isConnected = !(\n          accounts && Object.values(accounts).some((account) => account?.invalidConnection)\n        );\n      } catch (error) {\n        logger.error('getIsServiceConnected error', { serviceId, error });\n      }\n    } else\n      isConnected = !(\n        services[serviceId].getIsConnected && !services[serviceId].getIsConnected(shopData)\n      );\n\n    if (!isConnected)\n      logger.info(`getIsServiceConnected: shop has invalid connection, serviceId: ${serviceId}`);\n  } catch (error) {\n    logger.error('getIsServiceConnected failed', { serviceId, error });\n  }\n\n  return isConnected;\n}",
        "parameters": [
          {
            "name": "shopData",
            "text": "shopData: Shop",
            "type": "Shop"
          },
          {
            "name": "serviceId",
            "text": "serviceId: ServicesIds",
            "type": "ServicesIds"
          }
        ]
      },
      {
        "type": "function",
        "name": " deleteAccounts",
        "text": "\n\nexport async function deleteAccounts(\n  shopDomain: string,\n  serviceId: ServicesIds,\n  accountId?: string\n) {\n  try {\n    if (!accountId) {\n      await deleteProviderStateFromShop(shopDomain, serviceId);\n    } else {\n      await deleteIntegrationStateFromShop(shopDomain, accountId, serviceId);\n    }\n    const doc = getShopServiceDoc(shopDomain, serviceId);\n    const shop = getShop(shopDomain);\n    if (accountId) {\n      await doc.set(\n        {\n          accounts: {\n            [accountId]: firestore.FieldValue.delete(),\n          },\n        },\n        { merge: true }\n      );\n    } else {\n      await doc.set(\n        {\n          accounts: firestore.FieldValue.delete(),\n        },\n        { merge: true }\n      );\n    }\n\n    if (serviceId === 'facebook-ads') {\n      await shop.set(\n        {\n          facebookInvalidConnectionState: firestore.FieldValue.delete(),\n        },\n        { merge: true }\n      );\n    }\n\n    logger.info(\n      `reset invalid connection done, shopDomain: ${shopDomain} serviceId: ${serviceId} accountId: ${accountId}`\n    );\n  } catch (e) {\n    logger.error(\n      `reset invalid connection done error, shopDomain: ${shopDomain} serviceId: ${serviceId} accountId: ${accountId} ,  error: ${JSON.stringify(\n        e\n      )}`\n    );\n    throw e;\n  }\n}",
        "parameters": [
          {
            "name": "shopDomain",
            "text": "shopDomain: string",
            "type": "string"
          },
          {
            "name": "serviceId",
            "text": "serviceId: ServicesIds",
            "type": "ServicesIds"
          },
          {
            "name": "accountId",
            "text": "accountId?: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " saveInvalidAccountConnection",
        "text": "\nexport async function saveInvalidAccountConnection(params: ServiceAccountParams) {\n  try {\n    const { shopDomain, serviceId, accountId, invalidConnection } = params;\n    const shopData = await getShopData(shopDomain);\n    const isConnected = await getIsServiceConnected(shopData, serviceId);\n    if (!isConnected) {\n      logger.info('saveInvalidAccountConnection: shop is already not connected');\n      return;\n    }\n    await saveIntegrationStatusForShop(\n      shopDomain,\n      serviceId,\n      accountId,\n      ShopIntegrationStatusEnum.error,\n      invalidConnection?.invalidStateReason\n    );\n\n    const doc = getShopServiceDoc(params.shopDomain, params.serviceId);\n    const shop = getShop(params.shopDomain);\n\n    await doc.set(\n      {\n        accounts: {\n          [params.accountId]: {\n            invalidConnection: {\n              invalidStateReason: params.invalidConnection?.invalidStateReason,\n              invalidStateCode: params.invalidConnection?.invalidStateCode ?? null,\n              jobId: params.invalidConnection?.jobId ?? null,\n              timestamp:\n                params.invalidConnection?.timestamp ?? firestore.FieldValue.serverTimestamp(),\n            },\n          },\n        },\n      },\n      { merge: true }\n    );\n\n    if (params.serviceId === 'facebook-ads') {\n      await shop.set(\n        {\n          facebookInvalidConnectionState: true,\n        },\n        { merge: true }\n      );\n    }\n\n    logger.info(\n      `saveInvalidAccountConnection done, shopDomain: ${params.shopDomain} serviceId: ${params.serviceId}`\n    );\n  } catch (e) {\n    logger.error(\n      `saveInvalidAccountConnection error, shopDomain: ${params.shopDomain} serviceId: ${\n        params.serviceId\n      } ,  error: ${JSON.stringify(e)}`\n    );\n    throw e;\n  }\n}",
        "parameters": [
          {
            "name": "params",
            "text": "params: ServiceAccountParams",
            "type": "ServiceAccountParams"
          }
        ]
      },
      {
        "type": "function",
        "name": " updateLastImport",
        "text": "\nexport async function updateLastImport(shopDomain: string, serviceId: ServicesIds, date?: Date) {\n  try {\n    let doc = getShopServiceDoc(shopDomain, serviceId);\n\n    await doc.set(\n      {\n        lastImportTimestamp: date\n          ? firestore.Timestamp.fromDate(date)\n          : firestore.Timestamp.fromDate(new Date()),\n      },\n      { merge: true }\n    );\n  } catch (e) {\n    logger.error(\n      `updateLastImport error, shopDomain: ${shopDomain} serviceId: ${serviceId} ,  error: ${JSON.stringify(\n        e\n      )}`\n    );\n    throw e;\n  }\n}",
        "parameters": [
          {
            "name": "shopDomain",
            "text": "shopDomain: string",
            "type": "string"
          },
          {
            "name": "serviceId",
            "text": "serviceId: ServicesIds",
            "type": "ServicesIds"
          },
          {
            "name": "date",
            "text": "date?: Date",
            "type": "Date"
          }
        ]
      },
      {
        "type": "function",
        "name": " getLastImport",
        "text": "\n\nexport async function getLastImport(shopDomain: string, serviceId: ServicesIds) {\n  try {\n    return (await getShopServiceDoc(shopDomain, serviceId).get())\n      .data()\n      ?.lastImportTimestamp?.toDate();\n  } catch (e) {\n    logger.error(\n      `getLastImport error, shopDomain: ${shopDomain} serviceId: ${serviceId} ,  error: ${JSON.stringify(\n        e\n      )}`\n    );\n    return null;\n  }\n}",
        "parameters": [
          {
            "name": "shopDomain",
            "text": "shopDomain: string",
            "type": "string"
          },
          {
            "name": "serviceId",
            "text": "serviceId: ServicesIds",
            "type": "ServicesIds"
          }
        ]
      },
      {
        "type": "function",
        "name": " checkServicesConnection",
        "text": "\n\nexport async function checkServicesConnection(shopDomain: string) {\n  try {\n    await Promise.all(\n      servicesSupported.map(async (serviceId) => {\n        try {\n          let accounts = (await getShopServiceData(shopDomain, serviceId))?.accounts;\n\n          if (\n            accounts &&\n            Object.values(accounts).some(\n              (account: ServiceAccountData) => account?.invalidConnection\n            )\n          ) {\n            const res = await callServiceEndpoint<boolean>(\n              serviceId,\n              `ping-shop/${shopDomain}`,\n              {},\n              { method: 'GET' }\n            );\n            logger.info(\n              `checkServicesConnection, shopDomain: ${shopDomain} ,serviceId ${serviceId}  ping res: ${res?.data}`\n            );\n            if (res?.data) {\n              const data = (\n                await callServiceEndpoint<any, CreateJobRequest>('job-manager', 'start-job', {\n                  serviceId,\n                  shopDomain,\n                  checkBefore: true,\n                  jobType: 'initial',\n                  resetShopServices: true,\n                })\n              ).data;\n              logger.info(\n                `checkServicesConnection, shopDomain: ${shopDomain} ,serviceId ${serviceId}  res start-job ${data}`\n              );\n            }\n          }\n        } catch (e) {\n          logger.error(\n            `checkServicesConnection error, shopDomain: ${shopDomain} ,serviceId ${serviceId}  error: ${JSON.stringify(\n              e\n            )}`\n          );\n        }\n      })\n    );\n  } catch (e) {\n    logger.error(\n      `checkServicesConnection error, shopDomain: ${shopDomain} ,  error: ${JSON.stringify(e)}`\n    );\n    throw e;\n  }\n}",
        "parameters": [
          {
            "name": "shopDomain",
            "text": "shopDomain: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/sleep.ts",
    "exports": [
      {
        "type": "function",
        "name": " sleep",
        "text": "export function sleep(ms: number) {\n  return new Promise<void>((resolve) => setTimeout(resolve, ms));\n}",
        "parameters": [
          {
            "name": "ms",
            "text": "ms: number",
            "type": "number"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/snapshotToArray.ts",
    "exports": [
      {
        "type": "function",
        "name": " snapshotToArray",
        "text": "\nexport function snapshotToArray(snapshot) {\n  var docs = [];\n  \n  snapshot.forEach(doc => {\n    docs.push({\n      ...doc.data(),\n      id: isNaN(doc.id) ? doc.id : +doc.id,\n    });\n  })\n  return docs;\n}",
        "parameters": [
          {
            "name": "snapshot",
            "text": "snapshot",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/softReimport.ts",
    "exports": [
      {
        "type": "function",
        "name": " softReimport",
        "text": "\n\n/**\n *\n * @param filePrefix `data-lake-facebook-ads-shofifi/facebook-ads/ads-metrics/act_1005998533610085/2022/07/14/`\n */\nexport async function softReimport(\n  bucketName: string,\n  filePrefix: string,\n  jobHour = '23',\n  useDayLatest = false\n): Promise<boolean> {\n  const options: GetFilesOptions = {\n    prefix: filePrefix + (useDayLatest ? '' : jobHour + '/'),\n  };\n\n  try {\n    const storageClient = getStorageClient();\n    const [files] = await storageClient.bucket(bucketName).getFiles(options);\n\n    if (files.length) {\n      // name of file is timestamp so is ordered chronologically\n      const lastUpdatedFile = files.reduce(\n        (acc, curr) => (acc.name.split('/').pop() > curr.name.split('/').pop() ? acc : curr),\n        {\n          name: '0',\n        } as File\n      );\n      const filename = `${Date.now()}-softreimport-${(Math.random() + 1)\n        .toString(35)\n        .substring(10)}.json`;\n\n      const destFileName = `${filePrefix}${jobHour}/${filename}`;\n      await lastUpdatedFile.copy(storageClient.bucket(bucketName).file(destFileName), {\n        contentType: 'application/json',\n        contentEncoding: 'gzip',\n        metadata: {\n          ...lastUpdatedFile.metadata.metadata,\n          jobUTCDate: moment().utc().format(),\n        },\n      });\n      return true;\n    } else {\n      return false;\n    }\n  } catch (e) {\n    console.error(e);\n    return false;\n  }\n}",
        "parameters": [
          {
            "name": "bucketName",
            "text": "bucketName: string",
            "type": "string"
          },
          {
            "name": "filePrefix",
            "text": "filePrefix: string",
            "type": "string"
          },
          {
            "name": "jobHour",
            "text": "jobHour = '23'",
            "type": "any"
          },
          {
            "name": "useDayLatest",
            "text": "useDayLatest = false",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/splitArrayToChunks.ts",
    "exports": [
      {
        "name": " splitArrayToChunks",
        "text": "export const splitArrayToChunks = <T = any>(array: T[] = [], chunk_size: number) => {\n  return Array(Math.ceil(array.length / chunk_size))\n    .fill(null)\n    .map((_, index) => index * chunk_size)\n    .map(begin => array.slice(begin, begin + chunk_size));\n}",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/string/array2list.test.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/string/array2list.ts",
    "exports": [
      {
        "type": "function",
        "name": " array2list",
        "text": "export function array2list(arr: string[]): string {\n  const copy = [...arr];\n  let str = copy.length > 1 ? 'and ' : '';\n  str += copy.pop();\n  while (copy.length) {\n    str = copy.pop() + ', ' + str;\n  }\n  return str;\n}",
        "parameters": [
          {
            "name": "arr",
            "text": "arr: string[]",
            "type": "string[]"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/string/case.test.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/string/case.ts",
    "exports": [
      {
        "type": "function",
        "name": " separate",
        "text": "export function separate(str: string): string[] {\n  return str\n    .split(/(?=[A-Z])/)\n    .map((sub) => sub.split(/[\\(\\s\\)\\-_]/))\n    .flat()\n    .filter(Boolean)\n    .map((s) => s.toLowerCase());\n}",
        "parameters": [
          {
            "name": "str",
            "text": "str: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " capitalize",
        "text": "\n\nexport function capitalize(str: string): Capitalize<string> {\n  return (str.charAt(0).toUpperCase() + str.slice(1)) as Capitalize<string>;\n}",
        "parameters": [
          {
            "name": "str",
            "text": "str: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " camel",
        "text": "\n\nexport function camel(str: string): string {\n  return separate(str)\n    .map((s, i) => (i === 0 ? s : capitalize(s)))\n    .join('') as `${string}${Capitalize<string>}`;\n}",
        "parameters": [
          {
            "name": "str",
            "text": "str: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " pascal",
        "text": "\n\nexport function pascal<S extends string = string>(str: S): Capitalize<S> {\n  return separate(str).map(capitalize).join('') as Capitalize<S>;\n}",
        "parameters": [
          {
            "name": "str",
            "text": "str: S",
            "type": "S"
          }
        ]
      },
      {
        "type": "function",
        "name": " kebab",
        "text": "\n\nexport function kebab(str: string): string {\n  return separate(str).join('-');\n}",
        "parameters": [
          {
            "name": "str",
            "text": "str: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " snake",
        "text": "\n\nexport function snake(str: string): string {\n  return separate(str).join('_');\n}",
        "parameters": [
          {
            "name": "str",
            "text": "str: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/string/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/string/types.ts",
    "exports": [
      {
        "name": " EatFirstChar",
        "text": "export type EatFirstChar<T> = T extends `${infer _}${infer B}` ? B : '';",
        "type": "T extends `${infer _}${infer B}` ? B : ''"
      },
      {
        "name": " MatchStringStart",
        "text": "\n\nexport type MatchStringStart<Candidate, Pattern extends string> = Candidate extends Pattern\n  ? true\n  : Candidate extends `${Pattern}${infer _}`\n  ? true\n  : false;",
        "type": "Candidate extends Pattern\n  ? true\n  : Candidate extends `${Pattern}${infer _}`\n  ? true\n  : false"
      },
      {
        "name": " MatchStringEnd",
        "text": "\n\nexport type MatchStringEnd<Candidate, Pattern extends string> = Candidate extends Pattern\n  ? true\n  : Candidate extends `${infer _}${Pattern}`\n  ? true\n  : false;",
        "type": "Candidate extends Pattern\n  ? true\n  : Candidate extends `${infer _}${Pattern}`\n  ? true\n  : false"
      },
      {
        "name": " MatchString",
        "text": "\n\nexport type MatchString<Candidate, Pattern extends string> = Candidate extends ''\n  ? false\n  : MatchStringStart<Candidate, Pattern> extends true\n  ? true\n  : MatchStringEnd<Candidate, Pattern> extends true\n  ? true\n  : MatchString<EatFirstChar<Candidate>, Pattern> extends true\n  ? true\n  : false;",
        "type": "Candidate extends ''\n  ? false\n  : MatchStringStart<Candidate, Pattern> extends true\n  ? true\n  : MatchStringEnd<Candidate, Pattern> extends true\n  ? true\n  : MatchString<EatFirstChar<Candidate>, Pattern> extends true\n  ? true\n  : false"
      },
      {
        "name": " Trim",
        "text": "\n\nexport type Trim<T> = T extends ` ${infer Rest}` ? Trim<Rest> : T;",
        "type": "T extends ` ${infer Rest}` ? Trim<Rest> : T"
      },
      {
        "name": " TrimEnd",
        "text": "\nexport type TrimEnd<T> = T extends `${infer Rest} ` ? TrimEnd<Rest> : T;",
        "type": "T extends `${infer Rest} ` ? TrimEnd<Rest> : T"
      },
      {
        "name": " JoinStrings",
        "text": "\n\nexport type JoinStrings<T, Sep = ', '> = T extends [infer Head, ...infer Tail]\n  ? Tail extends readonly []\n    ? Head\n    : Tail extends readonly string[]\n    ? Head extends ''\n      ? JoinStrings<Tail, Sep>\n      : JoinStrings<Tail, Sep> extends ''\n      ? `${Head & string}`\n      : `${Head & string}${Sep & string}${JoinStrings<Tail, Sep>}`\n    : `${Head & string}`\n  : T extends [infer Head]\n  ? `${Head & string}`\n  : '';",
        "type": "T extends [infer Head, ...infer Tail]\n  ? Tail extends readonly []\n    ? Head\n    : Tail extends readonly string[]\n    ? Head extends ''\n      ? JoinStrings<Tail, Sep>\n      : JoinStrings<Tail, Sep> extends ''\n      ? `${Head & string}`\n      : `${Head & string}${Sep & string}${JoinStrings<Tail, Sep>}`\n    : `${Head & string}`\n  : T extends [infer Head]\n  ? `${Head & string}`\n  : ''"
      },
      {
        "name": " StringContains",
        "text": "\n\nexport type StringContains<Input extends string, Term extends string> = Input extends Term\n  ? true\n  : Input extends `${Term}${infer _}`\n  ? true\n  : Input extends `${infer _0}${Term}${infer _1}`\n  ? true\n  : Input extends `${infer _}${Term}`\n  ? true\n  : false;",
        "type": "Input extends Term\n  ? true\n  : Input extends `${Term}${infer _}`\n  ? true\n  : Input extends `${infer _0}${Term}${infer _1}`\n  ? true\n  : Input extends `${infer _}${Term}`\n  ? true\n  : false"
      }
    ]
  },
  {
    "file": "@tw/utils/surveys/attributionQuestionRegex.ts",
    "exports": [
      {
        "name": " attributionRegex",
        "text": "export type attributionRegex = {\n  lang: String;\n  regex: RegExp;\n  shop?: string;\n};",
        "type": "{\n  lang: String;\n  regex: RegExp;\n  shop?: string;\n}"
      },
      {
        "type": "function",
        "name": " keyWordsFound",
        "text": "\n\nexport function keyWordsFound(question: string, shop?: string): boolean {\n  return (\n    supportedRegex.some((sr) => sr.regex.test(question)) &&\n    (!shop || !getShopExcludedRegex(shop).some((regex) => regex.test(question)))\n  );\n}",
        "parameters": [
          {
            "name": "question",
            "text": "question: string",
            "type": "string"
          },
          {
            "name": "shop",
            "text": "shop?: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/surveys/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/surveys/questionFilter.ts",
    "exports": [
      {
        "type": "function",
        "name": " isCollectableQuestion",
        "text": "\n\nexport function isCollectableQuestion(respOptions: string[]): boolean {\n  let arr = respOptions.map((r) => r.toLowerCase().replace(/ /g, ''));\n  let found = surveyResponseTokens.some((x) => arr.some((a) => a.indexOf(x) >= 0));\n  if (found) return true;\n\n  arr = respOptions.map((r) => r.toLowerCase());\n  return surveyResponseAtomicTokens.some((t) =>\n    arr.some((a) => {\n      return (\n        a === t || a.startsWith(t + ' ') || a.endsWith(' ' + t) || a.indexOf(' ' + t + ' ') >= 0\n      );\n    })\n  );\n}",
        "parameters": [
          {
            "name": "respOptions",
            "text": "respOptions: string[]",
            "type": "string[]"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/surveys/responseMappers.ts",
    "exports": [
      {
        "type": "function",
        "name": " mapResponseToService",
        "text": "\n\nexport function mapResponseToService(response: string): string {\n  let token = findToken(response);\n  return toServiceMap[token].service;\n}",
        "parameters": [
          {
            "name": "response",
            "text": "response: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " mapResponseToSource",
        "text": "\n\nexport function mapResponseToSource(response: string): string {\n  let token = findToken(response);\n  return toServiceMap[token].source;\n}",
        "parameters": [
          {
            "name": "response",
            "text": "response: string",
            "type": "string"
          }
        ]
      },
      {
        "type": "function",
        "name": " mapSourceToSummaryService",
        "text": "\n\nexport function mapSourceToSummaryService(source: string): string {\n  return toServiceMap[source]?.summaryPageService || toServiceMap[source]?.service || 'other';\n}",
        "parameters": [
          {
            "name": "source",
            "text": "source: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/surveys/surveyResponseTokens.ts",
    "exports": [
      {
        "name": " surveyResponseTokens",
        "text": "export const surveyResponseTokens = [\n  'facebook',\n  'google',\n  'snapchat',\n  'tiktok',\n  'pinterest',\n  'instagram',\n  'youtube',\n  'klaviyo',\n  'relix',\n  'email',\n  'jambase',\n  'podcast',\n  'bing',\n  'twitter',\n] as const;",
        "type": "variable"
      },
      {
        "name": " surveyResponseAtomicTokens",
        "text": "\n\nexport const surveyResponseAtomicTokens = ['fb', 'ig'] as const;",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/surveys/translations.ts",
    "exports": [
      {
        "type": "function",
        "name": " detectLanguage",
        "text": "\n\nexport function detectLanguage(defaultQuestion: string): Language {\n  for (const [language, translation] of Object.entries(tripleSurveyQuestionTranslation)) {\n    if (translation === defaultQuestion) {\n      return language as Language;\n    }\n  }\n}",
        "parameters": [
          {
            "name": "defaultQuestion",
            "text": "defaultQuestion: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/toArray.ts",
    "exports": [
      {
        "type": "function",
        "name": " toArray",
        "text": "\n\nexport function toArray(\n  snapshot: firebase.firestore.QuerySnapshot<FirebaseFirestore.DocumentData> | []\n) {\n  const docs: any[] = [];\n\n  snapshot.forEach((doc) => {\n    docs.push({\n      ...doc.data(),\n      id: isNaN(+doc.id) ? doc.id : +doc.id,\n    });\n  });\n  return docs;\n}",
        "parameters": [
          {
            "name": "snapshot",
            "text": "snapshot: firebase.firestore.QuerySnapshot<FirebaseFirestore.DocumentData> | []",
            "type": "firebase.firestore.QuerySnapshot<FirebaseFirestore.DocumentData> | []"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/toFixed.ts",
    "exports": [
      {
        "type": "function",
        "name": " toFixed",
        "text": "/**\n * Same as Number.toFixed but returns number instead of string\n * @param num the number to fixed\n * @param places places to fix\n * @returns {number} the fixed number\n */\nexport function toFixed(num: number, places = 2): number {\n  const factor = Math.pow(10, places);\n  return Math.round((num + Number.EPSILON) * factor) / factor;\n}",
        "parameters": [
          {
            "name": "num",
            "text": "num: number",
            "type": "number"
          },
          {
            "name": "places",
            "text": "places = 2",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/toHash.ts",
    "exports": [
      {
        "type": "function",
        "name": " toHash",
        "text": "\n\nexport function toHash(\n  snapshot: firebase.firestore.QuerySnapshot<FirebaseFirestore.DocumentData> | []\n) {\n  var docs = {};\n  snapshot.forEach((doc) => {\n    docs[doc.id] = {\n      ...(typeof doc.data == 'function' ? doc.data() : doc),\n      id: isNaN(+doc.id) ? doc.id : +doc.id,\n    };\n  });\n  return docs;\n}",
        "parameters": [
          {
            "name": "snapshot",
            "text": "snapshot: firebase.firestore.QuerySnapshot<FirebaseFirestore.DocumentData> | []",
            "type": "firebase.firestore.QuerySnapshot<FirebaseFirestore.DocumentData> | []"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/twContext.ts",
    "exports": [
      {
        "name": " RequestGlobalKeys",
        "text": "\n\nexport interface RequestGlobalKeys {\n  logParams?: {\n    shopId?: string;\n    [traceIdFieldName]?: string;\n    pubSubMessageId?: string;\n    userId?: string;\n    wsEventName?: string;\n    wsEventId?: string;\n    wsSocketId?: string;\n  };\n  context?: {\n    req?: Request;\n    socket?: Socket;\n    traceId?: string;\n    pubsubMessage?: Message;\n    spanContext?: SpanContext;\n    parentLogParams?: Record<string, any>;\n    uf: boolean;\n  };\n  contextInput?: any;\n}",
        "type": "interface"
      },
      {
        "name": " asyncLocalStorage",
        "text": "\n\nexport const asyncLocalStorage = globalThis[\n  twContextSymbol\n] as AsyncLocalStorage<RequestGlobalKeys>;",
        "type": "variable"
      },
      {
        "type": "function",
        "name": " getStore",
        "text": "\n\nexport function getStore() {\n  return asyncLocalStorage.getStore() || {};\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " getStoreKey",
        "text": "\n\nexport function getStoreKey<T extends keyof RequestGlobalKeys>(key: T): RequestGlobalKeys[T] {\n  const store = getStore();\n  const value = store[key];\n  if (!value) {\n    store[key] = {};\n  }\n  return store[key];\n}",
        "parameters": [
          {
            "name": "key",
            "text": "key: T",
            "type": "T"
          }
        ]
      },
      {
        "type": "function",
        "name": " setStoreKey",
        "text": "\n\nexport function setStoreKey<T extends keyof RequestGlobalKeys>(\n  key: T,\n  value: RequestGlobalKeys[T]\n): void {\n  const store = getStore();\n  store[key] = value;\n}",
        "parameters": [
          {
            "name": "key",
            "text": "key: T",
            "type": "T"
          },
          {
            "name": "value",
            "text": "value: RequestGlobalKeys[T]",
            "type": "RequestGlobalKeys[T]"
          }
        ]
      },
      {
        "type": "function",
        "name": " startTrace",
        "text": "\n\nexport function startTrace() {\n  const logParams = getStoreKey('logParams');\n  const context = getStoreKey('context');\n  const traceId = createTraceId();\n  logParams[traceIdFieldName] = createTraceField(traceId);\n  context.traceId = traceId;\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " createTraceId",
        "text": "\n\nexport function createTraceId() {\n  const traceId = Array.from({ length: 32 }, () =>\n    Math.floor(Math.random() * 16).toString(16)\n  ).join('');\n  return traceId;\n}",
        "parameters": []
      },
      {
        "type": "function",
        "name": " createTraceField",
        "text": "\n\nexport function createTraceField(traceId: string) {\n  return `projects/${projectId}/traces/${traceId}`;\n}",
        "parameters": [
          {
            "name": "traceId",
            "text": "traceId: string",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/validUrl.ts",
    "exports": [
      {
        "name": " validUrl",
        "text": "export const validUrl = (url: string) => {\n  return /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test(\n    url\n  );\n};",
        "type": "variable"
      }
    ]
  },
  {
    "file": "@tw/utils/validateFFNewIntegration.ts",
    "exports": [
      {
        "type": "function",
        "name": " validateFFNewIntegration",
        "text": "\n\nexport async function validateFFNewIntegration(\n  shopId: string,\n  serviceId: ServicesIds\n): Promise<boolean> {\n  try {\n    const {\n      data: { rankedControlList: serviceList },\n    } = await callServiceEndpoint<FeatureFlagResultProperties>(\n      'subscription-manager',\n      `features/feature-flag-config/${shopId}/${FeatureFlag.LIMIT_INTEGRATIONS_FF}`,\n      null,\n      { method: 'GET' }\n    );\n    if (serviceList?.find((service) => service.id === serviceId)?.type === 'block') {\n      throw new Error('Integration is blocked in this plan');\n    }\n    return true;\n  } catch (err) {\n    logger.error('Error in checkFFBeforeIntegration', err);\n    return false;\n  }\n}",
        "parameters": [
          {
            "name": "shopId",
            "text": "shopId: string",
            "type": "string"
          },
          {
            "name": "serviceId",
            "text": "serviceId: ServicesIds",
            "type": "ServicesIds"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/warehouse/index.ts",
    "exports": []
  },
  {
    "file": "@tw/utils/warehouse/saveToWarehouse.ts",
    "exports": [
      {
        "type": "function",
        "name": " sendToWarehouse",
        "text": "\n\nexport async function sendToWarehouse<T = any>(args: {\n  topicName: string;\n  payload: T;\n  attributes?: Record<string, string>;\n}) {\n  const { topicName, payload, attributes } = args || {};\n  return await callPubSub(topicName, payload, attributes);\n}",
        "parameters": [
          {
            "name": "args",
            "text": "args: {\n  topicName: string;\n  payload: T;\n  attributes?: Record<string, string>;\n}",
            "type": "{\n  topicName: string;\n  payload: T;\n  attributes?: Record<string, string>;\n}"
          }
        ]
      }
    ]
  },
  {
    "file": "@tw/utils/websocket/index.ts",
    "exports": [
      {
        "type": "function",
        "name": " getSocketIOServer",
        "text": "\n\nexport function getSocketIOServer<L = DefaultEventsMap, E = DefaultEventsMap>(\n  server: http.Server,\n  options?: Partial<ServerOptions>,\n  opts?: { logging?: boolean; rateLimit?: boolean }\n): Server<L, E> {\n  const { logging = true, rateLimit } = opts || {};\n  const io = new Server<L, E>(server, {\n    addTrailingSlash: false,\n    cors: {\n      origin: '*',\n      methods: ['GET', 'POST'],\n    },\n    pingInterval: 60000,\n    pingTimeout: 60000,\n    ...options,\n  });\n\n  io.use(async (socket, next) => {\n    auth = auth || admin.auth();\n    if (socket.user) {\n      return next();\n    }\n    const token = socket.handshake.auth?.token?.replace('Bearer ', '');\n    if (!token) {\n      logger.warn('Missing token');\n      return next(new Error('Missing token'));\n    }\n    try {\n      const decodedToken = await auth.verifyIdToken(token);\n      socket.user = decodedToken as any;\n      return next();\n    } catch (e: any) {\n      return next(e);\n    }\n  });\n\n  const orgOn = io.on;\n\n  io.on = function (ev, listener) {\n    return orgOn.call(io, ev, (socket: Socket, ...args) => {\n      const orgSocketOn = socket.on;\n      socket.on = function (event, listener) {\n        const wrappedListener = async (msg) => {\n          const timer = new Timer().start();\n          const logParams = getStoreKey('logParams');\n          let span: Span;\n          if (tracer) {\n            span = tracer.startSpan(`ws.event`, {\n              // childOf: socket.span || tracer.scope().active(),\n              startTime: new Date().getTime(),\n              tags: {\n                'resource.name': event,\n                'tw.logs': logsLinkFilter(\n                  {\n                    trace: `projects/${projectId}/traces/${socket.traceId}`,\n                    wsEventId: logParams.wsEventId,\n                  },\n                  projectId\n                ),\n                'tw.traceId': socket.traceId,\n                'tw.socketId': socket.id,\n                'tw.userId': socket.user.sub,\n              },\n            });\n          }\n          return safeActivateSpan(span, async () => {\n            try {\n              await listener(msg);\n            } catch (e) {\n              if (span) {\n                addErrorMessageToDatadog(e);\n              }\n              logger.error('wsWrapper', e);\n              socket.emit('error', e);\n            } finally {\n              if (span) {\n                span.finish();\n              }\n              const httpRequest = makeSocketRequestData(socket, timer.end().ms, event as any);\n              if (logging) logger.info({ httpRequest });\n            }\n          });\n        };\n        return orgSocketOn.call(socket, event, wrappedListener as any);\n      };\n      return listener(socket, ...args);\n    });\n  };\n\n  // socket connection tracing\n  io.use((socket, next) => {\n    const timer = new Timer().start();\n    const fullTraceId = socket.handshake.headers['x-cloud-trace-context'] as string;\n    const traceId = fullTraceId?.split('/')[0] || createTraceId();\n    // @ts-ignore\n    socket.emit('traceId', traceId);\n    socket.traceId = traceId;\n    const socketId = socket.id;\n    let logParams: RequestGlobalKeys['logParams'];\n    if (tracer) {\n      const span = tracer.startSpan('ws.connection', {\n        startTime: new Date().getTime(),\n        tags: {\n          'tw.logs': traceLogsLink(traceId, projectId),\n          'tw.traceId': traceId,\n          'tw.socketId': socketId,\n          'tw.userId': socket.user.sub,\n        },\n      });\n      socket.span = span;\n    }\n    socket.on('disconnect', (reason) => {\n      const httpRequest = makeSocketRequestData(socket, timer.end().ms);\n      if (logging) logger.info({ httpRequest, reason, ...logParams });\n      if (socket.span) {\n        socket.span.finish();\n      }\n    });\n    asyncLocalStorage.run({}, () => {\n      logParams = getStoreKey('logParams');\n      logParams[traceIdFieldName] = createTraceField(traceId);\n      logParams.userId = socket.user.sub;\n      logParams.wsSocketId = socketId;\n      setStoreKey('context', { traceId, uf: true, socket });\n      if (logging) logger.info('a user connected');\n      safeActivateSpan(socket.span, () => {\n        next();\n      });\n    });\n  });\n\n  // socket event tracing\n  io.use((socket, next) => {\n    socket.on('error', (err) => {\n      addErrorMessageToDatadog(err);\n    });\n    socket.use(([event, _], next) => {\n      asyncLocalStorage.run({}, () => {\n        const logParams = getStoreKey('logParams');\n        logParams[traceIdFieldName] = createTraceField(socket.traceId);\n        logParams.wsEventName = event;\n        logParams.wsEventId = createTraceId();\n        logParams.wsSocketId = socket.id;\n        logParams.userId = socket.user.sub;\n        setStoreKey('context', { traceId: socket.traceId, uf: true });\n        next();\n      });\n    });\n    next();\n  });\n\n  addPathToOpenApi(options.path, 'get', {\n    'x-tw': {\n      websocket: true,\n      pathPrefix: serviceId,\n      serviceId: serviceId,\n      rateLimits: rateLimit\n        ? getRateLimitPolicy([\n            { quota: 1, window: 5 },\n            { quota: 2, window: 20 },\n          ])\n        : undefined,\n    },\n    tags: [serviceId],\n    operationId: 'realtime',\n    responses: {\n      '200': {\n        description: 'A successful response',\n      },\n    },\n  });\n\n  return io;\n}",
        "parameters": [
          {
            "name": "server",
            "text": "server: http.Server",
            "type": "http.Server"
          },
          {
            "name": "options",
            "text": "options?: Partial<ServerOptions>",
            "type": "Partial<ServerOptions>"
          },
          {
            "name": "opts",
            "text": "opts?: { logging?: boolean; rateLimit?: boolean }",
            "type": "{ logging?: boolean; rateLimit?: boolean }"
          }
        ]
      }
    ]
  }
]